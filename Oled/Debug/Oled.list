
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  080086a0  080086a0  000186a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009858  08009858  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009858  08009858  00019858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009860  08009860  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009860  08009860  00019860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  200001dc  08009a44  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  08009a44  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5d0  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea3  00000000  00000000  0002b81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000938  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002820f  00000000  00000000  0002ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc8f  00000000  00000000  00056c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f40b6  00000000  00000000  000648d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c50  00000000  00000000  0015898c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08008688 	.word	0x08008688

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08008688 	.word	0x08008688

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t x=0;
uint16_t adc_value=0,deger=0,adc_value1=0,adc_value2=0; //değişkenler
char nem_Deger[200]; // değeri ekrana bastırmak için karakter dizisine int değer atma
uint16_t map(uint32_t A,uint32_t B,uint32_t C,uint32_t D,uint32_t E){ //değer küçültme
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]


	return (A*E)/C;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	fb03 f202 	mul.w	r2, r3, r2
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f0:	b29b      	uxth	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <adc_read>:

void adc_read(){ //adc okuma fonksiyonu
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af02      	add	r7, sp, #8
	HAL_ADC_Start(&hadc1); //adc başladı
 8000a06:	4813      	ldr	r0, [pc, #76]	; (8000a54 <adc_read+0x54>)
 8000a08:	f000 ff68 	bl	80018dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000a0c:	2164      	movs	r1, #100	; 0x64
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <adc_read+0x54>)
 8000a10:	f001 f832 	bl	8001a78 <HAL_ADC_PollForConversion>
	adc_value=HAL_ADC_GetValue(&hadc1); //adc değeri okundu
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <adc_read+0x54>)
 8000a16:	f001 f8ba 	bl	8001b8e <HAL_ADC_GetValue>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <adc_read+0x58>)
 8000a20:	801a      	strh	r2, [r3, #0]
    adc_value1=map(adc_value, 0, 4095, 0, 99); //12 bitlik adc değeri 0-99 arasına küçültüldü
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <adc_read+0x58>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	2363      	movs	r3, #99	; 0x63
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a32:	2100      	movs	r1, #0
 8000a34:	f7ff ffce 	bl	80009d4 <map>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <adc_read+0x5c>)
 8000a3e:	801a      	strh	r2, [r3, #0]
    adc_value2=99-adc_value1;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <adc_read+0x5c>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <adc_read+0x60>)
 8000a4c:	801a      	strh	r2, [r3, #0]

}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001f8 	.word	0x200001f8
 8000a58:	20000294 	.word	0x20000294
 8000a5c:	20000296 	.word	0x20000296
 8000a60:	20000298 	.word	0x20000298

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fe73 	bl	8001752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f862 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f94e 	bl	8000d10 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a74:	f000 f90c 	bl	8000c90 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000a78:	f000 f8b8 	bl	8000bec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
SSD1306_Init(); //ekran başlatıldı
 8000a7c:	f000 f9bc 	bl	8000df8 <SSD1306_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  adc_read(); //adc başlatıldı
 8000a80:	f7ff ffbe 	bl	8000a00 <adc_read>

      sprintf (nem_Deger,"%d",adc_value2); //ekran için değer char tipine dönüştürüldü
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <main+0xb0>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4923      	ldr	r1, [pc, #140]	; (8000b18 <main+0xb4>)
 8000a8c:	4823      	ldr	r0, [pc, #140]	; (8000b1c <main+0xb8>)
 8000a8e:	f004 fa27 	bl	8004ee0 <siprintf>


	  SSD1306_GotoXY (0,0);
 8000a92:	2100      	movs	r1, #0
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 fb19 	bl	80010cc <SSD1306_GotoXY>
	  SSD1306_Puts ("Nem: %", &Font_11x18, 1); //"nem: " string ifadesi ekrana yazıldı
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4920      	ldr	r1, [pc, #128]	; (8000b20 <main+0xbc>)
 8000a9e:	4821      	ldr	r0, [pc, #132]	; (8000b24 <main+0xc0>)
 8000aa0:	f000 fbaa 	bl	80011f8 <SSD1306_Puts>
	  SSD1306_GotoXY (70, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2046      	movs	r0, #70	; 0x46
 8000aa8:	f000 fb10 	bl	80010cc <SSD1306_GotoXY>
	  SSD1306_Puts (nem_Deger, &Font_11x18, 1); // nem value değeri ekrana yazıldı
 8000aac:	2201      	movs	r2, #1
 8000aae:	491c      	ldr	r1, [pc, #112]	; (8000b20 <main+0xbc>)
 8000ab0:	481a      	ldr	r0, [pc, #104]	; (8000b1c <main+0xb8>)
 8000ab2:	f000 fba1 	bl	80011f8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000ab6:	f000 fa63 	bl	8000f80 <SSD1306_UpdateScreen>

	  if(adc_value2<35){ //adc değeri 35 den küçükse koşula girildi
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <main+0xb0>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	2b22      	cmp	r3, #34	; 0x22
 8000ac0:	d80f      	bhi.n	8000ae2 <main+0x7e>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET); //röleye tetikleyen pin
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <main+0xc4>)
 8000ac8:	f001 fd50 	bl	800256c <HAL_GPIO_WritePin>
		 SSD1306_GotoXY (0, 30);
 8000acc:	211e      	movs	r1, #30
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 fafc 	bl	80010cc <SSD1306_GotoXY>
		 SSD1306_Puts ("Motor Aktif", &Font_11x18, 1); //ekrana motor çalıştığını yazdı
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4912      	ldr	r1, [pc, #72]	; (8000b20 <main+0xbc>)
 8000ad8:	4814      	ldr	r0, [pc, #80]	; (8000b2c <main+0xc8>)
 8000ada:	f000 fb8d 	bl	80011f8 <SSD1306_Puts>
		 SSD1306_UpdateScreen(); //ekranı güncelledi
 8000ade:	f000 fa4f 	bl	8000f80 <SSD1306_UpdateScreen>
	  }
	 if(adc_value2>=35){ //adc değeri 35 den büyükse ve eşitse koşula girdi
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <main+0xb0>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	2b22      	cmp	r3, #34	; 0x22
 8000ae8:	d90f      	bls.n	8000b0a <main+0xa6>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //röle tetiğini kesti
 8000aea:	2200      	movs	r2, #0
 8000aec:	2110      	movs	r1, #16
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <main+0xc4>)
 8000af0:	f001 fd3c 	bl	800256c <HAL_GPIO_WritePin>
		 SSD1306_GotoXY (0, 30);
 8000af4:	211e      	movs	r1, #30
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 fae8 	bl	80010cc <SSD1306_GotoXY>
		 SSD1306_Puts ("Motor Pasif", &Font_11x18, 1);//motor durduğunu ekrana yazdı
 8000afc:	2201      	movs	r2, #1
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <main+0xbc>)
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <main+0xcc>)
 8000b02:	f000 fb79 	bl	80011f8 <SSD1306_Puts>
		 SSD1306_UpdateScreen(); //ekranı güncelledi
 8000b06:	f000 fa3b 	bl	8000f80 <SSD1306_UpdateScreen>
	 }

      HAL_Delay(200);//dengeli okuma için bekleme süresi
 8000b0a:	20c8      	movs	r0, #200	; 0xc8
 8000b0c:	f000 fe7e 	bl	800180c <HAL_Delay>
	  adc_read(); //adc başlatıldı
 8000b10:	e7b6      	b.n	8000a80 <main+0x1c>
 8000b12:	bf00      	nop
 8000b14:	20000298 	.word	0x20000298
 8000b18:	080086a0 	.word	0x080086a0
 8000b1c:	2000029c 	.word	0x2000029c
 8000b20:	20000000 	.word	0x20000000
 8000b24:	080086a4 	.word	0x080086a4
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	080086ac 	.word	0x080086ac
 8000b30:	080086b8 	.word	0x080086b8

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2234      	movs	r2, #52	; 0x34
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 fa2f 	bl	8004fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <SystemClock_Config+0xb0>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <SystemClock_Config+0xb0>)
 8000b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SystemClock_Config+0xb0>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b94:	2310      	movs	r3, #16
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 fa13 	bl	8002fcc <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bac:	f000 f91e 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fcac 	bl	8003528 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bd6:	f000 f909 	bl	8000dec <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40007000 	.word	0x40007000

08000bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_ADC1_Init+0xa0>)
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c4c:	f000 fe02 	bl	8001854 <HAL_ADC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c56:	f000 f8c9 	bl	8000dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_ADC1_Init+0x98>)
 8000c6c:	f000 ff9c 	bl	8001ba8 <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c76:	f000 f8b9 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001f8 	.word	0x200001f8
 8000c88:	40012000 	.word	0x40012000
 8000c8c:	0f000001 	.word	0x0f000001

08000c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_I2C1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_I2C1_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000ccc:	f001 fc68 	bl	80025a0 <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 f889 	bl	8000dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cde:	f002 f8dd 	bl	8002e9c <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 f880 	bl	8000dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_I2C1_Init+0x74>)
 8000cf0:	f002 f91f 	bl	8002f32 <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f877 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000240 	.word	0x20000240
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	0010061a 	.word	0x0010061a

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4816      	ldr	r0, [pc, #88]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000d8c:	f001 fbee 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <MX_GPIO_Init+0xd8>)
 8000d98:	f001 fbe8 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000db4:	f001 fa2e 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_GPIO_Init+0xd8>)
 8000dd2:	f001 fa1f 	bl	8002214 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020800 	.word	0x40020800

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000dfe:	f000 fa21 	bl	8001244 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e02:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e06:	2201      	movs	r2, #1
 8000e08:	2178      	movs	r1, #120	; 0x78
 8000e0a:	485b      	ldr	r0, [pc, #364]	; (8000f78 <SSD1306_Init+0x180>)
 8000e0c:	f001 fd4c 	bl	80028a8 <HAL_I2C_IsDeviceReady>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e0a9      	b.n	8000f6e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e1a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e1e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e20:	e002      	b.n	8000e28 <SSD1306_Init+0x30>
		p--;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f9      	bne.n	8000e22 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e2e:	22ae      	movs	r2, #174	; 0xae
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	; 0x78
 8000e34:	f000 fa82 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000e38:	2220      	movs	r2, #32
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2078      	movs	r0, #120	; 0x78
 8000e3e:	f000 fa7d 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e42:	2210      	movs	r2, #16
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	; 0x78
 8000e48:	f000 fa78 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e4c:	22b0      	movs	r2, #176	; 0xb0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2078      	movs	r0, #120	; 0x78
 8000e52:	f000 fa73 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e56:	22c8      	movs	r2, #200	; 0xc8
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	; 0x78
 8000e5c:	f000 fa6e 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2078      	movs	r0, #120	; 0x78
 8000e66:	f000 fa69 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	; 0x78
 8000e70:	f000 fa64 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e74:	2240      	movs	r2, #64	; 0x40
 8000e76:	2100      	movs	r1, #0
 8000e78:	2078      	movs	r0, #120	; 0x78
 8000e7a:	f000 fa5f 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e7e:	2281      	movs	r2, #129	; 0x81
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	; 0x78
 8000e84:	f000 fa5a 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e88:	22ff      	movs	r2, #255	; 0xff
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2078      	movs	r0, #120	; 0x78
 8000e8e:	f000 fa55 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e92:	22a1      	movs	r2, #161	; 0xa1
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	; 0x78
 8000e98:	f000 fa50 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e9c:	22a6      	movs	r2, #166	; 0xa6
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	; 0x78
 8000ea2:	f000 fa4b 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000ea6:	22a8      	movs	r2, #168	; 0xa8
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	; 0x78
 8000eac:	f000 fa46 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000eb0:	223f      	movs	r2, #63	; 0x3f
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2078      	movs	r0, #120	; 0x78
 8000eb6:	f000 fa41 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000eba:	22a4      	movs	r2, #164	; 0xa4
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	; 0x78
 8000ec0:	f000 fa3c 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ec4:	22d3      	movs	r2, #211	; 0xd3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2078      	movs	r0, #120	; 0x78
 8000eca:	f000 fa37 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	; 0x78
 8000ed4:	f000 fa32 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ed8:	22d5      	movs	r2, #213	; 0xd5
 8000eda:	2100      	movs	r1, #0
 8000edc:	2078      	movs	r0, #120	; 0x78
 8000ede:	f000 fa2d 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ee2:	22f0      	movs	r2, #240	; 0xf0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	; 0x78
 8000ee8:	f000 fa28 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000eec:	22d9      	movs	r2, #217	; 0xd9
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2078      	movs	r0, #120	; 0x78
 8000ef2:	f000 fa23 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ef6:	2222      	movs	r2, #34	; 0x22
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 fa1e 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f00:	22da      	movs	r2, #218	; 0xda
 8000f02:	2100      	movs	r1, #0
 8000f04:	2078      	movs	r0, #120	; 0x78
 8000f06:	f000 fa19 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f0a:	2212      	movs	r2, #18
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	; 0x78
 8000f10:	f000 fa14 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f14:	22db      	movs	r2, #219	; 0xdb
 8000f16:	2100      	movs	r1, #0
 8000f18:	2078      	movs	r0, #120	; 0x78
 8000f1a:	f000 fa0f 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f1e:	2220      	movs	r2, #32
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	; 0x78
 8000f24:	f000 fa0a 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f28:	228d      	movs	r2, #141	; 0x8d
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2078      	movs	r0, #120	; 0x78
 8000f2e:	f000 fa05 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f32:	2214      	movs	r2, #20
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f000 fa00 	bl	800133c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f3c:	22af      	movs	r2, #175	; 0xaf
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2078      	movs	r0, #120	; 0x78
 8000f42:	f000 f9fb 	bl	800133c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f46:	222e      	movs	r2, #46	; 0x2e
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	; 0x78
 8000f4c:	f000 f9f6 	bl	800133c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f843 	bl	8000fdc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000f56:	f000 f813 	bl	8000f80 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <SSD1306_Init+0x184>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SSD1306_Init+0x184>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SSD1306_Init+0x184>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000240 	.word	0x20000240
 8000f7c:	20000764 	.word	0x20000764

08000f80 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e01d      	b.n	8000fc8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3b50      	subs	r3, #80	; 0x50
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	2078      	movs	r0, #120	; 0x78
 8000f98:	f000 f9d0 	bl	800133c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2078      	movs	r0, #120	; 0x78
 8000fa2:	f000 f9cb 	bl	800133c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2078      	movs	r0, #120	; 0x78
 8000fac:	f000 f9c6 	bl	800133c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	01db      	lsls	r3, r3, #7
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <SSD1306_UpdateScreen+0x58>)
 8000fb6:	441a      	add	r2, r3
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	2140      	movs	r1, #64	; 0x40
 8000fbc:	2078      	movs	r0, #120	; 0x78
 8000fbe:	f000 f957 	bl	8001270 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	d9de      	bls.n	8000f8c <SSD1306_UpdateScreen+0xc>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000364 	.word	0x20000364

08000fdc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <SSD1306_Fill+0x14>
 8000fec:	2300      	movs	r3, #0
 8000fee:	e000      	b.n	8000ff2 <SSD1306_Fill+0x16>
 8000ff0:	23ff      	movs	r3, #255	; 0xff
 8000ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <SSD1306_Fill+0x2c>)
 8000ffa:	f003 ffd4 	bl	8004fa6 <memset>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000364 	.word	0x20000364

0800100c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
 8001016:	460b      	mov	r3, r1
 8001018:	80bb      	strh	r3, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	70fb      	strb	r3, [r7, #3]
	if (
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	2b7f      	cmp	r3, #127	; 0x7f
 8001022:	d848      	bhi.n	80010b6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	2b3f      	cmp	r3, #63	; 0x3f
 8001028:	d845      	bhi.n	80010b6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <SSD1306_DrawPixel+0xb8>)
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d11a      	bne.n	800107c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	b298      	uxth	r0, r3
 800104e:	4603      	mov	r3, r0
 8001050:	01db      	lsls	r3, r3, #7
 8001052:	4413      	add	r3, r2
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <SSD1306_DrawPixel+0xbc>)
 8001056:	5cd3      	ldrb	r3, [r2, r3]
 8001058:	b25a      	sxtb	r2, r3
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	2101      	movs	r1, #1
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	b25b      	sxtb	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b259      	sxtb	r1, r3
 800106c:	88fa      	ldrh	r2, [r7, #6]
 800106e:	4603      	mov	r3, r0
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	4413      	add	r3, r2
 8001074:	b2c9      	uxtb	r1, r1
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <SSD1306_DrawPixel+0xbc>)
 8001078:	54d1      	strb	r1, [r2, r3]
 800107a:	e01d      	b.n	80010b8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800107c:	88fa      	ldrh	r2, [r7, #6]
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	b298      	uxth	r0, r3
 8001084:	4603      	mov	r3, r0
 8001086:	01db      	lsls	r3, r3, #7
 8001088:	4413      	add	r3, r2
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <SSD1306_DrawPixel+0xbc>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	b25a      	sxtb	r2, r3
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	4013      	ands	r3, r2
 80010a4:	b259      	sxtb	r1, r3
 80010a6:	88fa      	ldrh	r2, [r7, #6]
 80010a8:	4603      	mov	r3, r0
 80010aa:	01db      	lsls	r3, r3, #7
 80010ac:	4413      	add	r3, r2
 80010ae:	b2c9      	uxtb	r1, r1
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SSD1306_DrawPixel+0xbc>)
 80010b2:	54d1      	strb	r1, [r2, r3]
 80010b4:	e000      	b.n	80010b8 <SSD1306_DrawPixel+0xac>
		return;
 80010b6:	bf00      	nop
	}
}
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000764 	.word	0x20000764
 80010c8:	20000364 	.word	0x20000364

080010cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	80fb      	strh	r3, [r7, #6]
 80010d8:	4613      	mov	r3, r2
 80010da:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SSD1306_GotoXY+0x28>)
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <SSD1306_GotoXY+0x28>)
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	8053      	strh	r3, [r2, #2]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20000764 	.word	0x20000764

080010f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <SSD1306_Putc+0xfc>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
	if (
 8001114:	2b7f      	cmp	r3, #127	; 0x7f
 8001116:	dc07      	bgt.n	8001128 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <SSD1306_Putc+0xfc>)
 800111a:	885b      	ldrh	r3, [r3, #2]
 800111c:	461a      	mov	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001124:	2b3f      	cmp	r3, #63	; 0x3f
 8001126:	dd01      	ble.n	800112c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001128:	2300      	movs	r3, #0
 800112a:	e05e      	b.n	80011ea <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e04b      	b.n	80011ca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	3b20      	subs	r3, #32
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	7849      	ldrb	r1, [r1, #1]
 800113e:	fb01 f303 	mul.w	r3, r1, r3
 8001142:	4619      	mov	r1, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	440b      	add	r3, r1
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e030      	b.n	80011b8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <SSD1306_Putc+0xfc>)
 8001168:	881a      	ldrh	r2, [r3, #0]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b298      	uxth	r0, r3
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <SSD1306_Putc+0xfc>)
 8001174:	885a      	ldrh	r2, [r3, #2]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	b29b      	uxth	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff ff43 	bl	800100c <SSD1306_DrawPixel>
 8001186:	e014      	b.n	80011b2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <SSD1306_Putc+0xfc>)
 800118a:	881a      	ldrh	r2, [r3, #0]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b298      	uxth	r0, r3
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <SSD1306_Putc+0xfc>)
 8001196:	885a      	ldrh	r2, [r3, #2]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b299      	uxth	r1, r3
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	f7ff ff2d 	bl	800100c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	3301      	adds	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d3c8      	bcc.n	8001156 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	461a      	mov	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d3ad      	bcc.n	8001132 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <SSD1306_Putc+0xfc>)
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <SSD1306_Putc+0xfc>)
 80011e6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000764 	.word	0x20000764

080011f8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001206:	e012      	b.n	800122e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff71 	bl	80010f8 <SSD1306_Putc>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d002      	beq.n	8001228 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	e008      	b.n	800123a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1e8      	bne.n	8001208 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	781b      	ldrb	r3, [r3, #0]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <ssd1306_I2C_Init+0x28>)
 800124c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800124e:	e002      	b.n	8001256 <ssd1306_I2C_Init+0x12>
		p--;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f9      	bne.n	8001250 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	0003d090 	.word	0x0003d090

08001270 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b0c7      	sub	sp, #284	; 0x11c
 8001274:	af02      	add	r7, sp, #8
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800127e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001282:	600a      	str	r2, [r1, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800128a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800128e:	4622      	mov	r2, r4
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001296:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800129a:	4602      	mov	r2, r0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012a6:	460a      	mov	r2, r1
 80012a8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80012aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012b6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80012ba:	7812      	ldrb	r2, [r2, #0]
 80012bc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80012c4:	e015      	b.n	80012f2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012ce:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	441a      	add	r2, r3
 80012d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012da:	3301      	adds	r3, #1
 80012dc:	7811      	ldrb	r1, [r2, #0]
 80012de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012e2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80012e6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012ec:	3301      	adds	r3, #1
 80012ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80012f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012fc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001300:	8812      	ldrh	r2, [r2, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d8df      	bhi.n	80012c6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800130a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b299      	uxth	r1, r3
 8001312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b29b      	uxth	r3, r3
 8001320:	f107 020c 	add.w	r2, r7, #12
 8001324:	200a      	movs	r0, #10
 8001326:	9000      	str	r0, [sp, #0]
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <ssd1306_I2C_WriteMulti+0xc8>)
 800132a:	f001 f9c9 	bl	80026c0 <HAL_I2C_Master_Transmit>
}
 800132e:	bf00      	nop
 8001330:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	20000240 	.word	0x20000240

0800133c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af02      	add	r7, sp, #8
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	460b      	mov	r3, r1
 8001348:	71bb      	strb	r3, [r7, #6]
 800134a:	4613      	mov	r3, r2
 800134c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	b299      	uxth	r1, r3
 800135a:	f107 020c 	add.w	r2, r7, #12
 800135e:	230a      	movs	r3, #10
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2302      	movs	r3, #2
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <ssd1306_I2C_Write+0x38>)
 8001366:	f001 f9ab 	bl	80026c0 <HAL_I2C_Master_Transmit>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000240 	.word	0x20000240

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x44>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x44>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x44>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x44>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x44>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x44>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a15      	ldr	r2, [pc, #84]	; (8001434 <HAL_ADC_MspInit+0x74>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d123      	bne.n	800142a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_ADC_MspInit+0x78>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_ADC_MspInit+0x78>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001412:	2301      	movs	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_ADC_MspInit+0x7c>)
 8001426:	f000 fef5 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40012000 	.word	0x40012000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0ae      	sub	sp, #184	; 0xb8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2290      	movs	r2, #144	; 0x90
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fda0 	bl	8004fa6 <memset>
  if(hi2c->Instance==I2C1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <HAL_I2C_MspInit+0xb0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d13b      	bne.n	80014e8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001474:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001476:	2300      	movs	r3, #0
 8001478:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fa04 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800148a:	f7ff fcaf 	bl	8000dec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_I2C_MspInit+0xb4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_I2C_MspInit+0xb4>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_I2C_MspInit+0xb4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014be:	2304      	movs	r3, #4
 80014c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c8:	4619      	mov	r1, r3
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <HAL_I2C_MspInit+0xb8>)
 80014cc:	f000 fea2 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_I2C_MspInit+0xb4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_I2C_MspInit+0xb4>)
 80014d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_I2C_MspInit+0xb4>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	37b8      	adds	r7, #184	; 0xb8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020400 	.word	0x40020400

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 f940 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_kill>:

int _kill(int pid, int sig)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800156a:	f003 fd6f 	bl	800504c <__errno>
 800156e:	4603      	mov	r3, r0
 8001570:	2216      	movs	r2, #22
 8001572:	601a      	str	r2, [r3, #0]
  return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_exit>:

void _exit (int status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe7 	bl	8001560 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001592:	e7fe      	b.n	8001592 <_exit+0x12>

08001594 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e00a      	b.n	80015bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a6:	f3af 8000 	nop.w
 80015aa:	4601      	mov	r1, r0
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf0      	blt.n	80015a6 <_read+0x12>
  }

  return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e009      	b.n	80015f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf1      	blt.n	80015e0 <_write+0x12>
  }
  return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
  return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f003 fcd4 	bl	800504c <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20080000 	.word	0x20080000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	2000076c 	.word	0x2000076c
 80016d8:	200008c0 	.word	0x200008c0

080016dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <LoopFillZerobss+0x26>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffd7 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f003 fc93 	bl	8005058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff f997 	bl	8000a64 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001738:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001744:	08009868 	.word	0x08009868
  ldr r2, =_sbss
 8001748:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800174c:	200008c0 	.word	0x200008c0

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>

08001752 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001756:	2003      	movs	r0, #3
 8001758:	f000 fd28 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175c:	200f      	movs	r0, #15
 800175e:	f000 f805 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001762:	f7ff fe09 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fd35 	bl	80021fa <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 fd0b 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000010 	.word	0x20000010
 80017c8:	2000000c 	.word	0x2000000c

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000010 	.word	0x20000010
 80017f0:	20000770 	.word	0x20000770

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000770 	.word	0x20000770

0800180c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff ffee 	bl	80017f4 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d005      	beq.n	8001832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_Delay+0x44>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001832:	bf00      	nop
 8001834:	f7ff ffde 	bl	80017f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d8f7      	bhi.n	8001834 <HAL_Delay+0x28>
  {
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000010 	.word	0x20000010

08001854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e031      	b.n	80018ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fda4 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_ADC_Init+0x84>)
 8001898:	4013      	ands	r3, r2
 800189a:	f043 0202 	orr.w	r2, r3, #2
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fad6 	bl	8001e54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
 80018be:	e001      	b.n	80018c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	ffffeefd 	.word	0xffffeefd

080018dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Start+0x1a>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e0ad      	b.n	8001a52 <HAL_ADC_Start+0x176>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d018      	beq.n	800193e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_ADC_Start+0x184>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a50      	ldr	r2, [pc, #320]	; (8001a64 <HAL_ADC_Start+0x188>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0c9a      	lsrs	r2, r3, #18
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001930:	e002      	b.n	8001938 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3b01      	subs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f9      	bne.n	8001932 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d175      	bne.n	8001a38 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001950:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <HAL_ADC_Start+0x18c>)
 8001952:	4013      	ands	r3, r2
 8001954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001972:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001986:	d106      	bne.n	8001996 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	f023 0206 	bic.w	r2, r3, #6
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
 8001994:	e002      	b.n	800199c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80019ae:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_ADC_Start+0x190>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d143      	bne.n	8001a50 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e03a      	b.n	8001a50 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <HAL_ADC_Start+0x194>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d10e      	bne.n	8001a02 <HAL_ADC_Start+0x126>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a00:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_ADC_Start+0x190>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d120      	bne.n	8001a50 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_ADC_Start+0x198>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d11b      	bne.n	8001a50 <HAL_ADC_Start+0x174>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d114      	bne.n	8001a50 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	e00b      	b.n	8001a50 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f043 0210 	orr.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	fffff8fe 	.word	0xfffff8fe
 8001a6c:	40012300 	.word	0x40012300
 8001a70:	40012000 	.word	0x40012000
 8001a74:	40012200 	.word	0x40012200

08001a78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a94:	d113      	bne.n	8001abe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa4:	d10b      	bne.n	8001abe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f043 0220 	orr.w	r2, r3, #32
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e063      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001abe:	f7ff fe99 	bl	80017f4 <HAL_GetTick>
 8001ac2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac4:	e021      	b.n	8001b0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d01d      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_ADC_PollForConversion+0x6c>
 8001ad4:	f7ff fe8e 	bl	80017f4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d212      	bcs.n	8001b0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d00b      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e03d      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d1d6      	bne.n	8001ac6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0212 	mvn.w	r2, #18
 8001b20:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d123      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d11f      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e136      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x28a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	d93a      	bls.n	8001c4a <HAL_ADC_ConfigChannel+0xa2>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bdc:	d035      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b1e      	subs	r3, #30
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a8d      	ldr	r2, [pc, #564]	; (8001e40 <HAL_ADC_ConfigChannel+0x298>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10a      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68d9      	ldr	r1, [r3, #12]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	061a      	lsls	r2, r3, #24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c22:	e035      	b.n	8001c90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68d9      	ldr	r1, [r3, #12]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4403      	add	r3, r0
 8001c3c:	3b1e      	subs	r3, #30
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c48:	e022      	b.n	8001c90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6919      	ldr	r1, [r3, #16]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2207      	movs	r2, #7
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43da      	mvns	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4403      	add	r3, r0
 8001c86:	409a      	lsls	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b06      	cmp	r3, #6
 8001c96:	d824      	bhi.n	8001ce2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b05      	subs	r3, #5
 8001caa:	221f      	movs	r2, #31
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b05      	subs	r3, #5
 8001cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce0:	e04c      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d824      	bhi.n	8001d34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b23      	subs	r3, #35	; 0x23
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b23      	subs	r3, #35	; 0x23
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
 8001d32:	e023      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b41      	subs	r3, #65	; 0x41
 8001d46:	221f      	movs	r2, #31
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	400a      	ands	r2, r1
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b41      	subs	r3, #65	; 0x41
 8001d70:	fa00 f203 	lsl.w	r2, r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a30      	ldr	r2, [pc, #192]	; (8001e44 <HAL_ADC_ConfigChannel+0x29c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10a      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1f4>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a28      	ldr	r2, [pc, #160]	; (8001e44 <HAL_ADC_ConfigChannel+0x29c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10f      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d10b      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a25      	ldr	r2, [pc, #148]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001db8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001dba:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a22      	ldr	r2, [pc, #136]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_ADC_ConfigChannel+0x29c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d12b      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x280>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_ADC_ConfigChannel+0x298>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d003      	beq.n	8001de2 <HAL_ADC_ConfigChannel+0x23a>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b11      	cmp	r3, #17
 8001de0:	d122      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8001df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001df8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <HAL_ADC_ConfigChannel+0x298>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d111      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_ADC_ConfigChannel+0x2a4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9a      	lsrs	r2, r3, #18
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e1a:	e002      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f9      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	10000012 	.word	0x10000012
 8001e44:	40012000 	.word	0x40012000
 8001e48:	40012300 	.word	0x40012300
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	431bde83 	.word	0x431bde83

08001e54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e5c:	4b78      	ldr	r3, [pc, #480]	; (8002040 <ADC_Init+0x1ec>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a77      	ldr	r2, [pc, #476]	; (8002040 <ADC_Init+0x1ec>)
 8001e62:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e66:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e68:	4b75      	ldr	r3, [pc, #468]	; (8002040 <ADC_Init+0x1ec>)
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4973      	ldr	r1, [pc, #460]	; (8002040 <ADC_Init+0x1ec>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	021a      	lsls	r2, r3, #8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6899      	ldr	r1, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	4a58      	ldr	r2, [pc, #352]	; (8002044 <ADC_Init+0x1f0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6899      	ldr	r1, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e00f      	b.n	8001f4e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0202 	bic.w	r2, r2, #2
 8001f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6899      	ldr	r1, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	005a      	lsls	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	035a      	lsls	r2, r3, #13
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	e007      	b.n	8001fc4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	051a      	lsls	r2, r3, #20
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6899      	ldr	r1, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002006:	025a      	lsls	r2, r3, #9
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800201e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6899      	ldr	r1, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	029a      	lsls	r2, r3, #10
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40012300 	.word	0x40012300
 8002044:	0f000001 	.word	0x0f000001

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <__NVIC_SetPriorityGrouping+0x40>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	4313      	orrs	r3, r2
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <__NVIC_SetPriorityGrouping+0x40>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	05fa0000 	.word	0x05fa0000

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff47 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff5c 	bl	8002090 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff8e 	bl	8002100 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5d 	bl	80020ac <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffb0 	bl	8002168 <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e175      	b.n	8002520 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8164 	bne.w	800251a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_GPIO_Init+0x56>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d130      	bne.n	80022cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80be 	beq.w	800251a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b63      	ldr	r3, [pc, #396]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023b6:	4a61      	ldr	r2, [pc, #388]	; (800253c <HAL_GPIO_Init+0x328>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_GPIO_Init+0x32c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d037      	beq.n	8002452 <HAL_GPIO_Init+0x23e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_GPIO_Init+0x330>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_GPIO_Init+0x23a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_GPIO_Init+0x334>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <HAL_GPIO_Init+0x236>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_GPIO_Init+0x338>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x232>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_GPIO_Init+0x33c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x22e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a53      	ldr	r2, [pc, #332]	; (8002554 <HAL_GPIO_Init+0x340>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x22a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x344>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x226>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_GPIO_Init+0x348>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x222>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_GPIO_Init+0x34c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x21e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4f      	ldr	r2, [pc, #316]	; (8002564 <HAL_GPIO_Init+0x350>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x21a>
 800242a:	2309      	movs	r3, #9
 800242c:	e012      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800242e:	230a      	movs	r3, #10
 8002430:	e010      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002432:	2308      	movs	r3, #8
 8002434:	e00e      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002436:	2307      	movs	r3, #7
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800243a:	2306      	movs	r3, #6
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002464:	4935      	ldr	r1, [pc, #212]	; (800253c <HAL_GPIO_Init+0x328>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_GPIO_Init+0x354>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a34      	ldr	r2, [pc, #208]	; (8002568 <HAL_GPIO_Init+0x354>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_GPIO_Init+0x354>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a29      	ldr	r2, [pc, #164]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_GPIO_Init+0x354>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ae86 	bls.w	8002234 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40021c00 	.word	0x40021c00
 8002560:	40022000 	.word	0x40022000
 8002564:	40022400 	.word	0x40022400
 8002568:	40013c00 	.word	0x40013c00

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002588:	e003      	b.n	8002592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	619a      	str	r2, [r3, #24]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe ff3a 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e006      	b.n	8002628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d104      	bne.n	800263a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_I2C_Init+0x11c>)
 8002646:	430b      	orrs	r3, r1
 8002648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69d9      	ldr	r1, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	02008000 	.word	0x02008000

080026c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
 80026d0:	4613      	mov	r3, r2
 80026d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	f040 80da 	bne.w	8002896 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_I2C_Master_Transmit+0x30>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0d3      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f8:	f7ff f87c 	bl	80017f4 <HAL_GetTick>
 80026fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2319      	movs	r3, #25
 8002704:	2201      	movs	r2, #1
 8002706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f9f8 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0be      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2221      	movs	r2, #33	; 0x21
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2210      	movs	r2, #16
 8002726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2bff      	cmp	r3, #255	; 0xff
 800274a:	d90e      	bls.n	800276a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	b2da      	uxtb	r2, r3
 8002758:	8979      	ldrh	r1, [r7, #10]
 800275a:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fb68 	bl	8002e38 <I2C_TransferConfig>
 8002768:	e06c      	b.n	8002844 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fb57 	bl	8002e38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800278a:	e05b      	b.n	8002844 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f9f5 	bl	8002b80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e07b      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d034      	beq.n	8002844 <HAL_I2C_Master_Transmit+0x184>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d130      	bne.n	8002844 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f987 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e04d      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d90e      	bls.n	8002824 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	22ff      	movs	r2, #255	; 0xff
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	b2da      	uxtb	r2, r3
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fb0b 	bl	8002e38 <I2C_TransferConfig>
 8002822:	e00f      	b.n	8002844 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fafa 	bl	8002e38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d19e      	bne.n	800278c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f9d4 	bl	8002c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e01a      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002876:	400b      	ands	r3, r1
 8002878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	80002000 	.word	0x80002000
 80028a4:	fe00e800 	.word	0xfe00e800

080028a8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	460b      	mov	r3, r1
 80028b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	f040 80ef 	bne.w	8002aa8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d8:	d101      	bne.n	80028de <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
 80028dc:	e0e5      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_I2C_IsDeviceReady+0x44>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0de      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <HAL_I2C_IsDeviceReady+0x6e>
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002910:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <HAL_I2C_IsDeviceReady+0x20c>)
 8002912:	4313      	orrs	r3, r2
 8002914:	e004      	b.n	8002920 <HAL_I2C_IsDeviceReady+0x78>
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002926:	f7fe ff65 	bl	80017f4 <HAL_GetTick>
 800292a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b20      	cmp	r3, #32
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b10      	cmp	r3, #16
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002958:	e034      	b.n	80029c4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d01a      	beq.n	8002998 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002962:	f7fe ff47 	bl	80017f4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <HAL_I2C_IsDeviceReady+0xd0>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10f      	bne.n	8002998 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e088      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029c4:	7ffb      	ldrb	r3, [r7, #31]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_I2C_IsDeviceReady+0x128>
 80029ca:	7fbb      	ldrb	r3, [r7, #30]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0c4      	beq.n	800295a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d01a      	beq.n	8002a14 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2120      	movs	r1, #32
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f889 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e058      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e04a      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f86e 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e03d      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2210      	movs	r2, #16
 8002a34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d118      	bne.n	8002a78 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a54:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2120      	movs	r1, #32
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f84d 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e01c      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2220      	movs	r2, #32
 8002a76:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	f63f af3d 	bhi.w	8002902 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	02002000 	.word	0x02002000

08002ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d103      	bne.n	8002ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d007      	beq.n	8002af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	619a      	str	r2, [r3, #24]
  }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e022      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d01e      	beq.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe fe6b 	bl	80017f4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e00f      	b.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d0cd      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b8c:	e02c      	b.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f870 	bl	8002c78 <I2C_IsErrorOccurred>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02a      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d01e      	beq.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002baa:	f7fe fe23 	bl	80017f4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d113      	bne.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d1cb      	bne.n	8002b8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0c:	e028      	b.n	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f830 	bl	8002c78 <I2C_IsErrorOccurred>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e026      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7fe fde7 	bl	80017f4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d113      	bne.n	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d1cf      	bne.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d068      	beq.n	8002d76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cac:	e049      	b.n	8002d42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d045      	beq.n	8002d42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7fe fd9d 	bl	80017f4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_IsErrorOccurred+0x54>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d13a      	bne.n	8002d42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cee:	d121      	bne.n	8002d34 <I2C_IsErrorOccurred+0xbc>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf6:	d01d      	beq.n	8002d34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d01a      	beq.n	8002d34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d0e:	f7fe fd71 	bl	80017f4 <HAL_GetTick>
 8002d12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e00e      	b.n	8002d34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d16:	f7fe fd6d 	bl	80017f4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b19      	cmp	r3, #25
 8002d22:	d907      	bls.n	8002d34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d32:	e006      	b.n	8002d42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d1e9      	bne.n	8002d16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d003      	beq.n	8002d58 <I2C_IsErrorOccurred+0xe0>
 8002d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0aa      	beq.n	8002cae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2220      	movs	r2, #32
 8002d66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff fe63 	bl	8002ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <I2C_IsErrorOccurred+0x1bc>)
 8002dfe:	400b      	ands	r3, r1
 8002e00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	fe00e800 	.word	0xfe00e800

08002e38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	4613      	mov	r3, r2
 8002e48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e50:	7a7b      	ldrb	r3, [r7, #9]
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	0d5b      	lsrs	r3, r3, #21
 8002e72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <I2C_TransferConfig+0x60>)
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	ea02 0103 	and.w	r1, r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	03ff63ff 	.word	0x03ff63ff

08002e9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d138      	bne.n	8002f24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e032      	b.n	8002f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	; 0x24
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d139      	bne.n	8002fbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e033      	b.n	8002fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2224      	movs	r2, #36	; 0x24
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e29b      	b.n	800351a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8087 	beq.w	80030fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff0:	4b96      	ldr	r3, [pc, #600]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d00c      	beq.n	8003016 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffc:	4b93      	ldr	r3, [pc, #588]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d112      	bne.n	800302e <HAL_RCC_OscConfig+0x62>
 8003008:	4b90      	ldr	r3, [pc, #576]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003014:	d10b      	bne.n	800302e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003016:	4b8d      	ldr	r3, [pc, #564]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d06c      	beq.n	80030fc <HAL_RCC_OscConfig+0x130>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d168      	bne.n	80030fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e275      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x7a>
 8003038:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a83      	ldr	r2, [pc, #524]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e02e      	b.n	80030a4 <HAL_RCC_OscConfig+0xd8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x9c>
 800304e:	4b7f      	ldr	r3, [pc, #508]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7e      	ldr	r2, [pc, #504]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b7c      	ldr	r3, [pc, #496]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7b      	ldr	r2, [pc, #492]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xd8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0xc0>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b73      	ldr	r3, [pc, #460]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a72      	ldr	r2, [pc, #456]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xd8>
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6e      	ldr	r2, [pc, #440]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6b      	ldr	r2, [pc, #428]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fba2 	bl	80017f4 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fb9e 	bl	80017f4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e229      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xe8>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe fb8e 	bl	80017f4 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe fb8a 	bl	80017f4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e215      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x110>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d069      	beq.n	80031de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800310a:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b4d      	ldr	r3, [pc, #308]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x190>
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x17a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1e9      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	493d      	ldr	r1, [pc, #244]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e040      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d023      	beq.n	80031ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a38      	ldr	r2, [pc, #224]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe fb40 	bl	80017f4 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003178:	f7fe fb3c 	bl	80017f4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1c7      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	4b30      	ldr	r3, [pc, #192]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b2d      	ldr	r3, [pc, #180]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4929      	ldr	r1, [pc, #164]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
 80031aa:	e018      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a26      	ldr	r2, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fb1c 	bl	80017f4 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fe fb18 	bl	80017f4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e1a3      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d038      	beq.n	800325c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	4a15      	ldr	r2, [pc, #84]	; (800324c <HAL_RCC_OscConfig+0x280>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe faf9 	bl	80017f4 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003206:	f7fe faf5 	bl	80017f4 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e180      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800321a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x23a>
 8003224:	e01a      	b.n	800325c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_RCC_OscConfig+0x280>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe fadf 	bl	80017f4 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe fadb 	bl	80017f4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d903      	bls.n	8003250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e166      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
 800324c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	4b92      	ldr	r3, [pc, #584]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ee      	bne.n	800323a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80a4 	beq.w	80033b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b8c      	ldr	r3, [pc, #560]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10d      	bne.n	8003292 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b89      	ldr	r3, [pc, #548]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a88      	ldr	r2, [pc, #544]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	4b86      	ldr	r3, [pc, #536]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003292:	4b83      	ldr	r3, [pc, #524]	; (80034a0 <HAL_RCC_OscConfig+0x4d4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d118      	bne.n	80032d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800329e:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <HAL_RCC_OscConfig+0x4d4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7f      	ldr	r2, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x4d4>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032aa:	f7fe faa3 	bl	80017f4 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b2:	f7fe fa9f 	bl	80017f4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b64      	cmp	r3, #100	; 0x64
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e12a      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c4:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <HAL_RCC_OscConfig+0x4d4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x31a>
 80032d8:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a6f      	ldr	r2, [pc, #444]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	e02d      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x33c>
 80032ee:	4b6b      	ldr	r3, [pc, #428]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a6a      	ldr	r2, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	4b68      	ldr	r3, [pc, #416]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a67      	ldr	r2, [pc, #412]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	e01c      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d10c      	bne.n	800332a <HAL_RCC_OscConfig+0x35e>
 8003310:	4b62      	ldr	r3, [pc, #392]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a61      	ldr	r2, [pc, #388]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a5e      	ldr	r2, [pc, #376]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	e00b      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
 800332a:	4b5c      	ldr	r3, [pc, #368]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a5b      	ldr	r2, [pc, #364]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d015      	beq.n	8003376 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe fa53 	bl	80017f4 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fe fa4f 	bl	80017f4 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0d8      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ee      	beq.n	8003352 <HAL_RCC_OscConfig+0x386>
 8003374:	e014      	b.n	80033a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003376:	f7fe fa3d 	bl	80017f4 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe fa39 	bl	80017f4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	; 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0c2      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ee      	bne.n	800337e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a3c      	ldr	r2, [pc, #240]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80ae 	beq.w	8003518 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033bc:	4b37      	ldr	r3, [pc, #220]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d06d      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d14b      	bne.n	8003468 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4b32      	ldr	r3, [pc, #200]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fa0a 	bl	80017f4 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe fa06 	bl	80017f4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e091      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	019b      	lsls	r3, r3, #6
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	3b01      	subs	r3, #1
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	491b      	ldr	r1, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe f9d8 	bl	80017f4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe f9d4 	bl	80017f4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e05f      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x47c>
 8003466:	e057      	b.n	8003518 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0b      	ldr	r2, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 800346e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f9be 	bl	80017f4 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe f9ba 	bl	80017f4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e045      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x4b0>
 800349a:	e03d      	b.n	8003518 <HAL_RCC_OscConfig+0x54c>
 800349c:	40023800 	.word	0x40023800
 80034a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <HAL_RCC_OscConfig+0x558>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d030      	beq.n	8003514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d129      	bne.n	8003514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d122      	bne.n	8003514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	4293      	cmp	r3, r2
 80034de:	d119      	bne.n	8003514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	3b01      	subs	r3, #1
 80034ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d10f      	bne.n	8003514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800

08003528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0d0      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003540:	4b6a      	ldr	r3, [pc, #424]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d910      	bls.n	8003570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b67      	ldr	r3, [pc, #412]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 020f 	bic.w	r2, r3, #15
 8003556:	4965      	ldr	r1, [pc, #404]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b63      	ldr	r3, [pc, #396]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0b8      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003588:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a58      	ldr	r2, [pc, #352]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a0:	4b53      	ldr	r3, [pc, #332]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ac:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	494d      	ldr	r1, [pc, #308]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d040      	beq.n	800364c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d115      	bne.n	800360a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e07f      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e073      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	4b3d      	ldr	r3, [pc, #244]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e06b      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4936      	ldr	r1, [pc, #216]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fe f8ea 	bl	80017f4 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fe f8e6 	bl	80017f4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e053      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d210      	bcs.n	800367c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 020f 	bic.w	r2, r3, #15
 8003662:	4922      	ldr	r1, [pc, #136]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b20      	ldr	r3, [pc, #128]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e032      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003688:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4916      	ldr	r1, [pc, #88]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	490e      	ldr	r1, [pc, #56]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ba:	f000 f821 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	490a      	ldr	r1, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x1cc>)
 80036cc:	5ccb      	ldrb	r3, [r1, r3]
 80036ce:	fa22 f303 	lsr.w	r3, r2, r3
 80036d2:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1d0>)
 80036d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x1d4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe f846 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023c00 	.word	0x40023c00
 80036f0:	40023800 	.word	0x40023800
 80036f4:	08009420 	.word	0x08009420
 80036f8:	20000008 	.word	0x20000008
 80036fc:	2000000c 	.word	0x2000000c

08003700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003704:	b090      	sub	sp, #64	; 0x40
 8003706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
 800370c:	2300      	movs	r3, #0
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003710:	2300      	movs	r3, #0
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003718:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d00d      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x40>
 8003724:	2b08      	cmp	r3, #8
 8003726:	f200 80a1 	bhi.w	800386c <HAL_RCC_GetSysClockFreq+0x16c>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x34>
 800372e:	2b04      	cmp	r3, #4
 8003730:	d003      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0x3a>
 8003732:	e09b      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_GetSysClockFreq+0x184>)
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003738:	e09b      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373a:	4b53      	ldr	r3, [pc, #332]	; (8003888 <HAL_RCC_GetSysClockFreq+0x188>)
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800373e:	e098      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003740:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800374a:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d028      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003756:	4b4a      	ldr	r3, [pc, #296]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	099b      	lsrs	r3, r3, #6
 800375c:	2200      	movs	r2, #0
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	627a      	str	r2, [r7, #36]	; 0x24
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003768:	2100      	movs	r1, #0
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_GetSysClockFreq+0x188>)
 800376c:	fb03 f201 	mul.w	r2, r3, r1
 8003770:	2300      	movs	r3, #0
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	4413      	add	r3, r2
 8003778:	4a43      	ldr	r2, [pc, #268]	; (8003888 <HAL_RCC_GetSysClockFreq+0x188>)
 800377a:	fba0 1202 	umull	r1, r2, r0, r2
 800377e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003780:	460a      	mov	r2, r1
 8003782:	62ba      	str	r2, [r7, #40]	; 0x28
 8003784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003786:	4413      	add	r3, r2
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	2200      	movs	r2, #0
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	61fa      	str	r2, [r7, #28]
 8003792:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003796:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800379a:	f7fc ff65 	bl	8000668 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4613      	mov	r3, r2
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a6:	e053      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a8:	4b35      	ldr	r3, [pc, #212]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	2200      	movs	r2, #0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	617a      	str	r2, [r7, #20]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037ba:	f04f 0b00 	mov.w	fp, #0
 80037be:	4652      	mov	r2, sl
 80037c0:	465b      	mov	r3, fp
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	0159      	lsls	r1, r3, #5
 80037cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d0:	0150      	lsls	r0, r2, #5
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	ebb2 080a 	subs.w	r8, r2, sl
 80037da:	eb63 090b 	sbc.w	r9, r3, fp
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037f2:	ebb2 0408 	subs.w	r4, r2, r8
 80037f6:	eb63 0509 	sbc.w	r5, r3, r9
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	00eb      	lsls	r3, r5, #3
 8003804:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003808:	00e2      	lsls	r2, r4, #3
 800380a:	4614      	mov	r4, r2
 800380c:	461d      	mov	r5, r3
 800380e:	eb14 030a 	adds.w	r3, r4, sl
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	eb45 030b 	adc.w	r3, r5, fp
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003826:	4629      	mov	r1, r5
 8003828:	028b      	lsls	r3, r1, #10
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003830:	4621      	mov	r1, r4
 8003832:	028a      	lsls	r2, r1, #10
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	2200      	movs	r2, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	60fa      	str	r2, [r7, #12]
 8003840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003844:	f7fc ff10 	bl	8000668 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_GetSysClockFreq+0x180>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetSysClockFreq+0x184>)
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003874:	4618      	mov	r0, r3
 8003876:	3740      	adds	r7, #64	; 0x40
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	00f42400 	.word	0x00f42400
 8003888:	017d7840 	.word	0x017d7840

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038b4:	4b69      	ldr	r3, [pc, #420]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a68      	ldr	r2, [pc, #416]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	4964      	ldr	r1, [pc, #400]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e6:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	4959      	ldr	r1, [pc, #356]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003904:	d101      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d017      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003922:	4b4e      	ldr	r3, [pc, #312]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	494a      	ldr	r1, [pc, #296]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003942:	2301      	movs	r3, #1
 8003944:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 808b 	beq.w	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003970:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	4a39      	ldr	r2, [pc, #228]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397a:	6413      	str	r3, [r2, #64]	; 0x40
 800397c:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003988:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800398e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003994:	f7fd ff2e 	bl	80017f4 <HAL_GetTick>
 8003998:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399c:	f7fd ff2a 	bl	80017f4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e38f      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ae:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d035      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d02e      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039d8:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d114      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fef2 	bl	80017f4 <HAL_GetTick>
 8003a10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fd feee 	bl	80017f4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e351      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ee      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a42:	d111      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a52:	400b      	ands	r3, r1
 8003a54:	4901      	ldr	r1, [pc, #4]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40007000 	.word	0x40007000
 8003a64:	0ffffcff 	.word	0x0ffffcff
 8003a68:	4bac      	ldr	r3, [pc, #688]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4aab      	ldr	r2, [pc, #684]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a72:	6093      	str	r3, [r2, #8]
 8003a74:	4ba9      	ldr	r3, [pc, #676]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	49a6      	ldr	r1, [pc, #664]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a92:	4ba2      	ldr	r3, [pc, #648]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a98:	4aa0      	ldr	r2, [pc, #640]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003aa2:	4b9e      	ldr	r3, [pc, #632]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	499b      	ldr	r1, [pc, #620]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac0:	4b96      	ldr	r3, [pc, #600]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ace:	4993      	ldr	r1, [pc, #588]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ae2:	4b8e      	ldr	r3, [pc, #568]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af0:	498a      	ldr	r1, [pc, #552]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b04:	4b85      	ldr	r3, [pc, #532]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b12:	4982      	ldr	r1, [pc, #520]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b26:	4b7d      	ldr	r3, [pc, #500]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	4979      	ldr	r1, [pc, #484]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b48:	4b74      	ldr	r3, [pc, #464]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4971      	ldr	r1, [pc, #452]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f023 020c 	bic.w	r2, r3, #12
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	4968      	ldr	r1, [pc, #416]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b8c:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	4960      	ldr	r1, [pc, #384]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bae:	4b5b      	ldr	r3, [pc, #364]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	4957      	ldr	r1, [pc, #348]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bd0:	4b52      	ldr	r3, [pc, #328]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	494f      	ldr	r1, [pc, #316]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	4946      	ldr	r1, [pc, #280]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	493e      	ldr	r1, [pc, #248]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c36:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c44:	4935      	ldr	r1, [pc, #212]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c58:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c66:	492d      	ldr	r1, [pc, #180]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c7a:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c88:	4924      	ldr	r1, [pc, #144]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc8:	4914      	ldr	r1, [pc, #80]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cec:	490b      	ldr	r1, [pc, #44]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00f      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d10:	4902      	ldr	r1, [pc, #8]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d2c:	4b8a      	ldr	r3, [pc, #552]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	4986      	ldr	r1, [pc, #536]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d50:	4b81      	ldr	r3, [pc, #516]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d60:	497d      	ldr	r1, [pc, #500]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d006      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80d6 	beq.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d7c:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a75      	ldr	r2, [pc, #468]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fd fd34 	bl	80017f4 <HAL_GetTick>
 8003d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d90:	f7fd fd30 	bl	80017f4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e195      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da2:	4b6d      	ldr	r3, [pc, #436]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d021      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11d      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dc2:	4b65      	ldr	r3, [pc, #404]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dd0:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd6:	0e1b      	lsrs	r3, r3, #24
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	019a      	lsls	r2, r3, #6
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	071b      	lsls	r3, r3, #28
 8003df6:	4958      	ldr	r1, [pc, #352]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02e      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e28:	d129      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e2a:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e38:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3e:	0f1b      	lsrs	r3, r3, #28
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	019a      	lsls	r2, r3, #6
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	061b      	lsls	r3, r3, #24
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	071b      	lsls	r3, r3, #28
 8003e5e:	493e      	ldr	r1, [pc, #248]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e66:	4b3c      	ldr	r3, [pc, #240]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6c:	f023 021f 	bic.w	r2, r3, #31
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	3b01      	subs	r3, #1
 8003e76:	4938      	ldr	r1, [pc, #224]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01d      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e8a:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e90:	0e1b      	lsrs	r3, r3, #24
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e98:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	0f1b      	lsrs	r3, r3, #28
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	019a      	lsls	r2, r3, #6
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	071b      	lsls	r3, r3, #28
 8003ebe:	4926      	ldr	r1, [pc, #152]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	019a      	lsls	r2, r3, #6
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	071b      	lsls	r3, r3, #28
 8003eee:	491a      	ldr	r1, [pc, #104]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f02:	f7fd fc77 	bl	80017f4 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f0a:	f7fd fc73 	bl	80017f4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b64      	cmp	r3, #100	; 0x64
 8003f16:	d901      	bls.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0d8      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	f040 80ce 	bne.w	80040cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fd fc5a 	bl	80017f4 <HAL_GetTick>
 8003f40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f42:	e00b      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f44:	f7fd fc56 	bl	80017f4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d904      	bls.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0bb      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f68:	d0ec      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02e      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d12a      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f92:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fa0:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	0f1b      	lsrs	r3, r3, #28
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	019a      	lsls	r2, r3, #6
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	4944      	ldr	r1, [pc, #272]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fce:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	493d      	ldr	r1, [pc, #244]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d022      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffc:	d11d      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	0e1b      	lsrs	r3, r3, #24
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800400c:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	0f1b      	lsrs	r3, r3, #28
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	019a      	lsls	r2, r3, #6
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	071b      	lsls	r3, r3, #28
 8004032:	4929      	ldr	r1, [pc, #164]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d028      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	0e1b      	lsrs	r3, r3, #24
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	019a      	lsls	r2, r3, #6
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	431a      	orrs	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	071b      	lsls	r3, r3, #28
 800407a:	4917      	ldr	r1, [pc, #92]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4911      	ldr	r1, [pc, #68]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd fba6 	bl	80017f4 <HAL_GetTick>
 80040a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040ac:	f7fd fba2 	bl	80017f4 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e007      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ca:	d1ef      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800

080040dc <__cvt>:
 80040dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040de:	ed2d 8b02 	vpush	{d8}
 80040e2:	eeb0 8b40 	vmov.f64	d8, d0
 80040e6:	b085      	sub	sp, #20
 80040e8:	4617      	mov	r7, r2
 80040ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80040ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80040ee:	ee18 2a90 	vmov	r2, s17
 80040f2:	f025 0520 	bic.w	r5, r5, #32
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	bfb6      	itet	lt
 80040fa:	222d      	movlt	r2, #45	; 0x2d
 80040fc:	2200      	movge	r2, #0
 80040fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8004102:	2d46      	cmp	r5, #70	; 0x46
 8004104:	460c      	mov	r4, r1
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	d004      	beq.n	8004114 <__cvt+0x38>
 800410a:	2d45      	cmp	r5, #69	; 0x45
 800410c:	d100      	bne.n	8004110 <__cvt+0x34>
 800410e:	3401      	adds	r4, #1
 8004110:	2102      	movs	r1, #2
 8004112:	e000      	b.n	8004116 <__cvt+0x3a>
 8004114:	2103      	movs	r1, #3
 8004116:	ab03      	add	r3, sp, #12
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	ab02      	add	r3, sp, #8
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	4622      	mov	r2, r4
 8004120:	4633      	mov	r3, r6
 8004122:	eeb0 0b48 	vmov.f64	d0, d8
 8004126:	f001 f84f 	bl	80051c8 <_dtoa_r>
 800412a:	2d47      	cmp	r5, #71	; 0x47
 800412c:	d101      	bne.n	8004132 <__cvt+0x56>
 800412e:	07fb      	lsls	r3, r7, #31
 8004130:	d51a      	bpl.n	8004168 <__cvt+0x8c>
 8004132:	2d46      	cmp	r5, #70	; 0x46
 8004134:	eb00 0204 	add.w	r2, r0, r4
 8004138:	d10c      	bne.n	8004154 <__cvt+0x78>
 800413a:	7803      	ldrb	r3, [r0, #0]
 800413c:	2b30      	cmp	r3, #48	; 0x30
 800413e:	d107      	bne.n	8004150 <__cvt+0x74>
 8004140:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004148:	bf1c      	itt	ne
 800414a:	f1c4 0401 	rsbne	r4, r4, #1
 800414e:	6034      	strne	r4, [r6, #0]
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	441a      	add	r2, r3
 8004154:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	bf08      	it	eq
 800415e:	9203      	streq	r2, [sp, #12]
 8004160:	2130      	movs	r1, #48	; 0x30
 8004162:	9b03      	ldr	r3, [sp, #12]
 8004164:	4293      	cmp	r3, r2
 8004166:	d307      	bcc.n	8004178 <__cvt+0x9c>
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800416c:	1a1b      	subs	r3, r3, r0
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	b005      	add	sp, #20
 8004172:	ecbd 8b02 	vpop	{d8}
 8004176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004178:	1c5c      	adds	r4, r3, #1
 800417a:	9403      	str	r4, [sp, #12]
 800417c:	7019      	strb	r1, [r3, #0]
 800417e:	e7f0      	b.n	8004162 <__cvt+0x86>

08004180 <__exponent>:
 8004180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004182:	4603      	mov	r3, r0
 8004184:	2900      	cmp	r1, #0
 8004186:	bfb8      	it	lt
 8004188:	4249      	neglt	r1, r1
 800418a:	f803 2b02 	strb.w	r2, [r3], #2
 800418e:	bfb4      	ite	lt
 8004190:	222d      	movlt	r2, #45	; 0x2d
 8004192:	222b      	movge	r2, #43	; 0x2b
 8004194:	2909      	cmp	r1, #9
 8004196:	7042      	strb	r2, [r0, #1]
 8004198:	dd2a      	ble.n	80041f0 <__exponent+0x70>
 800419a:	f10d 0207 	add.w	r2, sp, #7
 800419e:	4617      	mov	r7, r2
 80041a0:	260a      	movs	r6, #10
 80041a2:	4694      	mov	ip, r2
 80041a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80041a8:	fb06 1415 	mls	r4, r6, r5, r1
 80041ac:	3430      	adds	r4, #48	; 0x30
 80041ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80041b2:	460c      	mov	r4, r1
 80041b4:	2c63      	cmp	r4, #99	; 0x63
 80041b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80041ba:	4629      	mov	r1, r5
 80041bc:	dcf1      	bgt.n	80041a2 <__exponent+0x22>
 80041be:	3130      	adds	r1, #48	; 0x30
 80041c0:	f1ac 0402 	sub.w	r4, ip, #2
 80041c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80041c8:	1c41      	adds	r1, r0, #1
 80041ca:	4622      	mov	r2, r4
 80041cc:	42ba      	cmp	r2, r7
 80041ce:	d30a      	bcc.n	80041e6 <__exponent+0x66>
 80041d0:	f10d 0209 	add.w	r2, sp, #9
 80041d4:	eba2 020c 	sub.w	r2, r2, ip
 80041d8:	42bc      	cmp	r4, r7
 80041da:	bf88      	it	hi
 80041dc:	2200      	movhi	r2, #0
 80041de:	4413      	add	r3, r2
 80041e0:	1a18      	subs	r0, r3, r0
 80041e2:	b003      	add	sp, #12
 80041e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80041ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80041ee:	e7ed      	b.n	80041cc <__exponent+0x4c>
 80041f0:	2330      	movs	r3, #48	; 0x30
 80041f2:	3130      	adds	r1, #48	; 0x30
 80041f4:	7083      	strb	r3, [r0, #2]
 80041f6:	70c1      	strb	r1, [r0, #3]
 80041f8:	1d03      	adds	r3, r0, #4
 80041fa:	e7f1      	b.n	80041e0 <__exponent+0x60>
 80041fc:	0000      	movs	r0, r0
	...

08004200 <_printf_float>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	b08b      	sub	sp, #44	; 0x2c
 8004206:	460c      	mov	r4, r1
 8004208:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800420c:	4616      	mov	r6, r2
 800420e:	461f      	mov	r7, r3
 8004210:	4605      	mov	r5, r0
 8004212:	f000 fed1 	bl	8004fb8 <_localeconv_r>
 8004216:	f8d0 b000 	ldr.w	fp, [r0]
 800421a:	4658      	mov	r0, fp
 800421c:	f7fc f860 	bl	80002e0 <strlen>
 8004220:	2300      	movs	r3, #0
 8004222:	9308      	str	r3, [sp, #32]
 8004224:	f8d8 3000 	ldr.w	r3, [r8]
 8004228:	f894 9018 	ldrb.w	r9, [r4, #24]
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	3307      	adds	r3, #7
 8004230:	f023 0307 	bic.w	r3, r3, #7
 8004234:	f103 0108 	add.w	r1, r3, #8
 8004238:	f8c8 1000 	str.w	r1, [r8]
 800423c:	ed93 0b00 	vldr	d0, [r3]
 8004240:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80044a0 <_printf_float+0x2a0>
 8004244:	eeb0 7bc0 	vabs.f64	d7, d0
 8004248:	eeb4 7b46 	vcmp.f64	d7, d6
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004254:	4682      	mov	sl, r0
 8004256:	dd24      	ble.n	80042a2 <_printf_float+0xa2>
 8004258:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800425c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004260:	d502      	bpl.n	8004268 <_printf_float+0x68>
 8004262:	232d      	movs	r3, #45	; 0x2d
 8004264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004268:	498f      	ldr	r1, [pc, #572]	; (80044a8 <_printf_float+0x2a8>)
 800426a:	4b90      	ldr	r3, [pc, #576]	; (80044ac <_printf_float+0x2ac>)
 800426c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004270:	bf94      	ite	ls
 8004272:	4688      	movls	r8, r1
 8004274:	4698      	movhi	r8, r3
 8004276:	2303      	movs	r3, #3
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	f022 0204 	bic.w	r2, r2, #4
 800427e:	2300      	movs	r3, #0
 8004280:	6022      	str	r2, [r4, #0]
 8004282:	9304      	str	r3, [sp, #16]
 8004284:	9700      	str	r7, [sp, #0]
 8004286:	4633      	mov	r3, r6
 8004288:	aa09      	add	r2, sp, #36	; 0x24
 800428a:	4621      	mov	r1, r4
 800428c:	4628      	mov	r0, r5
 800428e:	f000 f9d1 	bl	8004634 <_printf_common>
 8004292:	3001      	adds	r0, #1
 8004294:	f040 808a 	bne.w	80043ac <_printf_float+0x1ac>
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	b00b      	add	sp, #44	; 0x2c
 800429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a2:	eeb4 0b40 	vcmp.f64	d0, d0
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	d709      	bvc.n	80042c0 <_printf_float+0xc0>
 80042ac:	ee10 3a90 	vmov	r3, s1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bfbc      	itt	lt
 80042b4:	232d      	movlt	r3, #45	; 0x2d
 80042b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042ba:	497d      	ldr	r1, [pc, #500]	; (80044b0 <_printf_float+0x2b0>)
 80042bc:	4b7d      	ldr	r3, [pc, #500]	; (80044b4 <_printf_float+0x2b4>)
 80042be:	e7d5      	b.n	800426c <_printf_float+0x6c>
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80042c6:	9104      	str	r1, [sp, #16]
 80042c8:	1c59      	adds	r1, r3, #1
 80042ca:	d13c      	bne.n	8004346 <_printf_float+0x146>
 80042cc:	2306      	movs	r3, #6
 80042ce:	6063      	str	r3, [r4, #4]
 80042d0:	2300      	movs	r3, #0
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	ab08      	add	r3, sp, #32
 80042d6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80042da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042de:	ab07      	add	r3, sp, #28
 80042e0:	6861      	ldr	r1, [r4, #4]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	f10d 031b 	add.w	r3, sp, #27
 80042ea:	4628      	mov	r0, r5
 80042ec:	f7ff fef6 	bl	80040dc <__cvt>
 80042f0:	9b04      	ldr	r3, [sp, #16]
 80042f2:	9907      	ldr	r1, [sp, #28]
 80042f4:	2b47      	cmp	r3, #71	; 0x47
 80042f6:	4680      	mov	r8, r0
 80042f8:	d108      	bne.n	800430c <_printf_float+0x10c>
 80042fa:	1cc8      	adds	r0, r1, #3
 80042fc:	db02      	blt.n	8004304 <_printf_float+0x104>
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	4299      	cmp	r1, r3
 8004302:	dd41      	ble.n	8004388 <_printf_float+0x188>
 8004304:	f1a9 0902 	sub.w	r9, r9, #2
 8004308:	fa5f f989 	uxtb.w	r9, r9
 800430c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004310:	d820      	bhi.n	8004354 <_printf_float+0x154>
 8004312:	3901      	subs	r1, #1
 8004314:	464a      	mov	r2, r9
 8004316:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800431a:	9107      	str	r1, [sp, #28]
 800431c:	f7ff ff30 	bl	8004180 <__exponent>
 8004320:	9a08      	ldr	r2, [sp, #32]
 8004322:	9004      	str	r0, [sp, #16]
 8004324:	1813      	adds	r3, r2, r0
 8004326:	2a01      	cmp	r2, #1
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	dc02      	bgt.n	8004332 <_printf_float+0x132>
 800432c:	6822      	ldr	r2, [r4, #0]
 800432e:	07d2      	lsls	r2, r2, #31
 8004330:	d501      	bpl.n	8004336 <_printf_float+0x136>
 8004332:	3301      	adds	r3, #1
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0a2      	beq.n	8004284 <_printf_float+0x84>
 800433e:	232d      	movs	r3, #45	; 0x2d
 8004340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004344:	e79e      	b.n	8004284 <_printf_float+0x84>
 8004346:	9904      	ldr	r1, [sp, #16]
 8004348:	2947      	cmp	r1, #71	; 0x47
 800434a:	d1c1      	bne.n	80042d0 <_printf_float+0xd0>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1bf      	bne.n	80042d0 <_printf_float+0xd0>
 8004350:	2301      	movs	r3, #1
 8004352:	e7bc      	b.n	80042ce <_printf_float+0xce>
 8004354:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004358:	d118      	bne.n	800438c <_printf_float+0x18c>
 800435a:	2900      	cmp	r1, #0
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	dd0b      	ble.n	8004378 <_printf_float+0x178>
 8004360:	6121      	str	r1, [r4, #16]
 8004362:	b913      	cbnz	r3, 800436a <_printf_float+0x16a>
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	07d0      	lsls	r0, r2, #31
 8004368:	d502      	bpl.n	8004370 <_printf_float+0x170>
 800436a:	3301      	adds	r3, #1
 800436c:	440b      	add	r3, r1
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	2300      	movs	r3, #0
 8004372:	65a1      	str	r1, [r4, #88]	; 0x58
 8004374:	9304      	str	r3, [sp, #16]
 8004376:	e7de      	b.n	8004336 <_printf_float+0x136>
 8004378:	b913      	cbnz	r3, 8004380 <_printf_float+0x180>
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	07d2      	lsls	r2, r2, #31
 800437e:	d501      	bpl.n	8004384 <_printf_float+0x184>
 8004380:	3302      	adds	r3, #2
 8004382:	e7f4      	b.n	800436e <_printf_float+0x16e>
 8004384:	2301      	movs	r3, #1
 8004386:	e7f2      	b.n	800436e <_printf_float+0x16e>
 8004388:	f04f 0967 	mov.w	r9, #103	; 0x67
 800438c:	9b08      	ldr	r3, [sp, #32]
 800438e:	4299      	cmp	r1, r3
 8004390:	db05      	blt.n	800439e <_printf_float+0x19e>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	6121      	str	r1, [r4, #16]
 8004396:	07d8      	lsls	r0, r3, #31
 8004398:	d5ea      	bpl.n	8004370 <_printf_float+0x170>
 800439a:	1c4b      	adds	r3, r1, #1
 800439c:	e7e7      	b.n	800436e <_printf_float+0x16e>
 800439e:	2900      	cmp	r1, #0
 80043a0:	bfd4      	ite	le
 80043a2:	f1c1 0202 	rsble	r2, r1, #2
 80043a6:	2201      	movgt	r2, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	e7e0      	b.n	800436e <_printf_float+0x16e>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	055a      	lsls	r2, r3, #21
 80043b0:	d407      	bmi.n	80043c2 <_printf_float+0x1c2>
 80043b2:	6923      	ldr	r3, [r4, #16]
 80043b4:	4642      	mov	r2, r8
 80043b6:	4631      	mov	r1, r6
 80043b8:	4628      	mov	r0, r5
 80043ba:	47b8      	blx	r7
 80043bc:	3001      	adds	r0, #1
 80043be:	d12a      	bne.n	8004416 <_printf_float+0x216>
 80043c0:	e76a      	b.n	8004298 <_printf_float+0x98>
 80043c2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043c6:	f240 80e0 	bls.w	800458a <_printf_float+0x38a>
 80043ca:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80043ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	d133      	bne.n	8004440 <_printf_float+0x240>
 80043d8:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <_printf_float+0x2b8>)
 80043da:	2301      	movs	r3, #1
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f af58 	beq.w	8004298 <_printf_float+0x98>
 80043e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	db02      	blt.n	80043f6 <_printf_float+0x1f6>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	07d8      	lsls	r0, r3, #31
 80043f4:	d50f      	bpl.n	8004416 <_printf_float+0x216>
 80043f6:	4653      	mov	r3, sl
 80043f8:	465a      	mov	r2, fp
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	f43f af49 	beq.w	8004298 <_printf_float+0x98>
 8004406:	f04f 0800 	mov.w	r8, #0
 800440a:	f104 091a 	add.w	r9, r4, #26
 800440e:	9b08      	ldr	r3, [sp, #32]
 8004410:	3b01      	subs	r3, #1
 8004412:	4543      	cmp	r3, r8
 8004414:	dc09      	bgt.n	800442a <_printf_float+0x22a>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	079b      	lsls	r3, r3, #30
 800441a:	f100 8106 	bmi.w	800462a <_printf_float+0x42a>
 800441e:	68e0      	ldr	r0, [r4, #12]
 8004420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004422:	4298      	cmp	r0, r3
 8004424:	bfb8      	it	lt
 8004426:	4618      	movlt	r0, r3
 8004428:	e738      	b.n	800429c <_printf_float+0x9c>
 800442a:	2301      	movs	r3, #1
 800442c:	464a      	mov	r2, r9
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	f43f af2f 	beq.w	8004298 <_printf_float+0x98>
 800443a:	f108 0801 	add.w	r8, r8, #1
 800443e:	e7e6      	b.n	800440e <_printf_float+0x20e>
 8004440:	9b07      	ldr	r3, [sp, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	dc3a      	bgt.n	80044bc <_printf_float+0x2bc>
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <_printf_float+0x2b8>)
 8004448:	2301      	movs	r3, #1
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	47b8      	blx	r7
 8004450:	3001      	adds	r0, #1
 8004452:	f43f af21 	beq.w	8004298 <_printf_float+0x98>
 8004456:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	d102      	bne.n	8004464 <_printf_float+0x264>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	07d9      	lsls	r1, r3, #31
 8004462:	d5d8      	bpl.n	8004416 <_printf_float+0x216>
 8004464:	4653      	mov	r3, sl
 8004466:	465a      	mov	r2, fp
 8004468:	4631      	mov	r1, r6
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	f43f af12 	beq.w	8004298 <_printf_float+0x98>
 8004474:	f04f 0900 	mov.w	r9, #0
 8004478:	f104 0a1a 	add.w	sl, r4, #26
 800447c:	9b07      	ldr	r3, [sp, #28]
 800447e:	425b      	negs	r3, r3
 8004480:	454b      	cmp	r3, r9
 8004482:	dc01      	bgt.n	8004488 <_printf_float+0x288>
 8004484:	9b08      	ldr	r3, [sp, #32]
 8004486:	e795      	b.n	80043b4 <_printf_float+0x1b4>
 8004488:	2301      	movs	r3, #1
 800448a:	4652      	mov	r2, sl
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f43f af00 	beq.w	8004298 <_printf_float+0x98>
 8004498:	f109 0901 	add.w	r9, r9, #1
 800449c:	e7ee      	b.n	800447c <_printf_float+0x27c>
 800449e:	bf00      	nop
 80044a0:	ffffffff 	.word	0xffffffff
 80044a4:	7fefffff 	.word	0x7fefffff
 80044a8:	08009430 	.word	0x08009430
 80044ac:	08009434 	.word	0x08009434
 80044b0:	08009438 	.word	0x08009438
 80044b4:	0800943c 	.word	0x0800943c
 80044b8:	08009440 	.word	0x08009440
 80044bc:	9a08      	ldr	r2, [sp, #32]
 80044be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044c0:	429a      	cmp	r2, r3
 80044c2:	bfa8      	it	ge
 80044c4:	461a      	movge	r2, r3
 80044c6:	2a00      	cmp	r2, #0
 80044c8:	4691      	mov	r9, r2
 80044ca:	dc38      	bgt.n	800453e <_printf_float+0x33e>
 80044cc:	2300      	movs	r3, #0
 80044ce:	9305      	str	r3, [sp, #20]
 80044d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044d4:	f104 021a 	add.w	r2, r4, #26
 80044d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044da:	9905      	ldr	r1, [sp, #20]
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	eba3 0309 	sub.w	r3, r3, r9
 80044e2:	428b      	cmp	r3, r1
 80044e4:	dc33      	bgt.n	800454e <_printf_float+0x34e>
 80044e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	db3c      	blt.n	8004568 <_printf_float+0x368>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	07da      	lsls	r2, r3, #31
 80044f2:	d439      	bmi.n	8004568 <_printf_float+0x368>
 80044f4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80044f8:	eba2 0903 	sub.w	r9, r2, r3
 80044fc:	9b04      	ldr	r3, [sp, #16]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	4591      	cmp	r9, r2
 8004502:	bfa8      	it	ge
 8004504:	4691      	movge	r9, r2
 8004506:	f1b9 0f00 	cmp.w	r9, #0
 800450a:	dc35      	bgt.n	8004578 <_printf_float+0x378>
 800450c:	f04f 0800 	mov.w	r8, #0
 8004510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004514:	f104 0a1a 	add.w	sl, r4, #26
 8004518:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	eba3 0309 	sub.w	r3, r3, r9
 8004522:	4543      	cmp	r3, r8
 8004524:	f77f af77 	ble.w	8004416 <_printf_float+0x216>
 8004528:	2301      	movs	r3, #1
 800452a:	4652      	mov	r2, sl
 800452c:	4631      	mov	r1, r6
 800452e:	4628      	mov	r0, r5
 8004530:	47b8      	blx	r7
 8004532:	3001      	adds	r0, #1
 8004534:	f43f aeb0 	beq.w	8004298 <_printf_float+0x98>
 8004538:	f108 0801 	add.w	r8, r8, #1
 800453c:	e7ec      	b.n	8004518 <_printf_float+0x318>
 800453e:	4613      	mov	r3, r2
 8004540:	4631      	mov	r1, r6
 8004542:	4642      	mov	r2, r8
 8004544:	4628      	mov	r0, r5
 8004546:	47b8      	blx	r7
 8004548:	3001      	adds	r0, #1
 800454a:	d1bf      	bne.n	80044cc <_printf_float+0x2cc>
 800454c:	e6a4      	b.n	8004298 <_printf_float+0x98>
 800454e:	2301      	movs	r3, #1
 8004550:	4631      	mov	r1, r6
 8004552:	4628      	mov	r0, r5
 8004554:	9204      	str	r2, [sp, #16]
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	f43f ae9d 	beq.w	8004298 <_printf_float+0x98>
 800455e:	9b05      	ldr	r3, [sp, #20]
 8004560:	9a04      	ldr	r2, [sp, #16]
 8004562:	3301      	adds	r3, #1
 8004564:	9305      	str	r3, [sp, #20]
 8004566:	e7b7      	b.n	80044d8 <_printf_float+0x2d8>
 8004568:	4653      	mov	r3, sl
 800456a:	465a      	mov	r2, fp
 800456c:	4631      	mov	r1, r6
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	d1be      	bne.n	80044f4 <_printf_float+0x2f4>
 8004576:	e68f      	b.n	8004298 <_printf_float+0x98>
 8004578:	9a04      	ldr	r2, [sp, #16]
 800457a:	464b      	mov	r3, r9
 800457c:	4442      	add	r2, r8
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	d1c1      	bne.n	800450c <_printf_float+0x30c>
 8004588:	e686      	b.n	8004298 <_printf_float+0x98>
 800458a:	9a08      	ldr	r2, [sp, #32]
 800458c:	2a01      	cmp	r2, #1
 800458e:	dc01      	bgt.n	8004594 <_printf_float+0x394>
 8004590:	07db      	lsls	r3, r3, #31
 8004592:	d537      	bpl.n	8004604 <_printf_float+0x404>
 8004594:	2301      	movs	r3, #1
 8004596:	4642      	mov	r2, r8
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	47b8      	blx	r7
 800459e:	3001      	adds	r0, #1
 80045a0:	f43f ae7a 	beq.w	8004298 <_printf_float+0x98>
 80045a4:	4653      	mov	r3, sl
 80045a6:	465a      	mov	r2, fp
 80045a8:	4631      	mov	r1, r6
 80045aa:	4628      	mov	r0, r5
 80045ac:	47b8      	blx	r7
 80045ae:	3001      	adds	r0, #1
 80045b0:	f43f ae72 	beq.w	8004298 <_printf_float+0x98>
 80045b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80045b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	9b08      	ldr	r3, [sp, #32]
 80045c2:	d01a      	beq.n	80045fa <_printf_float+0x3fa>
 80045c4:	3b01      	subs	r3, #1
 80045c6:	f108 0201 	add.w	r2, r8, #1
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b8      	blx	r7
 80045d0:	3001      	adds	r0, #1
 80045d2:	d10e      	bne.n	80045f2 <_printf_float+0x3f2>
 80045d4:	e660      	b.n	8004298 <_printf_float+0x98>
 80045d6:	2301      	movs	r3, #1
 80045d8:	464a      	mov	r2, r9
 80045da:	4631      	mov	r1, r6
 80045dc:	4628      	mov	r0, r5
 80045de:	47b8      	blx	r7
 80045e0:	3001      	adds	r0, #1
 80045e2:	f43f ae59 	beq.w	8004298 <_printf_float+0x98>
 80045e6:	f108 0801 	add.w	r8, r8, #1
 80045ea:	9b08      	ldr	r3, [sp, #32]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4543      	cmp	r3, r8
 80045f0:	dcf1      	bgt.n	80045d6 <_printf_float+0x3d6>
 80045f2:	9b04      	ldr	r3, [sp, #16]
 80045f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045f8:	e6dd      	b.n	80043b6 <_printf_float+0x1b6>
 80045fa:	f04f 0800 	mov.w	r8, #0
 80045fe:	f104 091a 	add.w	r9, r4, #26
 8004602:	e7f2      	b.n	80045ea <_printf_float+0x3ea>
 8004604:	2301      	movs	r3, #1
 8004606:	4642      	mov	r2, r8
 8004608:	e7df      	b.n	80045ca <_printf_float+0x3ca>
 800460a:	2301      	movs	r3, #1
 800460c:	464a      	mov	r2, r9
 800460e:	4631      	mov	r1, r6
 8004610:	4628      	mov	r0, r5
 8004612:	47b8      	blx	r7
 8004614:	3001      	adds	r0, #1
 8004616:	f43f ae3f 	beq.w	8004298 <_printf_float+0x98>
 800461a:	f108 0801 	add.w	r8, r8, #1
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004622:	1a5b      	subs	r3, r3, r1
 8004624:	4543      	cmp	r3, r8
 8004626:	dcf0      	bgt.n	800460a <_printf_float+0x40a>
 8004628:	e6f9      	b.n	800441e <_printf_float+0x21e>
 800462a:	f04f 0800 	mov.w	r8, #0
 800462e:	f104 0919 	add.w	r9, r4, #25
 8004632:	e7f4      	b.n	800461e <_printf_float+0x41e>

08004634 <_printf_common>:
 8004634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	4616      	mov	r6, r2
 800463a:	4699      	mov	r9, r3
 800463c:	688a      	ldr	r2, [r1, #8]
 800463e:	690b      	ldr	r3, [r1, #16]
 8004640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004644:	4293      	cmp	r3, r2
 8004646:	bfb8      	it	lt
 8004648:	4613      	movlt	r3, r2
 800464a:	6033      	str	r3, [r6, #0]
 800464c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004650:	4607      	mov	r7, r0
 8004652:	460c      	mov	r4, r1
 8004654:	b10a      	cbz	r2, 800465a <_printf_common+0x26>
 8004656:	3301      	adds	r3, #1
 8004658:	6033      	str	r3, [r6, #0]
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	0699      	lsls	r1, r3, #26
 800465e:	bf42      	ittt	mi
 8004660:	6833      	ldrmi	r3, [r6, #0]
 8004662:	3302      	addmi	r3, #2
 8004664:	6033      	strmi	r3, [r6, #0]
 8004666:	6825      	ldr	r5, [r4, #0]
 8004668:	f015 0506 	ands.w	r5, r5, #6
 800466c:	d106      	bne.n	800467c <_printf_common+0x48>
 800466e:	f104 0a19 	add.w	sl, r4, #25
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	6832      	ldr	r2, [r6, #0]
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	42ab      	cmp	r3, r5
 800467a:	dc26      	bgt.n	80046ca <_printf_common+0x96>
 800467c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004680:	1e13      	subs	r3, r2, #0
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	bf18      	it	ne
 8004686:	2301      	movne	r3, #1
 8004688:	0692      	lsls	r2, r2, #26
 800468a:	d42b      	bmi.n	80046e4 <_printf_common+0xb0>
 800468c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004690:	4649      	mov	r1, r9
 8004692:	4638      	mov	r0, r7
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d01e      	beq.n	80046d8 <_printf_common+0xa4>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	6922      	ldr	r2, [r4, #16]
 800469e:	f003 0306 	and.w	r3, r3, #6
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	bf02      	ittt	eq
 80046a6:	68e5      	ldreq	r5, [r4, #12]
 80046a8:	6833      	ldreq	r3, [r6, #0]
 80046aa:	1aed      	subeq	r5, r5, r3
 80046ac:	68a3      	ldr	r3, [r4, #8]
 80046ae:	bf0c      	ite	eq
 80046b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b4:	2500      	movne	r5, #0
 80046b6:	4293      	cmp	r3, r2
 80046b8:	bfc4      	itt	gt
 80046ba:	1a9b      	subgt	r3, r3, r2
 80046bc:	18ed      	addgt	r5, r5, r3
 80046be:	2600      	movs	r6, #0
 80046c0:	341a      	adds	r4, #26
 80046c2:	42b5      	cmp	r5, r6
 80046c4:	d11a      	bne.n	80046fc <_printf_common+0xc8>
 80046c6:	2000      	movs	r0, #0
 80046c8:	e008      	b.n	80046dc <_printf_common+0xa8>
 80046ca:	2301      	movs	r3, #1
 80046cc:	4652      	mov	r2, sl
 80046ce:	4649      	mov	r1, r9
 80046d0:	4638      	mov	r0, r7
 80046d2:	47c0      	blx	r8
 80046d4:	3001      	adds	r0, #1
 80046d6:	d103      	bne.n	80046e0 <_printf_common+0xac>
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e0:	3501      	adds	r5, #1
 80046e2:	e7c6      	b.n	8004672 <_printf_common+0x3e>
 80046e4:	18e1      	adds	r1, r4, r3
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	2030      	movs	r0, #48	; 0x30
 80046ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ee:	4422      	add	r2, r4
 80046f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046f8:	3302      	adds	r3, #2
 80046fa:	e7c7      	b.n	800468c <_printf_common+0x58>
 80046fc:	2301      	movs	r3, #1
 80046fe:	4622      	mov	r2, r4
 8004700:	4649      	mov	r1, r9
 8004702:	4638      	mov	r0, r7
 8004704:	47c0      	blx	r8
 8004706:	3001      	adds	r0, #1
 8004708:	d0e6      	beq.n	80046d8 <_printf_common+0xa4>
 800470a:	3601      	adds	r6, #1
 800470c:	e7d9      	b.n	80046c2 <_printf_common+0x8e>
	...

08004710 <_printf_i>:
 8004710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	7e0f      	ldrb	r7, [r1, #24]
 8004716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004718:	2f78      	cmp	r7, #120	; 0x78
 800471a:	4691      	mov	r9, r2
 800471c:	4680      	mov	r8, r0
 800471e:	460c      	mov	r4, r1
 8004720:	469a      	mov	sl, r3
 8004722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004726:	d807      	bhi.n	8004738 <_printf_i+0x28>
 8004728:	2f62      	cmp	r7, #98	; 0x62
 800472a:	d80a      	bhi.n	8004742 <_printf_i+0x32>
 800472c:	2f00      	cmp	r7, #0
 800472e:	f000 80d4 	beq.w	80048da <_printf_i+0x1ca>
 8004732:	2f58      	cmp	r7, #88	; 0x58
 8004734:	f000 80c0 	beq.w	80048b8 <_printf_i+0x1a8>
 8004738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800473c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004740:	e03a      	b.n	80047b8 <_printf_i+0xa8>
 8004742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004746:	2b15      	cmp	r3, #21
 8004748:	d8f6      	bhi.n	8004738 <_printf_i+0x28>
 800474a:	a101      	add	r1, pc, #4	; (adr r1, 8004750 <_printf_i+0x40>)
 800474c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004750:	080047a9 	.word	0x080047a9
 8004754:	080047bd 	.word	0x080047bd
 8004758:	08004739 	.word	0x08004739
 800475c:	08004739 	.word	0x08004739
 8004760:	08004739 	.word	0x08004739
 8004764:	08004739 	.word	0x08004739
 8004768:	080047bd 	.word	0x080047bd
 800476c:	08004739 	.word	0x08004739
 8004770:	08004739 	.word	0x08004739
 8004774:	08004739 	.word	0x08004739
 8004778:	08004739 	.word	0x08004739
 800477c:	080048c1 	.word	0x080048c1
 8004780:	080047e9 	.word	0x080047e9
 8004784:	0800487b 	.word	0x0800487b
 8004788:	08004739 	.word	0x08004739
 800478c:	08004739 	.word	0x08004739
 8004790:	080048e3 	.word	0x080048e3
 8004794:	08004739 	.word	0x08004739
 8004798:	080047e9 	.word	0x080047e9
 800479c:	08004739 	.word	0x08004739
 80047a0:	08004739 	.word	0x08004739
 80047a4:	08004883 	.word	0x08004883
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	602a      	str	r2, [r5, #0]
 80047b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b8:	2301      	movs	r3, #1
 80047ba:	e09f      	b.n	80048fc <_printf_i+0x1ec>
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	682b      	ldr	r3, [r5, #0]
 80047c0:	0607      	lsls	r7, r0, #24
 80047c2:	f103 0104 	add.w	r1, r3, #4
 80047c6:	6029      	str	r1, [r5, #0]
 80047c8:	d501      	bpl.n	80047ce <_printf_i+0xbe>
 80047ca:	681e      	ldr	r6, [r3, #0]
 80047cc:	e003      	b.n	80047d6 <_printf_i+0xc6>
 80047ce:	0646      	lsls	r6, r0, #25
 80047d0:	d5fb      	bpl.n	80047ca <_printf_i+0xba>
 80047d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047d6:	2e00      	cmp	r6, #0
 80047d8:	da03      	bge.n	80047e2 <_printf_i+0xd2>
 80047da:	232d      	movs	r3, #45	; 0x2d
 80047dc:	4276      	negs	r6, r6
 80047de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e2:	485a      	ldr	r0, [pc, #360]	; (800494c <_printf_i+0x23c>)
 80047e4:	230a      	movs	r3, #10
 80047e6:	e012      	b.n	800480e <_printf_i+0xfe>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	1d19      	adds	r1, r3, #4
 80047ee:	6029      	str	r1, [r5, #0]
 80047f0:	0605      	lsls	r5, r0, #24
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0xe8>
 80047f4:	681e      	ldr	r6, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_printf_i+0xee>
 80047f8:	0641      	lsls	r1, r0, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0xe4>
 80047fc:	881e      	ldrh	r6, [r3, #0]
 80047fe:	4853      	ldr	r0, [pc, #332]	; (800494c <_printf_i+0x23c>)
 8004800:	2f6f      	cmp	r7, #111	; 0x6f
 8004802:	bf0c      	ite	eq
 8004804:	2308      	moveq	r3, #8
 8004806:	230a      	movne	r3, #10
 8004808:	2100      	movs	r1, #0
 800480a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800480e:	6865      	ldr	r5, [r4, #4]
 8004810:	60a5      	str	r5, [r4, #8]
 8004812:	2d00      	cmp	r5, #0
 8004814:	bfa2      	ittt	ge
 8004816:	6821      	ldrge	r1, [r4, #0]
 8004818:	f021 0104 	bicge.w	r1, r1, #4
 800481c:	6021      	strge	r1, [r4, #0]
 800481e:	b90e      	cbnz	r6, 8004824 <_printf_i+0x114>
 8004820:	2d00      	cmp	r5, #0
 8004822:	d04b      	beq.n	80048bc <_printf_i+0x1ac>
 8004824:	4615      	mov	r5, r2
 8004826:	fbb6 f1f3 	udiv	r1, r6, r3
 800482a:	fb03 6711 	mls	r7, r3, r1, r6
 800482e:	5dc7      	ldrb	r7, [r0, r7]
 8004830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004834:	4637      	mov	r7, r6
 8004836:	42bb      	cmp	r3, r7
 8004838:	460e      	mov	r6, r1
 800483a:	d9f4      	bls.n	8004826 <_printf_i+0x116>
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <_printf_i+0x148>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07de      	lsls	r6, r3, #31
 8004844:	d508      	bpl.n	8004858 <_printf_i+0x148>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	6861      	ldr	r1, [r4, #4]
 800484a:	4299      	cmp	r1, r3
 800484c:	bfde      	ittt	le
 800484e:	2330      	movle	r3, #48	; 0x30
 8004850:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004854:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004858:	1b52      	subs	r2, r2, r5
 800485a:	6122      	str	r2, [r4, #16]
 800485c:	f8cd a000 	str.w	sl, [sp]
 8004860:	464b      	mov	r3, r9
 8004862:	aa03      	add	r2, sp, #12
 8004864:	4621      	mov	r1, r4
 8004866:	4640      	mov	r0, r8
 8004868:	f7ff fee4 	bl	8004634 <_printf_common>
 800486c:	3001      	adds	r0, #1
 800486e:	d14a      	bne.n	8004906 <_printf_i+0x1f6>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	b004      	add	sp, #16
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f043 0320 	orr.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	4833      	ldr	r0, [pc, #204]	; (8004950 <_printf_i+0x240>)
 8004884:	2778      	movs	r7, #120	; 0x78
 8004886:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	6829      	ldr	r1, [r5, #0]
 800488e:	061f      	lsls	r7, r3, #24
 8004890:	f851 6b04 	ldr.w	r6, [r1], #4
 8004894:	d402      	bmi.n	800489c <_printf_i+0x18c>
 8004896:	065f      	lsls	r7, r3, #25
 8004898:	bf48      	it	mi
 800489a:	b2b6      	uxthmi	r6, r6
 800489c:	07df      	lsls	r7, r3, #31
 800489e:	bf48      	it	mi
 80048a0:	f043 0320 	orrmi.w	r3, r3, #32
 80048a4:	6029      	str	r1, [r5, #0]
 80048a6:	bf48      	it	mi
 80048a8:	6023      	strmi	r3, [r4, #0]
 80048aa:	b91e      	cbnz	r6, 80048b4 <_printf_i+0x1a4>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	f023 0320 	bic.w	r3, r3, #32
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	2310      	movs	r3, #16
 80048b6:	e7a7      	b.n	8004808 <_printf_i+0xf8>
 80048b8:	4824      	ldr	r0, [pc, #144]	; (800494c <_printf_i+0x23c>)
 80048ba:	e7e4      	b.n	8004886 <_printf_i+0x176>
 80048bc:	4615      	mov	r5, r2
 80048be:	e7bd      	b.n	800483c <_printf_i+0x12c>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	6826      	ldr	r6, [r4, #0]
 80048c4:	6961      	ldr	r1, [r4, #20]
 80048c6:	1d18      	adds	r0, r3, #4
 80048c8:	6028      	str	r0, [r5, #0]
 80048ca:	0635      	lsls	r5, r6, #24
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	d501      	bpl.n	80048d4 <_printf_i+0x1c4>
 80048d0:	6019      	str	r1, [r3, #0]
 80048d2:	e002      	b.n	80048da <_printf_i+0x1ca>
 80048d4:	0670      	lsls	r0, r6, #25
 80048d6:	d5fb      	bpl.n	80048d0 <_printf_i+0x1c0>
 80048d8:	8019      	strh	r1, [r3, #0]
 80048da:	2300      	movs	r3, #0
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	4615      	mov	r5, r2
 80048e0:	e7bc      	b.n	800485c <_printf_i+0x14c>
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	602a      	str	r2, [r5, #0]
 80048e8:	681d      	ldr	r5, [r3, #0]
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	2100      	movs	r1, #0
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7fb fca6 	bl	8000240 <memchr>
 80048f4:	b108      	cbz	r0, 80048fa <_printf_i+0x1ea>
 80048f6:	1b40      	subs	r0, r0, r5
 80048f8:	6060      	str	r0, [r4, #4]
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	6123      	str	r3, [r4, #16]
 80048fe:	2300      	movs	r3, #0
 8004900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004904:	e7aa      	b.n	800485c <_printf_i+0x14c>
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	462a      	mov	r2, r5
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d0ad      	beq.n	8004870 <_printf_i+0x160>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	079b      	lsls	r3, r3, #30
 8004918:	d413      	bmi.n	8004942 <_printf_i+0x232>
 800491a:	68e0      	ldr	r0, [r4, #12]
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	4298      	cmp	r0, r3
 8004920:	bfb8      	it	lt
 8004922:	4618      	movlt	r0, r3
 8004924:	e7a6      	b.n	8004874 <_printf_i+0x164>
 8004926:	2301      	movs	r3, #1
 8004928:	4632      	mov	r2, r6
 800492a:	4649      	mov	r1, r9
 800492c:	4640      	mov	r0, r8
 800492e:	47d0      	blx	sl
 8004930:	3001      	adds	r0, #1
 8004932:	d09d      	beq.n	8004870 <_printf_i+0x160>
 8004934:	3501      	adds	r5, #1
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	9903      	ldr	r1, [sp, #12]
 800493a:	1a5b      	subs	r3, r3, r1
 800493c:	42ab      	cmp	r3, r5
 800493e:	dcf2      	bgt.n	8004926 <_printf_i+0x216>
 8004940:	e7eb      	b.n	800491a <_printf_i+0x20a>
 8004942:	2500      	movs	r5, #0
 8004944:	f104 0619 	add.w	r6, r4, #25
 8004948:	e7f5      	b.n	8004936 <_printf_i+0x226>
 800494a:	bf00      	nop
 800494c:	08009442 	.word	0x08009442
 8004950:	08009453 	.word	0x08009453

08004954 <_scanf_float>:
 8004954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	b087      	sub	sp, #28
 800495a:	4617      	mov	r7, r2
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	688b      	ldr	r3, [r1, #8]
 8004960:	1e5a      	subs	r2, r3, #1
 8004962:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004966:	bf83      	ittte	hi
 8004968:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800496c:	195b      	addhi	r3, r3, r5
 800496e:	9302      	strhi	r3, [sp, #8]
 8004970:	2300      	movls	r3, #0
 8004972:	bf86      	itte	hi
 8004974:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004978:	608b      	strhi	r3, [r1, #8]
 800497a:	9302      	strls	r3, [sp, #8]
 800497c:	680b      	ldr	r3, [r1, #0]
 800497e:	468b      	mov	fp, r1
 8004980:	2500      	movs	r5, #0
 8004982:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004986:	f84b 3b1c 	str.w	r3, [fp], #28
 800498a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800498e:	4680      	mov	r8, r0
 8004990:	460c      	mov	r4, r1
 8004992:	465e      	mov	r6, fp
 8004994:	46aa      	mov	sl, r5
 8004996:	46a9      	mov	r9, r5
 8004998:	9501      	str	r5, [sp, #4]
 800499a:	68a2      	ldr	r2, [r4, #8]
 800499c:	b152      	cbz	r2, 80049b4 <_scanf_float+0x60>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b4e      	cmp	r3, #78	; 0x4e
 80049a4:	d864      	bhi.n	8004a70 <_scanf_float+0x11c>
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d83c      	bhi.n	8004a24 <_scanf_float+0xd0>
 80049aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80049ae:	b2c8      	uxtb	r0, r1
 80049b0:	280e      	cmp	r0, #14
 80049b2:	d93a      	bls.n	8004a2a <_scanf_float+0xd6>
 80049b4:	f1b9 0f00 	cmp.w	r9, #0
 80049b8:	d003      	beq.n	80049c2 <_scanf_float+0x6e>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049c6:	f1ba 0f01 	cmp.w	sl, #1
 80049ca:	f200 8113 	bhi.w	8004bf4 <_scanf_float+0x2a0>
 80049ce:	455e      	cmp	r6, fp
 80049d0:	f200 8105 	bhi.w	8004bde <_scanf_float+0x28a>
 80049d4:	2501      	movs	r5, #1
 80049d6:	4628      	mov	r0, r5
 80049d8:	b007      	add	sp, #28
 80049da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049e2:	2a0d      	cmp	r2, #13
 80049e4:	d8e6      	bhi.n	80049b4 <_scanf_float+0x60>
 80049e6:	a101      	add	r1, pc, #4	; (adr r1, 80049ec <_scanf_float+0x98>)
 80049e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049ec:	08004b2b 	.word	0x08004b2b
 80049f0:	080049b5 	.word	0x080049b5
 80049f4:	080049b5 	.word	0x080049b5
 80049f8:	080049b5 	.word	0x080049b5
 80049fc:	08004b8b 	.word	0x08004b8b
 8004a00:	08004b63 	.word	0x08004b63
 8004a04:	080049b5 	.word	0x080049b5
 8004a08:	080049b5 	.word	0x080049b5
 8004a0c:	08004b39 	.word	0x08004b39
 8004a10:	080049b5 	.word	0x080049b5
 8004a14:	080049b5 	.word	0x080049b5
 8004a18:	080049b5 	.word	0x080049b5
 8004a1c:	080049b5 	.word	0x080049b5
 8004a20:	08004af1 	.word	0x08004af1
 8004a24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a28:	e7db      	b.n	80049e2 <_scanf_float+0x8e>
 8004a2a:	290e      	cmp	r1, #14
 8004a2c:	d8c2      	bhi.n	80049b4 <_scanf_float+0x60>
 8004a2e:	a001      	add	r0, pc, #4	; (adr r0, 8004a34 <_scanf_float+0xe0>)
 8004a30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a34:	08004ae3 	.word	0x08004ae3
 8004a38:	080049b5 	.word	0x080049b5
 8004a3c:	08004ae3 	.word	0x08004ae3
 8004a40:	08004b77 	.word	0x08004b77
 8004a44:	080049b5 	.word	0x080049b5
 8004a48:	08004a91 	.word	0x08004a91
 8004a4c:	08004acd 	.word	0x08004acd
 8004a50:	08004acd 	.word	0x08004acd
 8004a54:	08004acd 	.word	0x08004acd
 8004a58:	08004acd 	.word	0x08004acd
 8004a5c:	08004acd 	.word	0x08004acd
 8004a60:	08004acd 	.word	0x08004acd
 8004a64:	08004acd 	.word	0x08004acd
 8004a68:	08004acd 	.word	0x08004acd
 8004a6c:	08004acd 	.word	0x08004acd
 8004a70:	2b6e      	cmp	r3, #110	; 0x6e
 8004a72:	d809      	bhi.n	8004a88 <_scanf_float+0x134>
 8004a74:	2b60      	cmp	r3, #96	; 0x60
 8004a76:	d8b2      	bhi.n	80049de <_scanf_float+0x8a>
 8004a78:	2b54      	cmp	r3, #84	; 0x54
 8004a7a:	d077      	beq.n	8004b6c <_scanf_float+0x218>
 8004a7c:	2b59      	cmp	r3, #89	; 0x59
 8004a7e:	d199      	bne.n	80049b4 <_scanf_float+0x60>
 8004a80:	2d07      	cmp	r5, #7
 8004a82:	d197      	bne.n	80049b4 <_scanf_float+0x60>
 8004a84:	2508      	movs	r5, #8
 8004a86:	e029      	b.n	8004adc <_scanf_float+0x188>
 8004a88:	2b74      	cmp	r3, #116	; 0x74
 8004a8a:	d06f      	beq.n	8004b6c <_scanf_float+0x218>
 8004a8c:	2b79      	cmp	r3, #121	; 0x79
 8004a8e:	e7f6      	b.n	8004a7e <_scanf_float+0x12a>
 8004a90:	6821      	ldr	r1, [r4, #0]
 8004a92:	05c8      	lsls	r0, r1, #23
 8004a94:	d51a      	bpl.n	8004acc <_scanf_float+0x178>
 8004a96:	9b02      	ldr	r3, [sp, #8]
 8004a98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a9c:	6021      	str	r1, [r4, #0]
 8004a9e:	f109 0901 	add.w	r9, r9, #1
 8004aa2:	b11b      	cbz	r3, 8004aac <_scanf_float+0x158>
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	3201      	adds	r2, #1
 8004aa8:	9302      	str	r3, [sp, #8]
 8004aaa:	60a2      	str	r2, [r4, #8]
 8004aac:	68a3      	ldr	r3, [r4, #8]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	60a3      	str	r3, [r4, #8]
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	f340 8084 	ble.w	8004bcc <_scanf_float+0x278>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	e766      	b.n	800499a <_scanf_float+0x46>
 8004acc:	eb1a 0f05 	cmn.w	sl, r5
 8004ad0:	f47f af70 	bne.w	80049b4 <_scanf_float+0x60>
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	f806 3b01 	strb.w	r3, [r6], #1
 8004ae0:	e7e4      	b.n	8004aac <_scanf_float+0x158>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	0610      	lsls	r0, r2, #24
 8004ae6:	f57f af65 	bpl.w	80049b4 <_scanf_float+0x60>
 8004aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aee:	e7f4      	b.n	8004ada <_scanf_float+0x186>
 8004af0:	f1ba 0f00 	cmp.w	sl, #0
 8004af4:	d10e      	bne.n	8004b14 <_scanf_float+0x1c0>
 8004af6:	f1b9 0f00 	cmp.w	r9, #0
 8004afa:	d10e      	bne.n	8004b1a <_scanf_float+0x1c6>
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b06:	d108      	bne.n	8004b1a <_scanf_float+0x1c6>
 8004b08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b0c:	6022      	str	r2, [r4, #0]
 8004b0e:	f04f 0a01 	mov.w	sl, #1
 8004b12:	e7e3      	b.n	8004adc <_scanf_float+0x188>
 8004b14:	f1ba 0f02 	cmp.w	sl, #2
 8004b18:	d055      	beq.n	8004bc6 <_scanf_float+0x272>
 8004b1a:	2d01      	cmp	r5, #1
 8004b1c:	d002      	beq.n	8004b24 <_scanf_float+0x1d0>
 8004b1e:	2d04      	cmp	r5, #4
 8004b20:	f47f af48 	bne.w	80049b4 <_scanf_float+0x60>
 8004b24:	3501      	adds	r5, #1
 8004b26:	b2ed      	uxtb	r5, r5
 8004b28:	e7d8      	b.n	8004adc <_scanf_float+0x188>
 8004b2a:	f1ba 0f01 	cmp.w	sl, #1
 8004b2e:	f47f af41 	bne.w	80049b4 <_scanf_float+0x60>
 8004b32:	f04f 0a02 	mov.w	sl, #2
 8004b36:	e7d1      	b.n	8004adc <_scanf_float+0x188>
 8004b38:	b97d      	cbnz	r5, 8004b5a <_scanf_float+0x206>
 8004b3a:	f1b9 0f00 	cmp.w	r9, #0
 8004b3e:	f47f af3c 	bne.w	80049ba <_scanf_float+0x66>
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b4c:	f47f af39 	bne.w	80049c2 <_scanf_float+0x6e>
 8004b50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	2501      	movs	r5, #1
 8004b58:	e7c0      	b.n	8004adc <_scanf_float+0x188>
 8004b5a:	2d03      	cmp	r5, #3
 8004b5c:	d0e2      	beq.n	8004b24 <_scanf_float+0x1d0>
 8004b5e:	2d05      	cmp	r5, #5
 8004b60:	e7de      	b.n	8004b20 <_scanf_float+0x1cc>
 8004b62:	2d02      	cmp	r5, #2
 8004b64:	f47f af26 	bne.w	80049b4 <_scanf_float+0x60>
 8004b68:	2503      	movs	r5, #3
 8004b6a:	e7b7      	b.n	8004adc <_scanf_float+0x188>
 8004b6c:	2d06      	cmp	r5, #6
 8004b6e:	f47f af21 	bne.w	80049b4 <_scanf_float+0x60>
 8004b72:	2507      	movs	r5, #7
 8004b74:	e7b2      	b.n	8004adc <_scanf_float+0x188>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	0591      	lsls	r1, r2, #22
 8004b7a:	f57f af1b 	bpl.w	80049b4 <_scanf_float+0x60>
 8004b7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b88:	e7a8      	b.n	8004adc <_scanf_float+0x188>
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b94:	d006      	beq.n	8004ba4 <_scanf_float+0x250>
 8004b96:	0550      	lsls	r0, r2, #21
 8004b98:	f57f af0c 	bpl.w	80049b4 <_scanf_float+0x60>
 8004b9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ba0:	f43f af0f 	beq.w	80049c2 <_scanf_float+0x6e>
 8004ba4:	0591      	lsls	r1, r2, #22
 8004ba6:	bf58      	it	pl
 8004ba8:	9901      	ldrpl	r1, [sp, #4]
 8004baa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bae:	bf58      	it	pl
 8004bb0:	eba9 0101 	subpl.w	r1, r9, r1
 8004bb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004bb8:	bf58      	it	pl
 8004bba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bbe:	6022      	str	r2, [r4, #0]
 8004bc0:	f04f 0900 	mov.w	r9, #0
 8004bc4:	e78a      	b.n	8004adc <_scanf_float+0x188>
 8004bc6:	f04f 0a03 	mov.w	sl, #3
 8004bca:	e787      	b.n	8004adc <_scanf_float+0x188>
 8004bcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	4798      	blx	r3
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f43f aedf 	beq.w	800499a <_scanf_float+0x46>
 8004bdc:	e6ea      	b.n	80049b4 <_scanf_float+0x60>
 8004bde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004be2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004be6:	463a      	mov	r2, r7
 8004be8:	4640      	mov	r0, r8
 8004bea:	4798      	blx	r3
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	e6ec      	b.n	80049ce <_scanf_float+0x7a>
 8004bf4:	1e6b      	subs	r3, r5, #1
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d825      	bhi.n	8004c46 <_scanf_float+0x2f2>
 8004bfa:	2d02      	cmp	r5, #2
 8004bfc:	d836      	bhi.n	8004c6c <_scanf_float+0x318>
 8004bfe:	455e      	cmp	r6, fp
 8004c00:	f67f aee8 	bls.w	80049d4 <_scanf_float+0x80>
 8004c04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	4640      	mov	r0, r8
 8004c10:	4798      	blx	r3
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	e7f1      	b.n	8004bfe <_scanf_float+0x2aa>
 8004c1a:	9802      	ldr	r0, [sp, #8]
 8004c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c24:	9002      	str	r0, [sp, #8]
 8004c26:	463a      	mov	r2, r7
 8004c28:	4640      	mov	r0, r8
 8004c2a:	4798      	blx	r3
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c36:	fa5f fa8a 	uxtb.w	sl, sl
 8004c3a:	f1ba 0f02 	cmp.w	sl, #2
 8004c3e:	d1ec      	bne.n	8004c1a <_scanf_float+0x2c6>
 8004c40:	3d03      	subs	r5, #3
 8004c42:	b2ed      	uxtb	r5, r5
 8004c44:	1b76      	subs	r6, r6, r5
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	05da      	lsls	r2, r3, #23
 8004c4a:	d52f      	bpl.n	8004cac <_scanf_float+0x358>
 8004c4c:	055b      	lsls	r3, r3, #21
 8004c4e:	d510      	bpl.n	8004c72 <_scanf_float+0x31e>
 8004c50:	455e      	cmp	r6, fp
 8004c52:	f67f aebf 	bls.w	80049d4 <_scanf_float+0x80>
 8004c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c5e:	463a      	mov	r2, r7
 8004c60:	4640      	mov	r0, r8
 8004c62:	4798      	blx	r3
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	e7f1      	b.n	8004c50 <_scanf_float+0x2fc>
 8004c6c:	46aa      	mov	sl, r5
 8004c6e:	9602      	str	r6, [sp, #8]
 8004c70:	e7df      	b.n	8004c32 <_scanf_float+0x2de>
 8004c72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	2965      	cmp	r1, #101	; 0x65
 8004c7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	d00c      	beq.n	8004ca0 <_scanf_float+0x34c>
 8004c86:	2945      	cmp	r1, #69	; 0x45
 8004c88:	d00a      	beq.n	8004ca0 <_scanf_float+0x34c>
 8004c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4640      	mov	r0, r8
 8004c92:	4798      	blx	r3
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	1eb5      	subs	r5, r6, #2
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	4798      	blx	r3
 8004caa:	462e      	mov	r6, r5
 8004cac:	6825      	ldr	r5, [r4, #0]
 8004cae:	f015 0510 	ands.w	r5, r5, #16
 8004cb2:	d14d      	bne.n	8004d50 <_scanf_float+0x3fc>
 8004cb4:	7035      	strb	r5, [r6, #0]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc0:	d11a      	bne.n	8004cf8 <_scanf_float+0x3a4>
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	454b      	cmp	r3, r9
 8004cc6:	eba3 0209 	sub.w	r2, r3, r9
 8004cca:	d122      	bne.n	8004d12 <_scanf_float+0x3be>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4659      	mov	r1, fp
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	f002 fb5b 	bl	800738c <_strtod_r>
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	6821      	ldr	r1, [r4, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f011 0f02 	tst.w	r1, #2
 8004ce0:	f103 0204 	add.w	r2, r3, #4
 8004ce4:	d020      	beq.n	8004d28 <_scanf_float+0x3d4>
 8004ce6:	9903      	ldr	r1, [sp, #12]
 8004ce8:	600a      	str	r2, [r1, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	ed83 0b00 	vstr	d0, [r3]
 8004cf0:	68e3      	ldr	r3, [r4, #12]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60e3      	str	r3, [r4, #12]
 8004cf6:	e66e      	b.n	80049d6 <_scanf_float+0x82>
 8004cf8:	9b04      	ldr	r3, [sp, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0e6      	beq.n	8004ccc <_scanf_float+0x378>
 8004cfe:	9905      	ldr	r1, [sp, #20]
 8004d00:	230a      	movs	r3, #10
 8004d02:	462a      	mov	r2, r5
 8004d04:	3101      	adds	r1, #1
 8004d06:	4640      	mov	r0, r8
 8004d08:	f002 fbc8 	bl	800749c <_strtol_r>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	9e05      	ldr	r6, [sp, #20]
 8004d10:	1ac2      	subs	r2, r0, r3
 8004d12:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d16:	429e      	cmp	r6, r3
 8004d18:	bf28      	it	cs
 8004d1a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d1e:	490d      	ldr	r1, [pc, #52]	; (8004d54 <_scanf_float+0x400>)
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 f8dd 	bl	8004ee0 <siprintf>
 8004d26:	e7d1      	b.n	8004ccc <_scanf_float+0x378>
 8004d28:	f011 0f04 	tst.w	r1, #4
 8004d2c:	9903      	ldr	r1, [sp, #12]
 8004d2e:	600a      	str	r2, [r1, #0]
 8004d30:	d1db      	bne.n	8004cea <_scanf_float+0x396>
 8004d32:	eeb4 0b40 	vcmp.f64	d0, d0
 8004d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3a:	681e      	ldr	r6, [r3, #0]
 8004d3c:	d705      	bvc.n	8004d4a <_scanf_float+0x3f6>
 8004d3e:	4806      	ldr	r0, [pc, #24]	; (8004d58 <_scanf_float+0x404>)
 8004d40:	f000 f9b2 	bl	80050a8 <nanf>
 8004d44:	ed86 0a00 	vstr	s0, [r6]
 8004d48:	e7d2      	b.n	8004cf0 <_scanf_float+0x39c>
 8004d4a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004d4e:	e7f9      	b.n	8004d44 <_scanf_float+0x3f0>
 8004d50:	2500      	movs	r5, #0
 8004d52:	e640      	b.n	80049d6 <_scanf_float+0x82>
 8004d54:	08009464 	.word	0x08009464
 8004d58:	080097f5 	.word	0x080097f5

08004d5c <std>:
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	4604      	mov	r4, r0
 8004d62:	e9c0 3300 	strd	r3, r3, [r0]
 8004d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d6a:	6083      	str	r3, [r0, #8]
 8004d6c:	8181      	strh	r1, [r0, #12]
 8004d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d70:	81c2      	strh	r2, [r0, #14]
 8004d72:	6183      	str	r3, [r0, #24]
 8004d74:	4619      	mov	r1, r3
 8004d76:	2208      	movs	r2, #8
 8004d78:	305c      	adds	r0, #92	; 0x5c
 8004d7a:	f000 f914 	bl	8004fa6 <memset>
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <std+0x58>)
 8004d80:	6263      	str	r3, [r4, #36]	; 0x24
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <std+0x5c>)
 8004d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <std+0x60>)
 8004d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <std+0x64>)
 8004d8c:	6323      	str	r3, [r4, #48]	; 0x30
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <std+0x68>)
 8004d90:	6224      	str	r4, [r4, #32]
 8004d92:	429c      	cmp	r4, r3
 8004d94:	d006      	beq.n	8004da4 <std+0x48>
 8004d96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d9a:	4294      	cmp	r4, r2
 8004d9c:	d002      	beq.n	8004da4 <std+0x48>
 8004d9e:	33d0      	adds	r3, #208	; 0xd0
 8004da0:	429c      	cmp	r4, r3
 8004da2:	d105      	bne.n	8004db0 <std+0x54>
 8004da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dac:	f000 b978 	b.w	80050a0 <__retarget_lock_init_recursive>
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	bf00      	nop
 8004db4:	08004f21 	.word	0x08004f21
 8004db8:	08004f43 	.word	0x08004f43
 8004dbc:	08004f7b 	.word	0x08004f7b
 8004dc0:	08004f9f 	.word	0x08004f9f
 8004dc4:	20000774 	.word	0x20000774

08004dc8 <stdio_exit_handler>:
 8004dc8:	4a02      	ldr	r2, [pc, #8]	; (8004dd4 <stdio_exit_handler+0xc>)
 8004dca:	4903      	ldr	r1, [pc, #12]	; (8004dd8 <stdio_exit_handler+0x10>)
 8004dcc:	4803      	ldr	r0, [pc, #12]	; (8004ddc <stdio_exit_handler+0x14>)
 8004dce:	f000 b869 	b.w	8004ea4 <_fwalk_sglue>
 8004dd2:	bf00      	nop
 8004dd4:	20000014 	.word	0x20000014
 8004dd8:	0800785d 	.word	0x0800785d
 8004ddc:	20000020 	.word	0x20000020

08004de0 <cleanup_stdio>:
 8004de0:	6841      	ldr	r1, [r0, #4]
 8004de2:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <cleanup_stdio+0x34>)
 8004de4:	4299      	cmp	r1, r3
 8004de6:	b510      	push	{r4, lr}
 8004de8:	4604      	mov	r4, r0
 8004dea:	d001      	beq.n	8004df0 <cleanup_stdio+0x10>
 8004dec:	f002 fd36 	bl	800785c <_fflush_r>
 8004df0:	68a1      	ldr	r1, [r4, #8]
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <cleanup_stdio+0x38>)
 8004df4:	4299      	cmp	r1, r3
 8004df6:	d002      	beq.n	8004dfe <cleanup_stdio+0x1e>
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f002 fd2f 	bl	800785c <_fflush_r>
 8004dfe:	68e1      	ldr	r1, [r4, #12]
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <cleanup_stdio+0x3c>)
 8004e02:	4299      	cmp	r1, r3
 8004e04:	d004      	beq.n	8004e10 <cleanup_stdio+0x30>
 8004e06:	4620      	mov	r0, r4
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0c:	f002 bd26 	b.w	800785c <_fflush_r>
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	bf00      	nop
 8004e14:	20000774 	.word	0x20000774
 8004e18:	200007dc 	.word	0x200007dc
 8004e1c:	20000844 	.word	0x20000844

08004e20 <global_stdio_init.part.0>:
 8004e20:	b510      	push	{r4, lr}
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <global_stdio_init.part.0+0x30>)
 8004e24:	4c0b      	ldr	r4, [pc, #44]	; (8004e54 <global_stdio_init.part.0+0x34>)
 8004e26:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <global_stdio_init.part.0+0x38>)
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2104      	movs	r1, #4
 8004e30:	f7ff ff94 	bl	8004d5c <std>
 8004e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2109      	movs	r1, #9
 8004e3c:	f7ff ff8e 	bl	8004d5c <std>
 8004e40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e44:	2202      	movs	r2, #2
 8004e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e4a:	2112      	movs	r1, #18
 8004e4c:	f7ff bf86 	b.w	8004d5c <std>
 8004e50:	200008ac 	.word	0x200008ac
 8004e54:	20000774 	.word	0x20000774
 8004e58:	08004dc9 	.word	0x08004dc9

08004e5c <__sfp_lock_acquire>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__sfp_lock_acquire+0x8>)
 8004e5e:	f000 b920 	b.w	80050a2 <__retarget_lock_acquire_recursive>
 8004e62:	bf00      	nop
 8004e64:	200008b5 	.word	0x200008b5

08004e68 <__sfp_lock_release>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__sfp_lock_release+0x8>)
 8004e6a:	f000 b91b 	b.w	80050a4 <__retarget_lock_release_recursive>
 8004e6e:	bf00      	nop
 8004e70:	200008b5 	.word	0x200008b5

08004e74 <__sinit>:
 8004e74:	b510      	push	{r4, lr}
 8004e76:	4604      	mov	r4, r0
 8004e78:	f7ff fff0 	bl	8004e5c <__sfp_lock_acquire>
 8004e7c:	6a23      	ldr	r3, [r4, #32]
 8004e7e:	b11b      	cbz	r3, 8004e88 <__sinit+0x14>
 8004e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e84:	f7ff bff0 	b.w	8004e68 <__sfp_lock_release>
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <__sinit+0x28>)
 8004e8a:	6223      	str	r3, [r4, #32]
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <__sinit+0x2c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f5      	bne.n	8004e80 <__sinit+0xc>
 8004e94:	f7ff ffc4 	bl	8004e20 <global_stdio_init.part.0>
 8004e98:	e7f2      	b.n	8004e80 <__sinit+0xc>
 8004e9a:	bf00      	nop
 8004e9c:	08004de1 	.word	0x08004de1
 8004ea0:	200008ac 	.word	0x200008ac

08004ea4 <_fwalk_sglue>:
 8004ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	4688      	mov	r8, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8004eb8:	d505      	bpl.n	8004ec6 <_fwalk_sglue+0x22>
 8004eba:	6824      	ldr	r4, [r4, #0]
 8004ebc:	2c00      	cmp	r4, #0
 8004ebe:	d1f7      	bne.n	8004eb0 <_fwalk_sglue+0xc>
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec6:	89ab      	ldrh	r3, [r5, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d907      	bls.n	8004edc <_fwalk_sglue+0x38>
 8004ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	d003      	beq.n	8004edc <_fwalk_sglue+0x38>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	47c0      	blx	r8
 8004eda:	4306      	orrs	r6, r0
 8004edc:	3568      	adds	r5, #104	; 0x68
 8004ede:	e7e9      	b.n	8004eb4 <_fwalk_sglue+0x10>

08004ee0 <siprintf>:
 8004ee0:	b40e      	push	{r1, r2, r3}
 8004ee2:	b500      	push	{lr}
 8004ee4:	b09c      	sub	sp, #112	; 0x70
 8004ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ee8:	9002      	str	r0, [sp, #8]
 8004eea:	9006      	str	r0, [sp, #24]
 8004eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ef0:	4809      	ldr	r0, [pc, #36]	; (8004f18 <siprintf+0x38>)
 8004ef2:	9107      	str	r1, [sp, #28]
 8004ef4:	9104      	str	r1, [sp, #16]
 8004ef6:	4909      	ldr	r1, [pc, #36]	; (8004f1c <siprintf+0x3c>)
 8004ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004efc:	9105      	str	r1, [sp, #20]
 8004efe:	6800      	ldr	r0, [r0, #0]
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	a902      	add	r1, sp, #8
 8004f04:	f002 fb26 	bl	8007554 <_svfiprintf_r>
 8004f08:	9b02      	ldr	r3, [sp, #8]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	b01c      	add	sp, #112	; 0x70
 8004f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f14:	b003      	add	sp, #12
 8004f16:	4770      	bx	lr
 8004f18:	2000006c 	.word	0x2000006c
 8004f1c:	ffff0208 	.word	0xffff0208

08004f20 <__sread>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	460c      	mov	r4, r1
 8004f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f28:	f000 f86c 	bl	8005004 <_read_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	bfab      	itete	ge
 8004f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f32:	89a3      	ldrhlt	r3, [r4, #12]
 8004f34:	181b      	addge	r3, r3, r0
 8004f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f3a:	bfac      	ite	ge
 8004f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f3e:	81a3      	strhlt	r3, [r4, #12]
 8004f40:	bd10      	pop	{r4, pc}

08004f42 <__swrite>:
 8004f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f46:	461f      	mov	r7, r3
 8004f48:	898b      	ldrh	r3, [r1, #12]
 8004f4a:	05db      	lsls	r3, r3, #23
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	4616      	mov	r6, r2
 8004f52:	d505      	bpl.n	8004f60 <__swrite+0x1e>
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	2302      	movs	r3, #2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f000 f840 	bl	8004fe0 <_lseek_r>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	463b      	mov	r3, r7
 8004f70:	4628      	mov	r0, r5
 8004f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	f000 b857 	b.w	8005028 <_write_r>

08004f7a <__sseek>:
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f82:	f000 f82d 	bl	8004fe0 <_lseek_r>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	bf15      	itete	ne
 8004f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f96:	81a3      	strheq	r3, [r4, #12]
 8004f98:	bf18      	it	ne
 8004f9a:	81a3      	strhne	r3, [r4, #12]
 8004f9c:	bd10      	pop	{r4, pc}

08004f9e <__sclose>:
 8004f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa2:	f000 b80d 	b.w	8004fc0 <_close_r>

08004fa6 <memset>:
 8004fa6:	4402      	add	r2, r0
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d100      	bne.n	8004fb0 <memset+0xa>
 8004fae:	4770      	bx	lr
 8004fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb4:	e7f9      	b.n	8004faa <memset+0x4>
	...

08004fb8 <_localeconv_r>:
 8004fb8:	4800      	ldr	r0, [pc, #0]	; (8004fbc <_localeconv_r+0x4>)
 8004fba:	4770      	bx	lr
 8004fbc:	20000160 	.word	0x20000160

08004fc0 <_close_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d06      	ldr	r5, [pc, #24]	; (8004fdc <_close_r+0x1c>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	4608      	mov	r0, r1
 8004fca:	602b      	str	r3, [r5, #0]
 8004fcc:	f7fc fb1b 	bl	8001606 <_close>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_close_r+0x1a>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_close_r+0x1a>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	200008b0 	.word	0x200008b0

08004fe0 <_lseek_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d07      	ldr	r5, [pc, #28]	; (8005000 <_lseek_r+0x20>)
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	4608      	mov	r0, r1
 8004fe8:	4611      	mov	r1, r2
 8004fea:	2200      	movs	r2, #0
 8004fec:	602a      	str	r2, [r5, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f7fc fb30 	bl	8001654 <_lseek>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_lseek_r+0x1e>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_lseek_r+0x1e>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	200008b0 	.word	0x200008b0

08005004 <_read_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_read_r+0x20>)
 8005008:	4604      	mov	r4, r0
 800500a:	4608      	mov	r0, r1
 800500c:	4611      	mov	r1, r2
 800500e:	2200      	movs	r2, #0
 8005010:	602a      	str	r2, [r5, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	f7fc fabe 	bl	8001594 <_read>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_read_r+0x1e>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_read_r+0x1e>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	200008b0 	.word	0x200008b0

08005028 <_write_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d07      	ldr	r5, [pc, #28]	; (8005048 <_write_r+0x20>)
 800502c:	4604      	mov	r4, r0
 800502e:	4608      	mov	r0, r1
 8005030:	4611      	mov	r1, r2
 8005032:	2200      	movs	r2, #0
 8005034:	602a      	str	r2, [r5, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	f7fc fac9 	bl	80015ce <_write>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_write_r+0x1e>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_write_r+0x1e>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	200008b0 	.word	0x200008b0

0800504c <__errno>:
 800504c:	4b01      	ldr	r3, [pc, #4]	; (8005054 <__errno+0x8>)
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	2000006c 	.word	0x2000006c

08005058 <__libc_init_array>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	4d0d      	ldr	r5, [pc, #52]	; (8005090 <__libc_init_array+0x38>)
 800505c:	4c0d      	ldr	r4, [pc, #52]	; (8005094 <__libc_init_array+0x3c>)
 800505e:	1b64      	subs	r4, r4, r5
 8005060:	10a4      	asrs	r4, r4, #2
 8005062:	2600      	movs	r6, #0
 8005064:	42a6      	cmp	r6, r4
 8005066:	d109      	bne.n	800507c <__libc_init_array+0x24>
 8005068:	4d0b      	ldr	r5, [pc, #44]	; (8005098 <__libc_init_array+0x40>)
 800506a:	4c0c      	ldr	r4, [pc, #48]	; (800509c <__libc_init_array+0x44>)
 800506c:	f003 fb0c 	bl	8008688 <_init>
 8005070:	1b64      	subs	r4, r4, r5
 8005072:	10a4      	asrs	r4, r4, #2
 8005074:	2600      	movs	r6, #0
 8005076:	42a6      	cmp	r6, r4
 8005078:	d105      	bne.n	8005086 <__libc_init_array+0x2e>
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005080:	4798      	blx	r3
 8005082:	3601      	adds	r6, #1
 8005084:	e7ee      	b.n	8005064 <__libc_init_array+0xc>
 8005086:	f855 3b04 	ldr.w	r3, [r5], #4
 800508a:	4798      	blx	r3
 800508c:	3601      	adds	r6, #1
 800508e:	e7f2      	b.n	8005076 <__libc_init_array+0x1e>
 8005090:	08009860 	.word	0x08009860
 8005094:	08009860 	.word	0x08009860
 8005098:	08009860 	.word	0x08009860
 800509c:	08009864 	.word	0x08009864

080050a0 <__retarget_lock_init_recursive>:
 80050a0:	4770      	bx	lr

080050a2 <__retarget_lock_acquire_recursive>:
 80050a2:	4770      	bx	lr

080050a4 <__retarget_lock_release_recursive>:
 80050a4:	4770      	bx	lr
	...

080050a8 <nanf>:
 80050a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80050b0 <nanf+0x8>
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	7fc00000 	.word	0x7fc00000

080050b4 <quorem>:
 80050b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b8:	6903      	ldr	r3, [r0, #16]
 80050ba:	690c      	ldr	r4, [r1, #16]
 80050bc:	42a3      	cmp	r3, r4
 80050be:	4607      	mov	r7, r0
 80050c0:	db7e      	blt.n	80051c0 <quorem+0x10c>
 80050c2:	3c01      	subs	r4, #1
 80050c4:	f101 0814 	add.w	r8, r1, #20
 80050c8:	f100 0514 	add.w	r5, r0, #20
 80050cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050da:	3301      	adds	r3, #1
 80050dc:	429a      	cmp	r2, r3
 80050de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80050e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80050ea:	d331      	bcc.n	8005150 <quorem+0x9c>
 80050ec:	f04f 0e00 	mov.w	lr, #0
 80050f0:	4640      	mov	r0, r8
 80050f2:	46ac      	mov	ip, r5
 80050f4:	46f2      	mov	sl, lr
 80050f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80050fa:	b293      	uxth	r3, r2
 80050fc:	fb06 e303 	mla	r3, r6, r3, lr
 8005100:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005104:	0c1a      	lsrs	r2, r3, #16
 8005106:	b29b      	uxth	r3, r3
 8005108:	ebaa 0303 	sub.w	r3, sl, r3
 800510c:	f8dc a000 	ldr.w	sl, [ip]
 8005110:	fa13 f38a 	uxtah	r3, r3, sl
 8005114:	fb06 220e 	mla	r2, r6, lr, r2
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	9b00      	ldr	r3, [sp, #0]
 800511c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005120:	b292      	uxth	r2, r2
 8005122:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005126:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800512a:	f8bd 3000 	ldrh.w	r3, [sp]
 800512e:	4581      	cmp	r9, r0
 8005130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005134:	f84c 3b04 	str.w	r3, [ip], #4
 8005138:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800513c:	d2db      	bcs.n	80050f6 <quorem+0x42>
 800513e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005142:	b92b      	cbnz	r3, 8005150 <quorem+0x9c>
 8005144:	9b01      	ldr	r3, [sp, #4]
 8005146:	3b04      	subs	r3, #4
 8005148:	429d      	cmp	r5, r3
 800514a:	461a      	mov	r2, r3
 800514c:	d32c      	bcc.n	80051a8 <quorem+0xf4>
 800514e:	613c      	str	r4, [r7, #16]
 8005150:	4638      	mov	r0, r7
 8005152:	f001 f96b 	bl	800642c <__mcmp>
 8005156:	2800      	cmp	r0, #0
 8005158:	db22      	blt.n	80051a0 <quorem+0xec>
 800515a:	3601      	adds	r6, #1
 800515c:	4629      	mov	r1, r5
 800515e:	2000      	movs	r0, #0
 8005160:	f858 2b04 	ldr.w	r2, [r8], #4
 8005164:	f8d1 c000 	ldr.w	ip, [r1]
 8005168:	b293      	uxth	r3, r2
 800516a:	1ac3      	subs	r3, r0, r3
 800516c:	0c12      	lsrs	r2, r2, #16
 800516e:	fa13 f38c 	uxtah	r3, r3, ip
 8005172:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005176:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800517a:	b29b      	uxth	r3, r3
 800517c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005180:	45c1      	cmp	r9, r8
 8005182:	f841 3b04 	str.w	r3, [r1], #4
 8005186:	ea4f 4022 	mov.w	r0, r2, asr #16
 800518a:	d2e9      	bcs.n	8005160 <quorem+0xac>
 800518c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005190:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005194:	b922      	cbnz	r2, 80051a0 <quorem+0xec>
 8005196:	3b04      	subs	r3, #4
 8005198:	429d      	cmp	r5, r3
 800519a:	461a      	mov	r2, r3
 800519c:	d30a      	bcc.n	80051b4 <quorem+0x100>
 800519e:	613c      	str	r4, [r7, #16]
 80051a0:	4630      	mov	r0, r6
 80051a2:	b003      	add	sp, #12
 80051a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	3b04      	subs	r3, #4
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	d1ce      	bne.n	800514e <quorem+0x9a>
 80051b0:	3c01      	subs	r4, #1
 80051b2:	e7c9      	b.n	8005148 <quorem+0x94>
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	3b04      	subs	r3, #4
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d1f0      	bne.n	800519e <quorem+0xea>
 80051bc:	3c01      	subs	r4, #1
 80051be:	e7eb      	b.n	8005198 <quorem+0xe4>
 80051c0:	2000      	movs	r0, #0
 80051c2:	e7ee      	b.n	80051a2 <quorem+0xee>
 80051c4:	0000      	movs	r0, r0
	...

080051c8 <_dtoa_r>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	ed2d 8b02 	vpush	{d8}
 80051d0:	69c5      	ldr	r5, [r0, #28]
 80051d2:	b091      	sub	sp, #68	; 0x44
 80051d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80051d8:	ec59 8b10 	vmov	r8, r9, d0
 80051dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80051de:	9106      	str	r1, [sp, #24]
 80051e0:	4606      	mov	r6, r0
 80051e2:	9208      	str	r2, [sp, #32]
 80051e4:	930c      	str	r3, [sp, #48]	; 0x30
 80051e6:	b975      	cbnz	r5, 8005206 <_dtoa_r+0x3e>
 80051e8:	2010      	movs	r0, #16
 80051ea:	f000 fda5 	bl	8005d38 <malloc>
 80051ee:	4602      	mov	r2, r0
 80051f0:	61f0      	str	r0, [r6, #28]
 80051f2:	b920      	cbnz	r0, 80051fe <_dtoa_r+0x36>
 80051f4:	4ba6      	ldr	r3, [pc, #664]	; (8005490 <_dtoa_r+0x2c8>)
 80051f6:	21ef      	movs	r1, #239	; 0xef
 80051f8:	48a6      	ldr	r0, [pc, #664]	; (8005494 <_dtoa_r+0x2cc>)
 80051fa:	f002 fba9 	bl	8007950 <__assert_func>
 80051fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005202:	6005      	str	r5, [r0, #0]
 8005204:	60c5      	str	r5, [r0, #12]
 8005206:	69f3      	ldr	r3, [r6, #28]
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	b151      	cbz	r1, 8005222 <_dtoa_r+0x5a>
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	604a      	str	r2, [r1, #4]
 8005210:	2301      	movs	r3, #1
 8005212:	4093      	lsls	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
 8005216:	4630      	mov	r0, r6
 8005218:	f000 fe82 	bl	8005f20 <_Bfree>
 800521c:	69f3      	ldr	r3, [r6, #28]
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f1b9 0300 	subs.w	r3, r9, #0
 8005226:	bfbb      	ittet	lt
 8005228:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800522c:	9303      	strlt	r3, [sp, #12]
 800522e:	2300      	movge	r3, #0
 8005230:	2201      	movlt	r2, #1
 8005232:	bfac      	ite	ge
 8005234:	6023      	strge	r3, [r4, #0]
 8005236:	6022      	strlt	r2, [r4, #0]
 8005238:	4b97      	ldr	r3, [pc, #604]	; (8005498 <_dtoa_r+0x2d0>)
 800523a:	9c03      	ldr	r4, [sp, #12]
 800523c:	43a3      	bics	r3, r4
 800523e:	d11c      	bne.n	800527a <_dtoa_r+0xb2>
 8005240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005242:	f242 730f 	movw	r3, #9999	; 0x270f
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800524c:	ea53 0308 	orrs.w	r3, r3, r8
 8005250:	f000 84fb 	beq.w	8005c4a <_dtoa_r+0xa82>
 8005254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005256:	b963      	cbnz	r3, 8005272 <_dtoa_r+0xaa>
 8005258:	4b90      	ldr	r3, [pc, #576]	; (800549c <_dtoa_r+0x2d4>)
 800525a:	e020      	b.n	800529e <_dtoa_r+0xd6>
 800525c:	4b90      	ldr	r3, [pc, #576]	; (80054a0 <_dtoa_r+0x2d8>)
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	3308      	adds	r3, #8
 8005262:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	9801      	ldr	r0, [sp, #4]
 8005268:	b011      	add	sp, #68	; 0x44
 800526a:	ecbd 8b02 	vpop	{d8}
 800526e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005272:	4b8a      	ldr	r3, [pc, #552]	; (800549c <_dtoa_r+0x2d4>)
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	3303      	adds	r3, #3
 8005278:	e7f3      	b.n	8005262 <_dtoa_r+0x9a>
 800527a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800527e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	d10c      	bne.n	80052a2 <_dtoa_r+0xda>
 8005288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800528a:	2301      	movs	r3, #1
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 84d7 	beq.w	8005c44 <_dtoa_r+0xa7c>
 8005296:	4b83      	ldr	r3, [pc, #524]	; (80054a4 <_dtoa_r+0x2dc>)
 8005298:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	e7e1      	b.n	8005266 <_dtoa_r+0x9e>
 80052a2:	aa0e      	add	r2, sp, #56	; 0x38
 80052a4:	a90f      	add	r1, sp, #60	; 0x3c
 80052a6:	4630      	mov	r0, r6
 80052a8:	eeb0 0b48 	vmov.f64	d0, d8
 80052ac:	f001 f9d4 	bl	8006658 <__d2b>
 80052b0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80052b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052b6:	4605      	mov	r5, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d046      	beq.n	800534a <_dtoa_r+0x182>
 80052bc:	eeb0 7b48 	vmov.f64	d7, d8
 80052c0:	ee18 1a90 	vmov	r1, s17
 80052c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80052c8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80052cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80052d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052d4:	2000      	movs	r0, #0
 80052d6:	ee07 1a90 	vmov	s15, r1
 80052da:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80052de:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005478 <_dtoa_r+0x2b0>
 80052e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052e6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005480 <_dtoa_r+0x2b8>
 80052ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80052ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005488 <_dtoa_r+0x2c0>
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80052fa:	eeb0 7b46 	vmov.f64	d7, d6
 80052fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005302:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005306:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800530a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530e:	ee16 ba90 	vmov	fp, s13
 8005312:	9009      	str	r0, [sp, #36]	; 0x24
 8005314:	d508      	bpl.n	8005328 <_dtoa_r+0x160>
 8005316:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800531a:	eeb4 6b47 	vcmp.f64	d6, d7
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	bf18      	it	ne
 8005324:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005328:	f1bb 0f16 	cmp.w	fp, #22
 800532c:	d82b      	bhi.n	8005386 <_dtoa_r+0x1be>
 800532e:	495e      	ldr	r1, [pc, #376]	; (80054a8 <_dtoa_r+0x2e0>)
 8005330:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005334:	ed91 7b00 	vldr	d7, [r1]
 8005338:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005340:	d501      	bpl.n	8005346 <_dtoa_r+0x17e>
 8005342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005346:	2100      	movs	r1, #0
 8005348:	e01e      	b.n	8005388 <_dtoa_r+0x1c0>
 800534a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800534c:	4413      	add	r3, r2
 800534e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005352:	2920      	cmp	r1, #32
 8005354:	bfc1      	itttt	gt
 8005356:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800535a:	408c      	lslgt	r4, r1
 800535c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005360:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005364:	bfd6      	itet	le
 8005366:	f1c1 0120 	rsble	r1, r1, #32
 800536a:	4321      	orrgt	r1, r4
 800536c:	fa08 f101 	lslle.w	r1, r8, r1
 8005370:	ee07 1a90 	vmov	s15, r1
 8005374:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005378:	3b01      	subs	r3, #1
 800537a:	ee17 1a90 	vmov	r1, s15
 800537e:	2001      	movs	r0, #1
 8005380:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005384:	e7a7      	b.n	80052d6 <_dtoa_r+0x10e>
 8005386:	2101      	movs	r1, #1
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	1e53      	subs	r3, r2, #1
 800538c:	9305      	str	r3, [sp, #20]
 800538e:	bf45      	ittet	mi
 8005390:	f1c2 0301 	rsbmi	r3, r2, #1
 8005394:	9304      	strmi	r3, [sp, #16]
 8005396:	2300      	movpl	r3, #0
 8005398:	2300      	movmi	r3, #0
 800539a:	bf4c      	ite	mi
 800539c:	9305      	strmi	r3, [sp, #20]
 800539e:	9304      	strpl	r3, [sp, #16]
 80053a0:	f1bb 0f00 	cmp.w	fp, #0
 80053a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80053a6:	db18      	blt.n	80053da <_dtoa_r+0x212>
 80053a8:	9b05      	ldr	r3, [sp, #20]
 80053aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80053ae:	445b      	add	r3, fp
 80053b0:	9305      	str	r3, [sp, #20]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9a06      	ldr	r2, [sp, #24]
 80053b6:	2a09      	cmp	r2, #9
 80053b8:	d848      	bhi.n	800544c <_dtoa_r+0x284>
 80053ba:	2a05      	cmp	r2, #5
 80053bc:	bfc4      	itt	gt
 80053be:	3a04      	subgt	r2, #4
 80053c0:	9206      	strgt	r2, [sp, #24]
 80053c2:	9a06      	ldr	r2, [sp, #24]
 80053c4:	f1a2 0202 	sub.w	r2, r2, #2
 80053c8:	bfcc      	ite	gt
 80053ca:	2400      	movgt	r4, #0
 80053cc:	2401      	movle	r4, #1
 80053ce:	2a03      	cmp	r2, #3
 80053d0:	d847      	bhi.n	8005462 <_dtoa_r+0x29a>
 80053d2:	e8df f002 	tbb	[pc, r2]
 80053d6:	2d0b      	.short	0x2d0b
 80053d8:	392b      	.short	0x392b
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	2200      	movs	r2, #0
 80053de:	eba3 030b 	sub.w	r3, r3, fp
 80053e2:	9304      	str	r3, [sp, #16]
 80053e4:	920a      	str	r2, [sp, #40]	; 0x28
 80053e6:	f1cb 0300 	rsb	r3, fp, #0
 80053ea:	e7e3      	b.n	80053b4 <_dtoa_r+0x1ec>
 80053ec:	2200      	movs	r2, #0
 80053ee:	9207      	str	r2, [sp, #28]
 80053f0:	9a08      	ldr	r2, [sp, #32]
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	dc38      	bgt.n	8005468 <_dtoa_r+0x2a0>
 80053f6:	f04f 0a01 	mov.w	sl, #1
 80053fa:	46d1      	mov	r9, sl
 80053fc:	4652      	mov	r2, sl
 80053fe:	f8cd a020 	str.w	sl, [sp, #32]
 8005402:	69f7      	ldr	r7, [r6, #28]
 8005404:	2100      	movs	r1, #0
 8005406:	2004      	movs	r0, #4
 8005408:	f100 0c14 	add.w	ip, r0, #20
 800540c:	4594      	cmp	ip, r2
 800540e:	d930      	bls.n	8005472 <_dtoa_r+0x2aa>
 8005410:	6079      	str	r1, [r7, #4]
 8005412:	4630      	mov	r0, r6
 8005414:	930d      	str	r3, [sp, #52]	; 0x34
 8005416:	f000 fd43 	bl	8005ea0 <_Balloc>
 800541a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800541c:	9001      	str	r0, [sp, #4]
 800541e:	4602      	mov	r2, r0
 8005420:	2800      	cmp	r0, #0
 8005422:	d145      	bne.n	80054b0 <_dtoa_r+0x2e8>
 8005424:	4b21      	ldr	r3, [pc, #132]	; (80054ac <_dtoa_r+0x2e4>)
 8005426:	f240 11af 	movw	r1, #431	; 0x1af
 800542a:	e6e5      	b.n	80051f8 <_dtoa_r+0x30>
 800542c:	2201      	movs	r2, #1
 800542e:	e7de      	b.n	80053ee <_dtoa_r+0x226>
 8005430:	2200      	movs	r2, #0
 8005432:	9207      	str	r2, [sp, #28]
 8005434:	9a08      	ldr	r2, [sp, #32]
 8005436:	eb0b 0a02 	add.w	sl, fp, r2
 800543a:	f10a 0901 	add.w	r9, sl, #1
 800543e:	464a      	mov	r2, r9
 8005440:	2a01      	cmp	r2, #1
 8005442:	bfb8      	it	lt
 8005444:	2201      	movlt	r2, #1
 8005446:	e7dc      	b.n	8005402 <_dtoa_r+0x23a>
 8005448:	2201      	movs	r2, #1
 800544a:	e7f2      	b.n	8005432 <_dtoa_r+0x26a>
 800544c:	2401      	movs	r4, #1
 800544e:	2200      	movs	r2, #0
 8005450:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005454:	f04f 3aff 	mov.w	sl, #4294967295
 8005458:	2100      	movs	r1, #0
 800545a:	46d1      	mov	r9, sl
 800545c:	2212      	movs	r2, #18
 800545e:	9108      	str	r1, [sp, #32]
 8005460:	e7cf      	b.n	8005402 <_dtoa_r+0x23a>
 8005462:	2201      	movs	r2, #1
 8005464:	9207      	str	r2, [sp, #28]
 8005466:	e7f5      	b.n	8005454 <_dtoa_r+0x28c>
 8005468:	f8dd a020 	ldr.w	sl, [sp, #32]
 800546c:	46d1      	mov	r9, sl
 800546e:	4652      	mov	r2, sl
 8005470:	e7c7      	b.n	8005402 <_dtoa_r+0x23a>
 8005472:	3101      	adds	r1, #1
 8005474:	0040      	lsls	r0, r0, #1
 8005476:	e7c7      	b.n	8005408 <_dtoa_r+0x240>
 8005478:	636f4361 	.word	0x636f4361
 800547c:	3fd287a7 	.word	0x3fd287a7
 8005480:	8b60c8b3 	.word	0x8b60c8b3
 8005484:	3fc68a28 	.word	0x3fc68a28
 8005488:	509f79fb 	.word	0x509f79fb
 800548c:	3fd34413 	.word	0x3fd34413
 8005490:	08009476 	.word	0x08009476
 8005494:	0800948d 	.word	0x0800948d
 8005498:	7ff00000 	.word	0x7ff00000
 800549c:	08009472 	.word	0x08009472
 80054a0:	08009469 	.word	0x08009469
 80054a4:	08009441 	.word	0x08009441
 80054a8:	08009578 	.word	0x08009578
 80054ac:	080094e5 	.word	0x080094e5
 80054b0:	69f2      	ldr	r2, [r6, #28]
 80054b2:	9901      	ldr	r1, [sp, #4]
 80054b4:	6011      	str	r1, [r2, #0]
 80054b6:	f1b9 0f0e 	cmp.w	r9, #14
 80054ba:	d86c      	bhi.n	8005596 <_dtoa_r+0x3ce>
 80054bc:	2c00      	cmp	r4, #0
 80054be:	d06a      	beq.n	8005596 <_dtoa_r+0x3ce>
 80054c0:	f1bb 0f00 	cmp.w	fp, #0
 80054c4:	f340 80a0 	ble.w	8005608 <_dtoa_r+0x440>
 80054c8:	4ac1      	ldr	r2, [pc, #772]	; (80057d0 <_dtoa_r+0x608>)
 80054ca:	f00b 010f 	and.w	r1, fp, #15
 80054ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80054d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80054d6:	ed92 7b00 	vldr	d7, [r2]
 80054da:	ea4f 122b 	mov.w	r2, fp, asr #4
 80054de:	f000 8087 	beq.w	80055f0 <_dtoa_r+0x428>
 80054e2:	49bc      	ldr	r1, [pc, #752]	; (80057d4 <_dtoa_r+0x60c>)
 80054e4:	ed91 6b08 	vldr	d6, [r1, #32]
 80054e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80054ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80054f0:	f002 020f 	and.w	r2, r2, #15
 80054f4:	2103      	movs	r1, #3
 80054f6:	48b7      	ldr	r0, [pc, #732]	; (80057d4 <_dtoa_r+0x60c>)
 80054f8:	2a00      	cmp	r2, #0
 80054fa:	d17b      	bne.n	80055f4 <_dtoa_r+0x42c>
 80054fc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005500:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005504:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800550a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800550e:	2a00      	cmp	r2, #0
 8005510:	f000 80a0 	beq.w	8005654 <_dtoa_r+0x48c>
 8005514:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005518:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	f140 8098 	bpl.w	8005654 <_dtoa_r+0x48c>
 8005524:	f1b9 0f00 	cmp.w	r9, #0
 8005528:	f000 8094 	beq.w	8005654 <_dtoa_r+0x48c>
 800552c:	f1ba 0f00 	cmp.w	sl, #0
 8005530:	dd2f      	ble.n	8005592 <_dtoa_r+0x3ca>
 8005532:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005536:	ee27 7b06 	vmul.f64	d7, d7, d6
 800553a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800553e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005542:	3101      	adds	r1, #1
 8005544:	4654      	mov	r4, sl
 8005546:	ed9d 6b02 	vldr	d6, [sp, #8]
 800554a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800554e:	ee07 1a90 	vmov	s15, r1
 8005552:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005556:	eea7 5b06 	vfma.f64	d5, d7, d6
 800555a:	ee15 7a90 	vmov	r7, s11
 800555e:	ec51 0b15 	vmov	r0, r1, d5
 8005562:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005566:	2c00      	cmp	r4, #0
 8005568:	d177      	bne.n	800565a <_dtoa_r+0x492>
 800556a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800556e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005572:	ec41 0b17 	vmov	d7, r0, r1
 8005576:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557e:	f300 826a 	bgt.w	8005a56 <_dtoa_r+0x88e>
 8005582:	eeb1 7b47 	vneg.f64	d7, d7
 8005586:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	f100 8260 	bmi.w	8005a52 <_dtoa_r+0x88a>
 8005592:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005598:	2a00      	cmp	r2, #0
 800559a:	f2c0 811d 	blt.w	80057d8 <_dtoa_r+0x610>
 800559e:	f1bb 0f0e 	cmp.w	fp, #14
 80055a2:	f300 8119 	bgt.w	80057d8 <_dtoa_r+0x610>
 80055a6:	4b8a      	ldr	r3, [pc, #552]	; (80057d0 <_dtoa_r+0x608>)
 80055a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055ac:	ed93 6b00 	vldr	d6, [r3]
 80055b0:	9b08      	ldr	r3, [sp, #32]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f280 80b7 	bge.w	8005726 <_dtoa_r+0x55e>
 80055b8:	f1b9 0f00 	cmp.w	r9, #0
 80055bc:	f300 80b3 	bgt.w	8005726 <_dtoa_r+0x55e>
 80055c0:	f040 8246 	bne.w	8005a50 <_dtoa_r+0x888>
 80055c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80055c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80055cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d8:	464c      	mov	r4, r9
 80055da:	464f      	mov	r7, r9
 80055dc:	f280 821c 	bge.w	8005a18 <_dtoa_r+0x850>
 80055e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055e4:	2331      	movs	r3, #49	; 0x31
 80055e6:	f808 3b01 	strb.w	r3, [r8], #1
 80055ea:	f10b 0b01 	add.w	fp, fp, #1
 80055ee:	e218      	b.n	8005a22 <_dtoa_r+0x85a>
 80055f0:	2102      	movs	r1, #2
 80055f2:	e780      	b.n	80054f6 <_dtoa_r+0x32e>
 80055f4:	07d4      	lsls	r4, r2, #31
 80055f6:	d504      	bpl.n	8005602 <_dtoa_r+0x43a>
 80055f8:	ed90 6b00 	vldr	d6, [r0]
 80055fc:	3101      	adds	r1, #1
 80055fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005602:	1052      	asrs	r2, r2, #1
 8005604:	3008      	adds	r0, #8
 8005606:	e777      	b.n	80054f8 <_dtoa_r+0x330>
 8005608:	d022      	beq.n	8005650 <_dtoa_r+0x488>
 800560a:	f1cb 0200 	rsb	r2, fp, #0
 800560e:	4970      	ldr	r1, [pc, #448]	; (80057d0 <_dtoa_r+0x608>)
 8005610:	f002 000f 	and.w	r0, r2, #15
 8005614:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005618:	ed91 7b00 	vldr	d7, [r1]
 800561c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005620:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005624:	486b      	ldr	r0, [pc, #428]	; (80057d4 <_dtoa_r+0x60c>)
 8005626:	1112      	asrs	r2, r2, #4
 8005628:	2400      	movs	r4, #0
 800562a:	2102      	movs	r1, #2
 800562c:	b92a      	cbnz	r2, 800563a <_dtoa_r+0x472>
 800562e:	2c00      	cmp	r4, #0
 8005630:	f43f af6a 	beq.w	8005508 <_dtoa_r+0x340>
 8005634:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005638:	e766      	b.n	8005508 <_dtoa_r+0x340>
 800563a:	07d7      	lsls	r7, r2, #31
 800563c:	d505      	bpl.n	800564a <_dtoa_r+0x482>
 800563e:	ed90 6b00 	vldr	d6, [r0]
 8005642:	3101      	adds	r1, #1
 8005644:	2401      	movs	r4, #1
 8005646:	ee27 7b06 	vmul.f64	d7, d7, d6
 800564a:	1052      	asrs	r2, r2, #1
 800564c:	3008      	adds	r0, #8
 800564e:	e7ed      	b.n	800562c <_dtoa_r+0x464>
 8005650:	2102      	movs	r1, #2
 8005652:	e759      	b.n	8005508 <_dtoa_r+0x340>
 8005654:	465a      	mov	r2, fp
 8005656:	464c      	mov	r4, r9
 8005658:	e775      	b.n	8005546 <_dtoa_r+0x37e>
 800565a:	ec41 0b17 	vmov	d7, r0, r1
 800565e:	495c      	ldr	r1, [pc, #368]	; (80057d0 <_dtoa_r+0x608>)
 8005660:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005664:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005668:	9901      	ldr	r1, [sp, #4]
 800566a:	440c      	add	r4, r1
 800566c:	9907      	ldr	r1, [sp, #28]
 800566e:	b351      	cbz	r1, 80056c6 <_dtoa_r+0x4fe>
 8005670:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005674:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005678:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800567c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005680:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005684:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005688:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800568c:	ee14 1a90 	vmov	r1, s9
 8005690:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005694:	3130      	adds	r1, #48	; 0x30
 8005696:	ee36 6b45 	vsub.f64	d6, d6, d5
 800569a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a2:	f808 1b01 	strb.w	r1, [r8], #1
 80056a6:	d439      	bmi.n	800571c <_dtoa_r+0x554>
 80056a8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80056ac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80056b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b4:	d472      	bmi.n	800579c <_dtoa_r+0x5d4>
 80056b6:	45a0      	cmp	r8, r4
 80056b8:	f43f af6b 	beq.w	8005592 <_dtoa_r+0x3ca>
 80056bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80056c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80056c4:	e7e0      	b.n	8005688 <_dtoa_r+0x4c0>
 80056c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80056ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80056ce:	4620      	mov	r0, r4
 80056d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80056d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80056d8:	ee14 1a90 	vmov	r1, s9
 80056dc:	3130      	adds	r1, #48	; 0x30
 80056de:	f808 1b01 	strb.w	r1, [r8], #1
 80056e2:	45a0      	cmp	r8, r4
 80056e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80056e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80056ec:	d118      	bne.n	8005720 <_dtoa_r+0x558>
 80056ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80056f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80056f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fe:	dc4d      	bgt.n	800579c <_dtoa_r+0x5d4>
 8005700:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005704:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570c:	f57f af41 	bpl.w	8005592 <_dtoa_r+0x3ca>
 8005710:	4680      	mov	r8, r0
 8005712:	3801      	subs	r0, #1
 8005714:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d0f9      	beq.n	8005710 <_dtoa_r+0x548>
 800571c:	4693      	mov	fp, r2
 800571e:	e02a      	b.n	8005776 <_dtoa_r+0x5ae>
 8005720:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005724:	e7d6      	b.n	80056d4 <_dtoa_r+0x50c>
 8005726:	ed9d 7b02 	vldr	d7, [sp, #8]
 800572a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800572e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005732:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005736:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800573a:	ee15 3a10 	vmov	r3, s10
 800573e:	3330      	adds	r3, #48	; 0x30
 8005740:	f808 3b01 	strb.w	r3, [r8], #1
 8005744:	9b01      	ldr	r3, [sp, #4]
 8005746:	eba8 0303 	sub.w	r3, r8, r3
 800574a:	4599      	cmp	r9, r3
 800574c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005750:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005754:	d133      	bne.n	80057be <_dtoa_r+0x5f6>
 8005756:	ee37 7b07 	vadd.f64	d7, d7, d7
 800575a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	dc1a      	bgt.n	800579a <_dtoa_r+0x5d2>
 8005764:	eeb4 7b46 	vcmp.f64	d7, d6
 8005768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576c:	d103      	bne.n	8005776 <_dtoa_r+0x5ae>
 800576e:	ee15 3a10 	vmov	r3, s10
 8005772:	07d9      	lsls	r1, r3, #31
 8005774:	d411      	bmi.n	800579a <_dtoa_r+0x5d2>
 8005776:	4629      	mov	r1, r5
 8005778:	4630      	mov	r0, r6
 800577a:	f000 fbd1 	bl	8005f20 <_Bfree>
 800577e:	2300      	movs	r3, #0
 8005780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005782:	f888 3000 	strb.w	r3, [r8]
 8005786:	f10b 0301 	add.w	r3, fp, #1
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800578e:	2b00      	cmp	r3, #0
 8005790:	f43f ad69 	beq.w	8005266 <_dtoa_r+0x9e>
 8005794:	f8c3 8000 	str.w	r8, [r3]
 8005798:	e565      	b.n	8005266 <_dtoa_r+0x9e>
 800579a:	465a      	mov	r2, fp
 800579c:	4643      	mov	r3, r8
 800579e:	4698      	mov	r8, r3
 80057a0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80057a4:	2939      	cmp	r1, #57	; 0x39
 80057a6:	d106      	bne.n	80057b6 <_dtoa_r+0x5ee>
 80057a8:	9901      	ldr	r1, [sp, #4]
 80057aa:	4299      	cmp	r1, r3
 80057ac:	d1f7      	bne.n	800579e <_dtoa_r+0x5d6>
 80057ae:	9801      	ldr	r0, [sp, #4]
 80057b0:	2130      	movs	r1, #48	; 0x30
 80057b2:	3201      	adds	r2, #1
 80057b4:	7001      	strb	r1, [r0, #0]
 80057b6:	7819      	ldrb	r1, [r3, #0]
 80057b8:	3101      	adds	r1, #1
 80057ba:	7019      	strb	r1, [r3, #0]
 80057bc:	e7ae      	b.n	800571c <_dtoa_r+0x554>
 80057be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80057c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ca:	d1b2      	bne.n	8005732 <_dtoa_r+0x56a>
 80057cc:	e7d3      	b.n	8005776 <_dtoa_r+0x5ae>
 80057ce:	bf00      	nop
 80057d0:	08009578 	.word	0x08009578
 80057d4:	08009550 	.word	0x08009550
 80057d8:	9907      	ldr	r1, [sp, #28]
 80057da:	2900      	cmp	r1, #0
 80057dc:	f000 80d0 	beq.w	8005980 <_dtoa_r+0x7b8>
 80057e0:	9906      	ldr	r1, [sp, #24]
 80057e2:	2901      	cmp	r1, #1
 80057e4:	f300 80b4 	bgt.w	8005950 <_dtoa_r+0x788>
 80057e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057ea:	2900      	cmp	r1, #0
 80057ec:	f000 80ac 	beq.w	8005948 <_dtoa_r+0x780>
 80057f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80057f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80057f8:	461c      	mov	r4, r3
 80057fa:	9309      	str	r3, [sp, #36]	; 0x24
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	9b05      	ldr	r3, [sp, #20]
 8005804:	2101      	movs	r1, #1
 8005806:	4413      	add	r3, r2
 8005808:	4630      	mov	r0, r6
 800580a:	9305      	str	r3, [sp, #20]
 800580c:	f000 fc88 	bl	8006120 <__i2b>
 8005810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005812:	4607      	mov	r7, r0
 8005814:	f1b8 0f00 	cmp.w	r8, #0
 8005818:	d00d      	beq.n	8005836 <_dtoa_r+0x66e>
 800581a:	9a05      	ldr	r2, [sp, #20]
 800581c:	2a00      	cmp	r2, #0
 800581e:	dd0a      	ble.n	8005836 <_dtoa_r+0x66e>
 8005820:	4542      	cmp	r2, r8
 8005822:	9904      	ldr	r1, [sp, #16]
 8005824:	bfa8      	it	ge
 8005826:	4642      	movge	r2, r8
 8005828:	1a89      	subs	r1, r1, r2
 800582a:	9104      	str	r1, [sp, #16]
 800582c:	9905      	ldr	r1, [sp, #20]
 800582e:	eba8 0802 	sub.w	r8, r8, r2
 8005832:	1a8a      	subs	r2, r1, r2
 8005834:	9205      	str	r2, [sp, #20]
 8005836:	b303      	cbz	r3, 800587a <_dtoa_r+0x6b2>
 8005838:	9a07      	ldr	r2, [sp, #28]
 800583a:	2a00      	cmp	r2, #0
 800583c:	f000 80a5 	beq.w	800598a <_dtoa_r+0x7c2>
 8005840:	2c00      	cmp	r4, #0
 8005842:	dd13      	ble.n	800586c <_dtoa_r+0x6a4>
 8005844:	4639      	mov	r1, r7
 8005846:	4622      	mov	r2, r4
 8005848:	4630      	mov	r0, r6
 800584a:	930d      	str	r3, [sp, #52]	; 0x34
 800584c:	f000 fd28 	bl	80062a0 <__pow5mult>
 8005850:	462a      	mov	r2, r5
 8005852:	4601      	mov	r1, r0
 8005854:	4607      	mov	r7, r0
 8005856:	4630      	mov	r0, r6
 8005858:	f000 fc78 	bl	800614c <__multiply>
 800585c:	4629      	mov	r1, r5
 800585e:	9009      	str	r0, [sp, #36]	; 0x24
 8005860:	4630      	mov	r0, r6
 8005862:	f000 fb5d 	bl	8005f20 <_Bfree>
 8005866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800586a:	4615      	mov	r5, r2
 800586c:	1b1a      	subs	r2, r3, r4
 800586e:	d004      	beq.n	800587a <_dtoa_r+0x6b2>
 8005870:	4629      	mov	r1, r5
 8005872:	4630      	mov	r0, r6
 8005874:	f000 fd14 	bl	80062a0 <__pow5mult>
 8005878:	4605      	mov	r5, r0
 800587a:	2101      	movs	r1, #1
 800587c:	4630      	mov	r0, r6
 800587e:	f000 fc4f 	bl	8006120 <__i2b>
 8005882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	f340 8081 	ble.w	800598e <_dtoa_r+0x7c6>
 800588c:	461a      	mov	r2, r3
 800588e:	4601      	mov	r1, r0
 8005890:	4630      	mov	r0, r6
 8005892:	f000 fd05 	bl	80062a0 <__pow5mult>
 8005896:	9b06      	ldr	r3, [sp, #24]
 8005898:	2b01      	cmp	r3, #1
 800589a:	4604      	mov	r4, r0
 800589c:	dd7a      	ble.n	8005994 <_dtoa_r+0x7cc>
 800589e:	2300      	movs	r3, #0
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	6922      	ldr	r2, [r4, #16]
 80058a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80058a8:	6910      	ldr	r0, [r2, #16]
 80058aa:	f000 fbeb 	bl	8006084 <__hi0bits>
 80058ae:	f1c0 0020 	rsb	r0, r0, #32
 80058b2:	9b05      	ldr	r3, [sp, #20]
 80058b4:	4418      	add	r0, r3
 80058b6:	f010 001f 	ands.w	r0, r0, #31
 80058ba:	f000 8093 	beq.w	80059e4 <_dtoa_r+0x81c>
 80058be:	f1c0 0220 	rsb	r2, r0, #32
 80058c2:	2a04      	cmp	r2, #4
 80058c4:	f340 8085 	ble.w	80059d2 <_dtoa_r+0x80a>
 80058c8:	9b04      	ldr	r3, [sp, #16]
 80058ca:	f1c0 001c 	rsb	r0, r0, #28
 80058ce:	4403      	add	r3, r0
 80058d0:	9304      	str	r3, [sp, #16]
 80058d2:	9b05      	ldr	r3, [sp, #20]
 80058d4:	4480      	add	r8, r0
 80058d6:	4403      	add	r3, r0
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	9b04      	ldr	r3, [sp, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dd05      	ble.n	80058ec <_dtoa_r+0x724>
 80058e0:	4629      	mov	r1, r5
 80058e2:	461a      	mov	r2, r3
 80058e4:	4630      	mov	r0, r6
 80058e6:	f000 fd35 	bl	8006354 <__lshift>
 80058ea:	4605      	mov	r5, r0
 80058ec:	9b05      	ldr	r3, [sp, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd05      	ble.n	80058fe <_dtoa_r+0x736>
 80058f2:	4621      	mov	r1, r4
 80058f4:	461a      	mov	r2, r3
 80058f6:	4630      	mov	r0, r6
 80058f8:	f000 fd2c 	bl	8006354 <__lshift>
 80058fc:	4604      	mov	r4, r0
 80058fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d071      	beq.n	80059e8 <_dtoa_r+0x820>
 8005904:	4621      	mov	r1, r4
 8005906:	4628      	mov	r0, r5
 8005908:	f000 fd90 	bl	800642c <__mcmp>
 800590c:	2800      	cmp	r0, #0
 800590e:	da6b      	bge.n	80059e8 <_dtoa_r+0x820>
 8005910:	2300      	movs	r3, #0
 8005912:	4629      	mov	r1, r5
 8005914:	220a      	movs	r2, #10
 8005916:	4630      	mov	r0, r6
 8005918:	f000 fb24 	bl	8005f64 <__multadd>
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005922:	4605      	mov	r5, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8197 	beq.w	8005c58 <_dtoa_r+0xa90>
 800592a:	4639      	mov	r1, r7
 800592c:	2300      	movs	r3, #0
 800592e:	220a      	movs	r2, #10
 8005930:	4630      	mov	r0, r6
 8005932:	f000 fb17 	bl	8005f64 <__multadd>
 8005936:	f1ba 0f00 	cmp.w	sl, #0
 800593a:	4607      	mov	r7, r0
 800593c:	f300 8093 	bgt.w	8005a66 <_dtoa_r+0x89e>
 8005940:	9b06      	ldr	r3, [sp, #24]
 8005942:	2b02      	cmp	r3, #2
 8005944:	dc57      	bgt.n	80059f6 <_dtoa_r+0x82e>
 8005946:	e08e      	b.n	8005a66 <_dtoa_r+0x89e>
 8005948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800594a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800594e:	e751      	b.n	80057f4 <_dtoa_r+0x62c>
 8005950:	f109 34ff 	add.w	r4, r9, #4294967295
 8005954:	42a3      	cmp	r3, r4
 8005956:	bfbf      	itttt	lt
 8005958:	1ae2      	sublt	r2, r4, r3
 800595a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800595c:	189b      	addlt	r3, r3, r2
 800595e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005960:	bfae      	itee	ge
 8005962:	1b1c      	subge	r4, r3, r4
 8005964:	4623      	movlt	r3, r4
 8005966:	2400      	movlt	r4, #0
 8005968:	f1b9 0f00 	cmp.w	r9, #0
 800596c:	bfb5      	itete	lt
 800596e:	9a04      	ldrlt	r2, [sp, #16]
 8005970:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005974:	eba2 0809 	sublt.w	r8, r2, r9
 8005978:	464a      	movge	r2, r9
 800597a:	bfb8      	it	lt
 800597c:	2200      	movlt	r2, #0
 800597e:	e73c      	b.n	80057fa <_dtoa_r+0x632>
 8005980:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005984:	9f07      	ldr	r7, [sp, #28]
 8005986:	461c      	mov	r4, r3
 8005988:	e744      	b.n	8005814 <_dtoa_r+0x64c>
 800598a:	461a      	mov	r2, r3
 800598c:	e770      	b.n	8005870 <_dtoa_r+0x6a8>
 800598e:	9b06      	ldr	r3, [sp, #24]
 8005990:	2b01      	cmp	r3, #1
 8005992:	dc18      	bgt.n	80059c6 <_dtoa_r+0x7fe>
 8005994:	9b02      	ldr	r3, [sp, #8]
 8005996:	b9b3      	cbnz	r3, 80059c6 <_dtoa_r+0x7fe>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800599e:	b9a2      	cbnz	r2, 80059ca <_dtoa_r+0x802>
 80059a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059a4:	0d12      	lsrs	r2, r2, #20
 80059a6:	0512      	lsls	r2, r2, #20
 80059a8:	b18a      	cbz	r2, 80059ce <_dtoa_r+0x806>
 80059aa:	9b04      	ldr	r3, [sp, #16]
 80059ac:	3301      	adds	r3, #1
 80059ae:	9304      	str	r3, [sp, #16]
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	3301      	adds	r3, #1
 80059b4:	9305      	str	r3, [sp, #20]
 80059b6:	2301      	movs	r3, #1
 80059b8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f af70 	bne.w	80058a2 <_dtoa_r+0x6da>
 80059c2:	2001      	movs	r0, #1
 80059c4:	e775      	b.n	80058b2 <_dtoa_r+0x6ea>
 80059c6:	2300      	movs	r3, #0
 80059c8:	e7f6      	b.n	80059b8 <_dtoa_r+0x7f0>
 80059ca:	9b02      	ldr	r3, [sp, #8]
 80059cc:	e7f4      	b.n	80059b8 <_dtoa_r+0x7f0>
 80059ce:	9209      	str	r2, [sp, #36]	; 0x24
 80059d0:	e7f3      	b.n	80059ba <_dtoa_r+0x7f2>
 80059d2:	d082      	beq.n	80058da <_dtoa_r+0x712>
 80059d4:	9b04      	ldr	r3, [sp, #16]
 80059d6:	321c      	adds	r2, #28
 80059d8:	4413      	add	r3, r2
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	9b05      	ldr	r3, [sp, #20]
 80059de:	4490      	add	r8, r2
 80059e0:	4413      	add	r3, r2
 80059e2:	e779      	b.n	80058d8 <_dtoa_r+0x710>
 80059e4:	4602      	mov	r2, r0
 80059e6:	e7f5      	b.n	80059d4 <_dtoa_r+0x80c>
 80059e8:	f1b9 0f00 	cmp.w	r9, #0
 80059ec:	dc36      	bgt.n	8005a5c <_dtoa_r+0x894>
 80059ee:	9b06      	ldr	r3, [sp, #24]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	dd33      	ble.n	8005a5c <_dtoa_r+0x894>
 80059f4:	46ca      	mov	sl, r9
 80059f6:	f1ba 0f00 	cmp.w	sl, #0
 80059fa:	d10d      	bne.n	8005a18 <_dtoa_r+0x850>
 80059fc:	4621      	mov	r1, r4
 80059fe:	4653      	mov	r3, sl
 8005a00:	2205      	movs	r2, #5
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 faae 	bl	8005f64 <__multadd>
 8005a08:	4601      	mov	r1, r0
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f000 fd0d 	bl	800642c <__mcmp>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	f73f ade4 	bgt.w	80055e0 <_dtoa_r+0x418>
 8005a18:	9b08      	ldr	r3, [sp, #32]
 8005a1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a1e:	ea6f 0b03 	mvn.w	fp, r3
 8005a22:	f04f 0900 	mov.w	r9, #0
 8005a26:	4621      	mov	r1, r4
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 fa79 	bl	8005f20 <_Bfree>
 8005a2e:	2f00      	cmp	r7, #0
 8005a30:	f43f aea1 	beq.w	8005776 <_dtoa_r+0x5ae>
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	d005      	beq.n	8005a46 <_dtoa_r+0x87e>
 8005a3a:	45b9      	cmp	r9, r7
 8005a3c:	d003      	beq.n	8005a46 <_dtoa_r+0x87e>
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4630      	mov	r0, r6
 8005a42:	f000 fa6d 	bl	8005f20 <_Bfree>
 8005a46:	4639      	mov	r1, r7
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 fa69 	bl	8005f20 <_Bfree>
 8005a4e:	e692      	b.n	8005776 <_dtoa_r+0x5ae>
 8005a50:	2400      	movs	r4, #0
 8005a52:	4627      	mov	r7, r4
 8005a54:	e7e0      	b.n	8005a18 <_dtoa_r+0x850>
 8005a56:	4693      	mov	fp, r2
 8005a58:	4627      	mov	r7, r4
 8005a5a:	e5c1      	b.n	80055e0 <_dtoa_r+0x418>
 8005a5c:	9b07      	ldr	r3, [sp, #28]
 8005a5e:	46ca      	mov	sl, r9
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8100 	beq.w	8005c66 <_dtoa_r+0xa9e>
 8005a66:	f1b8 0f00 	cmp.w	r8, #0
 8005a6a:	dd05      	ble.n	8005a78 <_dtoa_r+0x8b0>
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	4642      	mov	r2, r8
 8005a70:	4630      	mov	r0, r6
 8005a72:	f000 fc6f 	bl	8006354 <__lshift>
 8005a76:	4607      	mov	r7, r0
 8005a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d05d      	beq.n	8005b3a <_dtoa_r+0x972>
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 fa0d 	bl	8005ea0 <_Balloc>
 8005a86:	4680      	mov	r8, r0
 8005a88:	b928      	cbnz	r0, 8005a96 <_dtoa_r+0x8ce>
 8005a8a:	4b82      	ldr	r3, [pc, #520]	; (8005c94 <_dtoa_r+0xacc>)
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005a92:	f7ff bbb1 	b.w	80051f8 <_dtoa_r+0x30>
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	3202      	adds	r2, #2
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	f107 010c 	add.w	r1, r7, #12
 8005aa0:	300c      	adds	r0, #12
 8005aa2:	f001 ff3f 	bl	8007924 <memcpy>
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f000 fc52 	bl	8006354 <__lshift>
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	4453      	add	r3, sl
 8005aba:	9308      	str	r3, [sp, #32]
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	46b9      	mov	r9, r7
 8005ac4:	9307      	str	r3, [sp, #28]
 8005ac6:	4607      	mov	r7, r0
 8005ac8:	9b04      	ldr	r3, [sp, #16]
 8005aca:	4621      	mov	r1, r4
 8005acc:	3b01      	subs	r3, #1
 8005ace:	4628      	mov	r0, r5
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	f7ff faef 	bl	80050b4 <quorem>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	3330      	adds	r3, #48	; 0x30
 8005ada:	9005      	str	r0, [sp, #20]
 8005adc:	4649      	mov	r1, r9
 8005ade:	4628      	mov	r0, r5
 8005ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae2:	f000 fca3 	bl	800642c <__mcmp>
 8005ae6:	463a      	mov	r2, r7
 8005ae8:	4682      	mov	sl, r0
 8005aea:	4621      	mov	r1, r4
 8005aec:	4630      	mov	r0, r6
 8005aee:	f000 fcb9 	bl	8006464 <__mdiff>
 8005af2:	68c2      	ldr	r2, [r0, #12]
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	4680      	mov	r8, r0
 8005af8:	bb0a      	cbnz	r2, 8005b3e <_dtoa_r+0x976>
 8005afa:	4601      	mov	r1, r0
 8005afc:	4628      	mov	r0, r5
 8005afe:	f000 fc95 	bl	800642c <__mcmp>
 8005b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b04:	4602      	mov	r2, r0
 8005b06:	4641      	mov	r1, r8
 8005b08:	4630      	mov	r0, r6
 8005b0a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005b0e:	f000 fa07 	bl	8005f20 <_Bfree>
 8005b12:	9b06      	ldr	r3, [sp, #24]
 8005b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b16:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005b1a:	ea43 0102 	orr.w	r1, r3, r2
 8005b1e:	9b07      	ldr	r3, [sp, #28]
 8005b20:	4319      	orrs	r1, r3
 8005b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b24:	d10d      	bne.n	8005b42 <_dtoa_r+0x97a>
 8005b26:	2b39      	cmp	r3, #57	; 0x39
 8005b28:	d029      	beq.n	8005b7e <_dtoa_r+0x9b6>
 8005b2a:	f1ba 0f00 	cmp.w	sl, #0
 8005b2e:	dd01      	ble.n	8005b34 <_dtoa_r+0x96c>
 8005b30:	9b05      	ldr	r3, [sp, #20]
 8005b32:	3331      	adds	r3, #49	; 0x31
 8005b34:	9a02      	ldr	r2, [sp, #8]
 8005b36:	7013      	strb	r3, [r2, #0]
 8005b38:	e775      	b.n	8005a26 <_dtoa_r+0x85e>
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	e7b8      	b.n	8005ab0 <_dtoa_r+0x8e8>
 8005b3e:	2201      	movs	r2, #1
 8005b40:	e7e1      	b.n	8005b06 <_dtoa_r+0x93e>
 8005b42:	f1ba 0f00 	cmp.w	sl, #0
 8005b46:	db06      	blt.n	8005b56 <_dtoa_r+0x98e>
 8005b48:	9906      	ldr	r1, [sp, #24]
 8005b4a:	ea41 0a0a 	orr.w	sl, r1, sl
 8005b4e:	9907      	ldr	r1, [sp, #28]
 8005b50:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005b54:	d120      	bne.n	8005b98 <_dtoa_r+0x9d0>
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	ddec      	ble.n	8005b34 <_dtoa_r+0x96c>
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	4630      	mov	r0, r6
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	f000 fbf7 	bl	8006354 <__lshift>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4605      	mov	r5, r0
 8005b6a:	f000 fc5f 	bl	800642c <__mcmp>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	dc02      	bgt.n	8005b7a <_dtoa_r+0x9b2>
 8005b74:	d1de      	bne.n	8005b34 <_dtoa_r+0x96c>
 8005b76:	07da      	lsls	r2, r3, #31
 8005b78:	d5dc      	bpl.n	8005b34 <_dtoa_r+0x96c>
 8005b7a:	2b39      	cmp	r3, #57	; 0x39
 8005b7c:	d1d8      	bne.n	8005b30 <_dtoa_r+0x968>
 8005b7e:	9a02      	ldr	r2, [sp, #8]
 8005b80:	2339      	movs	r3, #57	; 0x39
 8005b82:	7013      	strb	r3, [r2, #0]
 8005b84:	4643      	mov	r3, r8
 8005b86:	4698      	mov	r8, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005b8e:	2a39      	cmp	r2, #57	; 0x39
 8005b90:	d051      	beq.n	8005c36 <_dtoa_r+0xa6e>
 8005b92:	3201      	adds	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e746      	b.n	8005a26 <_dtoa_r+0x85e>
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	dd03      	ble.n	8005ba4 <_dtoa_r+0x9dc>
 8005b9c:	2b39      	cmp	r3, #57	; 0x39
 8005b9e:	d0ee      	beq.n	8005b7e <_dtoa_r+0x9b6>
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	e7c7      	b.n	8005b34 <_dtoa_r+0x96c>
 8005ba4:	9a04      	ldr	r2, [sp, #16]
 8005ba6:	9908      	ldr	r1, [sp, #32]
 8005ba8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005bac:	428a      	cmp	r2, r1
 8005bae:	d02b      	beq.n	8005c08 <_dtoa_r+0xa40>
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	220a      	movs	r2, #10
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f000 f9d4 	bl	8005f64 <__multadd>
 8005bbc:	45b9      	cmp	r9, r7
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	f04f 020a 	mov.w	r2, #10
 8005bc8:	4649      	mov	r1, r9
 8005bca:	4630      	mov	r0, r6
 8005bcc:	d107      	bne.n	8005bde <_dtoa_r+0xa16>
 8005bce:	f000 f9c9 	bl	8005f64 <__multadd>
 8005bd2:	4681      	mov	r9, r0
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	9b04      	ldr	r3, [sp, #16]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	9304      	str	r3, [sp, #16]
 8005bdc:	e774      	b.n	8005ac8 <_dtoa_r+0x900>
 8005bde:	f000 f9c1 	bl	8005f64 <__multadd>
 8005be2:	4639      	mov	r1, r7
 8005be4:	4681      	mov	r9, r0
 8005be6:	2300      	movs	r3, #0
 8005be8:	220a      	movs	r2, #10
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 f9ba 	bl	8005f64 <__multadd>
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	e7f0      	b.n	8005bd6 <_dtoa_r+0xa0e>
 8005bf4:	f1ba 0f00 	cmp.w	sl, #0
 8005bf8:	9a01      	ldr	r2, [sp, #4]
 8005bfa:	bfcc      	ite	gt
 8005bfc:	46d0      	movgt	r8, sl
 8005bfe:	f04f 0801 	movle.w	r8, #1
 8005c02:	4490      	add	r8, r2
 8005c04:	f04f 0900 	mov.w	r9, #0
 8005c08:	4629      	mov	r1, r5
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	f000 fba0 	bl	8006354 <__lshift>
 8005c14:	4621      	mov	r1, r4
 8005c16:	4605      	mov	r5, r0
 8005c18:	f000 fc08 	bl	800642c <__mcmp>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	dcb1      	bgt.n	8005b84 <_dtoa_r+0x9bc>
 8005c20:	d102      	bne.n	8005c28 <_dtoa_r+0xa60>
 8005c22:	9b02      	ldr	r3, [sp, #8]
 8005c24:	07db      	lsls	r3, r3, #31
 8005c26:	d4ad      	bmi.n	8005b84 <_dtoa_r+0x9bc>
 8005c28:	4643      	mov	r3, r8
 8005c2a:	4698      	mov	r8, r3
 8005c2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c30:	2a30      	cmp	r2, #48	; 0x30
 8005c32:	d0fa      	beq.n	8005c2a <_dtoa_r+0xa62>
 8005c34:	e6f7      	b.n	8005a26 <_dtoa_r+0x85e>
 8005c36:	9a01      	ldr	r2, [sp, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1a4      	bne.n	8005b86 <_dtoa_r+0x9be>
 8005c3c:	f10b 0b01 	add.w	fp, fp, #1
 8005c40:	2331      	movs	r3, #49	; 0x31
 8005c42:	e778      	b.n	8005b36 <_dtoa_r+0x96e>
 8005c44:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <_dtoa_r+0xad0>)
 8005c46:	f7ff bb2a 	b.w	800529e <_dtoa_r+0xd6>
 8005c4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f47f ab05 	bne.w	800525c <_dtoa_r+0x94>
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <_dtoa_r+0xad4>)
 8005c54:	f7ff bb23 	b.w	800529e <_dtoa_r+0xd6>
 8005c58:	f1ba 0f00 	cmp.w	sl, #0
 8005c5c:	dc03      	bgt.n	8005c66 <_dtoa_r+0xa9e>
 8005c5e:	9b06      	ldr	r3, [sp, #24]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f73f aec8 	bgt.w	80059f6 <_dtoa_r+0x82e>
 8005c66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f7ff fa21 	bl	80050b4 <quorem>
 8005c72:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005c76:	f808 3b01 	strb.w	r3, [r8], #1
 8005c7a:	9a01      	ldr	r2, [sp, #4]
 8005c7c:	eba8 0202 	sub.w	r2, r8, r2
 8005c80:	4592      	cmp	sl, r2
 8005c82:	ddb7      	ble.n	8005bf4 <_dtoa_r+0xa2c>
 8005c84:	4629      	mov	r1, r5
 8005c86:	2300      	movs	r3, #0
 8005c88:	220a      	movs	r2, #10
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f000 f96a 	bl	8005f64 <__multadd>
 8005c90:	4605      	mov	r5, r0
 8005c92:	e7ea      	b.n	8005c6a <_dtoa_r+0xaa2>
 8005c94:	080094e5 	.word	0x080094e5
 8005c98:	08009440 	.word	0x08009440
 8005c9c:	08009469 	.word	0x08009469

08005ca0 <_free_r>:
 8005ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ca2:	2900      	cmp	r1, #0
 8005ca4:	d044      	beq.n	8005d30 <_free_r+0x90>
 8005ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005caa:	9001      	str	r0, [sp, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f1a1 0404 	sub.w	r4, r1, #4
 8005cb2:	bfb8      	it	lt
 8005cb4:	18e4      	addlt	r4, r4, r3
 8005cb6:	f000 f8e7 	bl	8005e88 <__malloc_lock>
 8005cba:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <_free_r+0x94>)
 8005cbc:	9801      	ldr	r0, [sp, #4]
 8005cbe:	6813      	ldr	r3, [r2, #0]
 8005cc0:	b933      	cbnz	r3, 8005cd0 <_free_r+0x30>
 8005cc2:	6063      	str	r3, [r4, #4]
 8005cc4:	6014      	str	r4, [r2, #0]
 8005cc6:	b003      	add	sp, #12
 8005cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ccc:	f000 b8e2 	b.w	8005e94 <__malloc_unlock>
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	d908      	bls.n	8005ce6 <_free_r+0x46>
 8005cd4:	6825      	ldr	r5, [r4, #0]
 8005cd6:	1961      	adds	r1, r4, r5
 8005cd8:	428b      	cmp	r3, r1
 8005cda:	bf01      	itttt	eq
 8005cdc:	6819      	ldreq	r1, [r3, #0]
 8005cde:	685b      	ldreq	r3, [r3, #4]
 8005ce0:	1949      	addeq	r1, r1, r5
 8005ce2:	6021      	streq	r1, [r4, #0]
 8005ce4:	e7ed      	b.n	8005cc2 <_free_r+0x22>
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b10b      	cbz	r3, 8005cf0 <_free_r+0x50>
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	d9fa      	bls.n	8005ce6 <_free_r+0x46>
 8005cf0:	6811      	ldr	r1, [r2, #0]
 8005cf2:	1855      	adds	r5, r2, r1
 8005cf4:	42a5      	cmp	r5, r4
 8005cf6:	d10b      	bne.n	8005d10 <_free_r+0x70>
 8005cf8:	6824      	ldr	r4, [r4, #0]
 8005cfa:	4421      	add	r1, r4
 8005cfc:	1854      	adds	r4, r2, r1
 8005cfe:	42a3      	cmp	r3, r4
 8005d00:	6011      	str	r1, [r2, #0]
 8005d02:	d1e0      	bne.n	8005cc6 <_free_r+0x26>
 8005d04:	681c      	ldr	r4, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	6053      	str	r3, [r2, #4]
 8005d0a:	440c      	add	r4, r1
 8005d0c:	6014      	str	r4, [r2, #0]
 8005d0e:	e7da      	b.n	8005cc6 <_free_r+0x26>
 8005d10:	d902      	bls.n	8005d18 <_free_r+0x78>
 8005d12:	230c      	movs	r3, #12
 8005d14:	6003      	str	r3, [r0, #0]
 8005d16:	e7d6      	b.n	8005cc6 <_free_r+0x26>
 8005d18:	6825      	ldr	r5, [r4, #0]
 8005d1a:	1961      	adds	r1, r4, r5
 8005d1c:	428b      	cmp	r3, r1
 8005d1e:	bf04      	itt	eq
 8005d20:	6819      	ldreq	r1, [r3, #0]
 8005d22:	685b      	ldreq	r3, [r3, #4]
 8005d24:	6063      	str	r3, [r4, #4]
 8005d26:	bf04      	itt	eq
 8005d28:	1949      	addeq	r1, r1, r5
 8005d2a:	6021      	streq	r1, [r4, #0]
 8005d2c:	6054      	str	r4, [r2, #4]
 8005d2e:	e7ca      	b.n	8005cc6 <_free_r+0x26>
 8005d30:	b003      	add	sp, #12
 8005d32:	bd30      	pop	{r4, r5, pc}
 8005d34:	200008b8 	.word	0x200008b8

08005d38 <malloc>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <malloc+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f000 b823 	b.w	8005d88 <_malloc_r>
 8005d42:	bf00      	nop
 8005d44:	2000006c 	.word	0x2000006c

08005d48 <sbrk_aligned>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4e0e      	ldr	r6, [pc, #56]	; (8005d84 <sbrk_aligned+0x3c>)
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	6831      	ldr	r1, [r6, #0]
 8005d50:	4605      	mov	r5, r0
 8005d52:	b911      	cbnz	r1, 8005d5a <sbrk_aligned+0x12>
 8005d54:	f001 fdd6 	bl	8007904 <_sbrk_r>
 8005d58:	6030      	str	r0, [r6, #0]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f001 fdd1 	bl	8007904 <_sbrk_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d00a      	beq.n	8005d7c <sbrk_aligned+0x34>
 8005d66:	1cc4      	adds	r4, r0, #3
 8005d68:	f024 0403 	bic.w	r4, r4, #3
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d007      	beq.n	8005d80 <sbrk_aligned+0x38>
 8005d70:	1a21      	subs	r1, r4, r0
 8005d72:	4628      	mov	r0, r5
 8005d74:	f001 fdc6 	bl	8007904 <_sbrk_r>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d101      	bne.n	8005d80 <sbrk_aligned+0x38>
 8005d7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	200008bc 	.word	0x200008bc

08005d88 <_malloc_r>:
 8005d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	1ccd      	adds	r5, r1, #3
 8005d8e:	f025 0503 	bic.w	r5, r5, #3
 8005d92:	3508      	adds	r5, #8
 8005d94:	2d0c      	cmp	r5, #12
 8005d96:	bf38      	it	cc
 8005d98:	250c      	movcc	r5, #12
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	db01      	blt.n	8005da4 <_malloc_r+0x1c>
 8005da0:	42a9      	cmp	r1, r5
 8005da2:	d905      	bls.n	8005db0 <_malloc_r+0x28>
 8005da4:	230c      	movs	r3, #12
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	2600      	movs	r6, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e84 <_malloc_r+0xfc>
 8005db4:	f000 f868 	bl	8005e88 <__malloc_lock>
 8005db8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dbc:	461c      	mov	r4, r3
 8005dbe:	bb5c      	cbnz	r4, 8005e18 <_malloc_r+0x90>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f7ff ffc0 	bl	8005d48 <sbrk_aligned>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	4604      	mov	r4, r0
 8005dcc:	d155      	bne.n	8005e7a <_malloc_r+0xf2>
 8005dce:	f8d8 4000 	ldr.w	r4, [r8]
 8005dd2:	4626      	mov	r6, r4
 8005dd4:	2e00      	cmp	r6, #0
 8005dd6:	d145      	bne.n	8005e64 <_malloc_r+0xdc>
 8005dd8:	2c00      	cmp	r4, #0
 8005dda:	d048      	beq.n	8005e6e <_malloc_r+0xe6>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	4631      	mov	r1, r6
 8005de0:	4638      	mov	r0, r7
 8005de2:	eb04 0903 	add.w	r9, r4, r3
 8005de6:	f001 fd8d 	bl	8007904 <_sbrk_r>
 8005dea:	4581      	cmp	r9, r0
 8005dec:	d13f      	bne.n	8005e6e <_malloc_r+0xe6>
 8005dee:	6821      	ldr	r1, [r4, #0]
 8005df0:	1a6d      	subs	r5, r5, r1
 8005df2:	4629      	mov	r1, r5
 8005df4:	4638      	mov	r0, r7
 8005df6:	f7ff ffa7 	bl	8005d48 <sbrk_aligned>
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d037      	beq.n	8005e6e <_malloc_r+0xe6>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	442b      	add	r3, r5
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	f8d8 3000 	ldr.w	r3, [r8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d038      	beq.n	8005e7e <_malloc_r+0xf6>
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	42a2      	cmp	r2, r4
 8005e10:	d12b      	bne.n	8005e6a <_malloc_r+0xe2>
 8005e12:	2200      	movs	r2, #0
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	e00f      	b.n	8005e38 <_malloc_r+0xb0>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	1b52      	subs	r2, r2, r5
 8005e1c:	d41f      	bmi.n	8005e5e <_malloc_r+0xd6>
 8005e1e:	2a0b      	cmp	r2, #11
 8005e20:	d917      	bls.n	8005e52 <_malloc_r+0xca>
 8005e22:	1961      	adds	r1, r4, r5
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	6025      	str	r5, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	6059      	strne	r1, [r3, #4]
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	bf08      	it	eq
 8005e30:	f8c8 1000 	streq.w	r1, [r8]
 8005e34:	5162      	str	r2, [r4, r5]
 8005e36:	604b      	str	r3, [r1, #4]
 8005e38:	4638      	mov	r0, r7
 8005e3a:	f104 060b 	add.w	r6, r4, #11
 8005e3e:	f000 f829 	bl	8005e94 <__malloc_unlock>
 8005e42:	f026 0607 	bic.w	r6, r6, #7
 8005e46:	1d23      	adds	r3, r4, #4
 8005e48:	1af2      	subs	r2, r6, r3
 8005e4a:	d0ae      	beq.n	8005daa <_malloc_r+0x22>
 8005e4c:	1b9b      	subs	r3, r3, r6
 8005e4e:	50a3      	str	r3, [r4, r2]
 8005e50:	e7ab      	b.n	8005daa <_malloc_r+0x22>
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	6862      	ldr	r2, [r4, #4]
 8005e56:	d1dd      	bne.n	8005e14 <_malloc_r+0x8c>
 8005e58:	f8c8 2000 	str.w	r2, [r8]
 8005e5c:	e7ec      	b.n	8005e38 <_malloc_r+0xb0>
 8005e5e:	4623      	mov	r3, r4
 8005e60:	6864      	ldr	r4, [r4, #4]
 8005e62:	e7ac      	b.n	8005dbe <_malloc_r+0x36>
 8005e64:	4634      	mov	r4, r6
 8005e66:	6876      	ldr	r6, [r6, #4]
 8005e68:	e7b4      	b.n	8005dd4 <_malloc_r+0x4c>
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	e7cc      	b.n	8005e08 <_malloc_r+0x80>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4638      	mov	r0, r7
 8005e74:	f000 f80e 	bl	8005e94 <__malloc_unlock>
 8005e78:	e797      	b.n	8005daa <_malloc_r+0x22>
 8005e7a:	6025      	str	r5, [r4, #0]
 8005e7c:	e7dc      	b.n	8005e38 <_malloc_r+0xb0>
 8005e7e:	605b      	str	r3, [r3, #4]
 8005e80:	deff      	udf	#255	; 0xff
 8005e82:	bf00      	nop
 8005e84:	200008b8 	.word	0x200008b8

08005e88 <__malloc_lock>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__malloc_lock+0x8>)
 8005e8a:	f7ff b90a 	b.w	80050a2 <__retarget_lock_acquire_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200008b4 	.word	0x200008b4

08005e94 <__malloc_unlock>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__malloc_unlock+0x8>)
 8005e96:	f7ff b905 	b.w	80050a4 <__retarget_lock_release_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	200008b4 	.word	0x200008b4

08005ea0 <_Balloc>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	69c6      	ldr	r6, [r0, #28]
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	b976      	cbnz	r6, 8005ec8 <_Balloc+0x28>
 8005eaa:	2010      	movs	r0, #16
 8005eac:	f7ff ff44 	bl	8005d38 <malloc>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	61e0      	str	r0, [r4, #28]
 8005eb4:	b920      	cbnz	r0, 8005ec0 <_Balloc+0x20>
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <_Balloc+0x78>)
 8005eb8:	4818      	ldr	r0, [pc, #96]	; (8005f1c <_Balloc+0x7c>)
 8005eba:	216b      	movs	r1, #107	; 0x6b
 8005ebc:	f001 fd48 	bl	8007950 <__assert_func>
 8005ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ec4:	6006      	str	r6, [r0, #0]
 8005ec6:	60c6      	str	r6, [r0, #12]
 8005ec8:	69e6      	ldr	r6, [r4, #28]
 8005eca:	68f3      	ldr	r3, [r6, #12]
 8005ecc:	b183      	cbz	r3, 8005ef0 <_Balloc+0x50>
 8005ece:	69e3      	ldr	r3, [r4, #28]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ed6:	b9b8      	cbnz	r0, 8005f08 <_Balloc+0x68>
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f605 	lsl.w	r6, r1, r5
 8005ede:	1d72      	adds	r2, r6, #5
 8005ee0:	0092      	lsls	r2, r2, #2
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f001 fd52 	bl	800798c <_calloc_r>
 8005ee8:	b160      	cbz	r0, 8005f04 <_Balloc+0x64>
 8005eea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005eee:	e00e      	b.n	8005f0e <_Balloc+0x6e>
 8005ef0:	2221      	movs	r2, #33	; 0x21
 8005ef2:	2104      	movs	r1, #4
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f001 fd49 	bl	800798c <_calloc_r>
 8005efa:	69e3      	ldr	r3, [r4, #28]
 8005efc:	60f0      	str	r0, [r6, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e4      	bne.n	8005ece <_Balloc+0x2e>
 8005f04:	2000      	movs	r0, #0
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	6802      	ldr	r2, [r0, #0]
 8005f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f14:	e7f7      	b.n	8005f06 <_Balloc+0x66>
 8005f16:	bf00      	nop
 8005f18:	08009476 	.word	0x08009476
 8005f1c:	080094f6 	.word	0x080094f6

08005f20 <_Bfree>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	69c6      	ldr	r6, [r0, #28]
 8005f24:	4605      	mov	r5, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	b976      	cbnz	r6, 8005f48 <_Bfree+0x28>
 8005f2a:	2010      	movs	r0, #16
 8005f2c:	f7ff ff04 	bl	8005d38 <malloc>
 8005f30:	4602      	mov	r2, r0
 8005f32:	61e8      	str	r0, [r5, #28]
 8005f34:	b920      	cbnz	r0, 8005f40 <_Bfree+0x20>
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <_Bfree+0x3c>)
 8005f38:	4809      	ldr	r0, [pc, #36]	; (8005f60 <_Bfree+0x40>)
 8005f3a:	218f      	movs	r1, #143	; 0x8f
 8005f3c:	f001 fd08 	bl	8007950 <__assert_func>
 8005f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f44:	6006      	str	r6, [r0, #0]
 8005f46:	60c6      	str	r6, [r0, #12]
 8005f48:	b13c      	cbz	r4, 8005f5a <_Bfree+0x3a>
 8005f4a:	69eb      	ldr	r3, [r5, #28]
 8005f4c:	6862      	ldr	r2, [r4, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f54:	6021      	str	r1, [r4, #0]
 8005f56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	08009476 	.word	0x08009476
 8005f60:	080094f6 	.word	0x080094f6

08005f64 <__multadd>:
 8005f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f68:	690d      	ldr	r5, [r1, #16]
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	461e      	mov	r6, r3
 8005f70:	f101 0c14 	add.w	ip, r1, #20
 8005f74:	2000      	movs	r0, #0
 8005f76:	f8dc 3000 	ldr.w	r3, [ip]
 8005f7a:	b299      	uxth	r1, r3
 8005f7c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f80:	0c1e      	lsrs	r6, r3, #16
 8005f82:	0c0b      	lsrs	r3, r1, #16
 8005f84:	fb02 3306 	mla	r3, r2, r6, r3
 8005f88:	b289      	uxth	r1, r1
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f90:	4285      	cmp	r5, r0
 8005f92:	f84c 1b04 	str.w	r1, [ip], #4
 8005f96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f9a:	dcec      	bgt.n	8005f76 <__multadd+0x12>
 8005f9c:	b30e      	cbz	r6, 8005fe2 <__multadd+0x7e>
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	dc19      	bgt.n	8005fd8 <__multadd+0x74>
 8005fa4:	6861      	ldr	r1, [r4, #4]
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	3101      	adds	r1, #1
 8005faa:	f7ff ff79 	bl	8005ea0 <_Balloc>
 8005fae:	4680      	mov	r8, r0
 8005fb0:	b928      	cbnz	r0, 8005fbe <__multadd+0x5a>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <__multadd+0x84>)
 8005fb6:	480d      	ldr	r0, [pc, #52]	; (8005fec <__multadd+0x88>)
 8005fb8:	21ba      	movs	r1, #186	; 0xba
 8005fba:	f001 fcc9 	bl	8007950 <__assert_func>
 8005fbe:	6922      	ldr	r2, [r4, #16]
 8005fc0:	3202      	adds	r2, #2
 8005fc2:	f104 010c 	add.w	r1, r4, #12
 8005fc6:	0092      	lsls	r2, r2, #2
 8005fc8:	300c      	adds	r0, #12
 8005fca:	f001 fcab 	bl	8007924 <memcpy>
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f7ff ffa5 	bl	8005f20 <_Bfree>
 8005fd6:	4644      	mov	r4, r8
 8005fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fdc:	3501      	adds	r5, #1
 8005fde:	615e      	str	r6, [r3, #20]
 8005fe0:	6125      	str	r5, [r4, #16]
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe8:	080094e5 	.word	0x080094e5
 8005fec:	080094f6 	.word	0x080094f6

08005ff0 <__s2b>:
 8005ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	4615      	mov	r5, r2
 8005ff8:	461f      	mov	r7, r3
 8005ffa:	2209      	movs	r2, #9
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	4606      	mov	r6, r0
 8006000:	fb93 f3f2 	sdiv	r3, r3, r2
 8006004:	2100      	movs	r1, #0
 8006006:	2201      	movs	r2, #1
 8006008:	429a      	cmp	r2, r3
 800600a:	db09      	blt.n	8006020 <__s2b+0x30>
 800600c:	4630      	mov	r0, r6
 800600e:	f7ff ff47 	bl	8005ea0 <_Balloc>
 8006012:	b940      	cbnz	r0, 8006026 <__s2b+0x36>
 8006014:	4602      	mov	r2, r0
 8006016:	4b19      	ldr	r3, [pc, #100]	; (800607c <__s2b+0x8c>)
 8006018:	4819      	ldr	r0, [pc, #100]	; (8006080 <__s2b+0x90>)
 800601a:	21d3      	movs	r1, #211	; 0xd3
 800601c:	f001 fc98 	bl	8007950 <__assert_func>
 8006020:	0052      	lsls	r2, r2, #1
 8006022:	3101      	adds	r1, #1
 8006024:	e7f0      	b.n	8006008 <__s2b+0x18>
 8006026:	9b08      	ldr	r3, [sp, #32]
 8006028:	6143      	str	r3, [r0, #20]
 800602a:	2d09      	cmp	r5, #9
 800602c:	f04f 0301 	mov.w	r3, #1
 8006030:	6103      	str	r3, [r0, #16]
 8006032:	dd16      	ble.n	8006062 <__s2b+0x72>
 8006034:	f104 0909 	add.w	r9, r4, #9
 8006038:	46c8      	mov	r8, r9
 800603a:	442c      	add	r4, r5
 800603c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006040:	4601      	mov	r1, r0
 8006042:	3b30      	subs	r3, #48	; 0x30
 8006044:	220a      	movs	r2, #10
 8006046:	4630      	mov	r0, r6
 8006048:	f7ff ff8c 	bl	8005f64 <__multadd>
 800604c:	45a0      	cmp	r8, r4
 800604e:	d1f5      	bne.n	800603c <__s2b+0x4c>
 8006050:	f1a5 0408 	sub.w	r4, r5, #8
 8006054:	444c      	add	r4, r9
 8006056:	1b2d      	subs	r5, r5, r4
 8006058:	1963      	adds	r3, r4, r5
 800605a:	42bb      	cmp	r3, r7
 800605c:	db04      	blt.n	8006068 <__s2b+0x78>
 800605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006062:	340a      	adds	r4, #10
 8006064:	2509      	movs	r5, #9
 8006066:	e7f6      	b.n	8006056 <__s2b+0x66>
 8006068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800606c:	4601      	mov	r1, r0
 800606e:	3b30      	subs	r3, #48	; 0x30
 8006070:	220a      	movs	r2, #10
 8006072:	4630      	mov	r0, r6
 8006074:	f7ff ff76 	bl	8005f64 <__multadd>
 8006078:	e7ee      	b.n	8006058 <__s2b+0x68>
 800607a:	bf00      	nop
 800607c:	080094e5 	.word	0x080094e5
 8006080:	080094f6 	.word	0x080094f6

08006084 <__hi0bits>:
 8006084:	0c03      	lsrs	r3, r0, #16
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	b9d3      	cbnz	r3, 80060c0 <__hi0bits+0x3c>
 800608a:	0400      	lsls	r0, r0, #16
 800608c:	2310      	movs	r3, #16
 800608e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006092:	bf04      	itt	eq
 8006094:	0200      	lsleq	r0, r0, #8
 8006096:	3308      	addeq	r3, #8
 8006098:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800609c:	bf04      	itt	eq
 800609e:	0100      	lsleq	r0, r0, #4
 80060a0:	3304      	addeq	r3, #4
 80060a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060a6:	bf04      	itt	eq
 80060a8:	0080      	lsleq	r0, r0, #2
 80060aa:	3302      	addeq	r3, #2
 80060ac:	2800      	cmp	r0, #0
 80060ae:	db05      	blt.n	80060bc <__hi0bits+0x38>
 80060b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060b4:	f103 0301 	add.w	r3, r3, #1
 80060b8:	bf08      	it	eq
 80060ba:	2320      	moveq	r3, #32
 80060bc:	4618      	mov	r0, r3
 80060be:	4770      	bx	lr
 80060c0:	2300      	movs	r3, #0
 80060c2:	e7e4      	b.n	800608e <__hi0bits+0xa>

080060c4 <__lo0bits>:
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	f013 0207 	ands.w	r2, r3, #7
 80060ca:	d00c      	beq.n	80060e6 <__lo0bits+0x22>
 80060cc:	07d9      	lsls	r1, r3, #31
 80060ce:	d422      	bmi.n	8006116 <__lo0bits+0x52>
 80060d0:	079a      	lsls	r2, r3, #30
 80060d2:	bf49      	itett	mi
 80060d4:	085b      	lsrmi	r3, r3, #1
 80060d6:	089b      	lsrpl	r3, r3, #2
 80060d8:	6003      	strmi	r3, [r0, #0]
 80060da:	2201      	movmi	r2, #1
 80060dc:	bf5c      	itt	pl
 80060de:	6003      	strpl	r3, [r0, #0]
 80060e0:	2202      	movpl	r2, #2
 80060e2:	4610      	mov	r0, r2
 80060e4:	4770      	bx	lr
 80060e6:	b299      	uxth	r1, r3
 80060e8:	b909      	cbnz	r1, 80060ee <__lo0bits+0x2a>
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	2210      	movs	r2, #16
 80060ee:	b2d9      	uxtb	r1, r3
 80060f0:	b909      	cbnz	r1, 80060f6 <__lo0bits+0x32>
 80060f2:	3208      	adds	r2, #8
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	0719      	lsls	r1, r3, #28
 80060f8:	bf04      	itt	eq
 80060fa:	091b      	lsreq	r3, r3, #4
 80060fc:	3204      	addeq	r2, #4
 80060fe:	0799      	lsls	r1, r3, #30
 8006100:	bf04      	itt	eq
 8006102:	089b      	lsreq	r3, r3, #2
 8006104:	3202      	addeq	r2, #2
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	d403      	bmi.n	8006112 <__lo0bits+0x4e>
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	f102 0201 	add.w	r2, r2, #1
 8006110:	d003      	beq.n	800611a <__lo0bits+0x56>
 8006112:	6003      	str	r3, [r0, #0]
 8006114:	e7e5      	b.n	80060e2 <__lo0bits+0x1e>
 8006116:	2200      	movs	r2, #0
 8006118:	e7e3      	b.n	80060e2 <__lo0bits+0x1e>
 800611a:	2220      	movs	r2, #32
 800611c:	e7e1      	b.n	80060e2 <__lo0bits+0x1e>
	...

08006120 <__i2b>:
 8006120:	b510      	push	{r4, lr}
 8006122:	460c      	mov	r4, r1
 8006124:	2101      	movs	r1, #1
 8006126:	f7ff febb 	bl	8005ea0 <_Balloc>
 800612a:	4602      	mov	r2, r0
 800612c:	b928      	cbnz	r0, 800613a <__i2b+0x1a>
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <__i2b+0x24>)
 8006130:	4805      	ldr	r0, [pc, #20]	; (8006148 <__i2b+0x28>)
 8006132:	f240 1145 	movw	r1, #325	; 0x145
 8006136:	f001 fc0b 	bl	8007950 <__assert_func>
 800613a:	2301      	movs	r3, #1
 800613c:	6144      	str	r4, [r0, #20]
 800613e:	6103      	str	r3, [r0, #16]
 8006140:	bd10      	pop	{r4, pc}
 8006142:	bf00      	nop
 8006144:	080094e5 	.word	0x080094e5
 8006148:	080094f6 	.word	0x080094f6

0800614c <__multiply>:
 800614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006150:	4691      	mov	r9, r2
 8006152:	690a      	ldr	r2, [r1, #16]
 8006154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	bfb8      	it	lt
 800615c:	460b      	movlt	r3, r1
 800615e:	460c      	mov	r4, r1
 8006160:	bfbc      	itt	lt
 8006162:	464c      	movlt	r4, r9
 8006164:	4699      	movlt	r9, r3
 8006166:	6927      	ldr	r7, [r4, #16]
 8006168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800616c:	68a3      	ldr	r3, [r4, #8]
 800616e:	6861      	ldr	r1, [r4, #4]
 8006170:	eb07 060a 	add.w	r6, r7, sl
 8006174:	42b3      	cmp	r3, r6
 8006176:	b085      	sub	sp, #20
 8006178:	bfb8      	it	lt
 800617a:	3101      	addlt	r1, #1
 800617c:	f7ff fe90 	bl	8005ea0 <_Balloc>
 8006180:	b930      	cbnz	r0, 8006190 <__multiply+0x44>
 8006182:	4602      	mov	r2, r0
 8006184:	4b44      	ldr	r3, [pc, #272]	; (8006298 <__multiply+0x14c>)
 8006186:	4845      	ldr	r0, [pc, #276]	; (800629c <__multiply+0x150>)
 8006188:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800618c:	f001 fbe0 	bl	8007950 <__assert_func>
 8006190:	f100 0514 	add.w	r5, r0, #20
 8006194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006198:	462b      	mov	r3, r5
 800619a:	2200      	movs	r2, #0
 800619c:	4543      	cmp	r3, r8
 800619e:	d321      	bcc.n	80061e4 <__multiply+0x98>
 80061a0:	f104 0314 	add.w	r3, r4, #20
 80061a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061a8:	f109 0314 	add.w	r3, r9, #20
 80061ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061b0:	9202      	str	r2, [sp, #8]
 80061b2:	1b3a      	subs	r2, r7, r4
 80061b4:	3a15      	subs	r2, #21
 80061b6:	f022 0203 	bic.w	r2, r2, #3
 80061ba:	3204      	adds	r2, #4
 80061bc:	f104 0115 	add.w	r1, r4, #21
 80061c0:	428f      	cmp	r7, r1
 80061c2:	bf38      	it	cc
 80061c4:	2204      	movcc	r2, #4
 80061c6:	9201      	str	r2, [sp, #4]
 80061c8:	9a02      	ldr	r2, [sp, #8]
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d80c      	bhi.n	80061ea <__multiply+0x9e>
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	dd03      	ble.n	80061dc <__multiply+0x90>
 80061d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d05b      	beq.n	8006294 <__multiply+0x148>
 80061dc:	6106      	str	r6, [r0, #16]
 80061de:	b005      	add	sp, #20
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	f843 2b04 	str.w	r2, [r3], #4
 80061e8:	e7d8      	b.n	800619c <__multiply+0x50>
 80061ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80061ee:	f1ba 0f00 	cmp.w	sl, #0
 80061f2:	d024      	beq.n	800623e <__multiply+0xf2>
 80061f4:	f104 0e14 	add.w	lr, r4, #20
 80061f8:	46a9      	mov	r9, r5
 80061fa:	f04f 0c00 	mov.w	ip, #0
 80061fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006202:	f8d9 1000 	ldr.w	r1, [r9]
 8006206:	fa1f fb82 	uxth.w	fp, r2
 800620a:	b289      	uxth	r1, r1
 800620c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006210:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006214:	f8d9 2000 	ldr.w	r2, [r9]
 8006218:	4461      	add	r1, ip
 800621a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800621e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006226:	b289      	uxth	r1, r1
 8006228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800622c:	4577      	cmp	r7, lr
 800622e:	f849 1b04 	str.w	r1, [r9], #4
 8006232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006236:	d8e2      	bhi.n	80061fe <__multiply+0xb2>
 8006238:	9a01      	ldr	r2, [sp, #4]
 800623a:	f845 c002 	str.w	ip, [r5, r2]
 800623e:	9a03      	ldr	r2, [sp, #12]
 8006240:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006244:	3304      	adds	r3, #4
 8006246:	f1b9 0f00 	cmp.w	r9, #0
 800624a:	d021      	beq.n	8006290 <__multiply+0x144>
 800624c:	6829      	ldr	r1, [r5, #0]
 800624e:	f104 0c14 	add.w	ip, r4, #20
 8006252:	46ae      	mov	lr, r5
 8006254:	f04f 0a00 	mov.w	sl, #0
 8006258:	f8bc b000 	ldrh.w	fp, [ip]
 800625c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006260:	fb09 220b 	mla	r2, r9, fp, r2
 8006264:	4452      	add	r2, sl
 8006266:	b289      	uxth	r1, r1
 8006268:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800626c:	f84e 1b04 	str.w	r1, [lr], #4
 8006270:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006278:	f8be 1000 	ldrh.w	r1, [lr]
 800627c:	fb09 110a 	mla	r1, r9, sl, r1
 8006280:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006284:	4567      	cmp	r7, ip
 8006286:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800628a:	d8e5      	bhi.n	8006258 <__multiply+0x10c>
 800628c:	9a01      	ldr	r2, [sp, #4]
 800628e:	50a9      	str	r1, [r5, r2]
 8006290:	3504      	adds	r5, #4
 8006292:	e799      	b.n	80061c8 <__multiply+0x7c>
 8006294:	3e01      	subs	r6, #1
 8006296:	e79b      	b.n	80061d0 <__multiply+0x84>
 8006298:	080094e5 	.word	0x080094e5
 800629c:	080094f6 	.word	0x080094f6

080062a0 <__pow5mult>:
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	4615      	mov	r5, r2
 80062a6:	f012 0203 	ands.w	r2, r2, #3
 80062aa:	4606      	mov	r6, r0
 80062ac:	460f      	mov	r7, r1
 80062ae:	d007      	beq.n	80062c0 <__pow5mult+0x20>
 80062b0:	4c25      	ldr	r4, [pc, #148]	; (8006348 <__pow5mult+0xa8>)
 80062b2:	3a01      	subs	r2, #1
 80062b4:	2300      	movs	r3, #0
 80062b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062ba:	f7ff fe53 	bl	8005f64 <__multadd>
 80062be:	4607      	mov	r7, r0
 80062c0:	10ad      	asrs	r5, r5, #2
 80062c2:	d03d      	beq.n	8006340 <__pow5mult+0xa0>
 80062c4:	69f4      	ldr	r4, [r6, #28]
 80062c6:	b97c      	cbnz	r4, 80062e8 <__pow5mult+0x48>
 80062c8:	2010      	movs	r0, #16
 80062ca:	f7ff fd35 	bl	8005d38 <malloc>
 80062ce:	4602      	mov	r2, r0
 80062d0:	61f0      	str	r0, [r6, #28]
 80062d2:	b928      	cbnz	r0, 80062e0 <__pow5mult+0x40>
 80062d4:	4b1d      	ldr	r3, [pc, #116]	; (800634c <__pow5mult+0xac>)
 80062d6:	481e      	ldr	r0, [pc, #120]	; (8006350 <__pow5mult+0xb0>)
 80062d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062dc:	f001 fb38 	bl	8007950 <__assert_func>
 80062e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e4:	6004      	str	r4, [r0, #0]
 80062e6:	60c4      	str	r4, [r0, #12]
 80062e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80062ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062f0:	b94c      	cbnz	r4, 8006306 <__pow5mult+0x66>
 80062f2:	f240 2171 	movw	r1, #625	; 0x271
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7ff ff12 	bl	8006120 <__i2b>
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006302:	4604      	mov	r4, r0
 8006304:	6003      	str	r3, [r0, #0]
 8006306:	f04f 0900 	mov.w	r9, #0
 800630a:	07eb      	lsls	r3, r5, #31
 800630c:	d50a      	bpl.n	8006324 <__pow5mult+0x84>
 800630e:	4639      	mov	r1, r7
 8006310:	4622      	mov	r2, r4
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ff1a 	bl	800614c <__multiply>
 8006318:	4639      	mov	r1, r7
 800631a:	4680      	mov	r8, r0
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff fdff 	bl	8005f20 <_Bfree>
 8006322:	4647      	mov	r7, r8
 8006324:	106d      	asrs	r5, r5, #1
 8006326:	d00b      	beq.n	8006340 <__pow5mult+0xa0>
 8006328:	6820      	ldr	r0, [r4, #0]
 800632a:	b938      	cbnz	r0, 800633c <__pow5mult+0x9c>
 800632c:	4622      	mov	r2, r4
 800632e:	4621      	mov	r1, r4
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ff0b 	bl	800614c <__multiply>
 8006336:	6020      	str	r0, [r4, #0]
 8006338:	f8c0 9000 	str.w	r9, [r0]
 800633c:	4604      	mov	r4, r0
 800633e:	e7e4      	b.n	800630a <__pow5mult+0x6a>
 8006340:	4638      	mov	r0, r7
 8006342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006346:	bf00      	nop
 8006348:	08009640 	.word	0x08009640
 800634c:	08009476 	.word	0x08009476
 8006350:	080094f6 	.word	0x080094f6

08006354 <__lshift>:
 8006354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	460c      	mov	r4, r1
 800635a:	6849      	ldr	r1, [r1, #4]
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006362:	68a3      	ldr	r3, [r4, #8]
 8006364:	4607      	mov	r7, r0
 8006366:	4691      	mov	r9, r2
 8006368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800636c:	f108 0601 	add.w	r6, r8, #1
 8006370:	42b3      	cmp	r3, r6
 8006372:	db0b      	blt.n	800638c <__lshift+0x38>
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff fd93 	bl	8005ea0 <_Balloc>
 800637a:	4605      	mov	r5, r0
 800637c:	b948      	cbnz	r0, 8006392 <__lshift+0x3e>
 800637e:	4602      	mov	r2, r0
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <__lshift+0xd0>)
 8006382:	4829      	ldr	r0, [pc, #164]	; (8006428 <__lshift+0xd4>)
 8006384:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006388:	f001 fae2 	bl	8007950 <__assert_func>
 800638c:	3101      	adds	r1, #1
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	e7ee      	b.n	8006370 <__lshift+0x1c>
 8006392:	2300      	movs	r3, #0
 8006394:	f100 0114 	add.w	r1, r0, #20
 8006398:	f100 0210 	add.w	r2, r0, #16
 800639c:	4618      	mov	r0, r3
 800639e:	4553      	cmp	r3, sl
 80063a0:	db33      	blt.n	800640a <__lshift+0xb6>
 80063a2:	6920      	ldr	r0, [r4, #16]
 80063a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063a8:	f104 0314 	add.w	r3, r4, #20
 80063ac:	f019 091f 	ands.w	r9, r9, #31
 80063b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063b8:	d02b      	beq.n	8006412 <__lshift+0xbe>
 80063ba:	f1c9 0e20 	rsb	lr, r9, #32
 80063be:	468a      	mov	sl, r1
 80063c0:	2200      	movs	r2, #0
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	fa00 f009 	lsl.w	r0, r0, r9
 80063c8:	4310      	orrs	r0, r2
 80063ca:	f84a 0b04 	str.w	r0, [sl], #4
 80063ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d2:	459c      	cmp	ip, r3
 80063d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80063d8:	d8f3      	bhi.n	80063c2 <__lshift+0x6e>
 80063da:	ebac 0304 	sub.w	r3, ip, r4
 80063de:	3b15      	subs	r3, #21
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	3304      	adds	r3, #4
 80063e6:	f104 0015 	add.w	r0, r4, #21
 80063ea:	4584      	cmp	ip, r0
 80063ec:	bf38      	it	cc
 80063ee:	2304      	movcc	r3, #4
 80063f0:	50ca      	str	r2, [r1, r3]
 80063f2:	b10a      	cbz	r2, 80063f8 <__lshift+0xa4>
 80063f4:	f108 0602 	add.w	r6, r8, #2
 80063f8:	3e01      	subs	r6, #1
 80063fa:	4638      	mov	r0, r7
 80063fc:	612e      	str	r6, [r5, #16]
 80063fe:	4621      	mov	r1, r4
 8006400:	f7ff fd8e 	bl	8005f20 <_Bfree>
 8006404:	4628      	mov	r0, r5
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640a:	f842 0f04 	str.w	r0, [r2, #4]!
 800640e:	3301      	adds	r3, #1
 8006410:	e7c5      	b.n	800639e <__lshift+0x4a>
 8006412:	3904      	subs	r1, #4
 8006414:	f853 2b04 	ldr.w	r2, [r3], #4
 8006418:	f841 2f04 	str.w	r2, [r1, #4]!
 800641c:	459c      	cmp	ip, r3
 800641e:	d8f9      	bhi.n	8006414 <__lshift+0xc0>
 8006420:	e7ea      	b.n	80063f8 <__lshift+0xa4>
 8006422:	bf00      	nop
 8006424:	080094e5 	.word	0x080094e5
 8006428:	080094f6 	.word	0x080094f6

0800642c <__mcmp>:
 800642c:	b530      	push	{r4, r5, lr}
 800642e:	6902      	ldr	r2, [r0, #16]
 8006430:	690c      	ldr	r4, [r1, #16]
 8006432:	1b12      	subs	r2, r2, r4
 8006434:	d10e      	bne.n	8006454 <__mcmp+0x28>
 8006436:	f100 0314 	add.w	r3, r0, #20
 800643a:	3114      	adds	r1, #20
 800643c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800644c:	42a5      	cmp	r5, r4
 800644e:	d003      	beq.n	8006458 <__mcmp+0x2c>
 8006450:	d305      	bcc.n	800645e <__mcmp+0x32>
 8006452:	2201      	movs	r2, #1
 8006454:	4610      	mov	r0, r2
 8006456:	bd30      	pop	{r4, r5, pc}
 8006458:	4283      	cmp	r3, r0
 800645a:	d3f3      	bcc.n	8006444 <__mcmp+0x18>
 800645c:	e7fa      	b.n	8006454 <__mcmp+0x28>
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	e7f7      	b.n	8006454 <__mcmp+0x28>

08006464 <__mdiff>:
 8006464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	4606      	mov	r6, r0
 800646c:	4611      	mov	r1, r2
 800646e:	4620      	mov	r0, r4
 8006470:	4690      	mov	r8, r2
 8006472:	f7ff ffdb 	bl	800642c <__mcmp>
 8006476:	1e05      	subs	r5, r0, #0
 8006478:	d110      	bne.n	800649c <__mdiff+0x38>
 800647a:	4629      	mov	r1, r5
 800647c:	4630      	mov	r0, r6
 800647e:	f7ff fd0f 	bl	8005ea0 <_Balloc>
 8006482:	b930      	cbnz	r0, 8006492 <__mdiff+0x2e>
 8006484:	4b3a      	ldr	r3, [pc, #232]	; (8006570 <__mdiff+0x10c>)
 8006486:	4602      	mov	r2, r0
 8006488:	f240 2137 	movw	r1, #567	; 0x237
 800648c:	4839      	ldr	r0, [pc, #228]	; (8006574 <__mdiff+0x110>)
 800648e:	f001 fa5f 	bl	8007950 <__assert_func>
 8006492:	2301      	movs	r3, #1
 8006494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	bfa4      	itt	ge
 800649e:	4643      	movge	r3, r8
 80064a0:	46a0      	movge	r8, r4
 80064a2:	4630      	mov	r0, r6
 80064a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064a8:	bfa6      	itte	ge
 80064aa:	461c      	movge	r4, r3
 80064ac:	2500      	movge	r5, #0
 80064ae:	2501      	movlt	r5, #1
 80064b0:	f7ff fcf6 	bl	8005ea0 <_Balloc>
 80064b4:	b920      	cbnz	r0, 80064c0 <__mdiff+0x5c>
 80064b6:	4b2e      	ldr	r3, [pc, #184]	; (8006570 <__mdiff+0x10c>)
 80064b8:	4602      	mov	r2, r0
 80064ba:	f240 2145 	movw	r1, #581	; 0x245
 80064be:	e7e5      	b.n	800648c <__mdiff+0x28>
 80064c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064c4:	6926      	ldr	r6, [r4, #16]
 80064c6:	60c5      	str	r5, [r0, #12]
 80064c8:	f104 0914 	add.w	r9, r4, #20
 80064cc:	f108 0514 	add.w	r5, r8, #20
 80064d0:	f100 0e14 	add.w	lr, r0, #20
 80064d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80064d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064dc:	f108 0210 	add.w	r2, r8, #16
 80064e0:	46f2      	mov	sl, lr
 80064e2:	2100      	movs	r1, #0
 80064e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064ec:	fa11 f88b 	uxtah	r8, r1, fp
 80064f0:	b299      	uxth	r1, r3
 80064f2:	0c1b      	lsrs	r3, r3, #16
 80064f4:	eba8 0801 	sub.w	r8, r8, r1
 80064f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006500:	fa1f f888 	uxth.w	r8, r8
 8006504:	1419      	asrs	r1, r3, #16
 8006506:	454e      	cmp	r6, r9
 8006508:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800650c:	f84a 3b04 	str.w	r3, [sl], #4
 8006510:	d8e8      	bhi.n	80064e4 <__mdiff+0x80>
 8006512:	1b33      	subs	r3, r6, r4
 8006514:	3b15      	subs	r3, #21
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	3304      	adds	r3, #4
 800651c:	3415      	adds	r4, #21
 800651e:	42a6      	cmp	r6, r4
 8006520:	bf38      	it	cc
 8006522:	2304      	movcc	r3, #4
 8006524:	441d      	add	r5, r3
 8006526:	4473      	add	r3, lr
 8006528:	469e      	mov	lr, r3
 800652a:	462e      	mov	r6, r5
 800652c:	4566      	cmp	r6, ip
 800652e:	d30e      	bcc.n	800654e <__mdiff+0xea>
 8006530:	f10c 0203 	add.w	r2, ip, #3
 8006534:	1b52      	subs	r2, r2, r5
 8006536:	f022 0203 	bic.w	r2, r2, #3
 800653a:	3d03      	subs	r5, #3
 800653c:	45ac      	cmp	ip, r5
 800653e:	bf38      	it	cc
 8006540:	2200      	movcc	r2, #0
 8006542:	4413      	add	r3, r2
 8006544:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006548:	b17a      	cbz	r2, 800656a <__mdiff+0x106>
 800654a:	6107      	str	r7, [r0, #16]
 800654c:	e7a4      	b.n	8006498 <__mdiff+0x34>
 800654e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006552:	fa11 f288 	uxtah	r2, r1, r8
 8006556:	1414      	asrs	r4, r2, #16
 8006558:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800655c:	b292      	uxth	r2, r2
 800655e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006562:	f84e 2b04 	str.w	r2, [lr], #4
 8006566:	1421      	asrs	r1, r4, #16
 8006568:	e7e0      	b.n	800652c <__mdiff+0xc8>
 800656a:	3f01      	subs	r7, #1
 800656c:	e7ea      	b.n	8006544 <__mdiff+0xe0>
 800656e:	bf00      	nop
 8006570:	080094e5 	.word	0x080094e5
 8006574:	080094f6 	.word	0x080094f6

08006578 <__ulp>:
 8006578:	b082      	sub	sp, #8
 800657a:	ed8d 0b00 	vstr	d0, [sp]
 800657e:	9a01      	ldr	r2, [sp, #4]
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <__ulp+0x48>)
 8006582:	4013      	ands	r3, r2
 8006584:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006588:	2b00      	cmp	r3, #0
 800658a:	dc08      	bgt.n	800659e <__ulp+0x26>
 800658c:	425b      	negs	r3, r3
 800658e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006592:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006596:	da04      	bge.n	80065a2 <__ulp+0x2a>
 8006598:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800659c:	4113      	asrs	r3, r2
 800659e:	2200      	movs	r2, #0
 80065a0:	e008      	b.n	80065b4 <__ulp+0x3c>
 80065a2:	f1a2 0314 	sub.w	r3, r2, #20
 80065a6:	2b1e      	cmp	r3, #30
 80065a8:	bfda      	itte	le
 80065aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80065ae:	40da      	lsrle	r2, r3
 80065b0:	2201      	movgt	r2, #1
 80065b2:	2300      	movs	r3, #0
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	ec41 0b10 	vmov	d0, r0, r1
 80065bc:	b002      	add	sp, #8
 80065be:	4770      	bx	lr
 80065c0:	7ff00000 	.word	0x7ff00000

080065c4 <__b2d>:
 80065c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c8:	6906      	ldr	r6, [r0, #16]
 80065ca:	f100 0814 	add.w	r8, r0, #20
 80065ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80065d2:	1f37      	subs	r7, r6, #4
 80065d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80065d8:	4610      	mov	r0, r2
 80065da:	f7ff fd53 	bl	8006084 <__hi0bits>
 80065de:	f1c0 0320 	rsb	r3, r0, #32
 80065e2:	280a      	cmp	r0, #10
 80065e4:	600b      	str	r3, [r1, #0]
 80065e6:	491b      	ldr	r1, [pc, #108]	; (8006654 <__b2d+0x90>)
 80065e8:	dc15      	bgt.n	8006616 <__b2d+0x52>
 80065ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80065ee:	fa22 f30c 	lsr.w	r3, r2, ip
 80065f2:	45b8      	cmp	r8, r7
 80065f4:	ea43 0501 	orr.w	r5, r3, r1
 80065f8:	bf34      	ite	cc
 80065fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80065fe:	2300      	movcs	r3, #0
 8006600:	3015      	adds	r0, #21
 8006602:	fa02 f000 	lsl.w	r0, r2, r0
 8006606:	fa23 f30c 	lsr.w	r3, r3, ip
 800660a:	4303      	orrs	r3, r0
 800660c:	461c      	mov	r4, r3
 800660e:	ec45 4b10 	vmov	d0, r4, r5
 8006612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006616:	45b8      	cmp	r8, r7
 8006618:	bf3a      	itte	cc
 800661a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800661e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006622:	2300      	movcs	r3, #0
 8006624:	380b      	subs	r0, #11
 8006626:	d012      	beq.n	800664e <__b2d+0x8a>
 8006628:	f1c0 0120 	rsb	r1, r0, #32
 800662c:	fa23 f401 	lsr.w	r4, r3, r1
 8006630:	4082      	lsls	r2, r0
 8006632:	4322      	orrs	r2, r4
 8006634:	4547      	cmp	r7, r8
 8006636:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800663a:	bf8c      	ite	hi
 800663c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006640:	2200      	movls	r2, #0
 8006642:	4083      	lsls	r3, r0
 8006644:	40ca      	lsrs	r2, r1
 8006646:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800664a:	4313      	orrs	r3, r2
 800664c:	e7de      	b.n	800660c <__b2d+0x48>
 800664e:	ea42 0501 	orr.w	r5, r2, r1
 8006652:	e7db      	b.n	800660c <__b2d+0x48>
 8006654:	3ff00000 	.word	0x3ff00000

08006658 <__d2b>:
 8006658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800665c:	460f      	mov	r7, r1
 800665e:	2101      	movs	r1, #1
 8006660:	ec59 8b10 	vmov	r8, r9, d0
 8006664:	4616      	mov	r6, r2
 8006666:	f7ff fc1b 	bl	8005ea0 <_Balloc>
 800666a:	4604      	mov	r4, r0
 800666c:	b930      	cbnz	r0, 800667c <__d2b+0x24>
 800666e:	4602      	mov	r2, r0
 8006670:	4b24      	ldr	r3, [pc, #144]	; (8006704 <__d2b+0xac>)
 8006672:	4825      	ldr	r0, [pc, #148]	; (8006708 <__d2b+0xb0>)
 8006674:	f240 310f 	movw	r1, #783	; 0x30f
 8006678:	f001 f96a 	bl	8007950 <__assert_func>
 800667c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006684:	bb2d      	cbnz	r5, 80066d2 <__d2b+0x7a>
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	f1b8 0300 	subs.w	r3, r8, #0
 800668c:	d026      	beq.n	80066dc <__d2b+0x84>
 800668e:	4668      	mov	r0, sp
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	f7ff fd17 	bl	80060c4 <__lo0bits>
 8006696:	e9dd 1200 	ldrd	r1, r2, [sp]
 800669a:	b1e8      	cbz	r0, 80066d8 <__d2b+0x80>
 800669c:	f1c0 0320 	rsb	r3, r0, #32
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	430b      	orrs	r3, r1
 80066a6:	40c2      	lsrs	r2, r0
 80066a8:	6163      	str	r3, [r4, #20]
 80066aa:	9201      	str	r2, [sp, #4]
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	61a3      	str	r3, [r4, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bf14      	ite	ne
 80066b4:	2202      	movne	r2, #2
 80066b6:	2201      	moveq	r2, #1
 80066b8:	6122      	str	r2, [r4, #16]
 80066ba:	b1bd      	cbz	r5, 80066ec <__d2b+0x94>
 80066bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066c0:	4405      	add	r5, r0
 80066c2:	603d      	str	r5, [r7, #0]
 80066c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066c8:	6030      	str	r0, [r6, #0]
 80066ca:	4620      	mov	r0, r4
 80066cc:	b003      	add	sp, #12
 80066ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d6:	e7d6      	b.n	8006686 <__d2b+0x2e>
 80066d8:	6161      	str	r1, [r4, #20]
 80066da:	e7e7      	b.n	80066ac <__d2b+0x54>
 80066dc:	a801      	add	r0, sp, #4
 80066de:	f7ff fcf1 	bl	80060c4 <__lo0bits>
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	6163      	str	r3, [r4, #20]
 80066e6:	3020      	adds	r0, #32
 80066e8:	2201      	movs	r2, #1
 80066ea:	e7e5      	b.n	80066b8 <__d2b+0x60>
 80066ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80066f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066f4:	6038      	str	r0, [r7, #0]
 80066f6:	6918      	ldr	r0, [r3, #16]
 80066f8:	f7ff fcc4 	bl	8006084 <__hi0bits>
 80066fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006700:	e7e2      	b.n	80066c8 <__d2b+0x70>
 8006702:	bf00      	nop
 8006704:	080094e5 	.word	0x080094e5
 8006708:	080094f6 	.word	0x080094f6

0800670c <__ratio>:
 800670c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	4688      	mov	r8, r1
 8006712:	4669      	mov	r1, sp
 8006714:	4681      	mov	r9, r0
 8006716:	f7ff ff55 	bl	80065c4 <__b2d>
 800671a:	a901      	add	r1, sp, #4
 800671c:	4640      	mov	r0, r8
 800671e:	ec55 4b10 	vmov	r4, r5, d0
 8006722:	ee10 aa10 	vmov	sl, s0
 8006726:	f7ff ff4d 	bl	80065c4 <__b2d>
 800672a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800672e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	e9dd 3100 	ldrd	r3, r1, [sp]
 8006738:	1a5b      	subs	r3, r3, r1
 800673a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800673e:	ec57 6b10 	vmov	r6, r7, d0
 8006742:	2b00      	cmp	r3, #0
 8006744:	bfd6      	itet	le
 8006746:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800674a:	462a      	movgt	r2, r5
 800674c:	463a      	movle	r2, r7
 800674e:	46ab      	mov	fp, r5
 8006750:	bfd6      	itet	le
 8006752:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8006756:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800675a:	ee00 3a90 	vmovle	s1, r3
 800675e:	ec4b ab17 	vmov	d7, sl, fp
 8006762:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8006766:	b003      	add	sp, #12
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800676c <__copybits>:
 800676c:	3901      	subs	r1, #1
 800676e:	b570      	push	{r4, r5, r6, lr}
 8006770:	1149      	asrs	r1, r1, #5
 8006772:	6914      	ldr	r4, [r2, #16]
 8006774:	3101      	adds	r1, #1
 8006776:	f102 0314 	add.w	r3, r2, #20
 800677a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800677e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006782:	1f05      	subs	r5, r0, #4
 8006784:	42a3      	cmp	r3, r4
 8006786:	d30c      	bcc.n	80067a2 <__copybits+0x36>
 8006788:	1aa3      	subs	r3, r4, r2
 800678a:	3b11      	subs	r3, #17
 800678c:	f023 0303 	bic.w	r3, r3, #3
 8006790:	3211      	adds	r2, #17
 8006792:	42a2      	cmp	r2, r4
 8006794:	bf88      	it	hi
 8006796:	2300      	movhi	r3, #0
 8006798:	4418      	add	r0, r3
 800679a:	2300      	movs	r3, #0
 800679c:	4288      	cmp	r0, r1
 800679e:	d305      	bcc.n	80067ac <__copybits+0x40>
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
 80067a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80067a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80067aa:	e7eb      	b.n	8006784 <__copybits+0x18>
 80067ac:	f840 3b04 	str.w	r3, [r0], #4
 80067b0:	e7f4      	b.n	800679c <__copybits+0x30>

080067b2 <__any_on>:
 80067b2:	f100 0214 	add.w	r2, r0, #20
 80067b6:	6900      	ldr	r0, [r0, #16]
 80067b8:	114b      	asrs	r3, r1, #5
 80067ba:	4298      	cmp	r0, r3
 80067bc:	b510      	push	{r4, lr}
 80067be:	db11      	blt.n	80067e4 <__any_on+0x32>
 80067c0:	dd0a      	ble.n	80067d8 <__any_on+0x26>
 80067c2:	f011 011f 	ands.w	r1, r1, #31
 80067c6:	d007      	beq.n	80067d8 <__any_on+0x26>
 80067c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80067cc:	fa24 f001 	lsr.w	r0, r4, r1
 80067d0:	fa00 f101 	lsl.w	r1, r0, r1
 80067d4:	428c      	cmp	r4, r1
 80067d6:	d10b      	bne.n	80067f0 <__any_on+0x3e>
 80067d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067dc:	4293      	cmp	r3, r2
 80067de:	d803      	bhi.n	80067e8 <__any_on+0x36>
 80067e0:	2000      	movs	r0, #0
 80067e2:	bd10      	pop	{r4, pc}
 80067e4:	4603      	mov	r3, r0
 80067e6:	e7f7      	b.n	80067d8 <__any_on+0x26>
 80067e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d0f5      	beq.n	80067dc <__any_on+0x2a>
 80067f0:	2001      	movs	r0, #1
 80067f2:	e7f6      	b.n	80067e2 <__any_on+0x30>

080067f4 <sulp>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	4604      	mov	r4, r0
 80067f8:	460d      	mov	r5, r1
 80067fa:	4616      	mov	r6, r2
 80067fc:	ec45 4b10 	vmov	d0, r4, r5
 8006800:	f7ff feba 	bl	8006578 <__ulp>
 8006804:	b17e      	cbz	r6, 8006826 <sulp+0x32>
 8006806:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800680a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd09      	ble.n	8006826 <sulp+0x32>
 8006812:	051b      	lsls	r3, r3, #20
 8006814:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006818:	2000      	movs	r0, #0
 800681a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800681e:	ec41 0b17 	vmov	d7, r0, r1
 8006822:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006826:	bd70      	pop	{r4, r5, r6, pc}

08006828 <_strtod_l>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	ed2d 8b0e 	vpush	{d8-d14}
 8006830:	b097      	sub	sp, #92	; 0x5c
 8006832:	4604      	mov	r4, r0
 8006834:	920d      	str	r2, [sp, #52]	; 0x34
 8006836:	2200      	movs	r2, #0
 8006838:	9212      	str	r2, [sp, #72]	; 0x48
 800683a:	468a      	mov	sl, r1
 800683c:	f04f 0800 	mov.w	r8, #0
 8006840:	f04f 0900 	mov.w	r9, #0
 8006844:	460a      	mov	r2, r1
 8006846:	9211      	str	r2, [sp, #68]	; 0x44
 8006848:	7811      	ldrb	r1, [r2, #0]
 800684a:	292b      	cmp	r1, #43	; 0x2b
 800684c:	d04c      	beq.n	80068e8 <_strtod_l+0xc0>
 800684e:	d839      	bhi.n	80068c4 <_strtod_l+0x9c>
 8006850:	290d      	cmp	r1, #13
 8006852:	d833      	bhi.n	80068bc <_strtod_l+0x94>
 8006854:	2908      	cmp	r1, #8
 8006856:	d833      	bhi.n	80068c0 <_strtod_l+0x98>
 8006858:	2900      	cmp	r1, #0
 800685a:	d03c      	beq.n	80068d6 <_strtod_l+0xae>
 800685c:	2200      	movs	r2, #0
 800685e:	9208      	str	r2, [sp, #32]
 8006860:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006862:	7832      	ldrb	r2, [r6, #0]
 8006864:	2a30      	cmp	r2, #48	; 0x30
 8006866:	f040 80b8 	bne.w	80069da <_strtod_l+0x1b2>
 800686a:	7872      	ldrb	r2, [r6, #1]
 800686c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006870:	2a58      	cmp	r2, #88	; 0x58
 8006872:	d170      	bne.n	8006956 <_strtod_l+0x12e>
 8006874:	9302      	str	r3, [sp, #8]
 8006876:	9b08      	ldr	r3, [sp, #32]
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	ab12      	add	r3, sp, #72	; 0x48
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	4a91      	ldr	r2, [pc, #580]	; (8006ac4 <_strtod_l+0x29c>)
 8006880:	ab13      	add	r3, sp, #76	; 0x4c
 8006882:	a911      	add	r1, sp, #68	; 0x44
 8006884:	4620      	mov	r0, r4
 8006886:	f001 f8ff 	bl	8007a88 <__gethex>
 800688a:	f010 070f 	ands.w	r7, r0, #15
 800688e:	4605      	mov	r5, r0
 8006890:	d005      	beq.n	800689e <_strtod_l+0x76>
 8006892:	2f06      	cmp	r7, #6
 8006894:	d12a      	bne.n	80068ec <_strtod_l+0xc4>
 8006896:	3601      	adds	r6, #1
 8006898:	2300      	movs	r3, #0
 800689a:	9611      	str	r6, [sp, #68]	; 0x44
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 8555 	bne.w	8007350 <_strtod_l+0xb28>
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	ec49 8b10 	vmov	d0, r8, r9
 80068ac:	b1cb      	cbz	r3, 80068e2 <_strtod_l+0xba>
 80068ae:	eeb1 0b40 	vneg.f64	d0, d0
 80068b2:	b017      	add	sp, #92	; 0x5c
 80068b4:	ecbd 8b0e 	vpop	{d8-d14}
 80068b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	2920      	cmp	r1, #32
 80068be:	d1cd      	bne.n	800685c <_strtod_l+0x34>
 80068c0:	3201      	adds	r2, #1
 80068c2:	e7c0      	b.n	8006846 <_strtod_l+0x1e>
 80068c4:	292d      	cmp	r1, #45	; 0x2d
 80068c6:	d1c9      	bne.n	800685c <_strtod_l+0x34>
 80068c8:	2101      	movs	r1, #1
 80068ca:	9108      	str	r1, [sp, #32]
 80068cc:	1c51      	adds	r1, r2, #1
 80068ce:	9111      	str	r1, [sp, #68]	; 0x44
 80068d0:	7852      	ldrb	r2, [r2, #1]
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	d1c4      	bne.n	8006860 <_strtod_l+0x38>
 80068d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 8535 	bne.w	800734c <_strtod_l+0xb24>
 80068e2:	ec49 8b10 	vmov	d0, r8, r9
 80068e6:	e7e4      	b.n	80068b2 <_strtod_l+0x8a>
 80068e8:	2100      	movs	r1, #0
 80068ea:	e7ee      	b.n	80068ca <_strtod_l+0xa2>
 80068ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068ee:	b13a      	cbz	r2, 8006900 <_strtod_l+0xd8>
 80068f0:	2135      	movs	r1, #53	; 0x35
 80068f2:	a814      	add	r0, sp, #80	; 0x50
 80068f4:	f7ff ff3a 	bl	800676c <__copybits>
 80068f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff fb10 	bl	8005f20 <_Bfree>
 8006900:	1e7b      	subs	r3, r7, #1
 8006902:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006904:	2b04      	cmp	r3, #4
 8006906:	d806      	bhi.n	8006916 <_strtod_l+0xee>
 8006908:	e8df f003 	tbb	[pc, r3]
 800690c:	201d0314 	.word	0x201d0314
 8006910:	14          	.byte	0x14
 8006911:	00          	.byte	0x00
 8006912:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8006916:	05eb      	lsls	r3, r5, #23
 8006918:	bf48      	it	mi
 800691a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800691e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006922:	0d1b      	lsrs	r3, r3, #20
 8006924:	051b      	lsls	r3, r3, #20
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1b9      	bne.n	800689e <_strtod_l+0x76>
 800692a:	f7fe fb8f 	bl	800504c <__errno>
 800692e:	2322      	movs	r3, #34	; 0x22
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	e7b4      	b.n	800689e <_strtod_l+0x76>
 8006934:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8006938:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800693c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006940:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006944:	e7e7      	b.n	8006916 <_strtod_l+0xee>
 8006946:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006acc <_strtod_l+0x2a4>
 800694a:	e7e4      	b.n	8006916 <_strtod_l+0xee>
 800694c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006950:	f04f 38ff 	mov.w	r8, #4294967295
 8006954:	e7df      	b.n	8006916 <_strtod_l+0xee>
 8006956:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	9211      	str	r2, [sp, #68]	; 0x44
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b30      	cmp	r3, #48	; 0x30
 8006960:	d0f9      	beq.n	8006956 <_strtod_l+0x12e>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d09b      	beq.n	800689e <_strtod_l+0x76>
 8006966:	2301      	movs	r3, #1
 8006968:	9306      	str	r3, [sp, #24]
 800696a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800696c:	9309      	str	r3, [sp, #36]	; 0x24
 800696e:	2300      	movs	r3, #0
 8006970:	9305      	str	r3, [sp, #20]
 8006972:	9307      	str	r3, [sp, #28]
 8006974:	461e      	mov	r6, r3
 8006976:	220a      	movs	r2, #10
 8006978:	9811      	ldr	r0, [sp, #68]	; 0x44
 800697a:	7805      	ldrb	r5, [r0, #0]
 800697c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006980:	b2d9      	uxtb	r1, r3
 8006982:	2909      	cmp	r1, #9
 8006984:	d92b      	bls.n	80069de <_strtod_l+0x1b6>
 8006986:	4950      	ldr	r1, [pc, #320]	; (8006ac8 <_strtod_l+0x2a0>)
 8006988:	2201      	movs	r2, #1
 800698a:	f000 ffa9 	bl	80078e0 <strncmp>
 800698e:	2800      	cmp	r0, #0
 8006990:	d035      	beq.n	80069fe <_strtod_l+0x1d6>
 8006992:	2000      	movs	r0, #0
 8006994:	462a      	mov	r2, r5
 8006996:	4633      	mov	r3, r6
 8006998:	4683      	mov	fp, r0
 800699a:	4601      	mov	r1, r0
 800699c:	2a65      	cmp	r2, #101	; 0x65
 800699e:	d001      	beq.n	80069a4 <_strtod_l+0x17c>
 80069a0:	2a45      	cmp	r2, #69	; 0x45
 80069a2:	d118      	bne.n	80069d6 <_strtod_l+0x1ae>
 80069a4:	b91b      	cbnz	r3, 80069ae <_strtod_l+0x186>
 80069a6:	9b06      	ldr	r3, [sp, #24]
 80069a8:	4303      	orrs	r3, r0
 80069aa:	d094      	beq.n	80068d6 <_strtod_l+0xae>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80069b2:	f10a 0201 	add.w	r2, sl, #1
 80069b6:	9211      	str	r2, [sp, #68]	; 0x44
 80069b8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80069bc:	2a2b      	cmp	r2, #43	; 0x2b
 80069be:	d075      	beq.n	8006aac <_strtod_l+0x284>
 80069c0:	2a2d      	cmp	r2, #45	; 0x2d
 80069c2:	d07b      	beq.n	8006abc <_strtod_l+0x294>
 80069c4:	f04f 0e00 	mov.w	lr, #0
 80069c8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80069cc:	2d09      	cmp	r5, #9
 80069ce:	f240 8083 	bls.w	8006ad8 <_strtod_l+0x2b0>
 80069d2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80069d6:	2500      	movs	r5, #0
 80069d8:	e09e      	b.n	8006b18 <_strtod_l+0x2f0>
 80069da:	2300      	movs	r3, #0
 80069dc:	e7c4      	b.n	8006968 <_strtod_l+0x140>
 80069de:	2e08      	cmp	r6, #8
 80069e0:	bfd5      	itete	le
 80069e2:	9907      	ldrle	r1, [sp, #28]
 80069e4:	9905      	ldrgt	r1, [sp, #20]
 80069e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80069ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80069ee:	f100 0001 	add.w	r0, r0, #1
 80069f2:	bfd4      	ite	le
 80069f4:	9307      	strle	r3, [sp, #28]
 80069f6:	9305      	strgt	r3, [sp, #20]
 80069f8:	3601      	adds	r6, #1
 80069fa:	9011      	str	r0, [sp, #68]	; 0x44
 80069fc:	e7bc      	b.n	8006978 <_strtod_l+0x150>
 80069fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	9211      	str	r2, [sp, #68]	; 0x44
 8006a04:	785a      	ldrb	r2, [r3, #1]
 8006a06:	b3ae      	cbz	r6, 8006a74 <_strtod_l+0x24c>
 8006a08:	4683      	mov	fp, r0
 8006a0a:	4633      	mov	r3, r6
 8006a0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a10:	2909      	cmp	r1, #9
 8006a12:	d912      	bls.n	8006a3a <_strtod_l+0x212>
 8006a14:	2101      	movs	r1, #1
 8006a16:	e7c1      	b.n	800699c <_strtod_l+0x174>
 8006a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	9211      	str	r2, [sp, #68]	; 0x44
 8006a1e:	785a      	ldrb	r2, [r3, #1]
 8006a20:	3001      	adds	r0, #1
 8006a22:	2a30      	cmp	r2, #48	; 0x30
 8006a24:	d0f8      	beq.n	8006a18 <_strtod_l+0x1f0>
 8006a26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	f200 8495 	bhi.w	800735a <_strtod_l+0xb32>
 8006a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	4683      	mov	fp, r0
 8006a36:	2000      	movs	r0, #0
 8006a38:	4603      	mov	r3, r0
 8006a3a:	3a30      	subs	r2, #48	; 0x30
 8006a3c:	f100 0101 	add.w	r1, r0, #1
 8006a40:	d012      	beq.n	8006a68 <_strtod_l+0x240>
 8006a42:	448b      	add	fp, r1
 8006a44:	eb00 0c03 	add.w	ip, r0, r3
 8006a48:	4619      	mov	r1, r3
 8006a4a:	250a      	movs	r5, #10
 8006a4c:	4561      	cmp	r1, ip
 8006a4e:	d113      	bne.n	8006a78 <_strtod_l+0x250>
 8006a50:	1819      	adds	r1, r3, r0
 8006a52:	2908      	cmp	r1, #8
 8006a54:	f103 0301 	add.w	r3, r3, #1
 8006a58:	4403      	add	r3, r0
 8006a5a:	dc1b      	bgt.n	8006a94 <_strtod_l+0x26c>
 8006a5c:	9807      	ldr	r0, [sp, #28]
 8006a5e:	210a      	movs	r1, #10
 8006a60:	fb01 2200 	mla	r2, r1, r0, r2
 8006a64:	9207      	str	r2, [sp, #28]
 8006a66:	2100      	movs	r1, #0
 8006a68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a6a:	1c50      	adds	r0, r2, #1
 8006a6c:	9011      	str	r0, [sp, #68]	; 0x44
 8006a6e:	7852      	ldrb	r2, [r2, #1]
 8006a70:	4608      	mov	r0, r1
 8006a72:	e7cb      	b.n	8006a0c <_strtod_l+0x1e4>
 8006a74:	4630      	mov	r0, r6
 8006a76:	e7d4      	b.n	8006a22 <_strtod_l+0x1fa>
 8006a78:	2908      	cmp	r1, #8
 8006a7a:	f101 0101 	add.w	r1, r1, #1
 8006a7e:	dc03      	bgt.n	8006a88 <_strtod_l+0x260>
 8006a80:	9f07      	ldr	r7, [sp, #28]
 8006a82:	436f      	muls	r7, r5
 8006a84:	9707      	str	r7, [sp, #28]
 8006a86:	e7e1      	b.n	8006a4c <_strtod_l+0x224>
 8006a88:	2910      	cmp	r1, #16
 8006a8a:	bfde      	ittt	le
 8006a8c:	9f05      	ldrle	r7, [sp, #20]
 8006a8e:	436f      	mulle	r7, r5
 8006a90:	9705      	strle	r7, [sp, #20]
 8006a92:	e7db      	b.n	8006a4c <_strtod_l+0x224>
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	bfdf      	itttt	le
 8006a98:	9805      	ldrle	r0, [sp, #20]
 8006a9a:	210a      	movle	r1, #10
 8006a9c:	fb01 2200 	mlale	r2, r1, r0, r2
 8006aa0:	9205      	strle	r2, [sp, #20]
 8006aa2:	e7e0      	b.n	8006a66 <_strtod_l+0x23e>
 8006aa4:	f04f 0b00 	mov.w	fp, #0
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	e77c      	b.n	80069a6 <_strtod_l+0x17e>
 8006aac:	f04f 0e00 	mov.w	lr, #0
 8006ab0:	f10a 0202 	add.w	r2, sl, #2
 8006ab4:	9211      	str	r2, [sp, #68]	; 0x44
 8006ab6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006aba:	e785      	b.n	80069c8 <_strtod_l+0x1a0>
 8006abc:	f04f 0e01 	mov.w	lr, #1
 8006ac0:	e7f6      	b.n	8006ab0 <_strtod_l+0x288>
 8006ac2:	bf00      	nop
 8006ac4:	08009650 	.word	0x08009650
 8006ac8:	0800964c 	.word	0x0800964c
 8006acc:	7ff00000 	.word	0x7ff00000
 8006ad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ad2:	1c55      	adds	r5, r2, #1
 8006ad4:	9511      	str	r5, [sp, #68]	; 0x44
 8006ad6:	7852      	ldrb	r2, [r2, #1]
 8006ad8:	2a30      	cmp	r2, #48	; 0x30
 8006ada:	d0f9      	beq.n	8006ad0 <_strtod_l+0x2a8>
 8006adc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006ae0:	2d08      	cmp	r5, #8
 8006ae2:	f63f af78 	bhi.w	80069d6 <_strtod_l+0x1ae>
 8006ae6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006aea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006aec:	920a      	str	r2, [sp, #40]	; 0x28
 8006aee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006af0:	1c55      	adds	r5, r2, #1
 8006af2:	9511      	str	r5, [sp, #68]	; 0x44
 8006af4:	7852      	ldrb	r2, [r2, #1]
 8006af6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006afa:	2f09      	cmp	r7, #9
 8006afc:	d937      	bls.n	8006b6e <_strtod_l+0x346>
 8006afe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006b00:	1bed      	subs	r5, r5, r7
 8006b02:	2d08      	cmp	r5, #8
 8006b04:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006b08:	dc02      	bgt.n	8006b10 <_strtod_l+0x2e8>
 8006b0a:	4565      	cmp	r5, ip
 8006b0c:	bfa8      	it	ge
 8006b0e:	4665      	movge	r5, ip
 8006b10:	f1be 0f00 	cmp.w	lr, #0
 8006b14:	d000      	beq.n	8006b18 <_strtod_l+0x2f0>
 8006b16:	426d      	negs	r5, r5
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d14d      	bne.n	8006bb8 <_strtod_l+0x390>
 8006b1c:	9b06      	ldr	r3, [sp, #24]
 8006b1e:	4303      	orrs	r3, r0
 8006b20:	f47f aebd 	bne.w	800689e <_strtod_l+0x76>
 8006b24:	2900      	cmp	r1, #0
 8006b26:	f47f aed6 	bne.w	80068d6 <_strtod_l+0xae>
 8006b2a:	2a69      	cmp	r2, #105	; 0x69
 8006b2c:	d027      	beq.n	8006b7e <_strtod_l+0x356>
 8006b2e:	dc24      	bgt.n	8006b7a <_strtod_l+0x352>
 8006b30:	2a49      	cmp	r2, #73	; 0x49
 8006b32:	d024      	beq.n	8006b7e <_strtod_l+0x356>
 8006b34:	2a4e      	cmp	r2, #78	; 0x4e
 8006b36:	f47f aece 	bne.w	80068d6 <_strtod_l+0xae>
 8006b3a:	4995      	ldr	r1, [pc, #596]	; (8006d90 <_strtod_l+0x568>)
 8006b3c:	a811      	add	r0, sp, #68	; 0x44
 8006b3e:	f001 f9e3 	bl	8007f08 <__match>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f43f aec7 	beq.w	80068d6 <_strtod_l+0xae>
 8006b48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b28      	cmp	r3, #40	; 0x28
 8006b4e:	d12d      	bne.n	8006bac <_strtod_l+0x384>
 8006b50:	4990      	ldr	r1, [pc, #576]	; (8006d94 <_strtod_l+0x56c>)
 8006b52:	aa14      	add	r2, sp, #80	; 0x50
 8006b54:	a811      	add	r0, sp, #68	; 0x44
 8006b56:	f001 f9eb 	bl	8007f30 <__hexnan>
 8006b5a:	2805      	cmp	r0, #5
 8006b5c:	d126      	bne.n	8006bac <_strtod_l+0x384>
 8006b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006b64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006b68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006b6c:	e697      	b.n	800689e <_strtod_l+0x76>
 8006b6e:	250a      	movs	r5, #10
 8006b70:	fb05 2c0c 	mla	ip, r5, ip, r2
 8006b74:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006b78:	e7b9      	b.n	8006aee <_strtod_l+0x2c6>
 8006b7a:	2a6e      	cmp	r2, #110	; 0x6e
 8006b7c:	e7db      	b.n	8006b36 <_strtod_l+0x30e>
 8006b7e:	4986      	ldr	r1, [pc, #536]	; (8006d98 <_strtod_l+0x570>)
 8006b80:	a811      	add	r0, sp, #68	; 0x44
 8006b82:	f001 f9c1 	bl	8007f08 <__match>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f43f aea5 	beq.w	80068d6 <_strtod_l+0xae>
 8006b8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b8e:	4983      	ldr	r1, [pc, #524]	; (8006d9c <_strtod_l+0x574>)
 8006b90:	3b01      	subs	r3, #1
 8006b92:	a811      	add	r0, sp, #68	; 0x44
 8006b94:	9311      	str	r3, [sp, #68]	; 0x44
 8006b96:	f001 f9b7 	bl	8007f08 <__match>
 8006b9a:	b910      	cbnz	r0, 8006ba2 <_strtod_l+0x37a>
 8006b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	9311      	str	r3, [sp, #68]	; 0x44
 8006ba2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8006db0 <_strtod_l+0x588>
 8006ba6:	f04f 0800 	mov.w	r8, #0
 8006baa:	e678      	b.n	800689e <_strtod_l+0x76>
 8006bac:	487c      	ldr	r0, [pc, #496]	; (8006da0 <_strtod_l+0x578>)
 8006bae:	f000 fec7 	bl	8007940 <nan>
 8006bb2:	ec59 8b10 	vmov	r8, r9, d0
 8006bb6:	e672      	b.n	800689e <_strtod_l+0x76>
 8006bb8:	eddd 7a07 	vldr	s15, [sp, #28]
 8006bbc:	eba5 020b 	sub.w	r2, r5, fp
 8006bc0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006bc4:	2e00      	cmp	r6, #0
 8006bc6:	bf08      	it	eq
 8006bc8:	461e      	moveq	r6, r3
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	9206      	str	r2, [sp, #24]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	bfa8      	it	ge
 8006bd2:	2210      	movge	r2, #16
 8006bd4:	2b09      	cmp	r3, #9
 8006bd6:	ec59 8b17 	vmov	r8, r9, d7
 8006bda:	dd0c      	ble.n	8006bf6 <_strtod_l+0x3ce>
 8006bdc:	4971      	ldr	r1, [pc, #452]	; (8006da4 <_strtod_l+0x57c>)
 8006bde:	eddd 6a05 	vldr	s13, [sp, #20]
 8006be2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006be6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8006bea:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8006bee:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006bf2:	ec59 8b16 	vmov	r8, r9, d6
 8006bf6:	2b0f      	cmp	r3, #15
 8006bf8:	dc37      	bgt.n	8006c6a <_strtod_l+0x442>
 8006bfa:	9906      	ldr	r1, [sp, #24]
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	f43f ae4e 	beq.w	800689e <_strtod_l+0x76>
 8006c02:	dd23      	ble.n	8006c4c <_strtod_l+0x424>
 8006c04:	2916      	cmp	r1, #22
 8006c06:	dc0b      	bgt.n	8006c20 <_strtod_l+0x3f8>
 8006c08:	4b66      	ldr	r3, [pc, #408]	; (8006da4 <_strtod_l+0x57c>)
 8006c0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006c0e:	ed93 7b00 	vldr	d7, [r3]
 8006c12:	ec49 8b16 	vmov	d6, r8, r9
 8006c16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c1a:	ec59 8b17 	vmov	r8, r9, d7
 8006c1e:	e63e      	b.n	800689e <_strtod_l+0x76>
 8006c20:	9806      	ldr	r0, [sp, #24]
 8006c22:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006c26:	4281      	cmp	r1, r0
 8006c28:	db1f      	blt.n	8006c6a <_strtod_l+0x442>
 8006c2a:	4a5e      	ldr	r2, [pc, #376]	; (8006da4 <_strtod_l+0x57c>)
 8006c2c:	f1c3 030f 	rsb	r3, r3, #15
 8006c30:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006c34:	ed91 7b00 	vldr	d7, [r1]
 8006c38:	ec49 8b16 	vmov	d6, r8, r9
 8006c3c:	1ac3      	subs	r3, r0, r3
 8006c3e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006c42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c46:	ed92 6b00 	vldr	d6, [r2]
 8006c4a:	e7e4      	b.n	8006c16 <_strtod_l+0x3ee>
 8006c4c:	9906      	ldr	r1, [sp, #24]
 8006c4e:	3116      	adds	r1, #22
 8006c50:	db0b      	blt.n	8006c6a <_strtod_l+0x442>
 8006c52:	4b54      	ldr	r3, [pc, #336]	; (8006da4 <_strtod_l+0x57c>)
 8006c54:	ebab 0505 	sub.w	r5, fp, r5
 8006c58:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006c5c:	ed95 7b00 	vldr	d7, [r5]
 8006c60:	ec49 8b16 	vmov	d6, r8, r9
 8006c64:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006c68:	e7d7      	b.n	8006c1a <_strtod_l+0x3f2>
 8006c6a:	9906      	ldr	r1, [sp, #24]
 8006c6c:	1a9a      	subs	r2, r3, r2
 8006c6e:	440a      	add	r2, r1
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	dd6e      	ble.n	8006d52 <_strtod_l+0x52a>
 8006c74:	f012 000f 	ands.w	r0, r2, #15
 8006c78:	d00a      	beq.n	8006c90 <_strtod_l+0x468>
 8006c7a:	494a      	ldr	r1, [pc, #296]	; (8006da4 <_strtod_l+0x57c>)
 8006c7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006c80:	ed91 7b00 	vldr	d7, [r1]
 8006c84:	ec49 8b16 	vmov	d6, r8, r9
 8006c88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c8c:	ec59 8b17 	vmov	r8, r9, d7
 8006c90:	f032 020f 	bics.w	r2, r2, #15
 8006c94:	d04e      	beq.n	8006d34 <_strtod_l+0x50c>
 8006c96:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006c9a:	dd22      	ble.n	8006ce2 <_strtod_l+0x4ba>
 8006c9c:	2500      	movs	r5, #0
 8006c9e:	462e      	mov	r6, r5
 8006ca0:	9507      	str	r5, [sp, #28]
 8006ca2:	462f      	mov	r7, r5
 8006ca4:	2322      	movs	r3, #34	; 0x22
 8006ca6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006db0 <_strtod_l+0x588>
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	f04f 0800 	mov.w	r8, #0
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f43f adf3 	beq.w	800689e <_strtod_l+0x76>
 8006cb8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff f930 	bl	8005f20 <_Bfree>
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f7ff f92c 	bl	8005f20 <_Bfree>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff f928 	bl	8005f20 <_Bfree>
 8006cd0:	9907      	ldr	r1, [sp, #28]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff f924 	bl	8005f20 <_Bfree>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff f920 	bl	8005f20 <_Bfree>
 8006ce0:	e5dd      	b.n	800689e <_strtod_l+0x76>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	ec49 8b17 	vmov	d7, r8, r9
 8006ce8:	4f2f      	ldr	r7, [pc, #188]	; (8006da8 <_strtod_l+0x580>)
 8006cea:	1112      	asrs	r2, r2, #4
 8006cec:	4601      	mov	r1, r0
 8006cee:	2a01      	cmp	r2, #1
 8006cf0:	dc23      	bgt.n	8006d3a <_strtod_l+0x512>
 8006cf2:	b108      	cbz	r0, 8006cf8 <_strtod_l+0x4d0>
 8006cf4:	ec59 8b17 	vmov	r8, r9, d7
 8006cf8:	4a2b      	ldr	r2, [pc, #172]	; (8006da8 <_strtod_l+0x580>)
 8006cfa:	482c      	ldr	r0, [pc, #176]	; (8006dac <_strtod_l+0x584>)
 8006cfc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006d00:	ed92 7b00 	vldr	d7, [r2]
 8006d04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d08:	ec49 8b16 	vmov	d6, r8, r9
 8006d0c:	4a28      	ldr	r2, [pc, #160]	; (8006db0 <_strtod_l+0x588>)
 8006d0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d12:	ee17 1a90 	vmov	r1, s15
 8006d16:	400a      	ands	r2, r1
 8006d18:	4282      	cmp	r2, r0
 8006d1a:	ec59 8b17 	vmov	r8, r9, d7
 8006d1e:	d8bd      	bhi.n	8006c9c <_strtod_l+0x474>
 8006d20:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006d24:	4282      	cmp	r2, r0
 8006d26:	bf86      	itte	hi
 8006d28:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8006db4 <_strtod_l+0x58c>
 8006d2c:	f04f 38ff 	movhi.w	r8, #4294967295
 8006d30:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006d34:	2200      	movs	r2, #0
 8006d36:	9205      	str	r2, [sp, #20]
 8006d38:	e076      	b.n	8006e28 <_strtod_l+0x600>
 8006d3a:	f012 0f01 	tst.w	r2, #1
 8006d3e:	d004      	beq.n	8006d4a <_strtod_l+0x522>
 8006d40:	ed97 6b00 	vldr	d6, [r7]
 8006d44:	2001      	movs	r0, #1
 8006d46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d4a:	3101      	adds	r1, #1
 8006d4c:	1052      	asrs	r2, r2, #1
 8006d4e:	3708      	adds	r7, #8
 8006d50:	e7cd      	b.n	8006cee <_strtod_l+0x4c6>
 8006d52:	d0ef      	beq.n	8006d34 <_strtod_l+0x50c>
 8006d54:	4252      	negs	r2, r2
 8006d56:	f012 000f 	ands.w	r0, r2, #15
 8006d5a:	d00a      	beq.n	8006d72 <_strtod_l+0x54a>
 8006d5c:	4911      	ldr	r1, [pc, #68]	; (8006da4 <_strtod_l+0x57c>)
 8006d5e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006d62:	ed91 7b00 	vldr	d7, [r1]
 8006d66:	ec49 8b16 	vmov	d6, r8, r9
 8006d6a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006d6e:	ec59 8b17 	vmov	r8, r9, d7
 8006d72:	1112      	asrs	r2, r2, #4
 8006d74:	d0de      	beq.n	8006d34 <_strtod_l+0x50c>
 8006d76:	2a1f      	cmp	r2, #31
 8006d78:	dd1e      	ble.n	8006db8 <_strtod_l+0x590>
 8006d7a:	2500      	movs	r5, #0
 8006d7c:	462e      	mov	r6, r5
 8006d7e:	9507      	str	r5, [sp, #28]
 8006d80:	462f      	mov	r7, r5
 8006d82:	2322      	movs	r3, #34	; 0x22
 8006d84:	f04f 0800 	mov.w	r8, #0
 8006d88:	f04f 0900 	mov.w	r9, #0
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	e78f      	b.n	8006cb0 <_strtod_l+0x488>
 8006d90:	0800943d 	.word	0x0800943d
 8006d94:	08009664 	.word	0x08009664
 8006d98:	08009435 	.word	0x08009435
 8006d9c:	0800946c 	.word	0x0800946c
 8006da0:	080097f5 	.word	0x080097f5
 8006da4:	08009578 	.word	0x08009578
 8006da8:	08009550 	.word	0x08009550
 8006dac:	7ca00000 	.word	0x7ca00000
 8006db0:	7ff00000 	.word	0x7ff00000
 8006db4:	7fefffff 	.word	0x7fefffff
 8006db8:	f012 0110 	ands.w	r1, r2, #16
 8006dbc:	bf18      	it	ne
 8006dbe:	216a      	movne	r1, #106	; 0x6a
 8006dc0:	9105      	str	r1, [sp, #20]
 8006dc2:	ec49 8b17 	vmov	d7, r8, r9
 8006dc6:	49be      	ldr	r1, [pc, #760]	; (80070c0 <_strtod_l+0x898>)
 8006dc8:	2000      	movs	r0, #0
 8006dca:	07d7      	lsls	r7, r2, #31
 8006dcc:	d504      	bpl.n	8006dd8 <_strtod_l+0x5b0>
 8006dce:	ed91 6b00 	vldr	d6, [r1]
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006dd8:	1052      	asrs	r2, r2, #1
 8006dda:	f101 0108 	add.w	r1, r1, #8
 8006dde:	d1f4      	bne.n	8006dca <_strtod_l+0x5a2>
 8006de0:	b108      	cbz	r0, 8006de6 <_strtod_l+0x5be>
 8006de2:	ec59 8b17 	vmov	r8, r9, d7
 8006de6:	9a05      	ldr	r2, [sp, #20]
 8006de8:	b1ba      	cbz	r2, 8006e1a <_strtod_l+0x5f2>
 8006dea:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8006dee:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8006df2:	2a00      	cmp	r2, #0
 8006df4:	4648      	mov	r0, r9
 8006df6:	dd10      	ble.n	8006e1a <_strtod_l+0x5f2>
 8006df8:	2a1f      	cmp	r2, #31
 8006dfa:	f340 812c 	ble.w	8007056 <_strtod_l+0x82e>
 8006dfe:	2a34      	cmp	r2, #52	; 0x34
 8006e00:	bfde      	ittt	le
 8006e02:	f04f 32ff 	movle.w	r2, #4294967295
 8006e06:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8006e0a:	408a      	lslle	r2, r1
 8006e0c:	f04f 0800 	mov.w	r8, #0
 8006e10:	bfcc      	ite	gt
 8006e12:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006e16:	ea02 0900 	andle.w	r9, r2, r0
 8006e1a:	ec49 8b17 	vmov	d7, r8, r9
 8006e1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e26:	d0a8      	beq.n	8006d7a <_strtod_l+0x552>
 8006e28:	9a07      	ldr	r2, [sp, #28]
 8006e2a:	9200      	str	r2, [sp, #0]
 8006e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e2e:	4632      	mov	r2, r6
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7ff f8dd 	bl	8005ff0 <__s2b>
 8006e36:	9007      	str	r0, [sp, #28]
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f43f af2f 	beq.w	8006c9c <_strtod_l+0x474>
 8006e3e:	9a06      	ldr	r2, [sp, #24]
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	ebab 0305 	sub.w	r3, fp, r5
 8006e46:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80070a0 <_strtod_l+0x878>
 8006e4a:	bfa8      	it	ge
 8006e4c:	2300      	movge	r3, #0
 8006e4e:	ed9f ab96 	vldr	d10, [pc, #600]	; 80070a8 <_strtod_l+0x880>
 8006e52:	ed9f bb97 	vldr	d11, [pc, #604]	; 80070b0 <_strtod_l+0x888>
 8006e56:	9309      	str	r3, [sp, #36]	; 0x24
 8006e58:	2500      	movs	r5, #0
 8006e5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e60:	462e      	mov	r6, r5
 8006e62:	9b07      	ldr	r3, [sp, #28]
 8006e64:	4620      	mov	r0, r4
 8006e66:	6859      	ldr	r1, [r3, #4]
 8006e68:	f7ff f81a 	bl	8005ea0 <_Balloc>
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f43f af18 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006e74:	9b07      	ldr	r3, [sp, #28]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	3202      	adds	r2, #2
 8006e7a:	f103 010c 	add.w	r1, r3, #12
 8006e7e:	0092      	lsls	r2, r2, #2
 8006e80:	300c      	adds	r0, #12
 8006e82:	f000 fd4f 	bl	8007924 <memcpy>
 8006e86:	ec49 8b10 	vmov	d0, r8, r9
 8006e8a:	aa14      	add	r2, sp, #80	; 0x50
 8006e8c:	a913      	add	r1, sp, #76	; 0x4c
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f7ff fbe2 	bl	8006658 <__d2b>
 8006e94:	ec49 8b18 	vmov	d8, r8, r9
 8006e98:	9012      	str	r0, [sp, #72]	; 0x48
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f43f af02 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7ff f93c 	bl	8006120 <__i2b>
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	f43f aefa 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006eb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eb2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bfab      	itete	ge
 8006eb8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8006eba:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8006ebc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8006ec0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8006ec4:	bfac      	ite	ge
 8006ec6:	eb03 0b02 	addge.w	fp, r3, r2
 8006eca:	eba2 0a03 	sublt.w	sl, r2, r3
 8006ece:	9a05      	ldr	r2, [sp, #20]
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	4a7b      	ldr	r2, [pc, #492]	; (80070c4 <_strtod_l+0x89c>)
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8006ede:	f280 80cd 	bge.w	800707c <_strtod_l+0x854>
 8006ee2:	1ad2      	subs	r2, r2, r3
 8006ee4:	2a1f      	cmp	r2, #31
 8006ee6:	eba1 0102 	sub.w	r1, r1, r2
 8006eea:	f04f 0001 	mov.w	r0, #1
 8006eee:	f300 80b9 	bgt.w	8007064 <_strtod_l+0x83c>
 8006ef2:	fa00 f302 	lsl.w	r3, r0, r2
 8006ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ef8:	2300      	movs	r3, #0
 8006efa:	930a      	str	r3, [sp, #40]	; 0x28
 8006efc:	eb0b 0301 	add.w	r3, fp, r1
 8006f00:	9a05      	ldr	r2, [sp, #20]
 8006f02:	459b      	cmp	fp, r3
 8006f04:	448a      	add	sl, r1
 8006f06:	4492      	add	sl, r2
 8006f08:	465a      	mov	r2, fp
 8006f0a:	bfa8      	it	ge
 8006f0c:	461a      	movge	r2, r3
 8006f0e:	4552      	cmp	r2, sl
 8006f10:	bfa8      	it	ge
 8006f12:	4652      	movge	r2, sl
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	bfc2      	ittt	gt
 8006f18:	1a9b      	subgt	r3, r3, r2
 8006f1a:	ebaa 0a02 	subgt.w	sl, sl, r2
 8006f1e:	ebab 0b02 	subgt.w	fp, fp, r2
 8006f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	dd18      	ble.n	8006f5a <_strtod_l+0x732>
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f2e:	f7ff f9b7 	bl	80062a0 <__pow5mult>
 8006f32:	4606      	mov	r6, r0
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f43f aeb5 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7ff f904 	bl	800614c <__multiply>
 8006f44:	900e      	str	r0, [sp, #56]	; 0x38
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f43f aeac 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006f4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7fe ffe6 	bl	8005f20 <_Bfree>
 8006f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f58:	9212      	str	r2, [sp, #72]	; 0x48
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f300 8093 	bgt.w	8007086 <_strtod_l+0x85e>
 8006f60:	9b06      	ldr	r3, [sp, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dd08      	ble.n	8006f78 <_strtod_l+0x750>
 8006f66:	4639      	mov	r1, r7
 8006f68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff f998 	bl	80062a0 <__pow5mult>
 8006f70:	4607      	mov	r7, r0
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f43f ae96 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006f78:	f1ba 0f00 	cmp.w	sl, #0
 8006f7c:	dd08      	ble.n	8006f90 <_strtod_l+0x768>
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4652      	mov	r2, sl
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7ff f9e6 	bl	8006354 <__lshift>
 8006f88:	4607      	mov	r7, r0
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	f43f ae8a 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006f90:	f1bb 0f00 	cmp.w	fp, #0
 8006f94:	dd08      	ble.n	8006fa8 <_strtod_l+0x780>
 8006f96:	4631      	mov	r1, r6
 8006f98:	465a      	mov	r2, fp
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7ff f9da 	bl	8006354 <__lshift>
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	f43f ae7e 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006fa8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006faa:	463a      	mov	r2, r7
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7ff fa59 	bl	8006464 <__mdiff>
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f43f ae75 	beq.w	8006ca4 <_strtod_l+0x47c>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8006fc0:	60c3      	str	r3, [r0, #12]
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	f7ff fa32 	bl	800642c <__mcmp>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	da7f      	bge.n	80070cc <_strtod_l+0x8a4>
 8006fcc:	ea5a 0a08 	orrs.w	sl, sl, r8
 8006fd0:	f040 80a5 	bne.w	800711e <_strtod_l+0x8f6>
 8006fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 80a0 	bne.w	800711e <_strtod_l+0x8f6>
 8006fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fe2:	0d1b      	lsrs	r3, r3, #20
 8006fe4:	051b      	lsls	r3, r3, #20
 8006fe6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006fea:	f240 8098 	bls.w	800711e <_strtod_l+0x8f6>
 8006fee:	696b      	ldr	r3, [r5, #20]
 8006ff0:	b91b      	cbnz	r3, 8006ffa <_strtod_l+0x7d2>
 8006ff2:	692b      	ldr	r3, [r5, #16]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	f340 8092 	ble.w	800711e <_strtod_l+0x8f6>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	4620      	mov	r0, r4
 8007000:	f7ff f9a8 	bl	8006354 <__lshift>
 8007004:	4631      	mov	r1, r6
 8007006:	4605      	mov	r5, r0
 8007008:	f7ff fa10 	bl	800642c <__mcmp>
 800700c:	2800      	cmp	r0, #0
 800700e:	f340 8086 	ble.w	800711e <_strtod_l+0x8f6>
 8007012:	9905      	ldr	r1, [sp, #20]
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <_strtod_l+0x8a0>)
 8007016:	464b      	mov	r3, r9
 8007018:	2900      	cmp	r1, #0
 800701a:	f000 809f 	beq.w	800715c <_strtod_l+0x934>
 800701e:	ea02 0109 	and.w	r1, r2, r9
 8007022:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007026:	f300 8099 	bgt.w	800715c <_strtod_l+0x934>
 800702a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800702e:	f77f aea8 	ble.w	8006d82 <_strtod_l+0x55a>
 8007032:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80070b8 <_strtod_l+0x890>
 8007036:	ec49 8b16 	vmov	d6, r8, r9
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <_strtod_l+0x8a0>)
 800703c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007040:	ee17 2a90 	vmov	r2, s15
 8007044:	4013      	ands	r3, r2
 8007046:	ec59 8b17 	vmov	r8, r9, d7
 800704a:	2b00      	cmp	r3, #0
 800704c:	f47f ae34 	bne.w	8006cb8 <_strtod_l+0x490>
 8007050:	2322      	movs	r3, #34	; 0x22
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	e630      	b.n	8006cb8 <_strtod_l+0x490>
 8007056:	f04f 31ff 	mov.w	r1, #4294967295
 800705a:	fa01 f202 	lsl.w	r2, r1, r2
 800705e:	ea02 0808 	and.w	r8, r2, r8
 8007062:	e6da      	b.n	8006e1a <_strtod_l+0x5f2>
 8007064:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007068:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800706c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007070:	33e2      	adds	r3, #226	; 0xe2
 8007072:	fa00 f303 	lsl.w	r3, r0, r3
 8007076:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800707a:	e73f      	b.n	8006efc <_strtod_l+0x6d4>
 800707c:	2200      	movs	r2, #0
 800707e:	2301      	movs	r3, #1
 8007080:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007084:	e73a      	b.n	8006efc <_strtod_l+0x6d4>
 8007086:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007088:	461a      	mov	r2, r3
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff f962 	bl	8006354 <__lshift>
 8007090:	9012      	str	r0, [sp, #72]	; 0x48
 8007092:	2800      	cmp	r0, #0
 8007094:	f47f af64 	bne.w	8006f60 <_strtod_l+0x738>
 8007098:	e604      	b.n	8006ca4 <_strtod_l+0x47c>
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w
 80070a0:	94a03595 	.word	0x94a03595
 80070a4:	3fcfffff 	.word	0x3fcfffff
 80070a8:	94a03595 	.word	0x94a03595
 80070ac:	3fdfffff 	.word	0x3fdfffff
 80070b0:	35afe535 	.word	0x35afe535
 80070b4:	3fe00000 	.word	0x3fe00000
 80070b8:	00000000 	.word	0x00000000
 80070bc:	39500000 	.word	0x39500000
 80070c0:	08009678 	.word	0x08009678
 80070c4:	fffffc02 	.word	0xfffffc02
 80070c8:	7ff00000 	.word	0x7ff00000
 80070cc:	46cb      	mov	fp, r9
 80070ce:	d15f      	bne.n	8007190 <_strtod_l+0x968>
 80070d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070d4:	f1ba 0f00 	cmp.w	sl, #0
 80070d8:	d02a      	beq.n	8007130 <_strtod_l+0x908>
 80070da:	4aa7      	ldr	r2, [pc, #668]	; (8007378 <_strtod_l+0xb50>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d12b      	bne.n	8007138 <_strtod_l+0x910>
 80070e0:	9b05      	ldr	r3, [sp, #20]
 80070e2:	4642      	mov	r2, r8
 80070e4:	b1fb      	cbz	r3, 8007126 <_strtod_l+0x8fe>
 80070e6:	4ba5      	ldr	r3, [pc, #660]	; (800737c <_strtod_l+0xb54>)
 80070e8:	ea09 0303 	and.w	r3, r9, r3
 80070ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070f0:	f04f 31ff 	mov.w	r1, #4294967295
 80070f4:	d81a      	bhi.n	800712c <_strtod_l+0x904>
 80070f6:	0d1b      	lsrs	r3, r3, #20
 80070f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007100:	429a      	cmp	r2, r3
 8007102:	d119      	bne.n	8007138 <_strtod_l+0x910>
 8007104:	4b9e      	ldr	r3, [pc, #632]	; (8007380 <_strtod_l+0xb58>)
 8007106:	459b      	cmp	fp, r3
 8007108:	d102      	bne.n	8007110 <_strtod_l+0x8e8>
 800710a:	3201      	adds	r2, #1
 800710c:	f43f adca 	beq.w	8006ca4 <_strtod_l+0x47c>
 8007110:	4b9a      	ldr	r3, [pc, #616]	; (800737c <_strtod_l+0xb54>)
 8007112:	ea0b 0303 	and.w	r3, fp, r3
 8007116:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800711a:	f04f 0800 	mov.w	r8, #0
 800711e:	9b05      	ldr	r3, [sp, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d186      	bne.n	8007032 <_strtod_l+0x80a>
 8007124:	e5c8      	b.n	8006cb8 <_strtod_l+0x490>
 8007126:	f04f 33ff 	mov.w	r3, #4294967295
 800712a:	e7e9      	b.n	8007100 <_strtod_l+0x8d8>
 800712c:	460b      	mov	r3, r1
 800712e:	e7e7      	b.n	8007100 <_strtod_l+0x8d8>
 8007130:	ea53 0308 	orrs.w	r3, r3, r8
 8007134:	f43f af6d 	beq.w	8007012 <_strtod_l+0x7ea>
 8007138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713a:	b1cb      	cbz	r3, 8007170 <_strtod_l+0x948>
 800713c:	ea13 0f0b 	tst.w	r3, fp
 8007140:	d0ed      	beq.n	800711e <_strtod_l+0x8f6>
 8007142:	9a05      	ldr	r2, [sp, #20]
 8007144:	4640      	mov	r0, r8
 8007146:	4649      	mov	r1, r9
 8007148:	f1ba 0f00 	cmp.w	sl, #0
 800714c:	d014      	beq.n	8007178 <_strtod_l+0x950>
 800714e:	f7ff fb51 	bl	80067f4 <sulp>
 8007152:	ee38 7b00 	vadd.f64	d7, d8, d0
 8007156:	ec59 8b17 	vmov	r8, r9, d7
 800715a:	e7e0      	b.n	800711e <_strtod_l+0x8f6>
 800715c:	4013      	ands	r3, r2
 800715e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007162:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007166:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800716a:	f04f 38ff 	mov.w	r8, #4294967295
 800716e:	e7d6      	b.n	800711e <_strtod_l+0x8f6>
 8007170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007172:	ea13 0f08 	tst.w	r3, r8
 8007176:	e7e3      	b.n	8007140 <_strtod_l+0x918>
 8007178:	f7ff fb3c 	bl	80067f4 <sulp>
 800717c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007180:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007188:	ec59 8b10 	vmov	r8, r9, d0
 800718c:	d1c7      	bne.n	800711e <_strtod_l+0x8f6>
 800718e:	e5f8      	b.n	8006d82 <_strtod_l+0x55a>
 8007190:	4631      	mov	r1, r6
 8007192:	4628      	mov	r0, r5
 8007194:	f7ff faba 	bl	800670c <__ratio>
 8007198:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800719c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80071a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a4:	d85f      	bhi.n	8007266 <_strtod_l+0xa3e>
 80071a6:	f1ba 0f00 	cmp.w	sl, #0
 80071aa:	d166      	bne.n	800727a <_strtod_l+0xa52>
 80071ac:	f1b8 0f00 	cmp.w	r8, #0
 80071b0:	d14d      	bne.n	800724e <_strtod_l+0xa26>
 80071b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071b6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d162      	bne.n	8007284 <_strtod_l+0xa5c>
 80071be:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80071c2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80071c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ca:	d401      	bmi.n	80071d0 <_strtod_l+0x9a8>
 80071cc:	ee20 db0d 	vmul.f64	d13, d0, d13
 80071d0:	eeb1 cb4d 	vneg.f64	d12, d13
 80071d4:	4869      	ldr	r0, [pc, #420]	; (800737c <_strtod_l+0xb54>)
 80071d6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8007388 <_strtod_l+0xb60>
 80071da:	ea0b 0100 	and.w	r1, fp, r0
 80071de:	4561      	cmp	r1, ip
 80071e0:	ec53 2b1c 	vmov	r2, r3, d12
 80071e4:	d17a      	bne.n	80072dc <_strtod_l+0xab4>
 80071e6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80071ea:	ec49 8b10 	vmov	d0, r8, r9
 80071ee:	910a      	str	r1, [sp, #40]	; 0x28
 80071f0:	f7ff f9c2 	bl	8006578 <__ulp>
 80071f4:	ec49 8b1e 	vmov	d14, r8, r9
 80071f8:	4860      	ldr	r0, [pc, #384]	; (800737c <_strtod_l+0xb54>)
 80071fa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80071fe:	ee1e 3a90 	vmov	r3, s29
 8007202:	4a60      	ldr	r2, [pc, #384]	; (8007384 <_strtod_l+0xb5c>)
 8007204:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007206:	4018      	ands	r0, r3
 8007208:	4290      	cmp	r0, r2
 800720a:	ec59 8b1e 	vmov	r8, r9, d14
 800720e:	d93c      	bls.n	800728a <_strtod_l+0xa62>
 8007210:	ee18 2a90 	vmov	r2, s17
 8007214:	4b5a      	ldr	r3, [pc, #360]	; (8007380 <_strtod_l+0xb58>)
 8007216:	429a      	cmp	r2, r3
 8007218:	d104      	bne.n	8007224 <_strtod_l+0x9fc>
 800721a:	ee18 3a10 	vmov	r3, s16
 800721e:	3301      	adds	r3, #1
 8007220:	f43f ad40 	beq.w	8006ca4 <_strtod_l+0x47c>
 8007224:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007380 <_strtod_l+0xb58>
 8007228:	f04f 38ff 	mov.w	r8, #4294967295
 800722c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800722e:	4620      	mov	r0, r4
 8007230:	f7fe fe76 	bl	8005f20 <_Bfree>
 8007234:	4639      	mov	r1, r7
 8007236:	4620      	mov	r0, r4
 8007238:	f7fe fe72 	bl	8005f20 <_Bfree>
 800723c:	4631      	mov	r1, r6
 800723e:	4620      	mov	r0, r4
 8007240:	f7fe fe6e 	bl	8005f20 <_Bfree>
 8007244:	4629      	mov	r1, r5
 8007246:	4620      	mov	r0, r4
 8007248:	f7fe fe6a 	bl	8005f20 <_Bfree>
 800724c:	e609      	b.n	8006e62 <_strtod_l+0x63a>
 800724e:	f1b8 0f01 	cmp.w	r8, #1
 8007252:	d103      	bne.n	800725c <_strtod_l+0xa34>
 8007254:	f1b9 0f00 	cmp.w	r9, #0
 8007258:	f43f ad93 	beq.w	8006d82 <_strtod_l+0x55a>
 800725c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007260:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007264:	e7b6      	b.n	80071d4 <_strtod_l+0x9ac>
 8007266:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800726a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800726e:	f1ba 0f00 	cmp.w	sl, #0
 8007272:	d0ad      	beq.n	80071d0 <_strtod_l+0x9a8>
 8007274:	eeb0 cb4d 	vmov.f64	d12, d13
 8007278:	e7ac      	b.n	80071d4 <_strtod_l+0x9ac>
 800727a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800727e:	eeb0 db4c 	vmov.f64	d13, d12
 8007282:	e7a7      	b.n	80071d4 <_strtod_l+0x9ac>
 8007284:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007288:	e7a4      	b.n	80071d4 <_strtod_l+0x9ac>
 800728a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800728e:	9b05      	ldr	r3, [sp, #20]
 8007290:	46cb      	mov	fp, r9
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1ca      	bne.n	800722c <_strtod_l+0xa04>
 8007296:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800729a:	0d1b      	lsrs	r3, r3, #20
 800729c:	051b      	lsls	r3, r3, #20
 800729e:	4299      	cmp	r1, r3
 80072a0:	d1c4      	bne.n	800722c <_strtod_l+0xa04>
 80072a2:	ec51 0b1d 	vmov	r0, r1, d13
 80072a6:	f7f9 f9f7 	bl	8000698 <__aeabi_d2lz>
 80072aa:	f7f9 f9af 	bl	800060c <__aeabi_l2d>
 80072ae:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80072b2:	ec41 0b17 	vmov	d7, r0, r1
 80072b6:	ea4b 0b08 	orr.w	fp, fp, r8
 80072ba:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80072be:	ee3d db47 	vsub.f64	d13, d13, d7
 80072c2:	d03c      	beq.n	800733e <_strtod_l+0xb16>
 80072c4:	eeb4 dbca 	vcmpe.f64	d13, d10
 80072c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072cc:	f53f acf4 	bmi.w	8006cb8 <_strtod_l+0x490>
 80072d0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80072d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d8:	dda8      	ble.n	800722c <_strtod_l+0xa04>
 80072da:	e4ed      	b.n	8006cb8 <_strtod_l+0x490>
 80072dc:	9805      	ldr	r0, [sp, #20]
 80072de:	b1f0      	cbz	r0, 800731e <_strtod_l+0xaf6>
 80072e0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80072e4:	d81b      	bhi.n	800731e <_strtod_l+0xaf6>
 80072e6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007370 <_strtod_l+0xb48>
 80072ea:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80072ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f2:	d811      	bhi.n	8007318 <_strtod_l+0xaf0>
 80072f4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80072f8:	ee1d 3a10 	vmov	r3, s26
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	bf38      	it	cc
 8007300:	2301      	movcc	r3, #1
 8007302:	ee0d 3a10 	vmov	s26, r3
 8007306:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800730a:	f1ba 0f00 	cmp.w	sl, #0
 800730e:	d113      	bne.n	8007338 <_strtod_l+0xb10>
 8007310:	eeb1 7b4d 	vneg.f64	d7, d13
 8007314:	ec53 2b17 	vmov	r2, r3, d7
 8007318:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800731c:	1a43      	subs	r3, r0, r1
 800731e:	eeb0 0b48 	vmov.f64	d0, d8
 8007322:	ec43 2b1c 	vmov	d12, r2, r3
 8007326:	910a      	str	r1, [sp, #40]	; 0x28
 8007328:	f7ff f926 	bl	8006578 <__ulp>
 800732c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800732e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8007332:	ec59 8b18 	vmov	r8, r9, d8
 8007336:	e7aa      	b.n	800728e <_strtod_l+0xa66>
 8007338:	eeb0 7b4d 	vmov.f64	d7, d13
 800733c:	e7ea      	b.n	8007314 <_strtod_l+0xaec>
 800733e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8007342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007346:	f57f af71 	bpl.w	800722c <_strtod_l+0xa04>
 800734a:	e4b5      	b.n	8006cb8 <_strtod_l+0x490>
 800734c:	2300      	movs	r3, #0
 800734e:	9308      	str	r3, [sp, #32]
 8007350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	f7ff baa6 	b.w	80068a6 <_strtod_l+0x7e>
 800735a:	2a65      	cmp	r2, #101	; 0x65
 800735c:	f43f aba2 	beq.w	8006aa4 <_strtod_l+0x27c>
 8007360:	2a45      	cmp	r2, #69	; 0x45
 8007362:	f43f ab9f 	beq.w	8006aa4 <_strtod_l+0x27c>
 8007366:	2101      	movs	r1, #1
 8007368:	f7ff bbd8 	b.w	8006b1c <_strtod_l+0x2f4>
 800736c:	f3af 8000 	nop.w
 8007370:	ffc00000 	.word	0xffc00000
 8007374:	41dfffff 	.word	0x41dfffff
 8007378:	000fffff 	.word	0x000fffff
 800737c:	7ff00000 	.word	0x7ff00000
 8007380:	7fefffff 	.word	0x7fefffff
 8007384:	7c9fffff 	.word	0x7c9fffff
 8007388:	7fe00000 	.word	0x7fe00000

0800738c <_strtod_r>:
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <_strtod_r+0x8>)
 800738e:	f7ff ba4b 	b.w	8006828 <_strtod_l>
 8007392:	bf00      	nop
 8007394:	20000070 	.word	0x20000070

08007398 <_strtol_l.constprop.0>:
 8007398:	2b01      	cmp	r3, #1
 800739a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739e:	d001      	beq.n	80073a4 <_strtol_l.constprop.0+0xc>
 80073a0:	2b24      	cmp	r3, #36	; 0x24
 80073a2:	d906      	bls.n	80073b2 <_strtol_l.constprop.0+0x1a>
 80073a4:	f7fd fe52 	bl	800504c <__errno>
 80073a8:	2316      	movs	r3, #22
 80073aa:	6003      	str	r3, [r0, #0]
 80073ac:	2000      	movs	r0, #0
 80073ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007498 <_strtol_l.constprop.0+0x100>
 80073b6:	460d      	mov	r5, r1
 80073b8:	462e      	mov	r6, r5
 80073ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80073c2:	f017 0708 	ands.w	r7, r7, #8
 80073c6:	d1f7      	bne.n	80073b8 <_strtol_l.constprop.0+0x20>
 80073c8:	2c2d      	cmp	r4, #45	; 0x2d
 80073ca:	d132      	bne.n	8007432 <_strtol_l.constprop.0+0x9a>
 80073cc:	782c      	ldrb	r4, [r5, #0]
 80073ce:	2701      	movs	r7, #1
 80073d0:	1cb5      	adds	r5, r6, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d05b      	beq.n	800748e <_strtol_l.constprop.0+0xf6>
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	d109      	bne.n	80073ee <_strtol_l.constprop.0+0x56>
 80073da:	2c30      	cmp	r4, #48	; 0x30
 80073dc:	d107      	bne.n	80073ee <_strtol_l.constprop.0+0x56>
 80073de:	782c      	ldrb	r4, [r5, #0]
 80073e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80073e4:	2c58      	cmp	r4, #88	; 0x58
 80073e6:	d14d      	bne.n	8007484 <_strtol_l.constprop.0+0xec>
 80073e8:	786c      	ldrb	r4, [r5, #1]
 80073ea:	2310      	movs	r3, #16
 80073ec:	3502      	adds	r5, #2
 80073ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80073f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80073f6:	f04f 0e00 	mov.w	lr, #0
 80073fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80073fe:	4676      	mov	r6, lr
 8007400:	fb03 8a19 	mls	sl, r3, r9, r8
 8007404:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007408:	f1bc 0f09 	cmp.w	ip, #9
 800740c:	d816      	bhi.n	800743c <_strtol_l.constprop.0+0xa4>
 800740e:	4664      	mov	r4, ip
 8007410:	42a3      	cmp	r3, r4
 8007412:	dd24      	ble.n	800745e <_strtol_l.constprop.0+0xc6>
 8007414:	f1be 3fff 	cmp.w	lr, #4294967295
 8007418:	d008      	beq.n	800742c <_strtol_l.constprop.0+0x94>
 800741a:	45b1      	cmp	r9, r6
 800741c:	d31c      	bcc.n	8007458 <_strtol_l.constprop.0+0xc0>
 800741e:	d101      	bne.n	8007424 <_strtol_l.constprop.0+0x8c>
 8007420:	45a2      	cmp	sl, r4
 8007422:	db19      	blt.n	8007458 <_strtol_l.constprop.0+0xc0>
 8007424:	fb06 4603 	mla	r6, r6, r3, r4
 8007428:	f04f 0e01 	mov.w	lr, #1
 800742c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007430:	e7e8      	b.n	8007404 <_strtol_l.constprop.0+0x6c>
 8007432:	2c2b      	cmp	r4, #43	; 0x2b
 8007434:	bf04      	itt	eq
 8007436:	782c      	ldrbeq	r4, [r5, #0]
 8007438:	1cb5      	addeq	r5, r6, #2
 800743a:	e7ca      	b.n	80073d2 <_strtol_l.constprop.0+0x3a>
 800743c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007440:	f1bc 0f19 	cmp.w	ip, #25
 8007444:	d801      	bhi.n	800744a <_strtol_l.constprop.0+0xb2>
 8007446:	3c37      	subs	r4, #55	; 0x37
 8007448:	e7e2      	b.n	8007410 <_strtol_l.constprop.0+0x78>
 800744a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800744e:	f1bc 0f19 	cmp.w	ip, #25
 8007452:	d804      	bhi.n	800745e <_strtol_l.constprop.0+0xc6>
 8007454:	3c57      	subs	r4, #87	; 0x57
 8007456:	e7db      	b.n	8007410 <_strtol_l.constprop.0+0x78>
 8007458:	f04f 3eff 	mov.w	lr, #4294967295
 800745c:	e7e6      	b.n	800742c <_strtol_l.constprop.0+0x94>
 800745e:	f1be 3fff 	cmp.w	lr, #4294967295
 8007462:	d105      	bne.n	8007470 <_strtol_l.constprop.0+0xd8>
 8007464:	2322      	movs	r3, #34	; 0x22
 8007466:	6003      	str	r3, [r0, #0]
 8007468:	4646      	mov	r6, r8
 800746a:	b942      	cbnz	r2, 800747e <_strtol_l.constprop.0+0xe6>
 800746c:	4630      	mov	r0, r6
 800746e:	e79e      	b.n	80073ae <_strtol_l.constprop.0+0x16>
 8007470:	b107      	cbz	r7, 8007474 <_strtol_l.constprop.0+0xdc>
 8007472:	4276      	negs	r6, r6
 8007474:	2a00      	cmp	r2, #0
 8007476:	d0f9      	beq.n	800746c <_strtol_l.constprop.0+0xd4>
 8007478:	f1be 0f00 	cmp.w	lr, #0
 800747c:	d000      	beq.n	8007480 <_strtol_l.constprop.0+0xe8>
 800747e:	1e69      	subs	r1, r5, #1
 8007480:	6011      	str	r1, [r2, #0]
 8007482:	e7f3      	b.n	800746c <_strtol_l.constprop.0+0xd4>
 8007484:	2430      	movs	r4, #48	; 0x30
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1b1      	bne.n	80073ee <_strtol_l.constprop.0+0x56>
 800748a:	2308      	movs	r3, #8
 800748c:	e7af      	b.n	80073ee <_strtol_l.constprop.0+0x56>
 800748e:	2c30      	cmp	r4, #48	; 0x30
 8007490:	d0a5      	beq.n	80073de <_strtol_l.constprop.0+0x46>
 8007492:	230a      	movs	r3, #10
 8007494:	e7ab      	b.n	80073ee <_strtol_l.constprop.0+0x56>
 8007496:	bf00      	nop
 8007498:	080096a1 	.word	0x080096a1

0800749c <_strtol_r>:
 800749c:	f7ff bf7c 	b.w	8007398 <_strtol_l.constprop.0>

080074a0 <__ssputs_r>:
 80074a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	688e      	ldr	r6, [r1, #8]
 80074a6:	461f      	mov	r7, r3
 80074a8:	42be      	cmp	r6, r7
 80074aa:	680b      	ldr	r3, [r1, #0]
 80074ac:	4682      	mov	sl, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	4690      	mov	r8, r2
 80074b2:	d82c      	bhi.n	800750e <__ssputs_r+0x6e>
 80074b4:	898a      	ldrh	r2, [r1, #12]
 80074b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074ba:	d026      	beq.n	800750a <__ssputs_r+0x6a>
 80074bc:	6965      	ldr	r5, [r4, #20]
 80074be:	6909      	ldr	r1, [r1, #16]
 80074c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074c4:	eba3 0901 	sub.w	r9, r3, r1
 80074c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074cc:	1c7b      	adds	r3, r7, #1
 80074ce:	444b      	add	r3, r9
 80074d0:	106d      	asrs	r5, r5, #1
 80074d2:	429d      	cmp	r5, r3
 80074d4:	bf38      	it	cc
 80074d6:	461d      	movcc	r5, r3
 80074d8:	0553      	lsls	r3, r2, #21
 80074da:	d527      	bpl.n	800752c <__ssputs_r+0x8c>
 80074dc:	4629      	mov	r1, r5
 80074de:	f7fe fc53 	bl	8005d88 <_malloc_r>
 80074e2:	4606      	mov	r6, r0
 80074e4:	b360      	cbz	r0, 8007540 <__ssputs_r+0xa0>
 80074e6:	6921      	ldr	r1, [r4, #16]
 80074e8:	464a      	mov	r2, r9
 80074ea:	f000 fa1b 	bl	8007924 <memcpy>
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	6126      	str	r6, [r4, #16]
 80074fc:	6165      	str	r5, [r4, #20]
 80074fe:	444e      	add	r6, r9
 8007500:	eba5 0509 	sub.w	r5, r5, r9
 8007504:	6026      	str	r6, [r4, #0]
 8007506:	60a5      	str	r5, [r4, #8]
 8007508:	463e      	mov	r6, r7
 800750a:	42be      	cmp	r6, r7
 800750c:	d900      	bls.n	8007510 <__ssputs_r+0x70>
 800750e:	463e      	mov	r6, r7
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	4632      	mov	r2, r6
 8007514:	4641      	mov	r1, r8
 8007516:	f000 f9c9 	bl	80078ac <memmove>
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	1b9b      	subs	r3, r3, r6
 800751e:	60a3      	str	r3, [r4, #8]
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	4433      	add	r3, r6
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	2000      	movs	r0, #0
 8007528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752c:	462a      	mov	r2, r5
 800752e:	f000 fdac 	bl	800808a <_realloc_r>
 8007532:	4606      	mov	r6, r0
 8007534:	2800      	cmp	r0, #0
 8007536:	d1e0      	bne.n	80074fa <__ssputs_r+0x5a>
 8007538:	6921      	ldr	r1, [r4, #16]
 800753a:	4650      	mov	r0, sl
 800753c:	f7fe fbb0 	bl	8005ca0 <_free_r>
 8007540:	230c      	movs	r3, #12
 8007542:	f8ca 3000 	str.w	r3, [sl]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	f04f 30ff 	mov.w	r0, #4294967295
 8007552:	e7e9      	b.n	8007528 <__ssputs_r+0x88>

08007554 <_svfiprintf_r>:
 8007554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	4698      	mov	r8, r3
 800755a:	898b      	ldrh	r3, [r1, #12]
 800755c:	061b      	lsls	r3, r3, #24
 800755e:	b09d      	sub	sp, #116	; 0x74
 8007560:	4607      	mov	r7, r0
 8007562:	460d      	mov	r5, r1
 8007564:	4614      	mov	r4, r2
 8007566:	d50e      	bpl.n	8007586 <_svfiprintf_r+0x32>
 8007568:	690b      	ldr	r3, [r1, #16]
 800756a:	b963      	cbnz	r3, 8007586 <_svfiprintf_r+0x32>
 800756c:	2140      	movs	r1, #64	; 0x40
 800756e:	f7fe fc0b 	bl	8005d88 <_malloc_r>
 8007572:	6028      	str	r0, [r5, #0]
 8007574:	6128      	str	r0, [r5, #16]
 8007576:	b920      	cbnz	r0, 8007582 <_svfiprintf_r+0x2e>
 8007578:	230c      	movs	r3, #12
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e0d0      	b.n	8007724 <_svfiprintf_r+0x1d0>
 8007582:	2340      	movs	r3, #64	; 0x40
 8007584:	616b      	str	r3, [r5, #20]
 8007586:	2300      	movs	r3, #0
 8007588:	9309      	str	r3, [sp, #36]	; 0x24
 800758a:	2320      	movs	r3, #32
 800758c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007590:	f8cd 800c 	str.w	r8, [sp, #12]
 8007594:	2330      	movs	r3, #48	; 0x30
 8007596:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800773c <_svfiprintf_r+0x1e8>
 800759a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800759e:	f04f 0901 	mov.w	r9, #1
 80075a2:	4623      	mov	r3, r4
 80075a4:	469a      	mov	sl, r3
 80075a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075aa:	b10a      	cbz	r2, 80075b0 <_svfiprintf_r+0x5c>
 80075ac:	2a25      	cmp	r2, #37	; 0x25
 80075ae:	d1f9      	bne.n	80075a4 <_svfiprintf_r+0x50>
 80075b0:	ebba 0b04 	subs.w	fp, sl, r4
 80075b4:	d00b      	beq.n	80075ce <_svfiprintf_r+0x7a>
 80075b6:	465b      	mov	r3, fp
 80075b8:	4622      	mov	r2, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ff6f 	bl	80074a0 <__ssputs_r>
 80075c2:	3001      	adds	r0, #1
 80075c4:	f000 80a9 	beq.w	800771a <_svfiprintf_r+0x1c6>
 80075c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ca:	445a      	add	r2, fp
 80075cc:	9209      	str	r2, [sp, #36]	; 0x24
 80075ce:	f89a 3000 	ldrb.w	r3, [sl]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80a1 	beq.w	800771a <_svfiprintf_r+0x1c6>
 80075d8:	2300      	movs	r3, #0
 80075da:	f04f 32ff 	mov.w	r2, #4294967295
 80075de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e2:	f10a 0a01 	add.w	sl, sl, #1
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	9307      	str	r3, [sp, #28]
 80075ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ee:	931a      	str	r3, [sp, #104]	; 0x68
 80075f0:	4654      	mov	r4, sl
 80075f2:	2205      	movs	r2, #5
 80075f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f8:	4850      	ldr	r0, [pc, #320]	; (800773c <_svfiprintf_r+0x1e8>)
 80075fa:	f7f8 fe21 	bl	8000240 <memchr>
 80075fe:	9a04      	ldr	r2, [sp, #16]
 8007600:	b9d8      	cbnz	r0, 800763a <_svfiprintf_r+0xe6>
 8007602:	06d0      	lsls	r0, r2, #27
 8007604:	bf44      	itt	mi
 8007606:	2320      	movmi	r3, #32
 8007608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800760c:	0711      	lsls	r1, r2, #28
 800760e:	bf44      	itt	mi
 8007610:	232b      	movmi	r3, #43	; 0x2b
 8007612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b2a      	cmp	r3, #42	; 0x2a
 800761c:	d015      	beq.n	800764a <_svfiprintf_r+0xf6>
 800761e:	9a07      	ldr	r2, [sp, #28]
 8007620:	4654      	mov	r4, sl
 8007622:	2000      	movs	r0, #0
 8007624:	f04f 0c0a 	mov.w	ip, #10
 8007628:	4621      	mov	r1, r4
 800762a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800762e:	3b30      	subs	r3, #48	; 0x30
 8007630:	2b09      	cmp	r3, #9
 8007632:	d94d      	bls.n	80076d0 <_svfiprintf_r+0x17c>
 8007634:	b1b0      	cbz	r0, 8007664 <_svfiprintf_r+0x110>
 8007636:	9207      	str	r2, [sp, #28]
 8007638:	e014      	b.n	8007664 <_svfiprintf_r+0x110>
 800763a:	eba0 0308 	sub.w	r3, r0, r8
 800763e:	fa09 f303 	lsl.w	r3, r9, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	46a2      	mov	sl, r4
 8007648:	e7d2      	b.n	80075f0 <_svfiprintf_r+0x9c>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	1d19      	adds	r1, r3, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	9103      	str	r1, [sp, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	bfbb      	ittet	lt
 8007656:	425b      	neglt	r3, r3
 8007658:	f042 0202 	orrlt.w	r2, r2, #2
 800765c:	9307      	strge	r3, [sp, #28]
 800765e:	9307      	strlt	r3, [sp, #28]
 8007660:	bfb8      	it	lt
 8007662:	9204      	strlt	r2, [sp, #16]
 8007664:	7823      	ldrb	r3, [r4, #0]
 8007666:	2b2e      	cmp	r3, #46	; 0x2e
 8007668:	d10c      	bne.n	8007684 <_svfiprintf_r+0x130>
 800766a:	7863      	ldrb	r3, [r4, #1]
 800766c:	2b2a      	cmp	r3, #42	; 0x2a
 800766e:	d134      	bne.n	80076da <_svfiprintf_r+0x186>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	9203      	str	r2, [sp, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	bfb8      	it	lt
 800767c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007680:	3402      	adds	r4, #2
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800774c <_svfiprintf_r+0x1f8>
 8007688:	7821      	ldrb	r1, [r4, #0]
 800768a:	2203      	movs	r2, #3
 800768c:	4650      	mov	r0, sl
 800768e:	f7f8 fdd7 	bl	8000240 <memchr>
 8007692:	b138      	cbz	r0, 80076a4 <_svfiprintf_r+0x150>
 8007694:	9b04      	ldr	r3, [sp, #16]
 8007696:	eba0 000a 	sub.w	r0, r0, sl
 800769a:	2240      	movs	r2, #64	; 0x40
 800769c:	4082      	lsls	r2, r0
 800769e:	4313      	orrs	r3, r2
 80076a0:	3401      	adds	r4, #1
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a8:	4825      	ldr	r0, [pc, #148]	; (8007740 <_svfiprintf_r+0x1ec>)
 80076aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ae:	2206      	movs	r2, #6
 80076b0:	f7f8 fdc6 	bl	8000240 <memchr>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d038      	beq.n	800772a <_svfiprintf_r+0x1d6>
 80076b8:	4b22      	ldr	r3, [pc, #136]	; (8007744 <_svfiprintf_r+0x1f0>)
 80076ba:	bb1b      	cbnz	r3, 8007704 <_svfiprintf_r+0x1b0>
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	3307      	adds	r3, #7
 80076c0:	f023 0307 	bic.w	r3, r3, #7
 80076c4:	3308      	adds	r3, #8
 80076c6:	9303      	str	r3, [sp, #12]
 80076c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ca:	4433      	add	r3, r6
 80076cc:	9309      	str	r3, [sp, #36]	; 0x24
 80076ce:	e768      	b.n	80075a2 <_svfiprintf_r+0x4e>
 80076d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076d4:	460c      	mov	r4, r1
 80076d6:	2001      	movs	r0, #1
 80076d8:	e7a6      	b.n	8007628 <_svfiprintf_r+0xd4>
 80076da:	2300      	movs	r3, #0
 80076dc:	3401      	adds	r4, #1
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	4619      	mov	r1, r3
 80076e2:	f04f 0c0a 	mov.w	ip, #10
 80076e6:	4620      	mov	r0, r4
 80076e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ec:	3a30      	subs	r2, #48	; 0x30
 80076ee:	2a09      	cmp	r2, #9
 80076f0:	d903      	bls.n	80076fa <_svfiprintf_r+0x1a6>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0c6      	beq.n	8007684 <_svfiprintf_r+0x130>
 80076f6:	9105      	str	r1, [sp, #20]
 80076f8:	e7c4      	b.n	8007684 <_svfiprintf_r+0x130>
 80076fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80076fe:	4604      	mov	r4, r0
 8007700:	2301      	movs	r3, #1
 8007702:	e7f0      	b.n	80076e6 <_svfiprintf_r+0x192>
 8007704:	ab03      	add	r3, sp, #12
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	462a      	mov	r2, r5
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <_svfiprintf_r+0x1f4>)
 800770c:	a904      	add	r1, sp, #16
 800770e:	4638      	mov	r0, r7
 8007710:	f7fc fd76 	bl	8004200 <_printf_float>
 8007714:	1c42      	adds	r2, r0, #1
 8007716:	4606      	mov	r6, r0
 8007718:	d1d6      	bne.n	80076c8 <_svfiprintf_r+0x174>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	065b      	lsls	r3, r3, #25
 800771e:	f53f af2d 	bmi.w	800757c <_svfiprintf_r+0x28>
 8007722:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007724:	b01d      	add	sp, #116	; 0x74
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	ab03      	add	r3, sp, #12
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	462a      	mov	r2, r5
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <_svfiprintf_r+0x1f4>)
 8007732:	a904      	add	r1, sp, #16
 8007734:	4638      	mov	r0, r7
 8007736:	f7fc ffeb 	bl	8004710 <_printf_i>
 800773a:	e7eb      	b.n	8007714 <_svfiprintf_r+0x1c0>
 800773c:	080097a1 	.word	0x080097a1
 8007740:	080097ab 	.word	0x080097ab
 8007744:	08004201 	.word	0x08004201
 8007748:	080074a1 	.word	0x080074a1
 800774c:	080097a7 	.word	0x080097a7

08007750 <__sflush_r>:
 8007750:	898a      	ldrh	r2, [r1, #12]
 8007752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007756:	4605      	mov	r5, r0
 8007758:	0710      	lsls	r0, r2, #28
 800775a:	460c      	mov	r4, r1
 800775c:	d458      	bmi.n	8007810 <__sflush_r+0xc0>
 800775e:	684b      	ldr	r3, [r1, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dc05      	bgt.n	8007770 <__sflush_r+0x20>
 8007764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	dc02      	bgt.n	8007770 <__sflush_r+0x20>
 800776a:	2000      	movs	r0, #0
 800776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007772:	2e00      	cmp	r6, #0
 8007774:	d0f9      	beq.n	800776a <__sflush_r+0x1a>
 8007776:	2300      	movs	r3, #0
 8007778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800777c:	682f      	ldr	r7, [r5, #0]
 800777e:	6a21      	ldr	r1, [r4, #32]
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	d032      	beq.n	80077ea <__sflush_r+0x9a>
 8007784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	075a      	lsls	r2, r3, #29
 800778a:	d505      	bpl.n	8007798 <__sflush_r+0x48>
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	1ac0      	subs	r0, r0, r3
 8007790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007792:	b10b      	cbz	r3, 8007798 <__sflush_r+0x48>
 8007794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007796:	1ac0      	subs	r0, r0, r3
 8007798:	2300      	movs	r3, #0
 800779a:	4602      	mov	r2, r0
 800779c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800779e:	6a21      	ldr	r1, [r4, #32]
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b0      	blx	r6
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	d106      	bne.n	80077b8 <__sflush_r+0x68>
 80077aa:	6829      	ldr	r1, [r5, #0]
 80077ac:	291d      	cmp	r1, #29
 80077ae:	d82b      	bhi.n	8007808 <__sflush_r+0xb8>
 80077b0:	4a29      	ldr	r2, [pc, #164]	; (8007858 <__sflush_r+0x108>)
 80077b2:	410a      	asrs	r2, r1
 80077b4:	07d6      	lsls	r6, r2, #31
 80077b6:	d427      	bmi.n	8007808 <__sflush_r+0xb8>
 80077b8:	2200      	movs	r2, #0
 80077ba:	6062      	str	r2, [r4, #4]
 80077bc:	04d9      	lsls	r1, r3, #19
 80077be:	6922      	ldr	r2, [r4, #16]
 80077c0:	6022      	str	r2, [r4, #0]
 80077c2:	d504      	bpl.n	80077ce <__sflush_r+0x7e>
 80077c4:	1c42      	adds	r2, r0, #1
 80077c6:	d101      	bne.n	80077cc <__sflush_r+0x7c>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b903      	cbnz	r3, 80077ce <__sflush_r+0x7e>
 80077cc:	6560      	str	r0, [r4, #84]	; 0x54
 80077ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d0:	602f      	str	r7, [r5, #0]
 80077d2:	2900      	cmp	r1, #0
 80077d4:	d0c9      	beq.n	800776a <__sflush_r+0x1a>
 80077d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077da:	4299      	cmp	r1, r3
 80077dc:	d002      	beq.n	80077e4 <__sflush_r+0x94>
 80077de:	4628      	mov	r0, r5
 80077e0:	f7fe fa5e 	bl	8005ca0 <_free_r>
 80077e4:	2000      	movs	r0, #0
 80077e6:	6360      	str	r0, [r4, #52]	; 0x34
 80077e8:	e7c0      	b.n	800776c <__sflush_r+0x1c>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b0      	blx	r6
 80077f0:	1c41      	adds	r1, r0, #1
 80077f2:	d1c8      	bne.n	8007786 <__sflush_r+0x36>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0c5      	beq.n	8007786 <__sflush_r+0x36>
 80077fa:	2b1d      	cmp	r3, #29
 80077fc:	d001      	beq.n	8007802 <__sflush_r+0xb2>
 80077fe:	2b16      	cmp	r3, #22
 8007800:	d101      	bne.n	8007806 <__sflush_r+0xb6>
 8007802:	602f      	str	r7, [r5, #0]
 8007804:	e7b1      	b.n	800776a <__sflush_r+0x1a>
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	e7ad      	b.n	800776c <__sflush_r+0x1c>
 8007810:	690f      	ldr	r7, [r1, #16]
 8007812:	2f00      	cmp	r7, #0
 8007814:	d0a9      	beq.n	800776a <__sflush_r+0x1a>
 8007816:	0793      	lsls	r3, r2, #30
 8007818:	680e      	ldr	r6, [r1, #0]
 800781a:	bf08      	it	eq
 800781c:	694b      	ldreq	r3, [r1, #20]
 800781e:	600f      	str	r7, [r1, #0]
 8007820:	bf18      	it	ne
 8007822:	2300      	movne	r3, #0
 8007824:	eba6 0807 	sub.w	r8, r6, r7
 8007828:	608b      	str	r3, [r1, #8]
 800782a:	f1b8 0f00 	cmp.w	r8, #0
 800782e:	dd9c      	ble.n	800776a <__sflush_r+0x1a>
 8007830:	6a21      	ldr	r1, [r4, #32]
 8007832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007834:	4643      	mov	r3, r8
 8007836:	463a      	mov	r2, r7
 8007838:	4628      	mov	r0, r5
 800783a:	47b0      	blx	r6
 800783c:	2800      	cmp	r0, #0
 800783e:	dc06      	bgt.n	800784e <__sflush_r+0xfe>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e78e      	b.n	800776c <__sflush_r+0x1c>
 800784e:	4407      	add	r7, r0
 8007850:	eba8 0800 	sub.w	r8, r8, r0
 8007854:	e7e9      	b.n	800782a <__sflush_r+0xda>
 8007856:	bf00      	nop
 8007858:	dfbffffe 	.word	0xdfbffffe

0800785c <_fflush_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b913      	cbnz	r3, 800786c <_fflush_r+0x10>
 8007866:	2500      	movs	r5, #0
 8007868:	4628      	mov	r0, r5
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	b118      	cbz	r0, 8007876 <_fflush_r+0x1a>
 800786e:	6a03      	ldr	r3, [r0, #32]
 8007870:	b90b      	cbnz	r3, 8007876 <_fflush_r+0x1a>
 8007872:	f7fd faff 	bl	8004e74 <__sinit>
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f3      	beq.n	8007866 <_fflush_r+0xa>
 800787e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007880:	07d0      	lsls	r0, r2, #31
 8007882:	d404      	bmi.n	800788e <_fflush_r+0x32>
 8007884:	0599      	lsls	r1, r3, #22
 8007886:	d402      	bmi.n	800788e <_fflush_r+0x32>
 8007888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788a:	f7fd fc0a 	bl	80050a2 <__retarget_lock_acquire_recursive>
 800788e:	4628      	mov	r0, r5
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff ff5d 	bl	8007750 <__sflush_r>
 8007896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007898:	07da      	lsls	r2, r3, #31
 800789a:	4605      	mov	r5, r0
 800789c:	d4e4      	bmi.n	8007868 <_fflush_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	059b      	lsls	r3, r3, #22
 80078a2:	d4e1      	bmi.n	8007868 <_fflush_r+0xc>
 80078a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078a6:	f7fd fbfd 	bl	80050a4 <__retarget_lock_release_recursive>
 80078aa:	e7dd      	b.n	8007868 <_fflush_r+0xc>

080078ac <memmove>:
 80078ac:	4288      	cmp	r0, r1
 80078ae:	b510      	push	{r4, lr}
 80078b0:	eb01 0402 	add.w	r4, r1, r2
 80078b4:	d902      	bls.n	80078bc <memmove+0x10>
 80078b6:	4284      	cmp	r4, r0
 80078b8:	4623      	mov	r3, r4
 80078ba:	d807      	bhi.n	80078cc <memmove+0x20>
 80078bc:	1e43      	subs	r3, r0, #1
 80078be:	42a1      	cmp	r1, r4
 80078c0:	d008      	beq.n	80078d4 <memmove+0x28>
 80078c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ca:	e7f8      	b.n	80078be <memmove+0x12>
 80078cc:	4402      	add	r2, r0
 80078ce:	4601      	mov	r1, r0
 80078d0:	428a      	cmp	r2, r1
 80078d2:	d100      	bne.n	80078d6 <memmove+0x2a>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078de:	e7f7      	b.n	80078d0 <memmove+0x24>

080078e0 <strncmp>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	b16a      	cbz	r2, 8007900 <strncmp+0x20>
 80078e4:	3901      	subs	r1, #1
 80078e6:	1884      	adds	r4, r0, r2
 80078e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d103      	bne.n	80078fc <strncmp+0x1c>
 80078f4:	42a0      	cmp	r0, r4
 80078f6:	d001      	beq.n	80078fc <strncmp+0x1c>
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	d1f5      	bne.n	80078e8 <strncmp+0x8>
 80078fc:	1ad0      	subs	r0, r2, r3
 80078fe:	bd10      	pop	{r4, pc}
 8007900:	4610      	mov	r0, r2
 8007902:	e7fc      	b.n	80078fe <strncmp+0x1e>

08007904 <_sbrk_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_sbrk_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7f9 feae 	bl	8001670 <_sbrk>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_sbrk_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_sbrk_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	200008b0 	.word	0x200008b0

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <nan>:
 8007940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007948 <nan+0x8>
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	00000000 	.word	0x00000000
 800794c:	7ff80000 	.word	0x7ff80000

08007950 <__assert_func>:
 8007950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007952:	4614      	mov	r4, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <__assert_func+0x2c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4605      	mov	r5, r0
 800795c:	68d8      	ldr	r0, [r3, #12]
 800795e:	b14c      	cbz	r4, 8007974 <__assert_func+0x24>
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <__assert_func+0x30>)
 8007962:	9100      	str	r1, [sp, #0]
 8007964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007968:	4906      	ldr	r1, [pc, #24]	; (8007984 <__assert_func+0x34>)
 800796a:	462b      	mov	r3, r5
 800796c:	f000 fbca 	bl	8008104 <fiprintf>
 8007970:	f000 fbda 	bl	8008128 <abort>
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <__assert_func+0x38>)
 8007976:	461c      	mov	r4, r3
 8007978:	e7f3      	b.n	8007962 <__assert_func+0x12>
 800797a:	bf00      	nop
 800797c:	2000006c 	.word	0x2000006c
 8007980:	080097ba 	.word	0x080097ba
 8007984:	080097c7 	.word	0x080097c7
 8007988:	080097f5 	.word	0x080097f5

0800798c <_calloc_r>:
 800798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798e:	fba1 2402 	umull	r2, r4, r1, r2
 8007992:	b94c      	cbnz	r4, 80079a8 <_calloc_r+0x1c>
 8007994:	4611      	mov	r1, r2
 8007996:	9201      	str	r2, [sp, #4]
 8007998:	f7fe f9f6 	bl	8005d88 <_malloc_r>
 800799c:	9a01      	ldr	r2, [sp, #4]
 800799e:	4605      	mov	r5, r0
 80079a0:	b930      	cbnz	r0, 80079b0 <_calloc_r+0x24>
 80079a2:	4628      	mov	r0, r5
 80079a4:	b003      	add	sp, #12
 80079a6:	bd30      	pop	{r4, r5, pc}
 80079a8:	220c      	movs	r2, #12
 80079aa:	6002      	str	r2, [r0, #0]
 80079ac:	2500      	movs	r5, #0
 80079ae:	e7f8      	b.n	80079a2 <_calloc_r+0x16>
 80079b0:	4621      	mov	r1, r4
 80079b2:	f7fd faf8 	bl	8004fa6 <memset>
 80079b6:	e7f4      	b.n	80079a2 <_calloc_r+0x16>

080079b8 <rshift>:
 80079b8:	6903      	ldr	r3, [r0, #16]
 80079ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079c6:	f100 0414 	add.w	r4, r0, #20
 80079ca:	dd45      	ble.n	8007a58 <rshift+0xa0>
 80079cc:	f011 011f 	ands.w	r1, r1, #31
 80079d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079d8:	d10c      	bne.n	80079f4 <rshift+0x3c>
 80079da:	f100 0710 	add.w	r7, r0, #16
 80079de:	4629      	mov	r1, r5
 80079e0:	42b1      	cmp	r1, r6
 80079e2:	d334      	bcc.n	8007a4e <rshift+0x96>
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	1eea      	subs	r2, r5, #3
 80079ea:	4296      	cmp	r6, r2
 80079ec:	bf38      	it	cc
 80079ee:	2300      	movcc	r3, #0
 80079f0:	4423      	add	r3, r4
 80079f2:	e015      	b.n	8007a20 <rshift+0x68>
 80079f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079f8:	f1c1 0820 	rsb	r8, r1, #32
 80079fc:	40cf      	lsrs	r7, r1
 80079fe:	f105 0e04 	add.w	lr, r5, #4
 8007a02:	46a1      	mov	r9, r4
 8007a04:	4576      	cmp	r6, lr
 8007a06:	46f4      	mov	ip, lr
 8007a08:	d815      	bhi.n	8007a36 <rshift+0x7e>
 8007a0a:	1a9a      	subs	r2, r3, r2
 8007a0c:	0092      	lsls	r2, r2, #2
 8007a0e:	3a04      	subs	r2, #4
 8007a10:	3501      	adds	r5, #1
 8007a12:	42ae      	cmp	r6, r5
 8007a14:	bf38      	it	cc
 8007a16:	2200      	movcc	r2, #0
 8007a18:	18a3      	adds	r3, r4, r2
 8007a1a:	50a7      	str	r7, [r4, r2]
 8007a1c:	b107      	cbz	r7, 8007a20 <rshift+0x68>
 8007a1e:	3304      	adds	r3, #4
 8007a20:	1b1a      	subs	r2, r3, r4
 8007a22:	42a3      	cmp	r3, r4
 8007a24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a28:	bf08      	it	eq
 8007a2a:	2300      	moveq	r3, #0
 8007a2c:	6102      	str	r2, [r0, #16]
 8007a2e:	bf08      	it	eq
 8007a30:	6143      	streq	r3, [r0, #20]
 8007a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a36:	f8dc c000 	ldr.w	ip, [ip]
 8007a3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a3e:	ea4c 0707 	orr.w	r7, ip, r7
 8007a42:	f849 7b04 	str.w	r7, [r9], #4
 8007a46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a4a:	40cf      	lsrs	r7, r1
 8007a4c:	e7da      	b.n	8007a04 <rshift+0x4c>
 8007a4e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a52:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a56:	e7c3      	b.n	80079e0 <rshift+0x28>
 8007a58:	4623      	mov	r3, r4
 8007a5a:	e7e1      	b.n	8007a20 <rshift+0x68>

08007a5c <__hexdig_fun>:
 8007a5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a60:	2b09      	cmp	r3, #9
 8007a62:	d802      	bhi.n	8007a6a <__hexdig_fun+0xe>
 8007a64:	3820      	subs	r0, #32
 8007a66:	b2c0      	uxtb	r0, r0
 8007a68:	4770      	bx	lr
 8007a6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d801      	bhi.n	8007a76 <__hexdig_fun+0x1a>
 8007a72:	3847      	subs	r0, #71	; 0x47
 8007a74:	e7f7      	b.n	8007a66 <__hexdig_fun+0xa>
 8007a76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d801      	bhi.n	8007a82 <__hexdig_fun+0x26>
 8007a7e:	3827      	subs	r0, #39	; 0x27
 8007a80:	e7f1      	b.n	8007a66 <__hexdig_fun+0xa>
 8007a82:	2000      	movs	r0, #0
 8007a84:	4770      	bx	lr
	...

08007a88 <__gethex>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	4617      	mov	r7, r2
 8007a8e:	680a      	ldr	r2, [r1, #0]
 8007a90:	b085      	sub	sp, #20
 8007a92:	f102 0b02 	add.w	fp, r2, #2
 8007a96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a9e:	4681      	mov	r9, r0
 8007aa0:	468a      	mov	sl, r1
 8007aa2:	9302      	str	r3, [sp, #8]
 8007aa4:	32fe      	adds	r2, #254	; 0xfe
 8007aa6:	eb02 030b 	add.w	r3, r2, fp
 8007aaa:	46d8      	mov	r8, fp
 8007aac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	2830      	cmp	r0, #48	; 0x30
 8007ab4:	d0f7      	beq.n	8007aa6 <__gethex+0x1e>
 8007ab6:	f7ff ffd1 	bl	8007a5c <__hexdig_fun>
 8007aba:	4604      	mov	r4, r0
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d138      	bne.n	8007b32 <__gethex+0xaa>
 8007ac0:	49a7      	ldr	r1, [pc, #668]	; (8007d60 <__gethex+0x2d8>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	f7ff ff0b 	bl	80078e0 <strncmp>
 8007aca:	4606      	mov	r6, r0
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d169      	bne.n	8007ba4 <__gethex+0x11c>
 8007ad0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007ad4:	465d      	mov	r5, fp
 8007ad6:	f7ff ffc1 	bl	8007a5c <__hexdig_fun>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d064      	beq.n	8007ba8 <__gethex+0x120>
 8007ade:	465a      	mov	r2, fp
 8007ae0:	7810      	ldrb	r0, [r2, #0]
 8007ae2:	2830      	cmp	r0, #48	; 0x30
 8007ae4:	4690      	mov	r8, r2
 8007ae6:	f102 0201 	add.w	r2, r2, #1
 8007aea:	d0f9      	beq.n	8007ae0 <__gethex+0x58>
 8007aec:	f7ff ffb6 	bl	8007a5c <__hexdig_fun>
 8007af0:	2301      	movs	r3, #1
 8007af2:	fab0 f480 	clz	r4, r0
 8007af6:	0964      	lsrs	r4, r4, #5
 8007af8:	465e      	mov	r6, fp
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	4642      	mov	r2, r8
 8007afe:	4615      	mov	r5, r2
 8007b00:	3201      	adds	r2, #1
 8007b02:	7828      	ldrb	r0, [r5, #0]
 8007b04:	f7ff ffaa 	bl	8007a5c <__hexdig_fun>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d1f8      	bne.n	8007afe <__gethex+0x76>
 8007b0c:	4994      	ldr	r1, [pc, #592]	; (8007d60 <__gethex+0x2d8>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7ff fee5 	bl	80078e0 <strncmp>
 8007b16:	b978      	cbnz	r0, 8007b38 <__gethex+0xb0>
 8007b18:	b946      	cbnz	r6, 8007b2c <__gethex+0xa4>
 8007b1a:	1c6e      	adds	r6, r5, #1
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4615      	mov	r5, r2
 8007b20:	3201      	adds	r2, #1
 8007b22:	7828      	ldrb	r0, [r5, #0]
 8007b24:	f7ff ff9a 	bl	8007a5c <__hexdig_fun>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d1f8      	bne.n	8007b1e <__gethex+0x96>
 8007b2c:	1b73      	subs	r3, r6, r5
 8007b2e:	009e      	lsls	r6, r3, #2
 8007b30:	e004      	b.n	8007b3c <__gethex+0xb4>
 8007b32:	2400      	movs	r4, #0
 8007b34:	4626      	mov	r6, r4
 8007b36:	e7e1      	b.n	8007afc <__gethex+0x74>
 8007b38:	2e00      	cmp	r6, #0
 8007b3a:	d1f7      	bne.n	8007b2c <__gethex+0xa4>
 8007b3c:	782b      	ldrb	r3, [r5, #0]
 8007b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b42:	2b50      	cmp	r3, #80	; 0x50
 8007b44:	d13d      	bne.n	8007bc2 <__gethex+0x13a>
 8007b46:	786b      	ldrb	r3, [r5, #1]
 8007b48:	2b2b      	cmp	r3, #43	; 0x2b
 8007b4a:	d02f      	beq.n	8007bac <__gethex+0x124>
 8007b4c:	2b2d      	cmp	r3, #45	; 0x2d
 8007b4e:	d031      	beq.n	8007bb4 <__gethex+0x12c>
 8007b50:	1c69      	adds	r1, r5, #1
 8007b52:	f04f 0b00 	mov.w	fp, #0
 8007b56:	7808      	ldrb	r0, [r1, #0]
 8007b58:	f7ff ff80 	bl	8007a5c <__hexdig_fun>
 8007b5c:	1e42      	subs	r2, r0, #1
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	2a18      	cmp	r2, #24
 8007b62:	d82e      	bhi.n	8007bc2 <__gethex+0x13a>
 8007b64:	f1a0 0210 	sub.w	r2, r0, #16
 8007b68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b6c:	f7ff ff76 	bl	8007a5c <__hexdig_fun>
 8007b70:	f100 3cff 	add.w	ip, r0, #4294967295
 8007b74:	fa5f fc8c 	uxtb.w	ip, ip
 8007b78:	f1bc 0f18 	cmp.w	ip, #24
 8007b7c:	d91d      	bls.n	8007bba <__gethex+0x132>
 8007b7e:	f1bb 0f00 	cmp.w	fp, #0
 8007b82:	d000      	beq.n	8007b86 <__gethex+0xfe>
 8007b84:	4252      	negs	r2, r2
 8007b86:	4416      	add	r6, r2
 8007b88:	f8ca 1000 	str.w	r1, [sl]
 8007b8c:	b1dc      	cbz	r4, 8007bc6 <__gethex+0x13e>
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf14      	ite	ne
 8007b94:	f04f 0800 	movne.w	r8, #0
 8007b98:	f04f 0806 	moveq.w	r8, #6
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	b005      	add	sp, #20
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	4645      	mov	r5, r8
 8007ba6:	4626      	mov	r6, r4
 8007ba8:	2401      	movs	r4, #1
 8007baa:	e7c7      	b.n	8007b3c <__gethex+0xb4>
 8007bac:	f04f 0b00 	mov.w	fp, #0
 8007bb0:	1ca9      	adds	r1, r5, #2
 8007bb2:	e7d0      	b.n	8007b56 <__gethex+0xce>
 8007bb4:	f04f 0b01 	mov.w	fp, #1
 8007bb8:	e7fa      	b.n	8007bb0 <__gethex+0x128>
 8007bba:	230a      	movs	r3, #10
 8007bbc:	fb03 0002 	mla	r0, r3, r2, r0
 8007bc0:	e7d0      	b.n	8007b64 <__gethex+0xdc>
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	e7e0      	b.n	8007b88 <__gethex+0x100>
 8007bc6:	eba5 0308 	sub.w	r3, r5, r8
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	4621      	mov	r1, r4
 8007bce:	2b07      	cmp	r3, #7
 8007bd0:	dc0a      	bgt.n	8007be8 <__gethex+0x160>
 8007bd2:	4648      	mov	r0, r9
 8007bd4:	f7fe f964 	bl	8005ea0 <_Balloc>
 8007bd8:	4604      	mov	r4, r0
 8007bda:	b940      	cbnz	r0, 8007bee <__gethex+0x166>
 8007bdc:	4b61      	ldr	r3, [pc, #388]	; (8007d64 <__gethex+0x2dc>)
 8007bde:	4602      	mov	r2, r0
 8007be0:	21e4      	movs	r1, #228	; 0xe4
 8007be2:	4861      	ldr	r0, [pc, #388]	; (8007d68 <__gethex+0x2e0>)
 8007be4:	f7ff feb4 	bl	8007950 <__assert_func>
 8007be8:	3101      	adds	r1, #1
 8007bea:	105b      	asrs	r3, r3, #1
 8007bec:	e7ef      	b.n	8007bce <__gethex+0x146>
 8007bee:	f100 0a14 	add.w	sl, r0, #20
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	495a      	ldr	r1, [pc, #360]	; (8007d60 <__gethex+0x2d8>)
 8007bf6:	f8cd a004 	str.w	sl, [sp, #4]
 8007bfa:	469b      	mov	fp, r3
 8007bfc:	45a8      	cmp	r8, r5
 8007bfe:	d342      	bcc.n	8007c86 <__gethex+0x1fe>
 8007c00:	9801      	ldr	r0, [sp, #4]
 8007c02:	f840 bb04 	str.w	fp, [r0], #4
 8007c06:	eba0 000a 	sub.w	r0, r0, sl
 8007c0a:	1080      	asrs	r0, r0, #2
 8007c0c:	6120      	str	r0, [r4, #16]
 8007c0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007c12:	4658      	mov	r0, fp
 8007c14:	f7fe fa36 	bl	8006084 <__hi0bits>
 8007c18:	683d      	ldr	r5, [r7, #0]
 8007c1a:	eba8 0000 	sub.w	r0, r8, r0
 8007c1e:	42a8      	cmp	r0, r5
 8007c20:	dd59      	ble.n	8007cd6 <__gethex+0x24e>
 8007c22:	eba0 0805 	sub.w	r8, r0, r5
 8007c26:	4641      	mov	r1, r8
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f7fe fdc2 	bl	80067b2 <__any_on>
 8007c2e:	4683      	mov	fp, r0
 8007c30:	b1b8      	cbz	r0, 8007c62 <__gethex+0x1da>
 8007c32:	f108 33ff 	add.w	r3, r8, #4294967295
 8007c36:	1159      	asrs	r1, r3, #5
 8007c38:	f003 021f 	and.w	r2, r3, #31
 8007c3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007c40:	f04f 0b01 	mov.w	fp, #1
 8007c44:	fa0b f202 	lsl.w	r2, fp, r2
 8007c48:	420a      	tst	r2, r1
 8007c4a:	d00a      	beq.n	8007c62 <__gethex+0x1da>
 8007c4c:	455b      	cmp	r3, fp
 8007c4e:	dd06      	ble.n	8007c5e <__gethex+0x1d6>
 8007c50:	f1a8 0102 	sub.w	r1, r8, #2
 8007c54:	4620      	mov	r0, r4
 8007c56:	f7fe fdac 	bl	80067b2 <__any_on>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d138      	bne.n	8007cd0 <__gethex+0x248>
 8007c5e:	f04f 0b02 	mov.w	fp, #2
 8007c62:	4641      	mov	r1, r8
 8007c64:	4620      	mov	r0, r4
 8007c66:	f7ff fea7 	bl	80079b8 <rshift>
 8007c6a:	4446      	add	r6, r8
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	42b3      	cmp	r3, r6
 8007c70:	da41      	bge.n	8007cf6 <__gethex+0x26e>
 8007c72:	4621      	mov	r1, r4
 8007c74:	4648      	mov	r0, r9
 8007c76:	f7fe f953 	bl	8005f20 <_Bfree>
 8007c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007c84:	e78a      	b.n	8007b9c <__gethex+0x114>
 8007c86:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007c8a:	2a2e      	cmp	r2, #46	; 0x2e
 8007c8c:	d014      	beq.n	8007cb8 <__gethex+0x230>
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d106      	bne.n	8007ca0 <__gethex+0x218>
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	f843 bb04 	str.w	fp, [r3], #4
 8007c98:	f04f 0b00 	mov.w	fp, #0
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	465b      	mov	r3, fp
 8007ca0:	7828      	ldrb	r0, [r5, #0]
 8007ca2:	9303      	str	r3, [sp, #12]
 8007ca4:	f7ff feda 	bl	8007a5c <__hexdig_fun>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	f000 000f 	and.w	r0, r0, #15
 8007cae:	4098      	lsls	r0, r3
 8007cb0:	ea4b 0b00 	orr.w	fp, fp, r0
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	e7a1      	b.n	8007bfc <__gethex+0x174>
 8007cb8:	45a8      	cmp	r8, r5
 8007cba:	d8e8      	bhi.n	8007c8e <__gethex+0x206>
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	f7ff fe0d 	bl	80078e0 <strncmp>
 8007cc6:	4926      	ldr	r1, [pc, #152]	; (8007d60 <__gethex+0x2d8>)
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d1df      	bne.n	8007c8e <__gethex+0x206>
 8007cce:	e795      	b.n	8007bfc <__gethex+0x174>
 8007cd0:	f04f 0b03 	mov.w	fp, #3
 8007cd4:	e7c5      	b.n	8007c62 <__gethex+0x1da>
 8007cd6:	da0b      	bge.n	8007cf0 <__gethex+0x268>
 8007cd8:	eba5 0800 	sub.w	r8, r5, r0
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4642      	mov	r2, r8
 8007ce0:	4648      	mov	r0, r9
 8007ce2:	f7fe fb37 	bl	8006354 <__lshift>
 8007ce6:	eba6 0608 	sub.w	r6, r6, r8
 8007cea:	4604      	mov	r4, r0
 8007cec:	f100 0a14 	add.w	sl, r0, #20
 8007cf0:	f04f 0b00 	mov.w	fp, #0
 8007cf4:	e7ba      	b.n	8007c6c <__gethex+0x1e4>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	42b3      	cmp	r3, r6
 8007cfa:	dd73      	ble.n	8007de4 <__gethex+0x35c>
 8007cfc:	1b9e      	subs	r6, r3, r6
 8007cfe:	42b5      	cmp	r5, r6
 8007d00:	dc34      	bgt.n	8007d6c <__gethex+0x2e4>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d023      	beq.n	8007d50 <__gethex+0x2c8>
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d025      	beq.n	8007d58 <__gethex+0x2d0>
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d115      	bne.n	8007d3c <__gethex+0x2b4>
 8007d10:	42b5      	cmp	r5, r6
 8007d12:	d113      	bne.n	8007d3c <__gethex+0x2b4>
 8007d14:	2d01      	cmp	r5, #1
 8007d16:	d10b      	bne.n	8007d30 <__gethex+0x2a8>
 8007d18:	9a02      	ldr	r2, [sp, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	2301      	movs	r3, #1
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	f8ca 3000 	str.w	r3, [sl]
 8007d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d28:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007d2c:	601c      	str	r4, [r3, #0]
 8007d2e:	e735      	b.n	8007b9c <__gethex+0x114>
 8007d30:	1e69      	subs	r1, r5, #1
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7fe fd3d 	bl	80067b2 <__any_on>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d1ed      	bne.n	8007d18 <__gethex+0x290>
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4648      	mov	r0, r9
 8007d40:	f7fe f8ee 	bl	8005f20 <_Bfree>
 8007d44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d46:	2300      	movs	r3, #0
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007d4e:	e725      	b.n	8007b9c <__gethex+0x114>
 8007d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f2      	bne.n	8007d3c <__gethex+0x2b4>
 8007d56:	e7df      	b.n	8007d18 <__gethex+0x290>
 8007d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1dc      	bne.n	8007d18 <__gethex+0x290>
 8007d5e:	e7ed      	b.n	8007d3c <__gethex+0x2b4>
 8007d60:	0800964c 	.word	0x0800964c
 8007d64:	080094e5 	.word	0x080094e5
 8007d68:	080097f6 	.word	0x080097f6
 8007d6c:	f106 38ff 	add.w	r8, r6, #4294967295
 8007d70:	f1bb 0f00 	cmp.w	fp, #0
 8007d74:	d133      	bne.n	8007dde <__gethex+0x356>
 8007d76:	f1b8 0f00 	cmp.w	r8, #0
 8007d7a:	d004      	beq.n	8007d86 <__gethex+0x2fe>
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7fe fd17 	bl	80067b2 <__any_on>
 8007d84:	4683      	mov	fp, r0
 8007d86:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d90:	f008 081f 	and.w	r8, r8, #31
 8007d94:	fa03 f308 	lsl.w	r3, r3, r8
 8007d98:	4213      	tst	r3, r2
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	bf18      	it	ne
 8007da0:	f04b 0b02 	orrne.w	fp, fp, #2
 8007da4:	1bad      	subs	r5, r5, r6
 8007da6:	f7ff fe07 	bl	80079b8 <rshift>
 8007daa:	687e      	ldr	r6, [r7, #4]
 8007dac:	f04f 0802 	mov.w	r8, #2
 8007db0:	f1bb 0f00 	cmp.w	fp, #0
 8007db4:	d04a      	beq.n	8007e4c <__gethex+0x3c4>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d016      	beq.n	8007dea <__gethex+0x362>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d018      	beq.n	8007df2 <__gethex+0x36a>
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d109      	bne.n	8007dd8 <__gethex+0x350>
 8007dc4:	f01b 0f02 	tst.w	fp, #2
 8007dc8:	d006      	beq.n	8007dd8 <__gethex+0x350>
 8007dca:	f8da 3000 	ldr.w	r3, [sl]
 8007dce:	ea4b 0b03 	orr.w	fp, fp, r3
 8007dd2:	f01b 0f01 	tst.w	fp, #1
 8007dd6:	d10f      	bne.n	8007df8 <__gethex+0x370>
 8007dd8:	f048 0810 	orr.w	r8, r8, #16
 8007ddc:	e036      	b.n	8007e4c <__gethex+0x3c4>
 8007dde:	f04f 0b01 	mov.w	fp, #1
 8007de2:	e7d0      	b.n	8007d86 <__gethex+0x2fe>
 8007de4:	f04f 0801 	mov.w	r8, #1
 8007de8:	e7e2      	b.n	8007db0 <__gethex+0x328>
 8007dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dec:	f1c3 0301 	rsb	r3, r3, #1
 8007df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0ef      	beq.n	8007dd8 <__gethex+0x350>
 8007df8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007dfc:	f104 0214 	add.w	r2, r4, #20
 8007e00:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4694      	mov	ip, r2
 8007e0e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007e12:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007e16:	d01e      	beq.n	8007e56 <__gethex+0x3ce>
 8007e18:	3101      	adds	r1, #1
 8007e1a:	f8cc 1000 	str.w	r1, [ip]
 8007e1e:	f1b8 0f02 	cmp.w	r8, #2
 8007e22:	f104 0214 	add.w	r2, r4, #20
 8007e26:	d13d      	bne.n	8007ea4 <__gethex+0x41c>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	42ab      	cmp	r3, r5
 8007e2e:	d10b      	bne.n	8007e48 <__gethex+0x3c0>
 8007e30:	1169      	asrs	r1, r5, #5
 8007e32:	2301      	movs	r3, #1
 8007e34:	f005 051f 	and.w	r5, r5, #31
 8007e38:	fa03 f505 	lsl.w	r5, r3, r5
 8007e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e40:	421d      	tst	r5, r3
 8007e42:	bf18      	it	ne
 8007e44:	f04f 0801 	movne.w	r8, #1
 8007e48:	f048 0820 	orr.w	r8, r8, #32
 8007e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e4e:	601c      	str	r4, [r3, #0]
 8007e50:	9b02      	ldr	r3, [sp, #8]
 8007e52:	601e      	str	r6, [r3, #0]
 8007e54:	e6a2      	b.n	8007b9c <__gethex+0x114>
 8007e56:	4290      	cmp	r0, r2
 8007e58:	f842 3c04 	str.w	r3, [r2, #-4]
 8007e5c:	d8d6      	bhi.n	8007e0c <__gethex+0x384>
 8007e5e:	68a2      	ldr	r2, [r4, #8]
 8007e60:	4593      	cmp	fp, r2
 8007e62:	db17      	blt.n	8007e94 <__gethex+0x40c>
 8007e64:	6861      	ldr	r1, [r4, #4]
 8007e66:	4648      	mov	r0, r9
 8007e68:	3101      	adds	r1, #1
 8007e6a:	f7fe f819 	bl	8005ea0 <_Balloc>
 8007e6e:	4682      	mov	sl, r0
 8007e70:	b918      	cbnz	r0, 8007e7a <__gethex+0x3f2>
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <__gethex+0x458>)
 8007e74:	4602      	mov	r2, r0
 8007e76:	2184      	movs	r1, #132	; 0x84
 8007e78:	e6b3      	b.n	8007be2 <__gethex+0x15a>
 8007e7a:	6922      	ldr	r2, [r4, #16]
 8007e7c:	3202      	adds	r2, #2
 8007e7e:	f104 010c 	add.w	r1, r4, #12
 8007e82:	0092      	lsls	r2, r2, #2
 8007e84:	300c      	adds	r0, #12
 8007e86:	f7ff fd4d 	bl	8007924 <memcpy>
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	4648      	mov	r0, r9
 8007e8e:	f7fe f847 	bl	8005f20 <_Bfree>
 8007e92:	4654      	mov	r4, sl
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	1c51      	adds	r1, r2, #1
 8007e98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e9c:	6121      	str	r1, [r4, #16]
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	6151      	str	r1, [r2, #20]
 8007ea2:	e7bc      	b.n	8007e1e <__gethex+0x396>
 8007ea4:	6921      	ldr	r1, [r4, #16]
 8007ea6:	4559      	cmp	r1, fp
 8007ea8:	dd0b      	ble.n	8007ec2 <__gethex+0x43a>
 8007eaa:	2101      	movs	r1, #1
 8007eac:	4620      	mov	r0, r4
 8007eae:	f7ff fd83 	bl	80079b8 <rshift>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	3601      	adds	r6, #1
 8007eb6:	42b3      	cmp	r3, r6
 8007eb8:	f6ff aedb 	blt.w	8007c72 <__gethex+0x1ea>
 8007ebc:	f04f 0801 	mov.w	r8, #1
 8007ec0:	e7c2      	b.n	8007e48 <__gethex+0x3c0>
 8007ec2:	f015 051f 	ands.w	r5, r5, #31
 8007ec6:	d0f9      	beq.n	8007ebc <__gethex+0x434>
 8007ec8:	9b01      	ldr	r3, [sp, #4]
 8007eca:	441a      	add	r2, r3
 8007ecc:	f1c5 0520 	rsb	r5, r5, #32
 8007ed0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007ed4:	f7fe f8d6 	bl	8006084 <__hi0bits>
 8007ed8:	42a8      	cmp	r0, r5
 8007eda:	dbe6      	blt.n	8007eaa <__gethex+0x422>
 8007edc:	e7ee      	b.n	8007ebc <__gethex+0x434>
 8007ede:	bf00      	nop
 8007ee0:	080094e5 	.word	0x080094e5

08007ee4 <L_shift>:
 8007ee4:	f1c2 0208 	rsb	r2, r2, #8
 8007ee8:	0092      	lsls	r2, r2, #2
 8007eea:	b570      	push	{r4, r5, r6, lr}
 8007eec:	f1c2 0620 	rsb	r6, r2, #32
 8007ef0:	6843      	ldr	r3, [r0, #4]
 8007ef2:	6804      	ldr	r4, [r0, #0]
 8007ef4:	fa03 f506 	lsl.w	r5, r3, r6
 8007ef8:	432c      	orrs	r4, r5
 8007efa:	40d3      	lsrs	r3, r2
 8007efc:	6004      	str	r4, [r0, #0]
 8007efe:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f02:	4288      	cmp	r0, r1
 8007f04:	d3f4      	bcc.n	8007ef0 <L_shift+0xc>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}

08007f08 <__match>:
 8007f08:	b530      	push	{r4, r5, lr}
 8007f0a:	6803      	ldr	r3, [r0, #0]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f12:	b914      	cbnz	r4, 8007f1a <__match+0x12>
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	2001      	movs	r0, #1
 8007f18:	bd30      	pop	{r4, r5, pc}
 8007f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f22:	2d19      	cmp	r5, #25
 8007f24:	bf98      	it	ls
 8007f26:	3220      	addls	r2, #32
 8007f28:	42a2      	cmp	r2, r4
 8007f2a:	d0f0      	beq.n	8007f0e <__match+0x6>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e7f3      	b.n	8007f18 <__match+0x10>

08007f30 <__hexnan>:
 8007f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	680b      	ldr	r3, [r1, #0]
 8007f36:	6801      	ldr	r1, [r0, #0]
 8007f38:	115e      	asrs	r6, r3, #5
 8007f3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f3e:	f013 031f 	ands.w	r3, r3, #31
 8007f42:	b087      	sub	sp, #28
 8007f44:	bf18      	it	ne
 8007f46:	3604      	addne	r6, #4
 8007f48:	2500      	movs	r5, #0
 8007f4a:	1f37      	subs	r7, r6, #4
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	4690      	mov	r8, r2
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f56:	46b9      	mov	r9, r7
 8007f58:	463c      	mov	r4, r7
 8007f5a:	9502      	str	r5, [sp, #8]
 8007f5c:	46ab      	mov	fp, r5
 8007f5e:	784a      	ldrb	r2, [r1, #1]
 8007f60:	1c4b      	adds	r3, r1, #1
 8007f62:	9303      	str	r3, [sp, #12]
 8007f64:	b342      	cbz	r2, 8007fb8 <__hexnan+0x88>
 8007f66:	4610      	mov	r0, r2
 8007f68:	9105      	str	r1, [sp, #20]
 8007f6a:	9204      	str	r2, [sp, #16]
 8007f6c:	f7ff fd76 	bl	8007a5c <__hexdig_fun>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d14f      	bne.n	8008014 <__hexnan+0xe4>
 8007f74:	9a04      	ldr	r2, [sp, #16]
 8007f76:	9905      	ldr	r1, [sp, #20]
 8007f78:	2a20      	cmp	r2, #32
 8007f7a:	d818      	bhi.n	8007fae <__hexnan+0x7e>
 8007f7c:	9b02      	ldr	r3, [sp, #8]
 8007f7e:	459b      	cmp	fp, r3
 8007f80:	dd13      	ble.n	8007faa <__hexnan+0x7a>
 8007f82:	454c      	cmp	r4, r9
 8007f84:	d206      	bcs.n	8007f94 <__hexnan+0x64>
 8007f86:	2d07      	cmp	r5, #7
 8007f88:	dc04      	bgt.n	8007f94 <__hexnan+0x64>
 8007f8a:	462a      	mov	r2, r5
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f7ff ffa8 	bl	8007ee4 <L_shift>
 8007f94:	4544      	cmp	r4, r8
 8007f96:	d950      	bls.n	800803a <__hexnan+0x10a>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f1a4 0904 	sub.w	r9, r4, #4
 8007f9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fa2:	f8cd b008 	str.w	fp, [sp, #8]
 8007fa6:	464c      	mov	r4, r9
 8007fa8:	461d      	mov	r5, r3
 8007faa:	9903      	ldr	r1, [sp, #12]
 8007fac:	e7d7      	b.n	8007f5e <__hexnan+0x2e>
 8007fae:	2a29      	cmp	r2, #41	; 0x29
 8007fb0:	d155      	bne.n	800805e <__hexnan+0x12e>
 8007fb2:	3102      	adds	r1, #2
 8007fb4:	f8ca 1000 	str.w	r1, [sl]
 8007fb8:	f1bb 0f00 	cmp.w	fp, #0
 8007fbc:	d04f      	beq.n	800805e <__hexnan+0x12e>
 8007fbe:	454c      	cmp	r4, r9
 8007fc0:	d206      	bcs.n	8007fd0 <__hexnan+0xa0>
 8007fc2:	2d07      	cmp	r5, #7
 8007fc4:	dc04      	bgt.n	8007fd0 <__hexnan+0xa0>
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f7ff ff8a 	bl	8007ee4 <L_shift>
 8007fd0:	4544      	cmp	r4, r8
 8007fd2:	d934      	bls.n	800803e <__hexnan+0x10e>
 8007fd4:	f1a8 0204 	sub.w	r2, r8, #4
 8007fd8:	4623      	mov	r3, r4
 8007fda:	f853 1b04 	ldr.w	r1, [r3], #4
 8007fde:	f842 1f04 	str.w	r1, [r2, #4]!
 8007fe2:	429f      	cmp	r7, r3
 8007fe4:	d2f9      	bcs.n	8007fda <__hexnan+0xaa>
 8007fe6:	1b3b      	subs	r3, r7, r4
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	3304      	adds	r3, #4
 8007fee:	3e03      	subs	r6, #3
 8007ff0:	3401      	adds	r4, #1
 8007ff2:	42a6      	cmp	r6, r4
 8007ff4:	bf38      	it	cc
 8007ff6:	2304      	movcc	r3, #4
 8007ff8:	4443      	add	r3, r8
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f843 2b04 	str.w	r2, [r3], #4
 8008000:	429f      	cmp	r7, r3
 8008002:	d2fb      	bcs.n	8007ffc <__hexnan+0xcc>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	b91b      	cbnz	r3, 8008010 <__hexnan+0xe0>
 8008008:	4547      	cmp	r7, r8
 800800a:	d126      	bne.n	800805a <__hexnan+0x12a>
 800800c:	2301      	movs	r3, #1
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	2005      	movs	r0, #5
 8008012:	e025      	b.n	8008060 <__hexnan+0x130>
 8008014:	3501      	adds	r5, #1
 8008016:	2d08      	cmp	r5, #8
 8008018:	f10b 0b01 	add.w	fp, fp, #1
 800801c:	dd06      	ble.n	800802c <__hexnan+0xfc>
 800801e:	4544      	cmp	r4, r8
 8008020:	d9c3      	bls.n	8007faa <__hexnan+0x7a>
 8008022:	2300      	movs	r3, #0
 8008024:	f844 3c04 	str.w	r3, [r4, #-4]
 8008028:	2501      	movs	r5, #1
 800802a:	3c04      	subs	r4, #4
 800802c:	6822      	ldr	r2, [r4, #0]
 800802e:	f000 000f 	and.w	r0, r0, #15
 8008032:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008036:	6020      	str	r0, [r4, #0]
 8008038:	e7b7      	b.n	8007faa <__hexnan+0x7a>
 800803a:	2508      	movs	r5, #8
 800803c:	e7b5      	b.n	8007faa <__hexnan+0x7a>
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0df      	beq.n	8008004 <__hexnan+0xd4>
 8008044:	f1c3 0320 	rsb	r3, r3, #32
 8008048:	f04f 32ff 	mov.w	r2, #4294967295
 800804c:	40da      	lsrs	r2, r3
 800804e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008052:	4013      	ands	r3, r2
 8008054:	f846 3c04 	str.w	r3, [r6, #-4]
 8008058:	e7d4      	b.n	8008004 <__hexnan+0xd4>
 800805a:	3f04      	subs	r7, #4
 800805c:	e7d2      	b.n	8008004 <__hexnan+0xd4>
 800805e:	2004      	movs	r0, #4
 8008060:	b007      	add	sp, #28
 8008062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008066 <__ascii_mbtowc>:
 8008066:	b082      	sub	sp, #8
 8008068:	b901      	cbnz	r1, 800806c <__ascii_mbtowc+0x6>
 800806a:	a901      	add	r1, sp, #4
 800806c:	b142      	cbz	r2, 8008080 <__ascii_mbtowc+0x1a>
 800806e:	b14b      	cbz	r3, 8008084 <__ascii_mbtowc+0x1e>
 8008070:	7813      	ldrb	r3, [r2, #0]
 8008072:	600b      	str	r3, [r1, #0]
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	1e10      	subs	r0, r2, #0
 8008078:	bf18      	it	ne
 800807a:	2001      	movne	r0, #1
 800807c:	b002      	add	sp, #8
 800807e:	4770      	bx	lr
 8008080:	4610      	mov	r0, r2
 8008082:	e7fb      	b.n	800807c <__ascii_mbtowc+0x16>
 8008084:	f06f 0001 	mvn.w	r0, #1
 8008088:	e7f8      	b.n	800807c <__ascii_mbtowc+0x16>

0800808a <_realloc_r>:
 800808a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	4680      	mov	r8, r0
 8008090:	4614      	mov	r4, r2
 8008092:	460e      	mov	r6, r1
 8008094:	b921      	cbnz	r1, 80080a0 <_realloc_r+0x16>
 8008096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	4611      	mov	r1, r2
 800809c:	f7fd be74 	b.w	8005d88 <_malloc_r>
 80080a0:	b92a      	cbnz	r2, 80080ae <_realloc_r+0x24>
 80080a2:	f7fd fdfd 	bl	8005ca0 <_free_r>
 80080a6:	4625      	mov	r5, r4
 80080a8:	4628      	mov	r0, r5
 80080aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ae:	f000 f842 	bl	8008136 <_malloc_usable_size_r>
 80080b2:	4284      	cmp	r4, r0
 80080b4:	4607      	mov	r7, r0
 80080b6:	d802      	bhi.n	80080be <_realloc_r+0x34>
 80080b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080bc:	d812      	bhi.n	80080e4 <_realloc_r+0x5a>
 80080be:	4621      	mov	r1, r4
 80080c0:	4640      	mov	r0, r8
 80080c2:	f7fd fe61 	bl	8005d88 <_malloc_r>
 80080c6:	4605      	mov	r5, r0
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0ed      	beq.n	80080a8 <_realloc_r+0x1e>
 80080cc:	42bc      	cmp	r4, r7
 80080ce:	4622      	mov	r2, r4
 80080d0:	4631      	mov	r1, r6
 80080d2:	bf28      	it	cs
 80080d4:	463a      	movcs	r2, r7
 80080d6:	f7ff fc25 	bl	8007924 <memcpy>
 80080da:	4631      	mov	r1, r6
 80080dc:	4640      	mov	r0, r8
 80080de:	f7fd fddf 	bl	8005ca0 <_free_r>
 80080e2:	e7e1      	b.n	80080a8 <_realloc_r+0x1e>
 80080e4:	4635      	mov	r5, r6
 80080e6:	e7df      	b.n	80080a8 <_realloc_r+0x1e>

080080e8 <__ascii_wctomb>:
 80080e8:	b149      	cbz	r1, 80080fe <__ascii_wctomb+0x16>
 80080ea:	2aff      	cmp	r2, #255	; 0xff
 80080ec:	bf85      	ittet	hi
 80080ee:	238a      	movhi	r3, #138	; 0x8a
 80080f0:	6003      	strhi	r3, [r0, #0]
 80080f2:	700a      	strbls	r2, [r1, #0]
 80080f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80080f8:	bf98      	it	ls
 80080fa:	2001      	movls	r0, #1
 80080fc:	4770      	bx	lr
 80080fe:	4608      	mov	r0, r1
 8008100:	4770      	bx	lr
	...

08008104 <fiprintf>:
 8008104:	b40e      	push	{r1, r2, r3}
 8008106:	b503      	push	{r0, r1, lr}
 8008108:	4601      	mov	r1, r0
 800810a:	ab03      	add	r3, sp, #12
 800810c:	4805      	ldr	r0, [pc, #20]	; (8008124 <fiprintf+0x20>)
 800810e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008112:	6800      	ldr	r0, [r0, #0]
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	f000 f83f 	bl	8008198 <_vfiprintf_r>
 800811a:	b002      	add	sp, #8
 800811c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008120:	b003      	add	sp, #12
 8008122:	4770      	bx	lr
 8008124:	2000006c 	.word	0x2000006c

08008128 <abort>:
 8008128:	b508      	push	{r3, lr}
 800812a:	2006      	movs	r0, #6
 800812c:	f000 fa0c 	bl	8008548 <raise>
 8008130:	2001      	movs	r0, #1
 8008132:	f7f9 fa25 	bl	8001580 <_exit>

08008136 <_malloc_usable_size_r>:
 8008136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800813a:	1f18      	subs	r0, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	bfbc      	itt	lt
 8008140:	580b      	ldrlt	r3, [r1, r0]
 8008142:	18c0      	addlt	r0, r0, r3
 8008144:	4770      	bx	lr

08008146 <__sfputc_r>:
 8008146:	6893      	ldr	r3, [r2, #8]
 8008148:	3b01      	subs	r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	b410      	push	{r4}
 800814e:	6093      	str	r3, [r2, #8]
 8008150:	da08      	bge.n	8008164 <__sfputc_r+0x1e>
 8008152:	6994      	ldr	r4, [r2, #24]
 8008154:	42a3      	cmp	r3, r4
 8008156:	db01      	blt.n	800815c <__sfputc_r+0x16>
 8008158:	290a      	cmp	r1, #10
 800815a:	d103      	bne.n	8008164 <__sfputc_r+0x1e>
 800815c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008160:	f000 b934 	b.w	80083cc <__swbuf_r>
 8008164:	6813      	ldr	r3, [r2, #0]
 8008166:	1c58      	adds	r0, r3, #1
 8008168:	6010      	str	r0, [r2, #0]
 800816a:	7019      	strb	r1, [r3, #0]
 800816c:	4608      	mov	r0, r1
 800816e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008172:	4770      	bx	lr

08008174 <__sfputs_r>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	4606      	mov	r6, r0
 8008178:	460f      	mov	r7, r1
 800817a:	4614      	mov	r4, r2
 800817c:	18d5      	adds	r5, r2, r3
 800817e:	42ac      	cmp	r4, r5
 8008180:	d101      	bne.n	8008186 <__sfputs_r+0x12>
 8008182:	2000      	movs	r0, #0
 8008184:	e007      	b.n	8008196 <__sfputs_r+0x22>
 8008186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818a:	463a      	mov	r2, r7
 800818c:	4630      	mov	r0, r6
 800818e:	f7ff ffda 	bl	8008146 <__sfputc_r>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	d1f3      	bne.n	800817e <__sfputs_r+0xa>
 8008196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008198 <_vfiprintf_r>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	460d      	mov	r5, r1
 800819e:	b09d      	sub	sp, #116	; 0x74
 80081a0:	4614      	mov	r4, r2
 80081a2:	4698      	mov	r8, r3
 80081a4:	4606      	mov	r6, r0
 80081a6:	b118      	cbz	r0, 80081b0 <_vfiprintf_r+0x18>
 80081a8:	6a03      	ldr	r3, [r0, #32]
 80081aa:	b90b      	cbnz	r3, 80081b0 <_vfiprintf_r+0x18>
 80081ac:	f7fc fe62 	bl	8004e74 <__sinit>
 80081b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	d405      	bmi.n	80081c2 <_vfiprintf_r+0x2a>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	059a      	lsls	r2, r3, #22
 80081ba:	d402      	bmi.n	80081c2 <_vfiprintf_r+0x2a>
 80081bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081be:	f7fc ff70 	bl	80050a2 <__retarget_lock_acquire_recursive>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	071b      	lsls	r3, r3, #28
 80081c6:	d501      	bpl.n	80081cc <_vfiprintf_r+0x34>
 80081c8:	692b      	ldr	r3, [r5, #16]
 80081ca:	b99b      	cbnz	r3, 80081f4 <_vfiprintf_r+0x5c>
 80081cc:	4629      	mov	r1, r5
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 f93a 	bl	8008448 <__swsetup_r>
 80081d4:	b170      	cbz	r0, 80081f4 <_vfiprintf_r+0x5c>
 80081d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081d8:	07dc      	lsls	r4, r3, #31
 80081da:	d504      	bpl.n	80081e6 <_vfiprintf_r+0x4e>
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	b01d      	add	sp, #116	; 0x74
 80081e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	0598      	lsls	r0, r3, #22
 80081ea:	d4f7      	bmi.n	80081dc <_vfiprintf_r+0x44>
 80081ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ee:	f7fc ff59 	bl	80050a4 <__retarget_lock_release_recursive>
 80081f2:	e7f3      	b.n	80081dc <_vfiprintf_r+0x44>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9309      	str	r3, [sp, #36]	; 0x24
 80081f8:	2320      	movs	r3, #32
 80081fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008202:	2330      	movs	r3, #48	; 0x30
 8008204:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80083b8 <_vfiprintf_r+0x220>
 8008208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800820c:	f04f 0901 	mov.w	r9, #1
 8008210:	4623      	mov	r3, r4
 8008212:	469a      	mov	sl, r3
 8008214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008218:	b10a      	cbz	r2, 800821e <_vfiprintf_r+0x86>
 800821a:	2a25      	cmp	r2, #37	; 0x25
 800821c:	d1f9      	bne.n	8008212 <_vfiprintf_r+0x7a>
 800821e:	ebba 0b04 	subs.w	fp, sl, r4
 8008222:	d00b      	beq.n	800823c <_vfiprintf_r+0xa4>
 8008224:	465b      	mov	r3, fp
 8008226:	4622      	mov	r2, r4
 8008228:	4629      	mov	r1, r5
 800822a:	4630      	mov	r0, r6
 800822c:	f7ff ffa2 	bl	8008174 <__sfputs_r>
 8008230:	3001      	adds	r0, #1
 8008232:	f000 80a9 	beq.w	8008388 <_vfiprintf_r+0x1f0>
 8008236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008238:	445a      	add	r2, fp
 800823a:	9209      	str	r2, [sp, #36]	; 0x24
 800823c:	f89a 3000 	ldrb.w	r3, [sl]
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80a1 	beq.w	8008388 <_vfiprintf_r+0x1f0>
 8008246:	2300      	movs	r3, #0
 8008248:	f04f 32ff 	mov.w	r2, #4294967295
 800824c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008250:	f10a 0a01 	add.w	sl, sl, #1
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800825c:	931a      	str	r3, [sp, #104]	; 0x68
 800825e:	4654      	mov	r4, sl
 8008260:	2205      	movs	r2, #5
 8008262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008266:	4854      	ldr	r0, [pc, #336]	; (80083b8 <_vfiprintf_r+0x220>)
 8008268:	f7f7 ffea 	bl	8000240 <memchr>
 800826c:	9a04      	ldr	r2, [sp, #16]
 800826e:	b9d8      	cbnz	r0, 80082a8 <_vfiprintf_r+0x110>
 8008270:	06d1      	lsls	r1, r2, #27
 8008272:	bf44      	itt	mi
 8008274:	2320      	movmi	r3, #32
 8008276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827a:	0713      	lsls	r3, r2, #28
 800827c:	bf44      	itt	mi
 800827e:	232b      	movmi	r3, #43	; 0x2b
 8008280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008284:	f89a 3000 	ldrb.w	r3, [sl]
 8008288:	2b2a      	cmp	r3, #42	; 0x2a
 800828a:	d015      	beq.n	80082b8 <_vfiprintf_r+0x120>
 800828c:	9a07      	ldr	r2, [sp, #28]
 800828e:	4654      	mov	r4, sl
 8008290:	2000      	movs	r0, #0
 8008292:	f04f 0c0a 	mov.w	ip, #10
 8008296:	4621      	mov	r1, r4
 8008298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829c:	3b30      	subs	r3, #48	; 0x30
 800829e:	2b09      	cmp	r3, #9
 80082a0:	d94d      	bls.n	800833e <_vfiprintf_r+0x1a6>
 80082a2:	b1b0      	cbz	r0, 80082d2 <_vfiprintf_r+0x13a>
 80082a4:	9207      	str	r2, [sp, #28]
 80082a6:	e014      	b.n	80082d2 <_vfiprintf_r+0x13a>
 80082a8:	eba0 0308 	sub.w	r3, r0, r8
 80082ac:	fa09 f303 	lsl.w	r3, r9, r3
 80082b0:	4313      	orrs	r3, r2
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	46a2      	mov	sl, r4
 80082b6:	e7d2      	b.n	800825e <_vfiprintf_r+0xc6>
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	1d19      	adds	r1, r3, #4
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	9103      	str	r1, [sp, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bfbb      	ittet	lt
 80082c4:	425b      	neglt	r3, r3
 80082c6:	f042 0202 	orrlt.w	r2, r2, #2
 80082ca:	9307      	strge	r3, [sp, #28]
 80082cc:	9307      	strlt	r3, [sp, #28]
 80082ce:	bfb8      	it	lt
 80082d0:	9204      	strlt	r2, [sp, #16]
 80082d2:	7823      	ldrb	r3, [r4, #0]
 80082d4:	2b2e      	cmp	r3, #46	; 0x2e
 80082d6:	d10c      	bne.n	80082f2 <_vfiprintf_r+0x15a>
 80082d8:	7863      	ldrb	r3, [r4, #1]
 80082da:	2b2a      	cmp	r3, #42	; 0x2a
 80082dc:	d134      	bne.n	8008348 <_vfiprintf_r+0x1b0>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	1d1a      	adds	r2, r3, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	9203      	str	r2, [sp, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfb8      	it	lt
 80082ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ee:	3402      	adds	r4, #2
 80082f0:	9305      	str	r3, [sp, #20]
 80082f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80083c8 <_vfiprintf_r+0x230>
 80082f6:	7821      	ldrb	r1, [r4, #0]
 80082f8:	2203      	movs	r2, #3
 80082fa:	4650      	mov	r0, sl
 80082fc:	f7f7 ffa0 	bl	8000240 <memchr>
 8008300:	b138      	cbz	r0, 8008312 <_vfiprintf_r+0x17a>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	eba0 000a 	sub.w	r0, r0, sl
 8008308:	2240      	movs	r2, #64	; 0x40
 800830a:	4082      	lsls	r2, r0
 800830c:	4313      	orrs	r3, r2
 800830e:	3401      	adds	r4, #1
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008316:	4829      	ldr	r0, [pc, #164]	; (80083bc <_vfiprintf_r+0x224>)
 8008318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800831c:	2206      	movs	r2, #6
 800831e:	f7f7 ff8f 	bl	8000240 <memchr>
 8008322:	2800      	cmp	r0, #0
 8008324:	d03f      	beq.n	80083a6 <_vfiprintf_r+0x20e>
 8008326:	4b26      	ldr	r3, [pc, #152]	; (80083c0 <_vfiprintf_r+0x228>)
 8008328:	bb1b      	cbnz	r3, 8008372 <_vfiprintf_r+0x1da>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	3307      	adds	r3, #7
 800832e:	f023 0307 	bic.w	r3, r3, #7
 8008332:	3308      	adds	r3, #8
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008338:	443b      	add	r3, r7
 800833a:	9309      	str	r3, [sp, #36]	; 0x24
 800833c:	e768      	b.n	8008210 <_vfiprintf_r+0x78>
 800833e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008342:	460c      	mov	r4, r1
 8008344:	2001      	movs	r0, #1
 8008346:	e7a6      	b.n	8008296 <_vfiprintf_r+0xfe>
 8008348:	2300      	movs	r3, #0
 800834a:	3401      	adds	r4, #1
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	4619      	mov	r1, r3
 8008350:	f04f 0c0a 	mov.w	ip, #10
 8008354:	4620      	mov	r0, r4
 8008356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800835a:	3a30      	subs	r2, #48	; 0x30
 800835c:	2a09      	cmp	r2, #9
 800835e:	d903      	bls.n	8008368 <_vfiprintf_r+0x1d0>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0c6      	beq.n	80082f2 <_vfiprintf_r+0x15a>
 8008364:	9105      	str	r1, [sp, #20]
 8008366:	e7c4      	b.n	80082f2 <_vfiprintf_r+0x15a>
 8008368:	fb0c 2101 	mla	r1, ip, r1, r2
 800836c:	4604      	mov	r4, r0
 800836e:	2301      	movs	r3, #1
 8008370:	e7f0      	b.n	8008354 <_vfiprintf_r+0x1bc>
 8008372:	ab03      	add	r3, sp, #12
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	462a      	mov	r2, r5
 8008378:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <_vfiprintf_r+0x22c>)
 800837a:	a904      	add	r1, sp, #16
 800837c:	4630      	mov	r0, r6
 800837e:	f7fb ff3f 	bl	8004200 <_printf_float>
 8008382:	4607      	mov	r7, r0
 8008384:	1c78      	adds	r0, r7, #1
 8008386:	d1d6      	bne.n	8008336 <_vfiprintf_r+0x19e>
 8008388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800838a:	07d9      	lsls	r1, r3, #31
 800838c:	d405      	bmi.n	800839a <_vfiprintf_r+0x202>
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	059a      	lsls	r2, r3, #22
 8008392:	d402      	bmi.n	800839a <_vfiprintf_r+0x202>
 8008394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008396:	f7fc fe85 	bl	80050a4 <__retarget_lock_release_recursive>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	065b      	lsls	r3, r3, #25
 800839e:	f53f af1d 	bmi.w	80081dc <_vfiprintf_r+0x44>
 80083a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083a4:	e71c      	b.n	80081e0 <_vfiprintf_r+0x48>
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	462a      	mov	r2, r5
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <_vfiprintf_r+0x22c>)
 80083ae:	a904      	add	r1, sp, #16
 80083b0:	4630      	mov	r0, r6
 80083b2:	f7fc f9ad 	bl	8004710 <_printf_i>
 80083b6:	e7e4      	b.n	8008382 <_vfiprintf_r+0x1ea>
 80083b8:	080097a1 	.word	0x080097a1
 80083bc:	080097ab 	.word	0x080097ab
 80083c0:	08004201 	.word	0x08004201
 80083c4:	08008175 	.word	0x08008175
 80083c8:	080097a7 	.word	0x080097a7

080083cc <__swbuf_r>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	460e      	mov	r6, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	4605      	mov	r5, r0
 80083d4:	b118      	cbz	r0, 80083de <__swbuf_r+0x12>
 80083d6:	6a03      	ldr	r3, [r0, #32]
 80083d8:	b90b      	cbnz	r3, 80083de <__swbuf_r+0x12>
 80083da:	f7fc fd4b 	bl	8004e74 <__sinit>
 80083de:	69a3      	ldr	r3, [r4, #24]
 80083e0:	60a3      	str	r3, [r4, #8]
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	071a      	lsls	r2, r3, #28
 80083e6:	d525      	bpl.n	8008434 <__swbuf_r+0x68>
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	b31b      	cbz	r3, 8008434 <__swbuf_r+0x68>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	6922      	ldr	r2, [r4, #16]
 80083f0:	1a98      	subs	r0, r3, r2
 80083f2:	6963      	ldr	r3, [r4, #20]
 80083f4:	b2f6      	uxtb	r6, r6
 80083f6:	4283      	cmp	r3, r0
 80083f8:	4637      	mov	r7, r6
 80083fa:	dc04      	bgt.n	8008406 <__swbuf_r+0x3a>
 80083fc:	4621      	mov	r1, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	f7ff fa2c 	bl	800785c <_fflush_r>
 8008404:	b9e0      	cbnz	r0, 8008440 <__swbuf_r+0x74>
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	3b01      	subs	r3, #1
 800840a:	60a3      	str	r3, [r4, #8]
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	6022      	str	r2, [r4, #0]
 8008412:	701e      	strb	r6, [r3, #0]
 8008414:	6962      	ldr	r2, [r4, #20]
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	429a      	cmp	r2, r3
 800841a:	d004      	beq.n	8008426 <__swbuf_r+0x5a>
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	07db      	lsls	r3, r3, #31
 8008420:	d506      	bpl.n	8008430 <__swbuf_r+0x64>
 8008422:	2e0a      	cmp	r6, #10
 8008424:	d104      	bne.n	8008430 <__swbuf_r+0x64>
 8008426:	4621      	mov	r1, r4
 8008428:	4628      	mov	r0, r5
 800842a:	f7ff fa17 	bl	800785c <_fflush_r>
 800842e:	b938      	cbnz	r0, 8008440 <__swbuf_r+0x74>
 8008430:	4638      	mov	r0, r7
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f000 f806 	bl	8008448 <__swsetup_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	d0d5      	beq.n	80083ec <__swbuf_r+0x20>
 8008440:	f04f 37ff 	mov.w	r7, #4294967295
 8008444:	e7f4      	b.n	8008430 <__swbuf_r+0x64>
	...

08008448 <__swsetup_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4b2a      	ldr	r3, [pc, #168]	; (80084f4 <__swsetup_r+0xac>)
 800844c:	4605      	mov	r5, r0
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	460c      	mov	r4, r1
 8008452:	b118      	cbz	r0, 800845c <__swsetup_r+0x14>
 8008454:	6a03      	ldr	r3, [r0, #32]
 8008456:	b90b      	cbnz	r3, 800845c <__swsetup_r+0x14>
 8008458:	f7fc fd0c 	bl	8004e74 <__sinit>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008462:	0718      	lsls	r0, r3, #28
 8008464:	d422      	bmi.n	80084ac <__swsetup_r+0x64>
 8008466:	06d9      	lsls	r1, r3, #27
 8008468:	d407      	bmi.n	800847a <__swsetup_r+0x32>
 800846a:	2309      	movs	r3, #9
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008472:	81a3      	strh	r3, [r4, #12]
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	e034      	b.n	80084e4 <__swsetup_r+0x9c>
 800847a:	0758      	lsls	r0, r3, #29
 800847c:	d512      	bpl.n	80084a4 <__swsetup_r+0x5c>
 800847e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008480:	b141      	cbz	r1, 8008494 <__swsetup_r+0x4c>
 8008482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008486:	4299      	cmp	r1, r3
 8008488:	d002      	beq.n	8008490 <__swsetup_r+0x48>
 800848a:	4628      	mov	r0, r5
 800848c:	f7fd fc08 	bl	8005ca0 <_free_r>
 8008490:	2300      	movs	r3, #0
 8008492:	6363      	str	r3, [r4, #52]	; 0x34
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	2300      	movs	r3, #0
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f043 0308 	orr.w	r3, r3, #8
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	b94b      	cbnz	r3, 80084c4 <__swsetup_r+0x7c>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ba:	d003      	beq.n	80084c4 <__swsetup_r+0x7c>
 80084bc:	4621      	mov	r1, r4
 80084be:	4628      	mov	r0, r5
 80084c0:	f000 f884 	bl	80085cc <__smakebuf_r>
 80084c4:	89a0      	ldrh	r0, [r4, #12]
 80084c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084ca:	f010 0301 	ands.w	r3, r0, #1
 80084ce:	d00a      	beq.n	80084e6 <__swsetup_r+0x9e>
 80084d0:	2300      	movs	r3, #0
 80084d2:	60a3      	str	r3, [r4, #8]
 80084d4:	6963      	ldr	r3, [r4, #20]
 80084d6:	425b      	negs	r3, r3
 80084d8:	61a3      	str	r3, [r4, #24]
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	b943      	cbnz	r3, 80084f0 <__swsetup_r+0xa8>
 80084de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084e2:	d1c4      	bne.n	800846e <__swsetup_r+0x26>
 80084e4:	bd38      	pop	{r3, r4, r5, pc}
 80084e6:	0781      	lsls	r1, r0, #30
 80084e8:	bf58      	it	pl
 80084ea:	6963      	ldrpl	r3, [r4, #20]
 80084ec:	60a3      	str	r3, [r4, #8]
 80084ee:	e7f4      	b.n	80084da <__swsetup_r+0x92>
 80084f0:	2000      	movs	r0, #0
 80084f2:	e7f7      	b.n	80084e4 <__swsetup_r+0x9c>
 80084f4:	2000006c 	.word	0x2000006c

080084f8 <_raise_r>:
 80084f8:	291f      	cmp	r1, #31
 80084fa:	b538      	push	{r3, r4, r5, lr}
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	d904      	bls.n	800850c <_raise_r+0x14>
 8008502:	2316      	movs	r3, #22
 8008504:	6003      	str	r3, [r0, #0]
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800850e:	b112      	cbz	r2, 8008516 <_raise_r+0x1e>
 8008510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008514:	b94b      	cbnz	r3, 800852a <_raise_r+0x32>
 8008516:	4620      	mov	r0, r4
 8008518:	f000 f830 	bl	800857c <_getpid_r>
 800851c:	462a      	mov	r2, r5
 800851e:	4601      	mov	r1, r0
 8008520:	4620      	mov	r0, r4
 8008522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008526:	f000 b817 	b.w	8008558 <_kill_r>
 800852a:	2b01      	cmp	r3, #1
 800852c:	d00a      	beq.n	8008544 <_raise_r+0x4c>
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	d103      	bne.n	800853a <_raise_r+0x42>
 8008532:	2316      	movs	r3, #22
 8008534:	6003      	str	r3, [r0, #0]
 8008536:	2001      	movs	r0, #1
 8008538:	e7e7      	b.n	800850a <_raise_r+0x12>
 800853a:	2400      	movs	r4, #0
 800853c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008540:	4628      	mov	r0, r5
 8008542:	4798      	blx	r3
 8008544:	2000      	movs	r0, #0
 8008546:	e7e0      	b.n	800850a <_raise_r+0x12>

08008548 <raise>:
 8008548:	4b02      	ldr	r3, [pc, #8]	; (8008554 <raise+0xc>)
 800854a:	4601      	mov	r1, r0
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	f7ff bfd3 	b.w	80084f8 <_raise_r>
 8008552:	bf00      	nop
 8008554:	2000006c 	.word	0x2000006c

08008558 <_kill_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4d07      	ldr	r5, [pc, #28]	; (8008578 <_kill_r+0x20>)
 800855c:	2300      	movs	r3, #0
 800855e:	4604      	mov	r4, r0
 8008560:	4608      	mov	r0, r1
 8008562:	4611      	mov	r1, r2
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	f7f8 fffb 	bl	8001560 <_kill>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d102      	bne.n	8008574 <_kill_r+0x1c>
 800856e:	682b      	ldr	r3, [r5, #0]
 8008570:	b103      	cbz	r3, 8008574 <_kill_r+0x1c>
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	bd38      	pop	{r3, r4, r5, pc}
 8008576:	bf00      	nop
 8008578:	200008b0 	.word	0x200008b0

0800857c <_getpid_r>:
 800857c:	f7f8 bfe8 	b.w	8001550 <_getpid>

08008580 <__swhatbuf_r>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	460c      	mov	r4, r1
 8008584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008588:	2900      	cmp	r1, #0
 800858a:	b096      	sub	sp, #88	; 0x58
 800858c:	4615      	mov	r5, r2
 800858e:	461e      	mov	r6, r3
 8008590:	da0d      	bge.n	80085ae <__swhatbuf_r+0x2e>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008598:	f04f 0100 	mov.w	r1, #0
 800859c:	bf0c      	ite	eq
 800859e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80085a2:	2340      	movne	r3, #64	; 0x40
 80085a4:	2000      	movs	r0, #0
 80085a6:	6031      	str	r1, [r6, #0]
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	b016      	add	sp, #88	; 0x58
 80085ac:	bd70      	pop	{r4, r5, r6, pc}
 80085ae:	466a      	mov	r2, sp
 80085b0:	f000 f848 	bl	8008644 <_fstat_r>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	dbec      	blt.n	8008592 <__swhatbuf_r+0x12>
 80085b8:	9901      	ldr	r1, [sp, #4]
 80085ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80085be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80085c2:	4259      	negs	r1, r3
 80085c4:	4159      	adcs	r1, r3
 80085c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ca:	e7eb      	b.n	80085a4 <__swhatbuf_r+0x24>

080085cc <__smakebuf_r>:
 80085cc:	898b      	ldrh	r3, [r1, #12]
 80085ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d0:	079d      	lsls	r5, r3, #30
 80085d2:	4606      	mov	r6, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	d507      	bpl.n	80085e8 <__smakebuf_r+0x1c>
 80085d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	2301      	movs	r3, #1
 80085e2:	6163      	str	r3, [r4, #20]
 80085e4:	b002      	add	sp, #8
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	ab01      	add	r3, sp, #4
 80085ea:	466a      	mov	r2, sp
 80085ec:	f7ff ffc8 	bl	8008580 <__swhatbuf_r>
 80085f0:	9900      	ldr	r1, [sp, #0]
 80085f2:	4605      	mov	r5, r0
 80085f4:	4630      	mov	r0, r6
 80085f6:	f7fd fbc7 	bl	8005d88 <_malloc_r>
 80085fa:	b948      	cbnz	r0, 8008610 <__smakebuf_r+0x44>
 80085fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008600:	059a      	lsls	r2, r3, #22
 8008602:	d4ef      	bmi.n	80085e4 <__smakebuf_r+0x18>
 8008604:	f023 0303 	bic.w	r3, r3, #3
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	81a3      	strh	r3, [r4, #12]
 800860e:	e7e3      	b.n	80085d8 <__smakebuf_r+0xc>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	6020      	str	r0, [r4, #0]
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	9b00      	ldr	r3, [sp, #0]
 800861c:	6163      	str	r3, [r4, #20]
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	6120      	str	r0, [r4, #16]
 8008622:	b15b      	cbz	r3, 800863c <__smakebuf_r+0x70>
 8008624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008628:	4630      	mov	r0, r6
 800862a:	f000 f81d 	bl	8008668 <_isatty_r>
 800862e:	b128      	cbz	r0, 800863c <__smakebuf_r+0x70>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	431d      	orrs	r5, r3
 8008640:	81a5      	strh	r5, [r4, #12]
 8008642:	e7cf      	b.n	80085e4 <__smakebuf_r+0x18>

08008644 <_fstat_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d07      	ldr	r5, [pc, #28]	; (8008664 <_fstat_r+0x20>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	f7f8 ffe4 	bl	800161e <_fstat>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d102      	bne.n	8008660 <_fstat_r+0x1c>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	b103      	cbz	r3, 8008660 <_fstat_r+0x1c>
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	bd38      	pop	{r3, r4, r5, pc}
 8008662:	bf00      	nop
 8008664:	200008b0 	.word	0x200008b0

08008668 <_isatty_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d06      	ldr	r5, [pc, #24]	; (8008684 <_isatty_r+0x1c>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7f8 ffe3 	bl	800163e <_isatty>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_isatty_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_isatty_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	200008b0 	.word	0x200008b0

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
