
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009100  08009100  00019100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009558  08009558  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009558  08009558  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009558  08009558  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001d8  08009738  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08009738  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fab0  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002238  00000000  00000000  0002fcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de8  00000000  00000000  00032df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193f3  00000000  00000000  00033bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105f8  00000000  00000000  0004cfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000937dc  00000000  00000000  0005d5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052f0  00000000  00000000  000f0da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080090e4 	.word	0x080090e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080090e4 	.word	0x080090e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <Set_PWM_Duty>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_PWM_Duty(uint16_t duty) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be8:	fb03 f202 	mul.w	r2, r3, r2
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <Set_PWM_Duty+0x34>)
 8000bee:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf2:	1ad2      	subs	r2, r2, r3
 8000bf4:	0852      	lsrs	r2, r2, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	0adb      	lsrs	r3, r3, #11
 8000bfa:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR1 = pulse_length; //değer setlendi
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <Set_PWM_Duty+0x38>)
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	00100101 	.word	0x00100101
 8000c10:	40012c00 	.word	0x40012c00

08000c14 <Set_PWM_Duty2>:
void Set_PWM_Duty2(uint16_t duty) {
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c24:	fb03 f202 	mul.w	r2, r3, r2
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <Set_PWM_Duty2+0x34>)
 8000c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c2e:	1ad2      	subs	r2, r2, r3
 8000c30:	0852      	lsrs	r2, r2, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	0adb      	lsrs	r3, r3, #11
 8000c36:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR2 = pulse_length; //değer setlendi
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <Set_PWM_Duty2+0x38>)
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	00100101 	.word	0x00100101
 8000c4c:	40012c00 	.word	0x40012c00

08000c50 <Set_PWM_Duty3>:
void Set_PWM_Duty3(uint16_t duty) {
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c60:	fb03 f202 	mul.w	r2, r3, r2
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <Set_PWM_Duty3+0x34>)
 8000c66:	fba3 1302 	umull	r1, r3, r3, r2
 8000c6a:	1ad2      	subs	r2, r2, r3
 8000c6c:	0852      	lsrs	r2, r2, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	0adb      	lsrs	r3, r3, #11
 8000c72:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR3 = pulse_length; //değer setlendi
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <Set_PWM_Duty3+0x38>)
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	00100101 	.word	0x00100101
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 ffbc 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f9ea 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f000 fb7c 	bl	8001394 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c9c:	f000 fa7e 	bl	800119c <MX_CAN_Init>
  MX_ADC1_Init();
 8000ca0:	f000 fa3e 	bl	8001120 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ca4:	f000 fab0 	bl	8001208 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000ca8:	f000 fb4a 	bl	8001340 <MX_USART2_UART_Init>





	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	4890      	ldr	r0, [pc, #576]	; (8000ef4 <main+0x268>)
 8000cb4:	f002 fb0f 	bl	80032d6 <HAL_GPIO_WritePin>

  //Can baslatildi
  HAL_CAN_Start(&hcan);
 8000cb8:	488f      	ldr	r0, [pc, #572]	; (8000ef8 <main+0x26c>)
 8000cba:	f001 fbde 	bl	800247a <HAL_CAN_Start>
  //interrupt için aktif edilme
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //mesaj geldi mesaj bekleniyor
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	488d      	ldr	r0, [pc, #564]	; (8000ef8 <main+0x26c>)
 8000cc2:	f001 fe0e 	bl	80028e2 <HAL_CAN_ActivateNotification>


  pTXHeader.DLC=1;  //1byte lık değer geldiğini ifade eder
 8000cc6:	4b8d      	ldr	r3, [pc, #564]	; (8000efc <main+0x270>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	611a      	str	r2, [r3, #16]
  pTXHeader.IDE=CAN_ID_STD; //standart ID kullanılıcağı belirtir
 8000ccc:	4b8b      	ldr	r3, [pc, #556]	; (8000efc <main+0x270>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  pTXHeader.RTR=CAN_RTR_DATA; //data gönderilmesini transmit yapıldığını belirtir
 8000cd2:	4b8a      	ldr	r3, [pc, #552]	; (8000efc <main+0x270>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  pTXHeader.StdId=0x0156; //mesage ID numarasıdır
 8000cd8:	4b88      	ldr	r3, [pc, #544]	; (8000efc <main+0x270>)
 8000cda:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8000cde:	601a      	str	r2, [r3, #0]

  pTXHeader2.DLC=1;
 8000ce0:	4b87      	ldr	r3, [pc, #540]	; (8000f00 <main+0x274>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	611a      	str	r2, [r3, #16]
  pTXHeader2.IDE=CAN_ID_STD;
 8000ce6:	4b86      	ldr	r3, [pc, #536]	; (8000f00 <main+0x274>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  pTXHeader2.RTR=CAN_RTR_DATA;
 8000cec:	4b84      	ldr	r3, [pc, #528]	; (8000f00 <main+0x274>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  pTXHeader2.StdId=0x0158;
 8000cf2:	4b83      	ldr	r3, [pc, #524]	; (8000f00 <main+0x274>)
 8000cf4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000cf8:	601a      	str	r2, [r3, #0]

  pTXHeader3.DLC=1;
 8000cfa:	4b82      	ldr	r3, [pc, #520]	; (8000f04 <main+0x278>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	611a      	str	r2, [r3, #16]
  pTXHeader3.IDE=CAN_ID_STD;
 8000d00:	4b80      	ldr	r3, [pc, #512]	; (8000f04 <main+0x278>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  pTXHeader3.RTR=CAN_RTR_DATA;
 8000d06:	4b7f      	ldr	r3, [pc, #508]	; (8000f04 <main+0x278>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  pTXHeader3.StdId=0x0160;
 8000d0c:	4b7d      	ldr	r3, [pc, #500]	; (8000f04 <main+0x278>)
 8000d0e:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8000d12:	601a      	str	r2, [r3, #0]

  pTXHeader4.DLC=1;
 8000d14:	4b7c      	ldr	r3, [pc, #496]	; (8000f08 <main+0x27c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	611a      	str	r2, [r3, #16]
  pTXHeader4.IDE=CAN_ID_STD;
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <main+0x27c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  pTXHeader4.RTR=CAN_RTR_DATA;
 8000d20:	4b79      	ldr	r3, [pc, #484]	; (8000f08 <main+0x27c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  pTXHeader4.StdId=0x0162;
 8000d26:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <main+0x27c>)
 8000d28:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8000d2c:	601a      	str	r2, [r3, #0]

  pTXHeader5.DLC=1;
 8000d2e:	4b77      	ldr	r3, [pc, #476]	; (8000f0c <main+0x280>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	611a      	str	r2, [r3, #16]
  pTXHeader5.IDE=CAN_ID_STD;
 8000d34:	4b75      	ldr	r3, [pc, #468]	; (8000f0c <main+0x280>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  pTXHeader5.RTR=CAN_RTR_DATA;
 8000d3a:	4b74      	ldr	r3, [pc, #464]	; (8000f0c <main+0x280>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  pTXHeader5.StdId=0x0163;
 8000d40:	4b72      	ldr	r3, [pc, #456]	; (8000f0c <main+0x280>)
 8000d42:	f240 1263 	movw	r2, #355	; 0x163
 8000d46:	601a      	str	r2, [r3, #0]

  pTXHeader6.DLC=1;
 8000d48:	4b71      	ldr	r3, [pc, #452]	; (8000f10 <main+0x284>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	611a      	str	r2, [r3, #16]
  pTXHeader6.IDE=CAN_ID_STD;
 8000d4e:	4b70      	ldr	r3, [pc, #448]	; (8000f10 <main+0x284>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  pTXHeader6.RTR=CAN_RTR_DATA;
 8000d54:	4b6e      	ldr	r3, [pc, #440]	; (8000f10 <main+0x284>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  pTXHeader6.StdId=0x0164;
 8000d5a:	4b6d      	ldr	r3, [pc, #436]	; (8000f10 <main+0x284>)
 8000d5c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8000d60:	601a      	str	r2, [r3, #0]

  pTXHeader7.DLC=1;
 8000d62:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <main+0x288>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	611a      	str	r2, [r3, #16]
  pTXHeader7.IDE=CAN_ID_STD;
 8000d68:	4b6a      	ldr	r3, [pc, #424]	; (8000f14 <main+0x288>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  pTXHeader7.RTR=CAN_RTR_DATA;
 8000d6e:	4b69      	ldr	r3, [pc, #420]	; (8000f14 <main+0x288>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  pTXHeader7.StdId=0x0165;
 8000d74:	4b67      	ldr	r3, [pc, #412]	; (8000f14 <main+0x288>)
 8000d76:	f240 1265 	movw	r2, #357	; 0x165
 8000d7a:	601a      	str	r2, [r3, #0]

  pTXHeader8.DLC=1;
 8000d7c:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <main+0x28c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	611a      	str	r2, [r3, #16]
  pTXHeader8.IDE=CAN_ID_STD;
 8000d82:	4b65      	ldr	r3, [pc, #404]	; (8000f18 <main+0x28c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  pTXHeader8.RTR=CAN_RTR_DATA;
 8000d88:	4b63      	ldr	r3, [pc, #396]	; (8000f18 <main+0x28c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  pTXHeader8.StdId=0x0166;
 8000d8e:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <main+0x28c>)
 8000d90:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8000d94:	601a      	str	r2, [r3, #0]

  pTXHeader9.DLC=1;
 8000d96:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <main+0x290>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	611a      	str	r2, [r3, #16]
  pTXHeader9.IDE=CAN_ID_STD;
 8000d9c:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <main+0x290>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  pTXHeader9.RTR=CAN_RTR_DATA;
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <main+0x290>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  pTXHeader9.StdId=0x0167;
 8000da8:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <main+0x290>)
 8000daa:	f240 1267 	movw	r2, #359	; 0x167
 8000dae:	601a      	str	r2, [r3, #0]



  sfilterconfig.FilterActivation=ENABLE;
 8000db0:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <main+0x294>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	621a      	str	r2, [r3, #32]
  sfilterconfig.FilterBank=0;
 8000db6:	4b5a      	ldr	r3, [pc, #360]	; (8000f20 <main+0x294>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  sfilterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000dbc:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <main+0x294>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  sfilterconfig.FilterIdHigh=0x0000;
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <main+0x294>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
  sfilterconfig.FilterIdLow=0x0000;
 8000dc8:	4b55      	ldr	r3, [pc, #340]	; (8000f20 <main+0x294>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  sfilterconfig.FilterMaskIdHigh=0x0000;
 8000dce:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <main+0x294>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  sfilterconfig.FilterMaskIdLow=0x0000;
 8000dd4:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <main+0x294>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  sfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <main+0x294>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  sfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000de0:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <main+0x294>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	61da      	str	r2, [r3, #28]

  HAL_CAN_ConfigFilter(&hcan, &sfilterconfig);
 8000de6:	494e      	ldr	r1, [pc, #312]	; (8000f20 <main+0x294>)
 8000de8:	4843      	ldr	r0, [pc, #268]	; (8000ef8 <main+0x26c>)
 8000dea:	f001 fa7d 	bl	80022e8 <HAL_CAN_ConfigFilter>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	484c      	ldr	r0, [pc, #304]	; (8000f24 <main+0x298>)
 8000df2:	f002 ffc1 	bl	8003d78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	484a      	ldr	r0, [pc, #296]	; (8000f24 <main+0x298>)
 8000dfa:	f002 ffbd 	bl	8003d78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	4848      	ldr	r0, [pc, #288]	; (8000f24 <main+0x298>)
 8000e02:	f002 ffb9 	bl	8003d78 <HAL_TIM_PWM_Start>
	 // 12 bitlik ADC değerini yeniden oluşturun
	 //rcount = (adcValueHigh << 4) | (adcValueLow >> 4); // değerleri toplayarak 16 bitlik değeşkene 12 bitlik adc değeri olcak şekilde atıyor

	  ////////////////uart////////////////////////////////////////////////////////////////////////

	  HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 100);
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	2232      	movs	r2, #50	; 0x32
 8000e0a:	4947      	ldr	r1, [pc, #284]	; (8000f28 <main+0x29c>)
 8000e0c:	4847      	ldr	r0, [pc, #284]	; (8000f2c <main+0x2a0>)
 8000e0e:	f003 fc24 	bl	800465a <HAL_UART_Receive>

	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000e12:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <main+0x29c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b6c      	cmp	r3, #108	; 0x6c
 8000e18:	d123      	bne.n	8000e62 <main+0x1d6>
 8000e1a:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <main+0x29c>)
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	2b65      	cmp	r3, #101	; 0x65
 8000e20:	d11f      	bne.n	8000e62 <main+0x1d6>
 8000e22:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <main+0x29c>)
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d11b      	bne.n	8000e62 <main+0x1d6>
	  			  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <main+0x29c>)
 8000e2c:	78db      	ldrb	r3, [r3, #3]
	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000e2e:	2b31      	cmp	r3, #49	; 0x31
 8000e30:	d117      	bne.n	8000e62 <main+0x1d6>
	  			  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8000e32:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <main+0x29c>)
 8000e34:	791b      	ldrb	r3, [r3, #4]
 8000e36:	2b20      	cmp	r3, #32
 8000e38:	d113      	bne.n	8000e62 <main+0x1d6>
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <main+0x29c>)
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	2b6f      	cmp	r3, #111	; 0x6f
 8000e40:	d10f      	bne.n	8000e62 <main+0x1d6>
 8000e42:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <main+0x29c>)
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	2b6e      	cmp	r3, #110	; 0x6e
 8000e48:	d10b      	bne.n	8000e62 <main+0x1d6>

	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4838      	ldr	r0, [pc, #224]	; (8000f30 <main+0x2a4>)
 8000e50:	f002 fa41 	bl	80032d6 <HAL_GPIO_WritePin>
	  		HAL_CAN_AddTxMessage(&hcan, &pTXHeader4, &led_set, &pTxMailbox);
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <main+0x2a8>)
 8000e56:	4a38      	ldr	r2, [pc, #224]	; (8000f38 <main+0x2ac>)
 8000e58:	492b      	ldr	r1, [pc, #172]	; (8000f08 <main+0x27c>)
 8000e5a:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <main+0x26c>)
 8000e5c:	f001 fb51 	bl	8002502 <HAL_CAN_AddTxMessage>
 8000e60:	e025      	b.n	8000eae <main+0x222>
	  		  //HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"birinci led yandi."), 100);
	  	  }


	  	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <main+0x29c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b6c      	cmp	r3, #108	; 0x6c
 8000e68:	d121      	bne.n	8000eae <main+0x222>
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <main+0x29c>)
 8000e6c:	785b      	ldrb	r3, [r3, #1]
 8000e6e:	2b65      	cmp	r3, #101	; 0x65
 8000e70:	d11d      	bne.n	8000eae <main+0x222>
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <main+0x29c>)
 8000e74:	789b      	ldrb	r3, [r3, #2]
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	d119      	bne.n	8000eae <main+0x222>
	  				  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <main+0x29c>)
 8000e7c:	78db      	ldrb	r3, [r3, #3]
	  	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000e7e:	2b31      	cmp	r3, #49	; 0x31
 8000e80:	d115      	bne.n	8000eae <main+0x222>
	  				  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <main+0x29c>)
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	2b20      	cmp	r3, #32
 8000e88:	d111      	bne.n	8000eae <main+0x222>
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <main+0x29c>)
 8000e8c:	795b      	ldrb	r3, [r3, #5]
 8000e8e:	2b6f      	cmp	r3, #111	; 0x6f
 8000e90:	d10d      	bne.n	8000eae <main+0x222>
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <main+0x29c>)
 8000e94:	799b      	ldrb	r3, [r3, #6]
 8000e96:	2b66      	cmp	r3, #102	; 0x66
 8000e98:	d109      	bne.n	8000eae <main+0x222>
	  				  rx_buffer[7]=='f'){
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <main+0x29c>)
 8000e9c:	79db      	ldrb	r3, [r3, #7]
	  				  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000e9e:	2b66      	cmp	r3, #102	; 0x66
 8000ea0:	d105      	bne.n	8000eae <main+0x222>
		  		HAL_CAN_AddTxMessage(&hcan, &pTXHeader5,&led_reset, &pTxMailbox);
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <main+0x2a8>)
 8000ea4:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <main+0x2b0>)
 8000ea6:	4919      	ldr	r1, [pc, #100]	; (8000f0c <main+0x280>)
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <main+0x26c>)
 8000eaa:	f001 fb2a 	bl	8002502 <HAL_CAN_AddTxMessage>

	  		   //HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"birinci led söndü."), 100);
	  	   }


	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <main+0x29c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b6c      	cmp	r3, #108	; 0x6c
 8000eb4:	d144      	bne.n	8000f40 <main+0x2b4>
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <main+0x29c>)
 8000eb8:	785b      	ldrb	r3, [r3, #1]
 8000eba:	2b65      	cmp	r3, #101	; 0x65
 8000ebc:	d140      	bne.n	8000f40 <main+0x2b4>
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <main+0x29c>)
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d13c      	bne.n	8000f40 <main+0x2b4>
	  	 			  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <main+0x29c>)
 8000ec8:	78db      	ldrb	r3, [r3, #3]
	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000eca:	2b32      	cmp	r3, #50	; 0x32
 8000ecc:	d138      	bne.n	8000f40 <main+0x2b4>
	  	 			  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <main+0x29c>)
 8000ed0:	791b      	ldrb	r3, [r3, #4]
 8000ed2:	2b20      	cmp	r3, #32
 8000ed4:	d134      	bne.n	8000f40 <main+0x2b4>
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <main+0x29c>)
 8000ed8:	795b      	ldrb	r3, [r3, #5]
 8000eda:	2b6f      	cmp	r3, #111	; 0x6f
 8000edc:	d130      	bne.n	8000f40 <main+0x2b4>
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <main+0x29c>)
 8000ee0:	799b      	ldrb	r3, [r3, #6]
 8000ee2:	2b6e      	cmp	r3, #110	; 0x6e
 8000ee4:	d12c      	bne.n	8000f40 <main+0x2b4>
	  		HAL_CAN_AddTxMessage(&hcan, &pTXHeader6, &led_set, &pTxMailbox);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <main+0x2a8>)
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <main+0x2ac>)
 8000eea:	4909      	ldr	r1, [pc, #36]	; (8000f10 <main+0x284>)
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <main+0x26c>)
 8000eee:	f001 fb08 	bl	8002502 <HAL_CAN_AddTxMessage>
 8000ef2:	e04b      	b.n	8000f8c <main+0x300>
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	20000224 	.word	0x20000224
 8000efc:	200002dc 	.word	0x200002dc
 8000f00:	200002f4 	.word	0x200002f4
 8000f04:	2000030c 	.word	0x2000030c
 8000f08:	20000324 	.word	0x20000324
 8000f0c:	2000033c 	.word	0x2000033c
 8000f10:	20000354 	.word	0x20000354
 8000f14:	2000036c 	.word	0x2000036c
 8000f18:	20000384 	.word	0x20000384
 8000f1c:	2000039c 	.word	0x2000039c
 8000f20:	200003d0 	.word	0x200003d0
 8000f24:	2000024c 	.word	0x2000024c
 8000f28:	20000418 	.word	0x20000418
 8000f2c:	20000294 	.word	0x20000294
 8000f30:	40010800 	.word	0x40010800
 8000f34:	200003f8 	.word	0x200003f8
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000414 	.word	0x20000414
	  		  //HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"ikinci led yandi."), 100);
	  	  }


	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <main+0x3b4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b6c      	cmp	r3, #108	; 0x6c
 8000f46:	d121      	bne.n	8000f8c <main+0x300>
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <main+0x3b4>)
 8000f4a:	785b      	ldrb	r3, [r3, #1]
 8000f4c:	2b65      	cmp	r3, #101	; 0x65
 8000f4e:	d11d      	bne.n	8000f8c <main+0x300>
 8000f50:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <main+0x3b4>)
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	2b64      	cmp	r3, #100	; 0x64
 8000f56:	d119      	bne.n	8000f8c <main+0x300>
	  	 				  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <main+0x3b4>)
 8000f5a:	78db      	ldrb	r3, [r3, #3]
	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000f5c:	2b32      	cmp	r3, #50	; 0x32
 8000f5e:	d115      	bne.n	8000f8c <main+0x300>
	  	 				  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000f60:	4b37      	ldr	r3, [pc, #220]	; (8001040 <main+0x3b4>)
 8000f62:	791b      	ldrb	r3, [r3, #4]
 8000f64:	2b20      	cmp	r3, #32
 8000f66:	d111      	bne.n	8000f8c <main+0x300>
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <main+0x3b4>)
 8000f6a:	795b      	ldrb	r3, [r3, #5]
 8000f6c:	2b6f      	cmp	r3, #111	; 0x6f
 8000f6e:	d10d      	bne.n	8000f8c <main+0x300>
 8000f70:	4b33      	ldr	r3, [pc, #204]	; (8001040 <main+0x3b4>)
 8000f72:	799b      	ldrb	r3, [r3, #6]
 8000f74:	2b66      	cmp	r3, #102	; 0x66
 8000f76:	d109      	bne.n	8000f8c <main+0x300>
	  	 				  rx_buffer[7]=='f'){
 8000f78:	4b31      	ldr	r3, [pc, #196]	; (8001040 <main+0x3b4>)
 8000f7a:	79db      	ldrb	r3, [r3, #7]
	  	 				  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000f7c:	2b66      	cmp	r3, #102	; 0x66
 8000f7e:	d105      	bne.n	8000f8c <main+0x300>
	  	 		HAL_CAN_AddTxMessage(&hcan, &pTXHeader7, &led_reset, &pTxMailbox);
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <main+0x3b8>)
 8000f82:	4a31      	ldr	r2, [pc, #196]	; (8001048 <main+0x3bc>)
 8000f84:	4931      	ldr	r1, [pc, #196]	; (800104c <main+0x3c0>)
 8000f86:	4832      	ldr	r0, [pc, #200]	; (8001050 <main+0x3c4>)
 8000f88:	f001 fabb 	bl	8002502 <HAL_CAN_AddTxMessage>
	  	 		 // HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"ikinci led söndü."), 100);
	  	 	   }


	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <main+0x3b4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b6c      	cmp	r3, #108	; 0x6c
 8000f92:	d11e      	bne.n	8000fd2 <main+0x346>
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <main+0x3b4>)
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	2b65      	cmp	r3, #101	; 0x65
 8000f9a:	d11a      	bne.n	8000fd2 <main+0x346>
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <main+0x3b4>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d116      	bne.n	8000fd2 <main+0x346>
	  	 			  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <main+0x3b4>)
 8000fa6:	78db      	ldrb	r3, [r3, #3]
	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000fa8:	2b33      	cmp	r3, #51	; 0x33
 8000faa:	d112      	bne.n	8000fd2 <main+0x346>
	  	 			  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <main+0x3b4>)
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	2b20      	cmp	r3, #32
 8000fb2:	d10e      	bne.n	8000fd2 <main+0x346>
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <main+0x3b4>)
 8000fb6:	795b      	ldrb	r3, [r3, #5]
 8000fb8:	2b6f      	cmp	r3, #111	; 0x6f
 8000fba:	d10a      	bne.n	8000fd2 <main+0x346>
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <main+0x3b4>)
 8000fbe:	799b      	ldrb	r3, [r3, #6]
 8000fc0:	2b6e      	cmp	r3, #110	; 0x6e
 8000fc2:	d106      	bne.n	8000fd2 <main+0x346>
	  		HAL_CAN_AddTxMessage(&hcan, &pTXHeader8, &led_set, &pTxMailbox);
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <main+0x3b8>)
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <main+0x3c8>)
 8000fc8:	4923      	ldr	r1, [pc, #140]	; (8001058 <main+0x3cc>)
 8000fca:	4821      	ldr	r0, [pc, #132]	; (8001050 <main+0x3c4>)
 8000fcc:	f001 fa99 	bl	8002502 <HAL_CAN_AddTxMessage>
 8000fd0:	e025      	b.n	800101e <main+0x392>
	  		 // HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"ücüncü led yandi."), 100);
	  	  }


	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <main+0x3b4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b6c      	cmp	r3, #108	; 0x6c
 8000fd8:	d121      	bne.n	800101e <main+0x392>
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <main+0x3b4>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	2b65      	cmp	r3, #101	; 0x65
 8000fe0:	d11d      	bne.n	800101e <main+0x392>
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <main+0x3b4>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d119      	bne.n	800101e <main+0x392>
	  	 				  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <main+0x3b4>)
 8000fec:	78db      	ldrb	r3, [r3, #3]
	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8000fee:	2b33      	cmp	r3, #51	; 0x33
 8000ff0:	d115      	bne.n	800101e <main+0x392>
	  	 				  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <main+0x3b4>)
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	2b20      	cmp	r3, #32
 8000ff8:	d111      	bne.n	800101e <main+0x392>
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <main+0x3b4>)
 8000ffc:	795b      	ldrb	r3, [r3, #5]
 8000ffe:	2b6f      	cmp	r3, #111	; 0x6f
 8001000:	d10d      	bne.n	800101e <main+0x392>
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <main+0x3b4>)
 8001004:	799b      	ldrb	r3, [r3, #6]
 8001006:	2b66      	cmp	r3, #102	; 0x66
 8001008:	d109      	bne.n	800101e <main+0x392>
	  	 				  rx_buffer[7]=='f'){
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <main+0x3b4>)
 800100c:	79db      	ldrb	r3, [r3, #7]
	  	 				  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 800100e:	2b66      	cmp	r3, #102	; 0x66
 8001010:	d105      	bne.n	800101e <main+0x392>
	  	 		HAL_CAN_AddTxMessage(&hcan, &pTXHeader9, &led_reset, &pTxMailbox);
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <main+0x3b8>)
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <main+0x3bc>)
 8001016:	4911      	ldr	r1, [pc, #68]	; (800105c <main+0x3d0>)
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <main+0x3c4>)
 800101a:	f001 fa72 	bl	8002502 <HAL_CAN_AddTxMessage>


	  	  ////////////////////////////uart_end///////////////////////////////////////////////////


     Set_PWM_Duty(rcount); //pwm fonksiyonuna bu değeri gönderiyor
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <main+0x3d4>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fdd8 	bl	8000bd8 <Set_PWM_Duty>
     Set_PWM_Duty2(rcount2);
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <main+0x3d8>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fdf1 	bl	8000c14 <Set_PWM_Duty2>
     Set_PWM_Duty3(rcount3);
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <main+0x3dc>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe0a 	bl	8000c50 <Set_PWM_Duty3>
	  HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 100);
 800103c:	e6e3      	b.n	8000e06 <main+0x17a>
 800103e:	bf00      	nop
 8001040:	20000418 	.word	0x20000418
 8001044:	200003f8 	.word	0x200003f8
 8001048:	20000414 	.word	0x20000414
 800104c:	2000036c 	.word	0x2000036c
 8001050:	20000224 	.word	0x20000224
 8001054:	20000000 	.word	0x20000000
 8001058:	20000384 	.word	0x20000384
 800105c:	2000039c 	.word	0x2000039c
 8001060:	200003fe 	.word	0x200003fe
 8001064:	20000400 	.word	0x20000400
 8001068:	20000402 	.word	0x20000402

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2228      	movs	r2, #40	; 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fc0d 	bl	800589a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 f942 	bl	800334c <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010ce:	f000 f9d7 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fbae 	bl	8003850 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010fa:	f000 f9c1 	bl	8001480 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fe:	2302      	movs	r3, #2
 8001100:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fd2f 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001114:	f000 f9b4 	bl	8001480 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3750      	adds	r7, #80	; 0x50
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_ADC1_Init+0x74>)
 8001132:	4a19      	ldr	r2, [pc, #100]	; (8001198 <MX_ADC1_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_ADC1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_ADC1_Init+0x74>)
 800113e:	2201      	movs	r2, #1
 8001140:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_ADC1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_ADC1_Init+0x74>)
 800114a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800114e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_ADC1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_ADC1_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_ADC1_Init+0x74>)
 800115e:	f000 fdb7 	bl	8001cd0 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001168:	f000 f98a 	bl	8001480 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800116c:	2301      	movs	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001170:	2301      	movs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC1_Init+0x74>)
 800117e:	f000 fe7f 	bl	8001e80 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001188:	f000 f97a 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001f4 	.word	0x200001f4
 8001198:	40012400 	.word	0x40012400

0800119c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_CAN_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_CAN_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_CAN_Init+0x64>)
 80011a8:	2212      	movs	r2, #18
 80011aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_CAN_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_CAN_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_CAN_Init+0x64>)
 80011ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_CAN_Init+0x64>)
 80011c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_CAN_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_CAN_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_CAN_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_CAN_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_CAN_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_CAN_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_CAN_Init+0x64>)
 80011ee:	f000 ff80 	bl	80020f2 <HAL_CAN_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 f942 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000224 	.word	0x20000224
 8001204:	40006400 	.word	0x40006400

08001208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b092      	sub	sp, #72	; 0x48
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2220      	movs	r2, #32
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fb31 	bl	800589a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <MX_TIM1_Init+0x130>)
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <MX_TIM1_Init+0x134>)
 800123c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_TIM1_Init+0x130>)
 8001240:	2247      	movs	r2, #71	; 0x47
 8001242:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <MX_TIM1_Init+0x130>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_TIM1_Init+0x130>)
 800124c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b39      	ldr	r3, [pc, #228]	; (8001338 <MX_TIM1_Init+0x130>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <MX_TIM1_Init+0x130>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <MX_TIM1_Init+0x130>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001264:	4834      	ldr	r0, [pc, #208]	; (8001338 <MX_TIM1_Init+0x130>)
 8001266:	f002 fd37 	bl	8003cd8 <HAL_TIM_PWM_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001270:	f000 f906 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001280:	4619      	mov	r1, r3
 8001282:	482d      	ldr	r0, [pc, #180]	; (8001338 <MX_TIM1_Init+0x130>)
 8001284:	f003 f8ea 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800128e:	f000 f8f7 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001292:	2360      	movs	r3, #96	; 0x60
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129e:	2300      	movs	r3, #0
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	4820      	ldr	r0, [pc, #128]	; (8001338 <MX_TIM1_Init+0x130>)
 80012b8:	f002 fe00 	bl	8003ebc <HAL_TIM_PWM_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80012c2:	f000 f8dd 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	2204      	movs	r2, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	481a      	ldr	r0, [pc, #104]	; (8001338 <MX_TIM1_Init+0x130>)
 80012d0:	f002 fdf4 	bl	8003ebc <HAL_TIM_PWM_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012da:	f000 f8d1 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	2208      	movs	r2, #8
 80012e4:	4619      	mov	r1, r3
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <MX_TIM1_Init+0x130>)
 80012e8:	f002 fde8 	bl	8003ebc <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80012f2:	f000 f8c5 	bl	8001480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4619      	mov	r1, r3
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <MX_TIM1_Init+0x130>)
 800131a:	f003 f8fd 	bl	8004518 <HAL_TIMEx_ConfigBreakDeadTime>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001324:	f000 f8ac 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <MX_TIM1_Init+0x130>)
 800132a:	f000 f991 	bl	8001650 <HAL_TIM_MspPostInit>

}
 800132e:	bf00      	nop
 8001330:	3748      	adds	r7, #72	; 0x48
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000024c 	.word	0x2000024c
 800133c:	40012c00 	.word	0x40012c00

08001340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_USART2_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_USART2_UART_Init+0x4c>)
 800134c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART2_UART_Init+0x4c>)
 8001378:	f003 f91f 	bl	80045ba <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 f87d 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000294 	.word	0x20000294
 8001390:	40004400 	.word	0x40004400

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a30      	ldr	r2, [pc, #192]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_GPIO_Init+0xdc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	481f      	ldr	r0, [pc, #124]	; (8001474 <MX_GPIO_Init+0xe0>)
 80013f8:	f001 ff6d 	bl	80032d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2170      	movs	r1, #112	; 0x70
 8001400:	481d      	ldr	r0, [pc, #116]	; (8001478 <MX_GPIO_Init+0xe4>)
 8001402:	f001 ff68 	bl	80032d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2302      	movs	r3, #2
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <MX_GPIO_Init+0xe0>)
 8001420:	f001 fdbe 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_GPIO_Init+0xe8>)
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4810      	ldr	r0, [pc, #64]	; (8001478 <MX_GPIO_Init+0xe4>)
 8001438:	f001 fdb2 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800143c:	2370      	movs	r3, #112	; 0x70
 800143e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2302      	movs	r3, #2
 800144a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <MX_GPIO_Init+0xe4>)
 8001454:	f001 fda4 	bl	8002fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2006      	movs	r0, #6
 800145e:	f001 fd68 	bl	8002f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001462:	2006      	movs	r0, #6
 8001464:	f001 fd81 	bl	8002f6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	40011000 	.word	0x40011000
 8001478:	40010800 	.word	0x40010800
 800147c:	10110000 	.word	0x10110000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_MspInit+0x60>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <HAL_MspInit+0x60>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6193      	str	r3, [r2, #24]
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_MspInit+0x60>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_MspInit+0x60>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_MspInit+0x60>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_MspInit+0x60>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014c2:	2007      	movs	r0, #7
 80014c4:	f001 fd2a 	bl	8002f1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x64>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_MspInit+0x64>)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000

080014f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_ADC_MspInit+0x6c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d121      	bne.n	8001558 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_ADC_MspInit+0x70>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_ADC_MspInit+0x70>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_ADC_MspInit+0x70>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_ADC_MspInit+0x70>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <HAL_ADC_MspInit+0x70>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_ADC_MspInit+0x70>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001548:	2303      	movs	r3, #3
 800154a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_ADC_MspInit+0x74>)
 8001554:	f001 fd24 	bl	8002fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40012400 	.word	0x40012400
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800

0800156c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a20      	ldr	r2, [pc, #128]	; (8001608 <HAL_CAN_MspInit+0x9c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d139      	bne.n	8001600 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_CAN_MspInit+0xa0>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_CAN_MspInit+0xa0>)
 8001592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001596:	61d3      	str	r3, [r2, #28]
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_CAN_MspInit+0xa0>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_CAN_MspInit+0xa0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_CAN_MspInit+0xa0>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_CAN_MspInit+0xa0>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <HAL_CAN_MspInit+0xa4>)
 80015d2:	f001 fce5 	bl	8002fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <HAL_CAN_MspInit+0xa4>)
 80015ec:	f001 fcd8 	bl	8002fa0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2100      	movs	r1, #0
 80015f4:	2014      	movs	r0, #20
 80015f6:	f001 fc9c 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80015fa:	2014      	movs	r0, #20
 80015fc:	f001 fcb5 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40006400 	.word	0x40006400
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_TIM_PWM_MspInit+0x34>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10b      	bne.n	800163e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_TIM_PWM_MspInit+0x38>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_TIM_PWM_MspInit+0x38>)
 800162c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_TIM_PWM_MspInit+0x38>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40012c00 	.word	0x40012c00
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_TIM_MspPostInit+0x5c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d118      	bne.n	80016a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_TIM_MspPostInit+0x60>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_TIM_MspPostInit+0x60>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_TIM_MspPostInit+0x60>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001688:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800168c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2302      	movs	r3, #2
 8001694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_TIM_MspPostInit+0x64>)
 800169e:	f001 fc7f 	bl	8002fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010800 	.word	0x40010800

080016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_UART_MspInit+0x88>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d12f      	bne.n	8001738 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_UART_MspInit+0x8c>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_UART_MspInit+0x8c>)
 80016de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e2:	61d3      	str	r3, [r2, #28]
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_UART_MspInit+0x8c>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_UART_MspInit+0x8c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a13      	ldr	r2, [pc, #76]	; (8001744 <HAL_UART_MspInit+0x8c>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_UART_MspInit+0x8c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001708:	2304      	movs	r3, #4
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <HAL_UART_MspInit+0x90>)
 800171c:	f001 fc40 	bl	8002fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001720:	2308      	movs	r3, #8
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_UART_MspInit+0x90>)
 8001734:	f001 fc34 	bl	8002fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40004400 	.word	0x40004400
 8001744:	40021000 	.word	0x40021000
 8001748:	40010800 	.word	0x40010800

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 fa81 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
    for(int i=0; i<1000; i++);
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	e002      	b.n	80017ae <EXTI0_IRQHandler+0x12>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b4:	dbf8      	blt.n	80017a8 <EXTI0_IRQHandler+0xc>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f001 fda6 	bl	8003308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80017bc:	2101      	movs	r1, #1
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <EXTI0_IRQHandler+0x50>)
 80017c0:	f001 fd72 	bl	80032a8 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <EXTI0_IRQHandler+0x46>
  {
	  count++;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <EXTI0_IRQHandler+0x54>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <EXTI0_IRQHandler+0x54>)
 80017d4:	701a      	strb	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan, &pTXHeader, &count, &pTxMailbox);
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <EXTI0_IRQHandler+0x58>)
 80017d8:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <EXTI0_IRQHandler+0x54>)
 80017da:	4907      	ldr	r1, [pc, #28]	; (80017f8 <EXTI0_IRQHandler+0x5c>)
 80017dc:	4807      	ldr	r0, [pc, #28]	; (80017fc <EXTI0_IRQHandler+0x60>)
 80017de:	f000 fe90 	bl	8002502 <HAL_CAN_AddTxMessage>
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40010800 	.word	0x40010800
 80017f0:	200003fc 	.word	0x200003fc
 80017f4:	200003f8 	.word	0x200003f8
 80017f8:	200002dc 	.word	0x200002dc
 80017fc:	20000224 	.word	0x20000224

08001800 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001804:	4880      	ldr	r0, [pc, #512]	; (8001a08 <USB_LP_CAN1_RX0_IRQHandler+0x208>)
 8001806:	f001 f891 	bl	800292c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

if((HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRXHeader, data))==HAL_OK)
 800180a:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 800180c:	4a80      	ldr	r2, [pc, #512]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800180e:	2100      	movs	r1, #0
 8001810:	487d      	ldr	r0, [pc, #500]	; (8001a08 <USB_LP_CAN1_RX0_IRQHandler+0x208>)
 8001812:	f000 ff45 	bl	80026a0 <HAL_CAN_GetRxMessage>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 80c9 	bne.w	80019b0 <USB_LP_CAN1_RX0_IRQHandler+0x1b0>
{

	if (pRXHeader.StdId == 0x0156 && pRXHeader.DLC == 1) { //mesage ID sini kontrol eder
 800181e:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8001826:	d119      	bne.n	800185c <USB_LP_CAN1_RX0_IRQHandler+0x5c>
 8001828:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d115      	bne.n	800185c <USB_LP_CAN1_RX0_IRQHandler+0x5c>
	            // Mesaj 1 alındı
	            adcValueHigh = data[0];
 8001830:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <USB_LP_CAN1_RX0_IRQHandler+0x214>)
 8001836:	701a      	strb	r2, [r3, #0]
	            adcValueLow = data[1];
 8001838:	4b74      	ldr	r3, [pc, #464]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 800183a:	785a      	ldrb	r2, [r3, #1]
 800183c:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <USB_LP_CAN1_RX0_IRQHandler+0x218>)
 800183e:	701a      	strb	r2, [r3, #0]
	            rcount = (adcValueHigh << 4) | (adcValueLow >> 4);
 8001840:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <USB_LP_CAN1_RX0_IRQHandler+0x214>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <USB_LP_CAN1_RX0_IRQHandler+0x218>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	b2db      	uxtb	r3, r3
 8001850:	b21b      	sxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b21b      	sxth	r3, r3
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <USB_LP_CAN1_RX0_IRQHandler+0x21c>)
 800185a:	801a      	strh	r2, [r3, #0]


	}
	if (pRXHeader.StdId == 0x0158 && pRXHeader.DLC == 1) {
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8001864:	d119      	bne.n	800189a <USB_LP_CAN1_RX0_IRQHandler+0x9a>
 8001866:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d115      	bne.n	800189a <USB_LP_CAN1_RX0_IRQHandler+0x9a>
	            // Mesaj 1 alındı
	            adcValueHigh = data[0];
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <USB_LP_CAN1_RX0_IRQHandler+0x214>)
 8001874:	701a      	strb	r2, [r3, #0]
	            adcValueLow = data[1];
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 8001878:	785a      	ldrb	r2, [r3, #1]
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <USB_LP_CAN1_RX0_IRQHandler+0x218>)
 800187c:	701a      	strb	r2, [r3, #0]
	            rcount2 = (adcValueHigh << 4) | (adcValueLow >> 4);
 800187e:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <USB_LP_CAN1_RX0_IRQHandler+0x214>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	b21a      	sxth	r2, r3
 8001886:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <USB_LP_CAN1_RX0_IRQHandler+0x218>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21b      	sxth	r3, r3
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <USB_LP_CAN1_RX0_IRQHandler+0x220>)
 8001898:	801a      	strh	r2, [r3, #0]


	}


	if (pRXHeader.StdId == 0x0160 && pRXHeader.DLC == 1) {
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80018a2:	d119      	bne.n	80018d8 <USB_LP_CAN1_RX0_IRQHandler+0xd8>
 80018a4:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d115      	bne.n	80018d8 <USB_LP_CAN1_RX0_IRQHandler+0xd8>
	            // Mesaj 1 alındı
	            adcValueHigh = data[0];
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <USB_LP_CAN1_RX0_IRQHandler+0x214>)
 80018b2:	701a      	strb	r2, [r3, #0]
	            adcValueLow = data[1];
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 80018b6:	785a      	ldrb	r2, [r3, #1]
 80018b8:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <USB_LP_CAN1_RX0_IRQHandler+0x218>)
 80018ba:	701a      	strb	r2, [r3, #0]
	            rcount3 = (adcValueHigh << 4) | (adcValueLow >> 4);
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <USB_LP_CAN1_RX0_IRQHandler+0x214>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <USB_LP_CAN1_RX0_IRQHandler+0x218>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <USB_LP_CAN1_RX0_IRQHandler+0x224>)
 80018d6:	801a      	strh	r2, [r3, #0]


	}

	if (pRXHeader.StdId == 0x0162 && pRXHeader.DLC == 1) {
 80018d8:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 80018e0:	d108      	bne.n	80018f4 <USB_LP_CAN1_RX0_IRQHandler+0xf4>
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d104      	bne.n	80018f4 <USB_LP_CAN1_RX0_IRQHandler+0xf4>
	            // Mesaj 1 alındı
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2110      	movs	r1, #16
 80018ee:	484e      	ldr	r0, [pc, #312]	; (8001a28 <USB_LP_CAN1_RX0_IRQHandler+0x228>)
 80018f0:	f001 fcf1 	bl	80032d6 <HAL_GPIO_WritePin>

	}

	if (pRXHeader.StdId == 0x0163 && pRXHeader.DLC == 1) {
 80018f4:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f240 1263 	movw	r2, #355	; 0x163
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d108      	bne.n	8001912 <USB_LP_CAN1_RX0_IRQHandler+0x112>
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d104      	bne.n	8001912 <USB_LP_CAN1_RX0_IRQHandler+0x112>
	            // Mesaj 1 alındı
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2110      	movs	r1, #16
 800190c:	4846      	ldr	r0, [pc, #280]	; (8001a28 <USB_LP_CAN1_RX0_IRQHandler+0x228>)
 800190e:	f001 fce2 	bl	80032d6 <HAL_GPIO_WritePin>

	}
	if (pRXHeader.StdId == 0x0164 && pRXHeader.DLC == 1) {
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 800191a:	d108      	bne.n	800192e <USB_LP_CAN1_RX0_IRQHandler+0x12e>
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d104      	bne.n	800192e <USB_LP_CAN1_RX0_IRQHandler+0x12e>
	            // Mesaj 1 alındı
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2120      	movs	r1, #32
 8001928:	483f      	ldr	r0, [pc, #252]	; (8001a28 <USB_LP_CAN1_RX0_IRQHandler+0x228>)
 800192a:	f001 fcd4 	bl	80032d6 <HAL_GPIO_WritePin>

	}

	if (pRXHeader.StdId == 0x0165 && pRXHeader.DLC == 1) {
 800192e:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f240 1265 	movw	r2, #357	; 0x165
 8001936:	4293      	cmp	r3, r2
 8001938:	d108      	bne.n	800194c <USB_LP_CAN1_RX0_IRQHandler+0x14c>
 800193a:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d104      	bne.n	800194c <USB_LP_CAN1_RX0_IRQHandler+0x14c>
	            // Mesaj 1 alındı
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2120      	movs	r1, #32
 8001946:	4838      	ldr	r0, [pc, #224]	; (8001a28 <USB_LP_CAN1_RX0_IRQHandler+0x228>)
 8001948:	f001 fcc5 	bl	80032d6 <HAL_GPIO_WritePin>

	}
	if (pRXHeader.StdId == 0x0166 && pRXHeader.DLC == 1) {
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001954:	d108      	bne.n	8001968 <USB_LP_CAN1_RX0_IRQHandler+0x168>
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d104      	bne.n	8001968 <USB_LP_CAN1_RX0_IRQHandler+0x168>
	            // Mesaj 1 alındı
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2140      	movs	r1, #64	; 0x40
 8001962:	4831      	ldr	r0, [pc, #196]	; (8001a28 <USB_LP_CAN1_RX0_IRQHandler+0x228>)
 8001964:	f001 fcb7 	bl	80032d6 <HAL_GPIO_WritePin>

	}

	if (pRXHeader.StdId == 0x0167 && pRXHeader.DLC == 1) {
 8001968:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f240 1267 	movw	r2, #359	; 0x167
 8001970:	4293      	cmp	r3, r2
 8001972:	d108      	bne.n	8001986 <USB_LP_CAN1_RX0_IRQHandler+0x186>
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d104      	bne.n	8001986 <USB_LP_CAN1_RX0_IRQHandler+0x186>
	            // Mesaj 1 alındı
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	4829      	ldr	r0, [pc, #164]	; (8001a28 <USB_LP_CAN1_RX0_IRQHandler+0x228>)
 8001982:	f001 fca8 	bl	80032d6 <HAL_GPIO_WritePin>

	}

if(rcount%2==0)
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <USB_LP_CAN1_RX0_IRQHandler+0x21c>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d106      	bne.n	80019a2 <USB_LP_CAN1_RX0_IRQHandler+0x1a2>
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199a:	4824      	ldr	r0, [pc, #144]	; (8001a2c <USB_LP_CAN1_RX0_IRQHandler+0x22c>)
 800199c:	f001 fc9b 	bl	80032d6 <HAL_GPIO_WritePin>
	durum = 10;

}

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019a0:	e030      	b.n	8001a04 <USB_LP_CAN1_RX0_IRQHandler+0x204>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a8:	4820      	ldr	r0, [pc, #128]	; (8001a2c <USB_LP_CAN1_RX0_IRQHandler+0x22c>)
 80019aa:	f001 fc94 	bl	80032d6 <HAL_GPIO_WritePin>
}
 80019ae:	e029      	b.n	8001a04 <USB_LP_CAN1_RX0_IRQHandler+0x204>
else if((HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRXHeader, data))==HAL_ERROR)
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 80019b4:	2100      	movs	r1, #0
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <USB_LP_CAN1_RX0_IRQHandler+0x208>)
 80019b8:	f000 fe72 	bl	80026a0 <HAL_CAN_GetRxMessage>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d103      	bne.n	80019ca <USB_LP_CAN1_RX0_IRQHandler+0x1ca>
	durum = 1;
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <USB_LP_CAN1_RX0_IRQHandler+0x230>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	e01c      	b.n	8001a04 <USB_LP_CAN1_RX0_IRQHandler+0x204>
else if((HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRXHeader, data))==HAL_BUSY)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <USB_LP_CAN1_RX0_IRQHandler+0x208>)
 80019d2:	f000 fe65 	bl	80026a0 <HAL_CAN_GetRxMessage>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d103      	bne.n	80019e4 <USB_LP_CAN1_RX0_IRQHandler+0x1e4>
	durum = 2;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <USB_LP_CAN1_RX0_IRQHandler+0x230>)
 80019de:	2202      	movs	r2, #2
 80019e0:	601a      	str	r2, [r3, #0]
}
 80019e2:	e00f      	b.n	8001a04 <USB_LP_CAN1_RX0_IRQHandler+0x204>
else if((HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRXHeader, data))==HAL_TIMEOUT)
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <USB_LP_CAN1_RX0_IRQHandler+0x20c>)
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <USB_LP_CAN1_RX0_IRQHandler+0x210>)
 80019e8:	2100      	movs	r1, #0
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <USB_LP_CAN1_RX0_IRQHandler+0x208>)
 80019ec:	f000 fe58 	bl	80026a0 <HAL_CAN_GetRxMessage>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d103      	bne.n	80019fe <USB_LP_CAN1_RX0_IRQHandler+0x1fe>
	durum = 3;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <USB_LP_CAN1_RX0_IRQHandler+0x230>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	e002      	b.n	8001a04 <USB_LP_CAN1_RX0_IRQHandler+0x204>
	durum = 10;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <USB_LP_CAN1_RX0_IRQHandler+0x230>)
 8001a00:	220a      	movs	r2, #10
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000224 	.word	0x20000224
 8001a0c:	2000040c 	.word	0x2000040c
 8001a10:	200003b4 	.word	0x200003b4
 8001a14:	20000408 	.word	0x20000408
 8001a18:	20000409 	.word	0x20000409
 8001a1c:	200003fe 	.word	0x200003fe
 8001a20:	20000400 	.word	0x20000400
 8001a24:	20000402 	.word	0x20000402
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	20000404 	.word	0x20000404

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <_kill>:

int _kill(int pid, int sig)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4c:	f003 ff78 	bl	8005940 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2216      	movs	r2, #22
 8001a54:	601a      	str	r2, [r3, #0]
  return -1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_exit>:

void _exit (int status)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffe7 	bl	8001a42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a74:	e7fe      	b.n	8001a74 <_exit+0x12>

08001a76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e00a      	b.n	8001a9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a88:	f3af 8000 	nop.w
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	b2ca      	uxtb	r2, r1
 8001a96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dbf0      	blt.n	8001a88 <_read+0x12>
  }

  return len;
 8001aa6:	687b      	ldr	r3, [r7, #4]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e009      	b.n	8001ad6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	60ba      	str	r2, [r7, #8]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbf1      	blt.n	8001ac2 <_write+0x12>
  }
  return len;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_close>:

int _close(int file)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <_isatty>:

int _isatty(int file)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f003 fee2 	bl	8005940 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20005000 	.word	0x20005000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	2000044c 	.word	0x2000044c
 8001bb0:	200005a0 	.word	0x200005a0

08001bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff fff8 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bdc:	4c09      	ldr	r4, [pc, #36]	; (8001c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f003 feaf 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff f84d 	bl	8000c8c <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001bfc:	08009560 	.word	0x08009560
  ldr r2, =_sbss
 8001c00:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c04:	200005a0 	.word	0x200005a0

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f001 f97d 	bl	8002f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fc30 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 f995 	bl	8002f86 <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f001 f95d 	bl	8002f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000008 	.word	0x20000008

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	20000450 	.word	0x20000450

08001cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000450 	.word	0x20000450

08001cd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0be      	b.n	8001e70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fbf0 	bl	80014f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f9ab 	bl	8002070 <ADC_ConversionStop_Disable>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8099 	bne.w	8001e5e <HAL_ADC_Init+0x18e>
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 8095 	bne.w	8001e5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d3c:	f023 0302 	bic.w	r3, r3, #2
 8001d40:	f043 0202 	orr.w	r2, r3, #2
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7b1b      	ldrb	r3, [r3, #12]
 8001d56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d68:	d003      	beq.n	8001d72 <HAL_ADC_Init+0xa2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_ADC_Init+0xa8>
 8001d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_Init+0xaa>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7d1b      	ldrb	r3, [r3, #20]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d119      	bne.n	8001dbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	035a      	lsls	r2, r3, #13
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e00b      	b.n	8001dbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_ADC_Init+0x1a8>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dec:	d003      	beq.n	8001df6 <HAL_ADC_Init+0x126>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d104      	bne.n	8001e00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_ADC_Init+0x1ac>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d10b      	bne.n	8001e3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e3a:	e018      	b.n	8001e6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f023 0312 	bic.w	r3, r3, #18
 8001e44:	f043 0210 	orr.w	r2, r3, #16
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e5c:	e007      	b.n	8001e6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	f043 0210 	orr.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	ffe1f7fd 	.word	0xffe1f7fd
 8001e7c:	ff1f0efe 	.word	0xff1f0efe

08001e80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x20>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0dc      	b.n	800205a <HAL_ADC_ConfigChannel+0x1da>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d81c      	bhi.n	8001eea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4019      	ands	r1, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b05      	subs	r3, #5
 8001edc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee8:	e03c      	b.n	8001f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d81c      	bhi.n	8001f2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b23      	subs	r3, #35	; 0x23
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	4019      	ands	r1, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b23      	subs	r3, #35	; 0x23
 8001f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2a:	e01b      	b.n	8001f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b41      	subs	r3, #65	; 0x41
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4019      	ands	r1, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b41      	subs	r3, #65	; 0x41
 8001f58:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d91c      	bls.n	8001fa6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68d9      	ldr	r1, [r3, #12]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	2207      	movs	r2, #7
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4019      	ands	r1, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6898      	ldr	r0, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	3b1e      	subs	r3, #30
 8001f98:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	e019      	b.n	8001fda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6919      	ldr	r1, [r3, #16]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	4019      	ands	r1, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6898      	ldr	r0, [r3, #8]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d003      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fe6:	2b11      	cmp	r3, #17
 8001fe8:	d132      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d125      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d126      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002010:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b10      	cmp	r3, #16
 8002018:	d11a      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_ADC_ConfigChannel+0x1e8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_ADC_ConfigChannel+0x1ec>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9a      	lsrs	r2, r3, #18
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002030:	e002      	b.n	8002038 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3b01      	subs	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f9      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x1b2>
 800203e:	e007      	b.n	8002050 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	f043 0220 	orr.w	r2, r3, #32
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40012400 	.word	0x40012400
 8002068:	20000004 	.word	0x20000004
 800206c:	431bde83 	.word	0x431bde83

08002070 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d12e      	bne.n	80020e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800209a:	f7ff fe0f 	bl	8001cbc <HAL_GetTick>
 800209e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020a0:	e01b      	b.n	80020da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020a2:	f7ff fe0b 	bl	8001cbc <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d914      	bls.n	80020da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10d      	bne.n	80020da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	f043 0210 	orr.w	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e007      	b.n	80020ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d0dc      	beq.n	80020a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ed      	b.n	80022e0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fa2b 	bl	800156c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002126:	f7ff fdc9 	bl	8001cbc <HAL_GetTick>
 800212a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800212c:	e012      	b.n	8002154 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800212e:	f7ff fdc5 	bl	8001cbc <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b0a      	cmp	r3, #10
 800213a:	d90b      	bls.n	8002154 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2205      	movs	r2, #5
 800214c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0c5      	b.n	80022e0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0e5      	beq.n	800212e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0202 	bic.w	r2, r2, #2
 8002170:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002172:	f7ff fda3 	bl	8001cbc <HAL_GetTick>
 8002176:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002178:	e012      	b.n	80021a0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800217a:	f7ff fd9f 	bl	8001cbc <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b0a      	cmp	r3, #10
 8002186:	d90b      	bls.n	80021a0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2205      	movs	r2, #5
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e09f      	b.n	80022e0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e5      	bne.n	800217a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7e1b      	ldrb	r3, [r3, #24]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e007      	b.n	80021d8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7e5b      	ldrb	r3, [r3, #25]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e007      	b.n	8002202 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7e9b      	ldrb	r3, [r3, #26]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e007      	b.n	800222c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0220 	bic.w	r2, r2, #32
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7edb      	ldrb	r3, [r3, #27]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0210 	bic.w	r2, r2, #16
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e007      	b.n	8002256 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0210 	orr.w	r2, r2, #16
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d108      	bne.n	8002270 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0208 	orr.w	r2, r2, #8
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e007      	b.n	8002280 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0208 	bic.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7f5b      	ldrb	r3, [r3, #29]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d108      	bne.n	800229a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0204 	orr.w	r2, r2, #4
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e007      	b.n	80022aa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0204 	bic.w	r2, r2, #4
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	ea42 0103 	orr.w	r1, r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	1e5a      	subs	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <HAL_CAN_ConfigFilter+0x26>
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b02      	cmp	r3, #2
 800230a:	f040 80aa 	bne.w	8002462 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2201      	movs	r2, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	43db      	mvns	r3, r3
 8002338:	401a      	ands	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d123      	bne.n	8002390 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800236a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3248      	adds	r2, #72	; 0x48
 8002370:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002384:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	3348      	adds	r3, #72	; 0x48
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d122      	bne.n	80023de <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3248      	adds	r2, #72	; 0x48
 80023be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023d4:	6979      	ldr	r1, [r7, #20]
 80023d6:	3348      	adds	r3, #72	; 0x48
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	401a      	ands	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023f8:	e007      	b.n	800240a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	431a      	orrs	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43db      	mvns	r3, r3
 800241c:	401a      	ands	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002424:	e007      	b.n	8002436 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	431a      	orrs	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	431a      	orrs	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002454:	f023 0201 	bic.w	r2, r3, #1
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e006      	b.n	8002470 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
  }
}
 8002470:	4618      	mov	r0, r3
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d12e      	bne.n	80024ec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024a6:	f7ff fc09 	bl	8001cbc <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ac:	e012      	b.n	80024d4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ae:	f7ff fc05 	bl	8001cbc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b0a      	cmp	r3, #10
 80024ba:	d90b      	bls.n	80024d4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2205      	movs	r2, #5
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e012      	b.n	80024fa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e5      	bne.n	80024ae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e006      	b.n	80024fa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002502:	b480      	push	{r7}
 8002504:	b089      	sub	sp, #36	; 0x24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002516:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002520:	7ffb      	ldrb	r3, [r7, #31]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d003      	beq.n	800252e <HAL_CAN_AddTxMessage+0x2c>
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	2b02      	cmp	r3, #2
 800252a:	f040 80ad 	bne.w	8002688 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8095 	beq.w	8002678 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	0e1b      	lsrs	r3, r3, #24
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002558:	2201      	movs	r2, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	409a      	lsls	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	6809      	ldr	r1, [r1, #0]
 8002578:	431a      	orrs	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3318      	adds	r3, #24
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	440b      	add	r3, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e00f      	b.n	80025a6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002590:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800259a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3318      	adds	r3, #24
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	440b      	add	r3, r1
 80025a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3318      	adds	r3, #24
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	440b      	add	r3, r1
 80025b6:	3304      	adds	r3, #4
 80025b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	7d1b      	ldrb	r3, [r3, #20]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d111      	bne.n	80025e6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3318      	adds	r3, #24
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	3304      	adds	r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3318      	adds	r3, #24
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	440b      	add	r3, r1
 80025e2:	3304      	adds	r3, #4
 80025e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3307      	adds	r3, #7
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	061a      	lsls	r2, r3, #24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3306      	adds	r3, #6
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3305      	adds	r3, #5
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	4313      	orrs	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	3204      	adds	r2, #4
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	4610      	mov	r0, r2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	6811      	ldr	r1, [r2, #0]
 800260e:	ea43 0200 	orr.w	r2, r3, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	440b      	add	r3, r1
 8002618:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800261c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3303      	adds	r3, #3
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	061a      	lsls	r2, r3, #24
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3302      	adds	r3, #2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3301      	adds	r3, #1
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	4313      	orrs	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	4610      	mov	r0, r2
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	6811      	ldr	r1, [r2, #0]
 8002644:	ea43 0200 	orr.w	r2, r3, r0
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002652:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3318      	adds	r3, #24
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	4413      	add	r3, r2
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6811      	ldr	r1, [r2, #0]
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3318      	adds	r3, #24
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	440b      	add	r3, r1
 8002672:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e00e      	b.n	8002696 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e006      	b.n	8002696 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d003      	beq.n	80026c4 <HAL_CAN_GetRxMessage+0x24>
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	f040 8103 	bne.w	80028ca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10e      	bne.n	80026e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0f7      	b.n	80028d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0e8      	b.n	80028d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	331b      	adds	r3, #27
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0204 	and.w	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10c      	bne.n	800273e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	331b      	adds	r3, #27
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0d5b      	lsrs	r3, r3, #21
 8002734:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e00b      	b.n	8002756 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	331b      	adds	r3, #27
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	331b      	adds	r3, #27
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4413      	add	r3, r2
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0202 	and.w	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	331b      	adds	r3, #27
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2208      	movs	r2, #8
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	e00b      	b.n	80027a4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	331b      	adds	r3, #27
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	331b      	adds	r3, #27
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	331b      	adds	r3, #27
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0a1a      	lsrs	r2, r3, #8
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0c1a      	lsrs	r2, r3, #16
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3302      	adds	r3, #2
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4413      	add	r3, r2
 8002828:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e1a      	lsrs	r2, r3, #24
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	3303      	adds	r3, #3
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	4413      	add	r3, r2
 8002842:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	3304      	adds	r3, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4413      	add	r3, r2
 800285a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0a1a      	lsrs	r2, r3, #8
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	3305      	adds	r3, #5
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	4413      	add	r3, r2
 8002874:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0c1a      	lsrs	r2, r3, #16
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	3306      	adds	r3, #6
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e1a      	lsrs	r2, r3, #24
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	3307      	adds	r3, #7
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d108      	bne.n	80028b6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	e007      	b.n	80028c6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0220 	orr.w	r2, r2, #32
 80028c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e006      	b.n	80028d8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d002      	beq.n	8002900 <HAL_CAN_ActivateNotification+0x1e>
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d109      	bne.n	8002914 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6959      	ldr	r1, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e006      	b.n	8002922 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002934:	2300      	movs	r3, #0
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d07c      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d023      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f983 	bl	8002c9a <HAL_CAN_TxMailbox0CompleteCallback>
 8002994:	e016      	b.n	80029c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	e00c      	b.n	80029c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	e002      	b.n	80029c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f986 	bl	8002cd0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f962 	bl	8002cac <HAL_CAN_TxMailbox1CompleteCallback>
 80029e8:	e016      	b.n	8002a18 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
 80029fc:	e00c      	b.n	8002a18 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	e002      	b.n	8002a18 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f965 	bl	8002ce2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d024      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f941 	bl	8002cbe <HAL_CAN_TxMailbox2CompleteCallback>
 8002a3c:	e016      	b.n	8002a6c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	e00c      	b.n	8002a6c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	e002      	b.n	8002a6c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f944 	bl	8002cf4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f933 	bl	8002d18 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f91b 	bl	8002d06 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00c      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2210      	movs	r2, #16
 8002af2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f913 	bl	8002d3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8fb 	bl	8002d2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8fc 	bl	8002d4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2208      	movs	r2, #8
 8002b70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8f4 	bl	8002d60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d07b      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d072      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d043      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03e      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bfa:	2b60      	cmp	r3, #96	; 0x60
 8002bfc:	d02b      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x32a>
 8002bfe:	2b60      	cmp	r3, #96	; 0x60
 8002c00:	d82e      	bhi.n	8002c60 <HAL_CAN_IRQHandler+0x334>
 8002c02:	2b50      	cmp	r3, #80	; 0x50
 8002c04:	d022      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x320>
 8002c06:	2b50      	cmp	r3, #80	; 0x50
 8002c08:	d82a      	bhi.n	8002c60 <HAL_CAN_IRQHandler+0x334>
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d019      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x316>
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d826      	bhi.n	8002c60 <HAL_CAN_IRQHandler+0x334>
 8002c12:	2b30      	cmp	r3, #48	; 0x30
 8002c14:	d010      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x30c>
 8002c16:	2b30      	cmp	r3, #48	; 0x30
 8002c18:	d822      	bhi.n	8002c60 <HAL_CAN_IRQHandler+0x334>
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d002      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x2f8>
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d005      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c22:	e01d      	b.n	8002c60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c2c:	e019      	b.n	8002c62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	f043 0310 	orr.w	r3, r3, #16
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c36:	e014      	b.n	8002c62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	f043 0320 	orr.w	r3, r3, #32
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c40:	e00f      	b.n	8002c62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c4a:	e00a      	b.n	8002c62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c54:	e005      	b.n	8002c62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c5e:	e000      	b.n	8002c62 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2204      	movs	r2, #4
 8002c78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f870 	bl	8002d72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4906      	ldr	r1, [pc, #24]	; (8002e1c <__NVIC_EnableIRQ+0x34>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	; (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee8:	d301      	bcc.n	8002eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00f      	b.n	8002f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <SysTick_Config+0x40>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f7ff ff90 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SysTick_Config+0x40>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <SysTick_Config+0x40>)
 8002f08:	2207      	movs	r2, #7
 8002f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000e010 	.word	0xe000e010

08002f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff2d 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f44:	f7ff ff42 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff90 	bl	8002e74 <NVIC_EncodePriority>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff5f 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff35 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffa2 	bl	8002ed8 <SysTick_Config>
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b08b      	sub	sp, #44	; 0x2c
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb2:	e169      	b.n	8003288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	f040 8158 	bne.w	8003282 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a9a      	ldr	r2, [pc, #616]	; (8003240 <HAL_GPIO_Init+0x2a0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d05e      	beq.n	800309a <HAL_GPIO_Init+0xfa>
 8002fdc:	4a98      	ldr	r2, [pc, #608]	; (8003240 <HAL_GPIO_Init+0x2a0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d875      	bhi.n	80030ce <HAL_GPIO_Init+0x12e>
 8002fe2:	4a98      	ldr	r2, [pc, #608]	; (8003244 <HAL_GPIO_Init+0x2a4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d058      	beq.n	800309a <HAL_GPIO_Init+0xfa>
 8002fe8:	4a96      	ldr	r2, [pc, #600]	; (8003244 <HAL_GPIO_Init+0x2a4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d86f      	bhi.n	80030ce <HAL_GPIO_Init+0x12e>
 8002fee:	4a96      	ldr	r2, [pc, #600]	; (8003248 <HAL_GPIO_Init+0x2a8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d052      	beq.n	800309a <HAL_GPIO_Init+0xfa>
 8002ff4:	4a94      	ldr	r2, [pc, #592]	; (8003248 <HAL_GPIO_Init+0x2a8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d869      	bhi.n	80030ce <HAL_GPIO_Init+0x12e>
 8002ffa:	4a94      	ldr	r2, [pc, #592]	; (800324c <HAL_GPIO_Init+0x2ac>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04c      	beq.n	800309a <HAL_GPIO_Init+0xfa>
 8003000:	4a92      	ldr	r2, [pc, #584]	; (800324c <HAL_GPIO_Init+0x2ac>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d863      	bhi.n	80030ce <HAL_GPIO_Init+0x12e>
 8003006:	4a92      	ldr	r2, [pc, #584]	; (8003250 <HAL_GPIO_Init+0x2b0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d046      	beq.n	800309a <HAL_GPIO_Init+0xfa>
 800300c:	4a90      	ldr	r2, [pc, #576]	; (8003250 <HAL_GPIO_Init+0x2b0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d85d      	bhi.n	80030ce <HAL_GPIO_Init+0x12e>
 8003012:	2b12      	cmp	r3, #18
 8003014:	d82a      	bhi.n	800306c <HAL_GPIO_Init+0xcc>
 8003016:	2b12      	cmp	r3, #18
 8003018:	d859      	bhi.n	80030ce <HAL_GPIO_Init+0x12e>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <HAL_GPIO_Init+0x80>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	0800309b 	.word	0x0800309b
 8003024:	08003075 	.word	0x08003075
 8003028:	08003087 	.word	0x08003087
 800302c:	080030c9 	.word	0x080030c9
 8003030:	080030cf 	.word	0x080030cf
 8003034:	080030cf 	.word	0x080030cf
 8003038:	080030cf 	.word	0x080030cf
 800303c:	080030cf 	.word	0x080030cf
 8003040:	080030cf 	.word	0x080030cf
 8003044:	080030cf 	.word	0x080030cf
 8003048:	080030cf 	.word	0x080030cf
 800304c:	080030cf 	.word	0x080030cf
 8003050:	080030cf 	.word	0x080030cf
 8003054:	080030cf 	.word	0x080030cf
 8003058:	080030cf 	.word	0x080030cf
 800305c:	080030cf 	.word	0x080030cf
 8003060:	080030cf 	.word	0x080030cf
 8003064:	0800307d 	.word	0x0800307d
 8003068:	08003091 	.word	0x08003091
 800306c:	4a79      	ldr	r2, [pc, #484]	; (8003254 <HAL_GPIO_Init+0x2b4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003072:	e02c      	b.n	80030ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	623b      	str	r3, [r7, #32]
          break;
 800307a:	e029      	b.n	80030d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	3304      	adds	r3, #4
 8003082:	623b      	str	r3, [r7, #32]
          break;
 8003084:	e024      	b.n	80030d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	3308      	adds	r3, #8
 800308c:	623b      	str	r3, [r7, #32]
          break;
 800308e:	e01f      	b.n	80030d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	330c      	adds	r3, #12
 8003096:	623b      	str	r3, [r7, #32]
          break;
 8003098:	e01a      	b.n	80030d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030a2:	2304      	movs	r3, #4
 80030a4:	623b      	str	r3, [r7, #32]
          break;
 80030a6:	e013      	b.n	80030d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b0:	2308      	movs	r3, #8
 80030b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	611a      	str	r2, [r3, #16]
          break;
 80030ba:	e009      	b.n	80030d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030bc:	2308      	movs	r3, #8
 80030be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	615a      	str	r2, [r3, #20]
          break;
 80030c6:	e003      	b.n	80030d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
          break;
 80030cc:	e000      	b.n	80030d0 <HAL_GPIO_Init+0x130>
          break;
 80030ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2bff      	cmp	r3, #255	; 0xff
 80030d4:	d801      	bhi.n	80030da <HAL_GPIO_Init+0x13a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	e001      	b.n	80030de <HAL_GPIO_Init+0x13e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2bff      	cmp	r3, #255	; 0xff
 80030e4:	d802      	bhi.n	80030ec <HAL_GPIO_Init+0x14c>
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	e002      	b.n	80030f2 <HAL_GPIO_Init+0x152>
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	3b08      	subs	r3, #8
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	210f      	movs	r1, #15
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	401a      	ands	r2, r3
 8003104:	6a39      	ldr	r1, [r7, #32]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80b1 	beq.w	8003282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003120:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <HAL_GPIO_Init+0x2b8>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_GPIO_Init+0x2b8>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6193      	str	r3, [r2, #24]
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_GPIO_Init+0x2b8>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003138:	4a48      	ldr	r2, [pc, #288]	; (800325c <HAL_GPIO_Init+0x2bc>)
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	220f      	movs	r2, #15
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a40      	ldr	r2, [pc, #256]	; (8003260 <HAL_GPIO_Init+0x2c0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_GPIO_Init+0x1ec>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3f      	ldr	r2, [pc, #252]	; (8003264 <HAL_GPIO_Init+0x2c4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00d      	beq.n	8003188 <HAL_GPIO_Init+0x1e8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3e      	ldr	r2, [pc, #248]	; (8003268 <HAL_GPIO_Init+0x2c8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <HAL_GPIO_Init+0x1e4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3d      	ldr	r2, [pc, #244]	; (800326c <HAL_GPIO_Init+0x2cc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_GPIO_Init+0x1e0>
 800317c:	2303      	movs	r3, #3
 800317e:	e006      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 8003180:	2304      	movs	r3, #4
 8003182:	e004      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 8003184:	2302      	movs	r3, #2
 8003186:	e002      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 800318c:	2300      	movs	r3, #0
 800318e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003190:	f002 0203 	and.w	r2, r2, #3
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4093      	lsls	r3, r2
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800319e:	492f      	ldr	r1, [pc, #188]	; (800325c <HAL_GPIO_Init+0x2bc>)
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	492c      	ldr	r1, [pc, #176]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]
 80031c4:	e006      	b.n	80031d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	4928      	ldr	r1, [pc, #160]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031e0:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	4922      	ldr	r1, [pc, #136]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60cb      	str	r3, [r1, #12]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	491e      	ldr	r1, [pc, #120]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4918      	ldr	r1, [pc, #96]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	43db      	mvns	r3, r3
 800321e:	4914      	ldr	r1, [pc, #80]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 8003220:	4013      	ands	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d021      	beq.n	8003274 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]
 800323c:	e021      	b.n	8003282 <HAL_GPIO_Init+0x2e2>
 800323e:	bf00      	nop
 8003240:	10320000 	.word	0x10320000
 8003244:	10310000 	.word	0x10310000
 8003248:	10220000 	.word	0x10220000
 800324c:	10210000 	.word	0x10210000
 8003250:	10120000 	.word	0x10120000
 8003254:	10110000 	.word	0x10110000
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000
 8003260:	40010800 	.word	0x40010800
 8003264:	40010c00 	.word	0x40010c00
 8003268:	40011000 	.word	0x40011000
 800326c:	40011400 	.word	0x40011400
 8003270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_GPIO_Init+0x304>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	43db      	mvns	r3, r3
 800327c:	4909      	ldr	r1, [pc, #36]	; (80032a4 <HAL_GPIO_Init+0x304>)
 800327e:	4013      	ands	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	f47f ae8e 	bne.w	8002fb4 <HAL_GPIO_Init+0x14>
  }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	372c      	adds	r7, #44	; 0x2c
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40010400 	.word	0x40010400

080032a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e001      	b.n	80032ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
 80032e2:	4613      	mov	r3, r2
 80032e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e6:	787b      	ldrb	r3, [r7, #1]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032f2:	e003      	b.n	80032fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	041a      	lsls	r2, r3, #16
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	611a      	str	r2, [r3, #16]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
	...

08003308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800331e:	4a05      	ldr	r2, [pc, #20]	; (8003334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f806 	bl	8003338 <HAL_GPIO_EXTI_Callback>
  }
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e272      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8087 	beq.w	800347a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800336c:	4b92      	ldr	r3, [pc, #584]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b04      	cmp	r3, #4
 8003376:	d00c      	beq.n	8003392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003378:	4b8f      	ldr	r3, [pc, #572]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d112      	bne.n	80033aa <HAL_RCC_OscConfig+0x5e>
 8003384:	4b8c      	ldr	r3, [pc, #560]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d10b      	bne.n	80033aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003392:	4b89      	ldr	r3, [pc, #548]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d06c      	beq.n	8003478 <HAL_RCC_OscConfig+0x12c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d168      	bne.n	8003478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e24c      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x76>
 80033b4:	4b80      	ldr	r3, [pc, #512]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a7f      	ldr	r2, [pc, #508]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e02e      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7a      	ldr	r2, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a77      	ldr	r2, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0xbc>
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6e      	ldr	r2, [pc, #440]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 8003408:	4b6b      	ldr	r3, [pc, #428]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a67      	ldr	r2, [pc, #412]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fc48 	bl	8001cbc <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fc44 	bl	8001cbc <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e200      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xe4>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fc34 	bl	8001cbc <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fc30 	bl	8001cbc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1ec      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x10c>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003486:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x18c>
 800349e:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x176>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1c0      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4939      	ldr	r1, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_OscConfig+0x270>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fbe9 	bl	8001cbc <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe fbe5 	bl	8001cbc <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1a1      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4927      	ldr	r1, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_RCC_OscConfig+0x270>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe fbc8 	bl	8001cbc <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003530:	f7fe fbc4 	bl	8001cbc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e180      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d03a      	beq.n	80035d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d019      	beq.n	8003596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7fe fba8 	bl	8001cbc <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe fba4 	bl	8001cbc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e160      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800358e:	2001      	movs	r0, #1
 8003590:	f000 face 	bl	8003b30 <RCC_Delay>
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_RCC_OscConfig+0x274>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359c:	f7fe fb8e 	bl	8001cbc <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a2:	e00f      	b.n	80035c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a4:	f7fe fb8a 	bl	8001cbc <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d908      	bls.n	80035c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e146      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	42420000 	.word	0x42420000
 80035c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	4b92      	ldr	r3, [pc, #584]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e9      	bne.n	80035a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80a6 	beq.w	800372a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b8b      	ldr	r3, [pc, #556]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10d      	bne.n	800360a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b88      	ldr	r3, [pc, #544]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4a87      	ldr	r2, [pc, #540]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	61d3      	str	r3, [r2, #28]
 80035fa:	4b85      	ldr	r3, [pc, #532]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b82      	ldr	r3, [pc, #520]	; (8003814 <HAL_RCC_OscConfig+0x4c8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b7f      	ldr	r3, [pc, #508]	; (8003814 <HAL_RCC_OscConfig+0x4c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7e      	ldr	r2, [pc, #504]	; (8003814 <HAL_RCC_OscConfig+0x4c8>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fe fb4b 	bl	8001cbc <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe fb47 	bl	8001cbc <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e103      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_RCC_OscConfig+0x4c8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x312>
 8003650:	4b6f      	ldr	r3, [pc, #444]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a6e      	ldr	r2, [pc, #440]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6213      	str	r3, [r2, #32]
 800365c:	e02d      	b.n	80036ba <HAL_RCC_OscConfig+0x36e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x334>
 8003666:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a69      	ldr	r2, [pc, #420]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a66      	ldr	r2, [pc, #408]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	e01c      	b.n	80036ba <HAL_RCC_OscConfig+0x36e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b05      	cmp	r3, #5
 8003686:	d10c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x356>
 8003688:	4b61      	ldr	r3, [pc, #388]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a60      	ldr	r2, [pc, #384]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	4b5e      	ldr	r3, [pc, #376]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4a5d      	ldr	r2, [pc, #372]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6213      	str	r3, [r2, #32]
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0x36e>
 80036a2:	4b5b      	ldr	r3, [pc, #364]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a5a      	ldr	r2, [pc, #360]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6213      	str	r3, [r2, #32]
 80036ae:	4b58      	ldr	r3, [pc, #352]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4a57      	ldr	r2, [pc, #348]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d015      	beq.n	80036ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fe fafb 	bl	8001cbc <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe faf7 	bl	8001cbc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e0b1      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b4b      	ldr	r3, [pc, #300]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCC_OscConfig+0x37e>
 80036ec:	e014      	b.n	8003718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fe fae5 	bl	8001cbc <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe fae1 	bl	8001cbc <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e09b      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	4b40      	ldr	r3, [pc, #256]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ee      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4b3c      	ldr	r3, [pc, #240]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a3b      	ldr	r2, [pc, #236]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8087 	beq.w	8003842 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d061      	beq.n	8003804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d146      	bne.n	80037d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <HAL_RCC_OscConfig+0x4cc>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fe fab5 	bl	8001cbc <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fe fab1 	bl	8001cbc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e06d      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003768:	4b29      	ldr	r3, [pc, #164]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d108      	bne.n	8003790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4921      	ldr	r1, [pc, #132]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a19      	ldr	r1, [r3, #32]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	430b      	orrs	r3, r1
 80037a2:	491b      	ldr	r1, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x4cc>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe fa85 	bl	8001cbc <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fe fa81 	bl	8001cbc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e03d      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x46a>
 80037d4:	e035      	b.n	8003842 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_RCC_OscConfig+0x4cc>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe fa6e 	bl	8001cbc <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe fa6a 	bl	8001cbc <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e026      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x498>
 8003802:	e01e      	b.n	8003842 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e019      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
 8003810:	40021000 	.word	0x40021000
 8003814:	40007000 	.word	0x40007000
 8003818:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x500>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	429a      	cmp	r2, r3
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000

08003850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0d0      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4965      	ldr	r1, [pc, #404]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d040      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e073      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06b      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4936      	ldr	r1, [pc, #216]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fe f9bc 	bl	8001cbc <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe f9b8 	bl	8001cbc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e053      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d210      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 0207 	bic.w	r2, r3, #7
 8003986:	4922      	ldr	r1, [pc, #136]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	490a      	ldr	r1, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	5ccb      	ldrb	r3, [r1, r3]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1cc>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1d0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe f91a 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08009100 	.word	0x08009100
 8003a1c:	20000004 	.word	0x20000004
 8003a20:	20000008 	.word	0x20000008

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x30>
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x36>
 8003a52:	e027      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a54:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a56:	613b      	str	r3, [r7, #16]
      break;
 8003a58:	e027      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	0c9b      	lsrs	r3, r3, #18
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	0c5b      	lsrs	r3, r3, #17
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a0d      	ldr	r2, [pc, #52]	; (8003abc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a86:	fb03 f202 	mul.w	r2, r3, r2
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e004      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa6:	613b      	str	r3, [r7, #16]
      break;
 8003aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aaa:	693b      	ldr	r3, [r7, #16]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	007a1200 	.word	0x007a1200
 8003ac0:	08009118 	.word	0x08009118
 8003ac4:	08009128 	.word	0x08009128
 8003ac8:	003d0900 	.word	0x003d0900

08003acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	20000004 	.word	0x20000004

08003ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae4:	f7ff fff2 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08009110 	.word	0x08009110

08003b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b0c:	f7ff ffde 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	0adb      	lsrs	r3, r3, #11
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08009110 	.word	0x08009110

08003b30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <RCC_Delay+0x34>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <RCC_Delay+0x38>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0a5b      	lsrs	r3, r3, #9
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b4c:	bf00      	nop
  }
  while (Delay --);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	60fa      	str	r2, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f9      	bne.n	8003b4c <RCC_Delay+0x1c>
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	20000004 	.word	0x20000004
 8003b68:	10624dd3 	.word	0x10624dd3

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d07d      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	61d3      	str	r3, [r2, #28]
 8003ba4:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d118      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a42      	ldr	r2, [pc, #264]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bcc:	f7fe f876 	bl	8001cbc <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fe f872 	bl	8001cbc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e06d      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02e      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d027      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c20:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c26:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fe f841 	bl	8001cbc <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fe f83d 	bl	8001cbc <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e036      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4917      	ldr	r1, [pc, #92]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	490b      	ldr	r1, [pc, #44]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	4904      	ldr	r1, [pc, #16]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	42420440 	.word	0x42420440

08003cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e041      	b.n	8003d6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fc88 	bl	8001614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 f992 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_TIM_PWM_Start+0x24>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e022      	b.n	8003de2 <HAL_TIM_PWM_Start+0x6a>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d109      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x3e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e015      	b.n	8003de2 <HAL_TIM_PWM_Start+0x6a>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x58>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e008      	b.n	8003de2 <HAL_TIM_PWM_Start+0x6a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e05e      	b.n	8003ea8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x82>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	e013      	b.n	8003e22 <HAL_TIM_PWM_Start+0xaa>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x92>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e08:	e00b      	b.n	8003e22 <HAL_TIM_PWM_Start+0xaa>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0xa2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e18:	e003      	b.n	8003e22 <HAL_TIM_PWM_Start+0xaa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 faf2 	bl	8004414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <HAL_TIM_PWM_Start+0x138>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d107      	bne.n	8003e4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_TIM_PWM_Start+0x138>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIM_PWM_Start+0xfa>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIM_PWM_Start+0xfa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_TIM_PWM_Start+0x13c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIM_PWM_Start+0xfa>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <HAL_TIM_PWM_Start+0x140>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d111      	bne.n	8003e96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d010      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	e007      	b.n	8003ea6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800

08003ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0ae      	b.n	8004038 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b0c      	cmp	r3, #12
 8003ee6:	f200 809f 	bhi.w	8004028 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08004029 	.word	0x08004029
 8003ef8:	08004029 	.word	0x08004029
 8003efc:	08004029 	.word	0x08004029
 8003f00:	08003f65 	.word	0x08003f65
 8003f04:	08004029 	.word	0x08004029
 8003f08:	08004029 	.word	0x08004029
 8003f0c:	08004029 	.word	0x08004029
 8003f10:	08003fa7 	.word	0x08003fa7
 8003f14:	08004029 	.word	0x08004029
 8003f18:	08004029 	.word	0x08004029
 8003f1c:	08004029 	.word	0x08004029
 8003f20:	08003fe7 	.word	0x08003fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f8ea 	bl	8004104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0208 	orr.w	r2, r2, #8
 8003f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0204 	bic.w	r2, r2, #4
 8003f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6999      	ldr	r1, [r3, #24]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	619a      	str	r2, [r3, #24]
      break;
 8003f62:	e064      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f930 	bl	80041d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6999      	ldr	r1, [r3, #24]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	021a      	lsls	r2, r3, #8
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	619a      	str	r2, [r3, #24]
      break;
 8003fa4:	e043      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f979 	bl	80042a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0208 	orr.w	r2, r2, #8
 8003fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0204 	bic.w	r2, r2, #4
 8003fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69d9      	ldr	r1, [r3, #28]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	61da      	str	r2, [r3, #28]
      break;
 8003fe4:	e023      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f9c3 	bl	8004378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69d9      	ldr	r1, [r3, #28]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	021a      	lsls	r2, r3, #8
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	61da      	str	r2, [r3, #28]
      break;
 8004026:	e002      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
      break;
 800402c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <TIM_Base_SetConfig+0xb8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00b      	beq.n	8004070 <TIM_Base_SetConfig+0x30>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405e:	d007      	beq.n	8004070 <TIM_Base_SetConfig+0x30>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0xbc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_Base_SetConfig+0x30>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0xc0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d108      	bne.n	8004082 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <TIM_Base_SetConfig+0xb8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0x62>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0x62>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <TIM_Base_SetConfig+0xbc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0x62>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a18      	ldr	r2, [pc, #96]	; (8004100 <TIM_Base_SetConfig+0xc0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <TIM_Base_SetConfig+0xb8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800

08004104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0201 	bic.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 0302 	bic.w	r3, r3, #2
 800414c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <TIM_OC1_SetConfig+0xc8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0308 	bic.w	r3, r3, #8
 8004166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a13      	ldr	r2, [pc, #76]	; (80041cc <TIM_OC1_SetConfig+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d111      	bne.n	80041a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00

080041d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0210 	bic.w	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0320 	bic.w	r3, r3, #32
 800421a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <TIM_OC2_SetConfig+0xd0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10d      	bne.n	800424c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <TIM_OC2_SetConfig+0xd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d113      	bne.n	800427c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	40012c00 	.word	0x40012c00

080042a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <TIM_OC3_SetConfig+0xd0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10d      	bne.n	800431e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800431c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <TIM_OC3_SetConfig+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d113      	bne.n	800434e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800432c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00

08004378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <TIM_OC4_SetConfig+0x98>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d109      	bne.n	80043ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00

08004414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2201      	movs	r2, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	43db      	mvns	r3, r3
 8004436:	401a      	ands	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e046      	b.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a16      	ldr	r2, [pc, #88]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d009      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10c      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800

08004518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004530:	2302      	movs	r3, #2
 8004532:	e03d      	b.n	80045b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e042      	b.n	8004652 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fd f869 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2224      	movs	r2, #36	; 0x24
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f92c 	bl	800485c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004612:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004622:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004632:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	d17c      	bne.n	8004774 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_UART_Receive+0x2c>
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e075      	b.n	8004776 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2222      	movs	r2, #34	; 0x22
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800469e:	f7fd fb0d 	bl	8001cbc <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d108      	bne.n	80046cc <HAL_UART_Receive+0x72>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e003      	b.n	80046d4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046d4:	e043      	b.n	800475e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2120      	movs	r1, #32
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f84c 	bl	800477e <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e042      	b.n	8004776 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10c      	bne.n	8004710 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	b29a      	uxth	r2, r3
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	3302      	adds	r3, #2
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e01f      	b.n	8004750 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d007      	beq.n	800472a <HAL_UART_Receive+0xd0>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_UART_Receive+0xde>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e008      	b.n	800474a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	b2da      	uxtb	r2, r3
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3301      	adds	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1b6      	bne.n	80046d6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b090      	sub	sp, #64	; 0x40
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478e:	e050      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d04c      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x30>
 800479e:	f7fd fa8d 	bl	8001cbc <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d241      	bcs.n	8004832 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ce:	637a      	str	r2, [r7, #52]	; 0x34
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	613b      	str	r3, [r7, #16]
   return(result);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3314      	adds	r3, #20
 8004800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004802:	623a      	str	r2, [r7, #32]
 8004804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	69f9      	ldr	r1, [r7, #28]
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e5      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e00f      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	429a      	cmp	r2, r3
 800484e:	d09f      	beq.n	8004790 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3740      	adds	r7, #64	; 0x40
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004896:	f023 030c 	bic.w	r3, r3, #12
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <UART_SetConfig+0x114>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d103      	bne.n	80048cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7ff f920 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	e002      	b.n	80048d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7ff f908 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 80048d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009a      	lsls	r2, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	4a22      	ldr	r2, [pc, #136]	; (8004974 <UART_SetConfig+0x118>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	0119      	lsls	r1, r3, #4
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009a      	lsls	r2, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <UART_SetConfig+0x118>)
 800490a:	fba3 0302 	umull	r0, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2064      	movs	r0, #100	; 0x64
 8004912:	fb00 f303 	mul.w	r3, r0, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	; 0x32
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <UART_SetConfig+0x118>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004928:	4419      	add	r1, r3
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <UART_SetConfig+0x118>)
 8004942:	fba3 0302 	umull	r0, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2064      	movs	r0, #100	; 0x64
 800494a:	fb00 f303 	mul.w	r3, r0, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	3332      	adds	r3, #50	; 0x32
 8004954:	4a07      	ldr	r2, [pc, #28]	; (8004974 <UART_SetConfig+0x118>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	440a      	add	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40013800 	.word	0x40013800
 8004974:	51eb851f 	.word	0x51eb851f

08004978 <__cvt>:
 8004978:	2b00      	cmp	r3, #0
 800497a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497e:	461f      	mov	r7, r3
 8004980:	bfbb      	ittet	lt
 8004982:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004986:	461f      	movlt	r7, r3
 8004988:	2300      	movge	r3, #0
 800498a:	232d      	movlt	r3, #45	; 0x2d
 800498c:	b088      	sub	sp, #32
 800498e:	4614      	mov	r4, r2
 8004990:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004992:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004994:	7013      	strb	r3, [r2, #0]
 8004996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004998:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800499c:	f023 0820 	bic.w	r8, r3, #32
 80049a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049a4:	d005      	beq.n	80049b2 <__cvt+0x3a>
 80049a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049aa:	d100      	bne.n	80049ae <__cvt+0x36>
 80049ac:	3501      	adds	r5, #1
 80049ae:	2302      	movs	r3, #2
 80049b0:	e000      	b.n	80049b4 <__cvt+0x3c>
 80049b2:	2303      	movs	r3, #3
 80049b4:	aa07      	add	r2, sp, #28
 80049b6:	9204      	str	r2, [sp, #16]
 80049b8:	aa06      	add	r2, sp, #24
 80049ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049be:	e9cd 3500 	strd	r3, r5, [sp]
 80049c2:	4622      	mov	r2, r4
 80049c4:	463b      	mov	r3, r7
 80049c6:	f001 f887 	bl	8005ad8 <_dtoa_r>
 80049ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049ce:	4606      	mov	r6, r0
 80049d0:	d102      	bne.n	80049d8 <__cvt+0x60>
 80049d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049d4:	07db      	lsls	r3, r3, #31
 80049d6:	d522      	bpl.n	8004a1e <__cvt+0xa6>
 80049d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049dc:	eb06 0905 	add.w	r9, r6, r5
 80049e0:	d110      	bne.n	8004a04 <__cvt+0x8c>
 80049e2:	7833      	ldrb	r3, [r6, #0]
 80049e4:	2b30      	cmp	r3, #48	; 0x30
 80049e6:	d10a      	bne.n	80049fe <__cvt+0x86>
 80049e8:	2200      	movs	r2, #0
 80049ea:	2300      	movs	r3, #0
 80049ec:	4620      	mov	r0, r4
 80049ee:	4639      	mov	r1, r7
 80049f0:	f7fb ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80049f4:	b918      	cbnz	r0, 80049fe <__cvt+0x86>
 80049f6:	f1c5 0501 	rsb	r5, r5, #1
 80049fa:	f8ca 5000 	str.w	r5, [sl]
 80049fe:	f8da 3000 	ldr.w	r3, [sl]
 8004a02:	4499      	add	r9, r3
 8004a04:	2200      	movs	r2, #0
 8004a06:	2300      	movs	r3, #0
 8004a08:	4620      	mov	r0, r4
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	f7fb ffcc 	bl	80009a8 <__aeabi_dcmpeq>
 8004a10:	b108      	cbz	r0, 8004a16 <__cvt+0x9e>
 8004a12:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a16:	2230      	movs	r2, #48	; 0x30
 8004a18:	9b07      	ldr	r3, [sp, #28]
 8004a1a:	454b      	cmp	r3, r9
 8004a1c:	d307      	bcc.n	8004a2e <__cvt+0xb6>
 8004a1e:	4630      	mov	r0, r6
 8004a20:	9b07      	ldr	r3, [sp, #28]
 8004a22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a24:	1b9b      	subs	r3, r3, r6
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	b008      	add	sp, #32
 8004a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	9107      	str	r1, [sp, #28]
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e7f0      	b.n	8004a18 <__cvt+0xa0>

08004a36 <__exponent>:
 8004a36:	4603      	mov	r3, r0
 8004a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a3a:	2900      	cmp	r1, #0
 8004a3c:	f803 2b02 	strb.w	r2, [r3], #2
 8004a40:	bfb6      	itet	lt
 8004a42:	222d      	movlt	r2, #45	; 0x2d
 8004a44:	222b      	movge	r2, #43	; 0x2b
 8004a46:	4249      	neglt	r1, r1
 8004a48:	2909      	cmp	r1, #9
 8004a4a:	7042      	strb	r2, [r0, #1]
 8004a4c:	dd2a      	ble.n	8004aa4 <__exponent+0x6e>
 8004a4e:	f10d 0207 	add.w	r2, sp, #7
 8004a52:	4617      	mov	r7, r2
 8004a54:	260a      	movs	r6, #10
 8004a56:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a5a:	4694      	mov	ip, r2
 8004a5c:	fb06 1415 	mls	r4, r6, r5, r1
 8004a60:	3430      	adds	r4, #48	; 0x30
 8004a62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a66:	460c      	mov	r4, r1
 8004a68:	2c63      	cmp	r4, #99	; 0x63
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a70:	dcf1      	bgt.n	8004a56 <__exponent+0x20>
 8004a72:	3130      	adds	r1, #48	; 0x30
 8004a74:	f1ac 0402 	sub.w	r4, ip, #2
 8004a78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	1c41      	adds	r1, r0, #1
 8004a80:	42ba      	cmp	r2, r7
 8004a82:	d30a      	bcc.n	8004a9a <__exponent+0x64>
 8004a84:	f10d 0209 	add.w	r2, sp, #9
 8004a88:	eba2 020c 	sub.w	r2, r2, ip
 8004a8c:	42bc      	cmp	r4, r7
 8004a8e:	bf88      	it	hi
 8004a90:	2200      	movhi	r2, #0
 8004a92:	4413      	add	r3, r2
 8004a94:	1a18      	subs	r0, r3, r0
 8004a96:	b003      	add	sp, #12
 8004a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004aa2:	e7ed      	b.n	8004a80 <__exponent+0x4a>
 8004aa4:	2330      	movs	r3, #48	; 0x30
 8004aa6:	3130      	adds	r1, #48	; 0x30
 8004aa8:	7083      	strb	r3, [r0, #2]
 8004aaa:	70c1      	strb	r1, [r0, #3]
 8004aac:	1d03      	adds	r3, r0, #4
 8004aae:	e7f1      	b.n	8004a94 <__exponent+0x5e>

08004ab0 <_printf_float>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	b091      	sub	sp, #68	; 0x44
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004abc:	4616      	mov	r6, r2
 8004abe:	461f      	mov	r7, r3
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	f000 fef3 	bl	80058ac <_localeconv_r>
 8004ac6:	6803      	ldr	r3, [r0, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	9309      	str	r3, [sp, #36]	; 0x24
 8004acc:	f7fb fb40 	bl	8000150 <strlen>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad8:	900a      	str	r0, [sp, #40]	; 0x28
 8004ada:	3307      	adds	r3, #7
 8004adc:	f023 0307 	bic.w	r3, r3, #7
 8004ae0:	f103 0208 	add.w	r2, r3, #8
 8004ae4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ae8:	f8d4 b000 	ldr.w	fp, [r4]
 8004aec:	f8c8 2000 	str.w	r2, [r8]
 8004af0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004af4:	4652      	mov	r2, sl
 8004af6:	4643      	mov	r3, r8
 8004af8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004afc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	4650      	mov	r0, sl
 8004b08:	4b9c      	ldr	r3, [pc, #624]	; (8004d7c <_printf_float+0x2cc>)
 8004b0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b0c:	f7fb ff7e 	bl	8000a0c <__aeabi_dcmpun>
 8004b10:	bb70      	cbnz	r0, 8004b70 <_printf_float+0xc0>
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	4650      	mov	r0, sl
 8004b18:	4b98      	ldr	r3, [pc, #608]	; (8004d7c <_printf_float+0x2cc>)
 8004b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b1c:	f7fb ff58 	bl	80009d0 <__aeabi_dcmple>
 8004b20:	bb30      	cbnz	r0, 8004b70 <_printf_float+0xc0>
 8004b22:	2200      	movs	r2, #0
 8004b24:	2300      	movs	r3, #0
 8004b26:	4650      	mov	r0, sl
 8004b28:	4641      	mov	r1, r8
 8004b2a:	f7fb ff47 	bl	80009bc <__aeabi_dcmplt>
 8004b2e:	b110      	cbz	r0, 8004b36 <_printf_float+0x86>
 8004b30:	232d      	movs	r3, #45	; 0x2d
 8004b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b36:	4a92      	ldr	r2, [pc, #584]	; (8004d80 <_printf_float+0x2d0>)
 8004b38:	4b92      	ldr	r3, [pc, #584]	; (8004d84 <_printf_float+0x2d4>)
 8004b3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b3e:	bf94      	ite	ls
 8004b40:	4690      	movls	r8, r2
 8004b42:	4698      	movhi	r8, r3
 8004b44:	2303      	movs	r3, #3
 8004b46:	f04f 0a00 	mov.w	sl, #0
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	f02b 0304 	bic.w	r3, fp, #4
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	4633      	mov	r3, r6
 8004b54:	4621      	mov	r1, r4
 8004b56:	4628      	mov	r0, r5
 8004b58:	9700      	str	r7, [sp, #0]
 8004b5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b5c:	f000 f9d6 	bl	8004f0c <_printf_common>
 8004b60:	3001      	adds	r0, #1
 8004b62:	f040 8090 	bne.w	8004c86 <_printf_float+0x1d6>
 8004b66:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6a:	b011      	add	sp, #68	; 0x44
 8004b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b70:	4652      	mov	r2, sl
 8004b72:	4643      	mov	r3, r8
 8004b74:	4650      	mov	r0, sl
 8004b76:	4641      	mov	r1, r8
 8004b78:	f7fb ff48 	bl	8000a0c <__aeabi_dcmpun>
 8004b7c:	b148      	cbz	r0, 8004b92 <_printf_float+0xe2>
 8004b7e:	f1b8 0f00 	cmp.w	r8, #0
 8004b82:	bfb8      	it	lt
 8004b84:	232d      	movlt	r3, #45	; 0x2d
 8004b86:	4a80      	ldr	r2, [pc, #512]	; (8004d88 <_printf_float+0x2d8>)
 8004b88:	bfb8      	it	lt
 8004b8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b8e:	4b7f      	ldr	r3, [pc, #508]	; (8004d8c <_printf_float+0x2dc>)
 8004b90:	e7d3      	b.n	8004b3a <_printf_float+0x8a>
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	d142      	bne.n	8004c22 <_printf_float+0x172>
 8004b9c:	2306      	movs	r3, #6
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	9206      	str	r2, [sp, #24]
 8004ba4:	aa0e      	add	r2, sp, #56	; 0x38
 8004ba6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004baa:	aa0d      	add	r2, sp, #52	; 0x34
 8004bac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004bb0:	9203      	str	r2, [sp, #12]
 8004bb2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004bb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	4652      	mov	r2, sl
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004bc8:	f7ff fed6 	bl	8004978 <__cvt>
 8004bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bce:	4680      	mov	r8, r0
 8004bd0:	2947      	cmp	r1, #71	; 0x47
 8004bd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bd4:	d108      	bne.n	8004be8 <_printf_float+0x138>
 8004bd6:	1cc8      	adds	r0, r1, #3
 8004bd8:	db02      	blt.n	8004be0 <_printf_float+0x130>
 8004bda:	6863      	ldr	r3, [r4, #4]
 8004bdc:	4299      	cmp	r1, r3
 8004bde:	dd40      	ble.n	8004c62 <_printf_float+0x1b2>
 8004be0:	f1a9 0902 	sub.w	r9, r9, #2
 8004be4:	fa5f f989 	uxtb.w	r9, r9
 8004be8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bec:	d81f      	bhi.n	8004c2e <_printf_float+0x17e>
 8004bee:	464a      	mov	r2, r9
 8004bf0:	3901      	subs	r1, #1
 8004bf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bf6:	910d      	str	r1, [sp, #52]	; 0x34
 8004bf8:	f7ff ff1d 	bl	8004a36 <__exponent>
 8004bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bfe:	4682      	mov	sl, r0
 8004c00:	1813      	adds	r3, r2, r0
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	6123      	str	r3, [r4, #16]
 8004c06:	dc02      	bgt.n	8004c0e <_printf_float+0x15e>
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	07d2      	lsls	r2, r2, #31
 8004c0c:	d501      	bpl.n	8004c12 <_printf_float+0x162>
 8004c0e:	3301      	adds	r3, #1
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d09b      	beq.n	8004b52 <_printf_float+0xa2>
 8004c1a:	232d      	movs	r3, #45	; 0x2d
 8004c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c20:	e797      	b.n	8004b52 <_printf_float+0xa2>
 8004c22:	2947      	cmp	r1, #71	; 0x47
 8004c24:	d1bc      	bne.n	8004ba0 <_printf_float+0xf0>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ba      	bne.n	8004ba0 <_printf_float+0xf0>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7b7      	b.n	8004b9e <_printf_float+0xee>
 8004c2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c32:	d118      	bne.n	8004c66 <_printf_float+0x1b6>
 8004c34:	2900      	cmp	r1, #0
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	dd0b      	ble.n	8004c52 <_printf_float+0x1a2>
 8004c3a:	6121      	str	r1, [r4, #16]
 8004c3c:	b913      	cbnz	r3, 8004c44 <_printf_float+0x194>
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	07d0      	lsls	r0, r2, #31
 8004c42:	d502      	bpl.n	8004c4a <_printf_float+0x19a>
 8004c44:	3301      	adds	r3, #1
 8004c46:	440b      	add	r3, r1
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	f04f 0a00 	mov.w	sl, #0
 8004c4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c50:	e7df      	b.n	8004c12 <_printf_float+0x162>
 8004c52:	b913      	cbnz	r3, 8004c5a <_printf_float+0x1aa>
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	07d2      	lsls	r2, r2, #31
 8004c58:	d501      	bpl.n	8004c5e <_printf_float+0x1ae>
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	e7f4      	b.n	8004c48 <_printf_float+0x198>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e7f2      	b.n	8004c48 <_printf_float+0x198>
 8004c62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	db05      	blt.n	8004c78 <_printf_float+0x1c8>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	6121      	str	r1, [r4, #16]
 8004c70:	07d8      	lsls	r0, r3, #31
 8004c72:	d5ea      	bpl.n	8004c4a <_printf_float+0x19a>
 8004c74:	1c4b      	adds	r3, r1, #1
 8004c76:	e7e7      	b.n	8004c48 <_printf_float+0x198>
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	bfcc      	ite	gt
 8004c7c:	2201      	movgt	r2, #1
 8004c7e:	f1c1 0202 	rsble	r2, r1, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	e7e0      	b.n	8004c48 <_printf_float+0x198>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	055a      	lsls	r2, r3, #21
 8004c8a:	d407      	bmi.n	8004c9c <_printf_float+0x1ec>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	4642      	mov	r2, r8
 8004c90:	4631      	mov	r1, r6
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	d12b      	bne.n	8004cf2 <_printf_float+0x242>
 8004c9a:	e764      	b.n	8004b66 <_printf_float+0xb6>
 8004c9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ca0:	f240 80dd 	bls.w	8004e5e <_printf_float+0x3ae>
 8004ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2300      	movs	r3, #0
 8004cac:	f7fb fe7c 	bl	80009a8 <__aeabi_dcmpeq>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d033      	beq.n	8004d1c <_printf_float+0x26c>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	4a35      	ldr	r2, [pc, #212]	; (8004d90 <_printf_float+0x2e0>)
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	f43f af51 	beq.w	8004b66 <_printf_float+0xb6>
 8004cc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	db02      	blt.n	8004cd2 <_printf_float+0x222>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	07d8      	lsls	r0, r3, #31
 8004cd0:	d50f      	bpl.n	8004cf2 <_printf_float+0x242>
 8004cd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	47b8      	blx	r7
 8004cdc:	3001      	adds	r0, #1
 8004cde:	f43f af42 	beq.w	8004b66 <_printf_float+0xb6>
 8004ce2:	f04f 0800 	mov.w	r8, #0
 8004ce6:	f104 091a 	add.w	r9, r4, #26
 8004cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4543      	cmp	r3, r8
 8004cf0:	dc09      	bgt.n	8004d06 <_printf_float+0x256>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	079b      	lsls	r3, r3, #30
 8004cf6:	f100 8104 	bmi.w	8004f02 <_printf_float+0x452>
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	bfb8      	it	lt
 8004d02:	4618      	movlt	r0, r3
 8004d04:	e731      	b.n	8004b6a <_printf_float+0xba>
 8004d06:	2301      	movs	r3, #1
 8004d08:	464a      	mov	r2, r9
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f af28 	beq.w	8004b66 <_printf_float+0xb6>
 8004d16:	f108 0801 	add.w	r8, r8, #1
 8004d1a:	e7e6      	b.n	8004cea <_printf_float+0x23a>
 8004d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	dc38      	bgt.n	8004d94 <_printf_float+0x2e4>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4631      	mov	r1, r6
 8004d26:	4628      	mov	r0, r5
 8004d28:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <_printf_float+0x2e0>)
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f af1a 	beq.w	8004b66 <_printf_float+0xb6>
 8004d32:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d36:	4313      	orrs	r3, r2
 8004d38:	d102      	bne.n	8004d40 <_printf_float+0x290>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	07d9      	lsls	r1, r3, #31
 8004d3e:	d5d8      	bpl.n	8004cf2 <_printf_float+0x242>
 8004d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d44:	4631      	mov	r1, r6
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f af0b 	beq.w	8004b66 <_printf_float+0xb6>
 8004d50:	f04f 0900 	mov.w	r9, #0
 8004d54:	f104 0a1a 	add.w	sl, r4, #26
 8004d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d5a:	425b      	negs	r3, r3
 8004d5c:	454b      	cmp	r3, r9
 8004d5e:	dc01      	bgt.n	8004d64 <_printf_float+0x2b4>
 8004d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d62:	e794      	b.n	8004c8e <_printf_float+0x1de>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4652      	mov	r2, sl
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b8      	blx	r7
 8004d6e:	3001      	adds	r0, #1
 8004d70:	f43f aef9 	beq.w	8004b66 <_printf_float+0xb6>
 8004d74:	f109 0901 	add.w	r9, r9, #1
 8004d78:	e7ee      	b.n	8004d58 <_printf_float+0x2a8>
 8004d7a:	bf00      	nop
 8004d7c:	7fefffff 	.word	0x7fefffff
 8004d80:	0800912a 	.word	0x0800912a
 8004d84:	0800912e 	.word	0x0800912e
 8004d88:	08009132 	.word	0x08009132
 8004d8c:	08009136 	.word	0x08009136
 8004d90:	0800913a 	.word	0x0800913a
 8004d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	bfa8      	it	ge
 8004d9c:	461a      	movge	r2, r3
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	4691      	mov	r9, r2
 8004da2:	dc37      	bgt.n	8004e14 <_printf_float+0x364>
 8004da4:	f04f 0b00 	mov.w	fp, #0
 8004da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dac:	f104 021a 	add.w	r2, r4, #26
 8004db0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004db4:	ebaa 0309 	sub.w	r3, sl, r9
 8004db8:	455b      	cmp	r3, fp
 8004dba:	dc33      	bgt.n	8004e24 <_printf_float+0x374>
 8004dbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	db3b      	blt.n	8004e3c <_printf_float+0x38c>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	07da      	lsls	r2, r3, #31
 8004dc8:	d438      	bmi.n	8004e3c <_printf_float+0x38c>
 8004dca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004dce:	eba2 0903 	sub.w	r9, r2, r3
 8004dd2:	eba2 020a 	sub.w	r2, r2, sl
 8004dd6:	4591      	cmp	r9, r2
 8004dd8:	bfa8      	it	ge
 8004dda:	4691      	movge	r9, r2
 8004ddc:	f1b9 0f00 	cmp.w	r9, #0
 8004de0:	dc34      	bgt.n	8004e4c <_printf_float+0x39c>
 8004de2:	f04f 0800 	mov.w	r8, #0
 8004de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dea:	f104 0a1a 	add.w	sl, r4, #26
 8004dee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	eba3 0309 	sub.w	r3, r3, r9
 8004df8:	4543      	cmp	r3, r8
 8004dfa:	f77f af7a 	ble.w	8004cf2 <_printf_float+0x242>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4652      	mov	r2, sl
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f aeac 	beq.w	8004b66 <_printf_float+0xb6>
 8004e0e:	f108 0801 	add.w	r8, r8, #1
 8004e12:	e7ec      	b.n	8004dee <_printf_float+0x33e>
 8004e14:	4613      	mov	r3, r2
 8004e16:	4631      	mov	r1, r6
 8004e18:	4642      	mov	r2, r8
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d1c0      	bne.n	8004da4 <_printf_float+0x2f4>
 8004e22:	e6a0      	b.n	8004b66 <_printf_float+0xb6>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f ae99 	beq.w	8004b66 <_printf_float+0xb6>
 8004e34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e36:	f10b 0b01 	add.w	fp, fp, #1
 8004e3a:	e7b9      	b.n	8004db0 <_printf_float+0x300>
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	d1bf      	bne.n	8004dca <_printf_float+0x31a>
 8004e4a:	e68c      	b.n	8004b66 <_printf_float+0xb6>
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	eb08 020a 	add.w	r2, r8, sl
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d1c2      	bne.n	8004de2 <_printf_float+0x332>
 8004e5c:	e683      	b.n	8004b66 <_printf_float+0xb6>
 8004e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e60:	2a01      	cmp	r2, #1
 8004e62:	dc01      	bgt.n	8004e68 <_printf_float+0x3b8>
 8004e64:	07db      	lsls	r3, r3, #31
 8004e66:	d539      	bpl.n	8004edc <_printf_float+0x42c>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f ae77 	beq.w	8004b66 <_printf_float+0xb6>
 8004e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b8      	blx	r7
 8004e82:	3001      	adds	r0, #1
 8004e84:	f43f ae6f 	beq.w	8004b66 <_printf_float+0xb6>
 8004e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e94:	f7fb fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8004e98:	b9d8      	cbnz	r0, 8004ed2 <_printf_float+0x422>
 8004e9a:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e9e:	f108 0201 	add.w	r2, r8, #1
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d10e      	bne.n	8004eca <_printf_float+0x41a>
 8004eac:	e65b      	b.n	8004b66 <_printf_float+0xb6>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	464a      	mov	r2, r9
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f43f ae54 	beq.w	8004b66 <_printf_float+0xb6>
 8004ebe:	f108 0801 	add.w	r8, r8, #1
 8004ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	4543      	cmp	r3, r8
 8004ec8:	dcf1      	bgt.n	8004eae <_printf_float+0x3fe>
 8004eca:	4653      	mov	r3, sl
 8004ecc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ed0:	e6de      	b.n	8004c90 <_printf_float+0x1e0>
 8004ed2:	f04f 0800 	mov.w	r8, #0
 8004ed6:	f104 091a 	add.w	r9, r4, #26
 8004eda:	e7f2      	b.n	8004ec2 <_printf_float+0x412>
 8004edc:	2301      	movs	r3, #1
 8004ede:	4642      	mov	r2, r8
 8004ee0:	e7df      	b.n	8004ea2 <_printf_float+0x3f2>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	464a      	mov	r2, r9
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f ae3a 	beq.w	8004b66 <_printf_float+0xb6>
 8004ef2:	f108 0801 	add.w	r8, r8, #1
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004efa:	1a5b      	subs	r3, r3, r1
 8004efc:	4543      	cmp	r3, r8
 8004efe:	dcf0      	bgt.n	8004ee2 <_printf_float+0x432>
 8004f00:	e6fb      	b.n	8004cfa <_printf_float+0x24a>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	f104 0919 	add.w	r9, r4, #25
 8004f0a:	e7f4      	b.n	8004ef6 <_printf_float+0x446>

08004f0c <_printf_common>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	4616      	mov	r6, r2
 8004f12:	4699      	mov	r9, r3
 8004f14:	688a      	ldr	r2, [r1, #8]
 8004f16:	690b      	ldr	r3, [r1, #16]
 8004f18:	4607      	mov	r7, r0
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bfb8      	it	lt
 8004f1e:	4613      	movlt	r3, r2
 8004f20:	6033      	str	r3, [r6, #0]
 8004f22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f26:	460c      	mov	r4, r1
 8004f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f2c:	b10a      	cbz	r2, 8004f32 <_printf_common+0x26>
 8004f2e:	3301      	adds	r3, #1
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	0699      	lsls	r1, r3, #26
 8004f36:	bf42      	ittt	mi
 8004f38:	6833      	ldrmi	r3, [r6, #0]
 8004f3a:	3302      	addmi	r3, #2
 8004f3c:	6033      	strmi	r3, [r6, #0]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	f015 0506 	ands.w	r5, r5, #6
 8004f44:	d106      	bne.n	8004f54 <_printf_common+0x48>
 8004f46:	f104 0a19 	add.w	sl, r4, #25
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	6832      	ldr	r2, [r6, #0]
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dc2b      	bgt.n	8004fac <_printf_common+0xa0>
 8004f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f58:	1e13      	subs	r3, r2, #0
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	bf18      	it	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	0692      	lsls	r2, r2, #26
 8004f62:	d430      	bmi.n	8004fc6 <_printf_common+0xba>
 8004f64:	4649      	mov	r1, r9
 8004f66:	4638      	mov	r0, r7
 8004f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d023      	beq.n	8004fba <_printf_common+0xae>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	6922      	ldr	r2, [r4, #16]
 8004f76:	f003 0306 	and.w	r3, r3, #6
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf14      	ite	ne
 8004f7e:	2500      	movne	r5, #0
 8004f80:	6833      	ldreq	r3, [r6, #0]
 8004f82:	f04f 0600 	mov.w	r6, #0
 8004f86:	bf08      	it	eq
 8004f88:	68e5      	ldreq	r5, [r4, #12]
 8004f8a:	f104 041a 	add.w	r4, r4, #26
 8004f8e:	bf08      	it	eq
 8004f90:	1aed      	subeq	r5, r5, r3
 8004f92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f96:	bf08      	it	eq
 8004f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bfc4      	itt	gt
 8004fa0:	1a9b      	subgt	r3, r3, r2
 8004fa2:	18ed      	addgt	r5, r5, r3
 8004fa4:	42b5      	cmp	r5, r6
 8004fa6:	d11a      	bne.n	8004fde <_printf_common+0xd2>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	e008      	b.n	8004fbe <_printf_common+0xb2>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4652      	mov	r2, sl
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	47c0      	blx	r8
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d103      	bne.n	8004fc2 <_printf_common+0xb6>
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc2:	3501      	adds	r5, #1
 8004fc4:	e7c1      	b.n	8004f4a <_printf_common+0x3e>
 8004fc6:	2030      	movs	r0, #48	; 0x30
 8004fc8:	18e1      	adds	r1, r4, r3
 8004fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd4:	4422      	add	r2, r4
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fdc:	e7c2      	b.n	8004f64 <_printf_common+0x58>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	47c0      	blx	r8
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d0e6      	beq.n	8004fba <_printf_common+0xae>
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7d9      	b.n	8004fa4 <_printf_common+0x98>

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	7e0f      	ldrb	r7, [r1, #24]
 8004ff6:	4691      	mov	r9, r2
 8004ff8:	2f78      	cmp	r7, #120	; 0x78
 8004ffa:	4680      	mov	r8, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	469a      	mov	sl, r3
 8005000:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	; 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d5 	beq.w	80051bc <_printf_i+0x1cc>
 8005012:	2f58      	cmp	r7, #88	; 0x58
 8005014:	f000 80c1 	beq.w	800519a <_printf_i+0x1aa>
 8005018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a101      	add	r1, pc, #4	; (adr r1, 8005030 <_printf_i+0x40>)
 800502c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	080051a3 	.word	0x080051a3
 8005060:	080050c9 	.word	0x080050c9
 8005064:	0800515d 	.word	0x0800515d
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051c5 	.word	0x080051c5
 8005074:	08005019 	.word	0x08005019
 8005078:	080050c9 	.word	0x080050c9
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	08005165 	.word	0x08005165
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e0a0      	b.n	80051de <_printf_i+0x1ee>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	0607      	lsls	r7, r0, #24
 80050a2:	f103 0104 	add.w	r1, r3, #4
 80050a6:	6029      	str	r1, [r5, #0]
 80050a8:	d501      	bpl.n	80050ae <_printf_i+0xbe>
 80050aa:	681e      	ldr	r6, [r3, #0]
 80050ac:	e003      	b.n	80050b6 <_printf_i+0xc6>
 80050ae:	0646      	lsls	r6, r0, #25
 80050b0:	d5fb      	bpl.n	80050aa <_printf_i+0xba>
 80050b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050b6:	2e00      	cmp	r6, #0
 80050b8:	da03      	bge.n	80050c2 <_printf_i+0xd2>
 80050ba:	232d      	movs	r3, #45	; 0x2d
 80050bc:	4276      	negs	r6, r6
 80050be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c2:	230a      	movs	r3, #10
 80050c4:	4859      	ldr	r0, [pc, #356]	; (800522c <_printf_i+0x23c>)
 80050c6:	e012      	b.n	80050ee <_printf_i+0xfe>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	1d19      	adds	r1, r3, #4
 80050ce:	6029      	str	r1, [r5, #0]
 80050d0:	0605      	lsls	r5, r0, #24
 80050d2:	d501      	bpl.n	80050d8 <_printf_i+0xe8>
 80050d4:	681e      	ldr	r6, [r3, #0]
 80050d6:	e002      	b.n	80050de <_printf_i+0xee>
 80050d8:	0641      	lsls	r1, r0, #25
 80050da:	d5fb      	bpl.n	80050d4 <_printf_i+0xe4>
 80050dc:	881e      	ldrh	r6, [r3, #0]
 80050de:	2f6f      	cmp	r7, #111	; 0x6f
 80050e0:	bf0c      	ite	eq
 80050e2:	2308      	moveq	r3, #8
 80050e4:	230a      	movne	r3, #10
 80050e6:	4851      	ldr	r0, [pc, #324]	; (800522c <_printf_i+0x23c>)
 80050e8:	2100      	movs	r1, #0
 80050ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ee:	6865      	ldr	r5, [r4, #4]
 80050f0:	2d00      	cmp	r5, #0
 80050f2:	bfa8      	it	ge
 80050f4:	6821      	ldrge	r1, [r4, #0]
 80050f6:	60a5      	str	r5, [r4, #8]
 80050f8:	bfa4      	itt	ge
 80050fa:	f021 0104 	bicge.w	r1, r1, #4
 80050fe:	6021      	strge	r1, [r4, #0]
 8005100:	b90e      	cbnz	r6, 8005106 <_printf_i+0x116>
 8005102:	2d00      	cmp	r5, #0
 8005104:	d04b      	beq.n	800519e <_printf_i+0x1ae>
 8005106:	4615      	mov	r5, r2
 8005108:	fbb6 f1f3 	udiv	r1, r6, r3
 800510c:	fb03 6711 	mls	r7, r3, r1, r6
 8005110:	5dc7      	ldrb	r7, [r0, r7]
 8005112:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005116:	4637      	mov	r7, r6
 8005118:	42bb      	cmp	r3, r7
 800511a:	460e      	mov	r6, r1
 800511c:	d9f4      	bls.n	8005108 <_printf_i+0x118>
 800511e:	2b08      	cmp	r3, #8
 8005120:	d10b      	bne.n	800513a <_printf_i+0x14a>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	07de      	lsls	r6, r3, #31
 8005126:	d508      	bpl.n	800513a <_printf_i+0x14a>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	6861      	ldr	r1, [r4, #4]
 800512c:	4299      	cmp	r1, r3
 800512e:	bfde      	ittt	le
 8005130:	2330      	movle	r3, #48	; 0x30
 8005132:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005136:	f105 35ff 	addle.w	r5, r5, #4294967295
 800513a:	1b52      	subs	r2, r2, r5
 800513c:	6122      	str	r2, [r4, #16]
 800513e:	464b      	mov	r3, r9
 8005140:	4621      	mov	r1, r4
 8005142:	4640      	mov	r0, r8
 8005144:	f8cd a000 	str.w	sl, [sp]
 8005148:	aa03      	add	r2, sp, #12
 800514a:	f7ff fedf 	bl	8004f0c <_printf_common>
 800514e:	3001      	adds	r0, #1
 8005150:	d14a      	bne.n	80051e8 <_printf_i+0x1f8>
 8005152:	f04f 30ff 	mov.w	r0, #4294967295
 8005156:	b004      	add	sp, #16
 8005158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	f043 0320 	orr.w	r3, r3, #32
 8005162:	6023      	str	r3, [r4, #0]
 8005164:	2778      	movs	r7, #120	; 0x78
 8005166:	4832      	ldr	r0, [pc, #200]	; (8005230 <_printf_i+0x240>)
 8005168:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	6829      	ldr	r1, [r5, #0]
 8005170:	061f      	lsls	r7, r3, #24
 8005172:	f851 6b04 	ldr.w	r6, [r1], #4
 8005176:	d402      	bmi.n	800517e <_printf_i+0x18e>
 8005178:	065f      	lsls	r7, r3, #25
 800517a:	bf48      	it	mi
 800517c:	b2b6      	uxthmi	r6, r6
 800517e:	07df      	lsls	r7, r3, #31
 8005180:	bf48      	it	mi
 8005182:	f043 0320 	orrmi.w	r3, r3, #32
 8005186:	6029      	str	r1, [r5, #0]
 8005188:	bf48      	it	mi
 800518a:	6023      	strmi	r3, [r4, #0]
 800518c:	b91e      	cbnz	r6, 8005196 <_printf_i+0x1a6>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f023 0320 	bic.w	r3, r3, #32
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	2310      	movs	r3, #16
 8005198:	e7a6      	b.n	80050e8 <_printf_i+0xf8>
 800519a:	4824      	ldr	r0, [pc, #144]	; (800522c <_printf_i+0x23c>)
 800519c:	e7e4      	b.n	8005168 <_printf_i+0x178>
 800519e:	4615      	mov	r5, r2
 80051a0:	e7bd      	b.n	800511e <_printf_i+0x12e>
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	6826      	ldr	r6, [r4, #0]
 80051a6:	1d18      	adds	r0, r3, #4
 80051a8:	6961      	ldr	r1, [r4, #20]
 80051aa:	6028      	str	r0, [r5, #0]
 80051ac:	0635      	lsls	r5, r6, #24
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	d501      	bpl.n	80051b6 <_printf_i+0x1c6>
 80051b2:	6019      	str	r1, [r3, #0]
 80051b4:	e002      	b.n	80051bc <_printf_i+0x1cc>
 80051b6:	0670      	lsls	r0, r6, #25
 80051b8:	d5fb      	bpl.n	80051b2 <_printf_i+0x1c2>
 80051ba:	8019      	strh	r1, [r3, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	4615      	mov	r5, r2
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	e7bc      	b.n	800513e <_printf_i+0x14e>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	2100      	movs	r1, #0
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	602a      	str	r2, [r5, #0]
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	4628      	mov	r0, r5
 80051d2:	f000 fbe2 	bl	800599a <memchr>
 80051d6:	b108      	cbz	r0, 80051dc <_printf_i+0x1ec>
 80051d8:	1b40      	subs	r0, r0, r5
 80051da:	6060      	str	r0, [r4, #4]
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	2300      	movs	r3, #0
 80051e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e6:	e7aa      	b.n	800513e <_printf_i+0x14e>
 80051e8:	462a      	mov	r2, r5
 80051ea:	4649      	mov	r1, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	47d0      	blx	sl
 80051f2:	3001      	adds	r0, #1
 80051f4:	d0ad      	beq.n	8005152 <_printf_i+0x162>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	079b      	lsls	r3, r3, #30
 80051fa:	d413      	bmi.n	8005224 <_printf_i+0x234>
 80051fc:	68e0      	ldr	r0, [r4, #12]
 80051fe:	9b03      	ldr	r3, [sp, #12]
 8005200:	4298      	cmp	r0, r3
 8005202:	bfb8      	it	lt
 8005204:	4618      	movlt	r0, r3
 8005206:	e7a6      	b.n	8005156 <_printf_i+0x166>
 8005208:	2301      	movs	r3, #1
 800520a:	4632      	mov	r2, r6
 800520c:	4649      	mov	r1, r9
 800520e:	4640      	mov	r0, r8
 8005210:	47d0      	blx	sl
 8005212:	3001      	adds	r0, #1
 8005214:	d09d      	beq.n	8005152 <_printf_i+0x162>
 8005216:	3501      	adds	r5, #1
 8005218:	68e3      	ldr	r3, [r4, #12]
 800521a:	9903      	ldr	r1, [sp, #12]
 800521c:	1a5b      	subs	r3, r3, r1
 800521e:	42ab      	cmp	r3, r5
 8005220:	dcf2      	bgt.n	8005208 <_printf_i+0x218>
 8005222:	e7eb      	b.n	80051fc <_printf_i+0x20c>
 8005224:	2500      	movs	r5, #0
 8005226:	f104 0619 	add.w	r6, r4, #25
 800522a:	e7f5      	b.n	8005218 <_printf_i+0x228>
 800522c:	0800913c 	.word	0x0800913c
 8005230:	0800914d 	.word	0x0800914d

08005234 <_scanf_float>:
 8005234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	b087      	sub	sp, #28
 800523a:	9303      	str	r3, [sp, #12]
 800523c:	688b      	ldr	r3, [r1, #8]
 800523e:	4617      	mov	r7, r2
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005246:	bf85      	ittet	hi
 8005248:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800524c:	195b      	addhi	r3, r3, r5
 800524e:	2300      	movls	r3, #0
 8005250:	9302      	strhi	r3, [sp, #8]
 8005252:	bf88      	it	hi
 8005254:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005258:	468b      	mov	fp, r1
 800525a:	f04f 0500 	mov.w	r5, #0
 800525e:	bf8c      	ite	hi
 8005260:	608b      	strhi	r3, [r1, #8]
 8005262:	9302      	strls	r3, [sp, #8]
 8005264:	680b      	ldr	r3, [r1, #0]
 8005266:	4680      	mov	r8, r0
 8005268:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800526c:	f84b 3b1c 	str.w	r3, [fp], #28
 8005270:	460c      	mov	r4, r1
 8005272:	465e      	mov	r6, fp
 8005274:	46aa      	mov	sl, r5
 8005276:	46a9      	mov	r9, r5
 8005278:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800527c:	9501      	str	r5, [sp, #4]
 800527e:	68a2      	ldr	r2, [r4, #8]
 8005280:	b152      	cbz	r2, 8005298 <_scanf_float+0x64>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b4e      	cmp	r3, #78	; 0x4e
 8005288:	d864      	bhi.n	8005354 <_scanf_float+0x120>
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d83c      	bhi.n	8005308 <_scanf_float+0xd4>
 800528e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005292:	b2c8      	uxtb	r0, r1
 8005294:	280e      	cmp	r0, #14
 8005296:	d93a      	bls.n	800530e <_scanf_float+0xda>
 8005298:	f1b9 0f00 	cmp.w	r9, #0
 800529c:	d003      	beq.n	80052a6 <_scanf_float+0x72>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052aa:	f1ba 0f01 	cmp.w	sl, #1
 80052ae:	f200 8113 	bhi.w	80054d8 <_scanf_float+0x2a4>
 80052b2:	455e      	cmp	r6, fp
 80052b4:	f200 8105 	bhi.w	80054c2 <_scanf_float+0x28e>
 80052b8:	2501      	movs	r5, #1
 80052ba:	4628      	mov	r0, r5
 80052bc:	b007      	add	sp, #28
 80052be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80052c6:	2a0d      	cmp	r2, #13
 80052c8:	d8e6      	bhi.n	8005298 <_scanf_float+0x64>
 80052ca:	a101      	add	r1, pc, #4	; (adr r1, 80052d0 <_scanf_float+0x9c>)
 80052cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052d0:	0800540f 	.word	0x0800540f
 80052d4:	08005299 	.word	0x08005299
 80052d8:	08005299 	.word	0x08005299
 80052dc:	08005299 	.word	0x08005299
 80052e0:	0800546f 	.word	0x0800546f
 80052e4:	08005447 	.word	0x08005447
 80052e8:	08005299 	.word	0x08005299
 80052ec:	08005299 	.word	0x08005299
 80052f0:	0800541d 	.word	0x0800541d
 80052f4:	08005299 	.word	0x08005299
 80052f8:	08005299 	.word	0x08005299
 80052fc:	08005299 	.word	0x08005299
 8005300:	08005299 	.word	0x08005299
 8005304:	080053d5 	.word	0x080053d5
 8005308:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800530c:	e7db      	b.n	80052c6 <_scanf_float+0x92>
 800530e:	290e      	cmp	r1, #14
 8005310:	d8c2      	bhi.n	8005298 <_scanf_float+0x64>
 8005312:	a001      	add	r0, pc, #4	; (adr r0, 8005318 <_scanf_float+0xe4>)
 8005314:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005318:	080053c7 	.word	0x080053c7
 800531c:	08005299 	.word	0x08005299
 8005320:	080053c7 	.word	0x080053c7
 8005324:	0800545b 	.word	0x0800545b
 8005328:	08005299 	.word	0x08005299
 800532c:	08005375 	.word	0x08005375
 8005330:	080053b1 	.word	0x080053b1
 8005334:	080053b1 	.word	0x080053b1
 8005338:	080053b1 	.word	0x080053b1
 800533c:	080053b1 	.word	0x080053b1
 8005340:	080053b1 	.word	0x080053b1
 8005344:	080053b1 	.word	0x080053b1
 8005348:	080053b1 	.word	0x080053b1
 800534c:	080053b1 	.word	0x080053b1
 8005350:	080053b1 	.word	0x080053b1
 8005354:	2b6e      	cmp	r3, #110	; 0x6e
 8005356:	d809      	bhi.n	800536c <_scanf_float+0x138>
 8005358:	2b60      	cmp	r3, #96	; 0x60
 800535a:	d8b2      	bhi.n	80052c2 <_scanf_float+0x8e>
 800535c:	2b54      	cmp	r3, #84	; 0x54
 800535e:	d077      	beq.n	8005450 <_scanf_float+0x21c>
 8005360:	2b59      	cmp	r3, #89	; 0x59
 8005362:	d199      	bne.n	8005298 <_scanf_float+0x64>
 8005364:	2d07      	cmp	r5, #7
 8005366:	d197      	bne.n	8005298 <_scanf_float+0x64>
 8005368:	2508      	movs	r5, #8
 800536a:	e029      	b.n	80053c0 <_scanf_float+0x18c>
 800536c:	2b74      	cmp	r3, #116	; 0x74
 800536e:	d06f      	beq.n	8005450 <_scanf_float+0x21c>
 8005370:	2b79      	cmp	r3, #121	; 0x79
 8005372:	e7f6      	b.n	8005362 <_scanf_float+0x12e>
 8005374:	6821      	ldr	r1, [r4, #0]
 8005376:	05c8      	lsls	r0, r1, #23
 8005378:	d51a      	bpl.n	80053b0 <_scanf_float+0x17c>
 800537a:	9b02      	ldr	r3, [sp, #8]
 800537c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005380:	6021      	str	r1, [r4, #0]
 8005382:	f109 0901 	add.w	r9, r9, #1
 8005386:	b11b      	cbz	r3, 8005390 <_scanf_float+0x15c>
 8005388:	3b01      	subs	r3, #1
 800538a:	3201      	adds	r2, #1
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	60a2      	str	r2, [r4, #8]
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	3b01      	subs	r3, #1
 8005394:	60a3      	str	r3, [r4, #8]
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	3301      	adds	r3, #1
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	f340 8084 	ble.w	80054b0 <_scanf_float+0x27c>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	3301      	adds	r3, #1
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	e766      	b.n	800527e <_scanf_float+0x4a>
 80053b0:	eb1a 0f05 	cmn.w	sl, r5
 80053b4:	f47f af70 	bne.w	8005298 <_scanf_float+0x64>
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80053be:	6022      	str	r2, [r4, #0]
 80053c0:	f806 3b01 	strb.w	r3, [r6], #1
 80053c4:	e7e4      	b.n	8005390 <_scanf_float+0x15c>
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	0610      	lsls	r0, r2, #24
 80053ca:	f57f af65 	bpl.w	8005298 <_scanf_float+0x64>
 80053ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d2:	e7f4      	b.n	80053be <_scanf_float+0x18a>
 80053d4:	f1ba 0f00 	cmp.w	sl, #0
 80053d8:	d10e      	bne.n	80053f8 <_scanf_float+0x1c4>
 80053da:	f1b9 0f00 	cmp.w	r9, #0
 80053de:	d10e      	bne.n	80053fe <_scanf_float+0x1ca>
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053ea:	d108      	bne.n	80053fe <_scanf_float+0x1ca>
 80053ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053f0:	f04f 0a01 	mov.w	sl, #1
 80053f4:	6022      	str	r2, [r4, #0]
 80053f6:	e7e3      	b.n	80053c0 <_scanf_float+0x18c>
 80053f8:	f1ba 0f02 	cmp.w	sl, #2
 80053fc:	d055      	beq.n	80054aa <_scanf_float+0x276>
 80053fe:	2d01      	cmp	r5, #1
 8005400:	d002      	beq.n	8005408 <_scanf_float+0x1d4>
 8005402:	2d04      	cmp	r5, #4
 8005404:	f47f af48 	bne.w	8005298 <_scanf_float+0x64>
 8005408:	3501      	adds	r5, #1
 800540a:	b2ed      	uxtb	r5, r5
 800540c:	e7d8      	b.n	80053c0 <_scanf_float+0x18c>
 800540e:	f1ba 0f01 	cmp.w	sl, #1
 8005412:	f47f af41 	bne.w	8005298 <_scanf_float+0x64>
 8005416:	f04f 0a02 	mov.w	sl, #2
 800541a:	e7d1      	b.n	80053c0 <_scanf_float+0x18c>
 800541c:	b97d      	cbnz	r5, 800543e <_scanf_float+0x20a>
 800541e:	f1b9 0f00 	cmp.w	r9, #0
 8005422:	f47f af3c 	bne.w	800529e <_scanf_float+0x6a>
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800542c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005430:	f47f af39 	bne.w	80052a6 <_scanf_float+0x72>
 8005434:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005438:	2501      	movs	r5, #1
 800543a:	6022      	str	r2, [r4, #0]
 800543c:	e7c0      	b.n	80053c0 <_scanf_float+0x18c>
 800543e:	2d03      	cmp	r5, #3
 8005440:	d0e2      	beq.n	8005408 <_scanf_float+0x1d4>
 8005442:	2d05      	cmp	r5, #5
 8005444:	e7de      	b.n	8005404 <_scanf_float+0x1d0>
 8005446:	2d02      	cmp	r5, #2
 8005448:	f47f af26 	bne.w	8005298 <_scanf_float+0x64>
 800544c:	2503      	movs	r5, #3
 800544e:	e7b7      	b.n	80053c0 <_scanf_float+0x18c>
 8005450:	2d06      	cmp	r5, #6
 8005452:	f47f af21 	bne.w	8005298 <_scanf_float+0x64>
 8005456:	2507      	movs	r5, #7
 8005458:	e7b2      	b.n	80053c0 <_scanf_float+0x18c>
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	0591      	lsls	r1, r2, #22
 800545e:	f57f af1b 	bpl.w	8005298 <_scanf_float+0x64>
 8005462:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005466:	6022      	str	r2, [r4, #0]
 8005468:	f8cd 9004 	str.w	r9, [sp, #4]
 800546c:	e7a8      	b.n	80053c0 <_scanf_float+0x18c>
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005474:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005478:	d006      	beq.n	8005488 <_scanf_float+0x254>
 800547a:	0550      	lsls	r0, r2, #21
 800547c:	f57f af0c 	bpl.w	8005298 <_scanf_float+0x64>
 8005480:	f1b9 0f00 	cmp.w	r9, #0
 8005484:	f43f af0f 	beq.w	80052a6 <_scanf_float+0x72>
 8005488:	0591      	lsls	r1, r2, #22
 800548a:	bf58      	it	pl
 800548c:	9901      	ldrpl	r1, [sp, #4]
 800548e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005492:	bf58      	it	pl
 8005494:	eba9 0101 	subpl.w	r1, r9, r1
 8005498:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800549c:	f04f 0900 	mov.w	r9, #0
 80054a0:	bf58      	it	pl
 80054a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054a6:	6022      	str	r2, [r4, #0]
 80054a8:	e78a      	b.n	80053c0 <_scanf_float+0x18c>
 80054aa:	f04f 0a03 	mov.w	sl, #3
 80054ae:	e787      	b.n	80053c0 <_scanf_float+0x18c>
 80054b0:	4639      	mov	r1, r7
 80054b2:	4640      	mov	r0, r8
 80054b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054b8:	4798      	blx	r3
 80054ba:	2800      	cmp	r0, #0
 80054bc:	f43f aedf 	beq.w	800527e <_scanf_float+0x4a>
 80054c0:	e6ea      	b.n	8005298 <_scanf_float+0x64>
 80054c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c6:	463a      	mov	r2, r7
 80054c8:	4640      	mov	r0, r8
 80054ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ce:	4798      	blx	r3
 80054d0:	6923      	ldr	r3, [r4, #16]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	6123      	str	r3, [r4, #16]
 80054d6:	e6ec      	b.n	80052b2 <_scanf_float+0x7e>
 80054d8:	1e6b      	subs	r3, r5, #1
 80054da:	2b06      	cmp	r3, #6
 80054dc:	d825      	bhi.n	800552a <_scanf_float+0x2f6>
 80054de:	2d02      	cmp	r5, #2
 80054e0:	d836      	bhi.n	8005550 <_scanf_float+0x31c>
 80054e2:	455e      	cmp	r6, fp
 80054e4:	f67f aee8 	bls.w	80052b8 <_scanf_float+0x84>
 80054e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ec:	463a      	mov	r2, r7
 80054ee:	4640      	mov	r0, r8
 80054f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054f4:	4798      	blx	r3
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	e7f1      	b.n	80054e2 <_scanf_float+0x2ae>
 80054fe:	9802      	ldr	r0, [sp, #8]
 8005500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005504:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005508:	463a      	mov	r2, r7
 800550a:	9002      	str	r0, [sp, #8]
 800550c:	4640      	mov	r0, r8
 800550e:	4798      	blx	r3
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	3b01      	subs	r3, #1
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800551a:	fa5f fa8a 	uxtb.w	sl, sl
 800551e:	f1ba 0f02 	cmp.w	sl, #2
 8005522:	d1ec      	bne.n	80054fe <_scanf_float+0x2ca>
 8005524:	3d03      	subs	r5, #3
 8005526:	b2ed      	uxtb	r5, r5
 8005528:	1b76      	subs	r6, r6, r5
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	05da      	lsls	r2, r3, #23
 800552e:	d52f      	bpl.n	8005590 <_scanf_float+0x35c>
 8005530:	055b      	lsls	r3, r3, #21
 8005532:	d510      	bpl.n	8005556 <_scanf_float+0x322>
 8005534:	455e      	cmp	r6, fp
 8005536:	f67f aebf 	bls.w	80052b8 <_scanf_float+0x84>
 800553a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800553e:	463a      	mov	r2, r7
 8005540:	4640      	mov	r0, r8
 8005542:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005546:	4798      	blx	r3
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	3b01      	subs	r3, #1
 800554c:	6123      	str	r3, [r4, #16]
 800554e:	e7f1      	b.n	8005534 <_scanf_float+0x300>
 8005550:	46aa      	mov	sl, r5
 8005552:	9602      	str	r6, [sp, #8]
 8005554:	e7df      	b.n	8005516 <_scanf_float+0x2e2>
 8005556:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	2965      	cmp	r1, #101	; 0x65
 800555e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005562:	f106 35ff 	add.w	r5, r6, #4294967295
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	d00c      	beq.n	8005584 <_scanf_float+0x350>
 800556a:	2945      	cmp	r1, #69	; 0x45
 800556c:	d00a      	beq.n	8005584 <_scanf_float+0x350>
 800556e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005572:	463a      	mov	r2, r7
 8005574:	4640      	mov	r0, r8
 8005576:	4798      	blx	r3
 8005578:	6923      	ldr	r3, [r4, #16]
 800557a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800557e:	3b01      	subs	r3, #1
 8005580:	1eb5      	subs	r5, r6, #2
 8005582:	6123      	str	r3, [r4, #16]
 8005584:	463a      	mov	r2, r7
 8005586:	4640      	mov	r0, r8
 8005588:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800558c:	4798      	blx	r3
 800558e:	462e      	mov	r6, r5
 8005590:	6825      	ldr	r5, [r4, #0]
 8005592:	f015 0510 	ands.w	r5, r5, #16
 8005596:	d155      	bne.n	8005644 <_scanf_float+0x410>
 8005598:	7035      	strb	r5, [r6, #0]
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d11d      	bne.n	80055e2 <_scanf_float+0x3ae>
 80055a6:	9b01      	ldr	r3, [sp, #4]
 80055a8:	454b      	cmp	r3, r9
 80055aa:	eba3 0209 	sub.w	r2, r3, r9
 80055ae:	d125      	bne.n	80055fc <_scanf_float+0x3c8>
 80055b0:	2200      	movs	r2, #0
 80055b2:	4659      	mov	r1, fp
 80055b4:	4640      	mov	r0, r8
 80055b6:	f002 fc23 	bl	8007e00 <_strtod_r>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	f8d4 c000 	ldr.w	ip, [r4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f01c 0f02 	tst.w	ip, #2
 80055c6:	4606      	mov	r6, r0
 80055c8:	460f      	mov	r7, r1
 80055ca:	f103 0204 	add.w	r2, r3, #4
 80055ce:	d020      	beq.n	8005612 <_scanf_float+0x3de>
 80055d0:	9903      	ldr	r1, [sp, #12]
 80055d2:	600a      	str	r2, [r1, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	e9c3 6700 	strd	r6, r7, [r3]
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60e3      	str	r3, [r4, #12]
 80055e0:	e66b      	b.n	80052ba <_scanf_float+0x86>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0e3      	beq.n	80055b0 <_scanf_float+0x37c>
 80055e8:	9905      	ldr	r1, [sp, #20]
 80055ea:	230a      	movs	r3, #10
 80055ec:	462a      	mov	r2, r5
 80055ee:	4640      	mov	r0, r8
 80055f0:	3101      	adds	r1, #1
 80055f2:	f002 fc89 	bl	8007f08 <_strtol_r>
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	9e05      	ldr	r6, [sp, #20]
 80055fa:	1ac2      	subs	r2, r0, r3
 80055fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005600:	429e      	cmp	r6, r3
 8005602:	bf28      	it	cs
 8005604:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005608:	4630      	mov	r0, r6
 800560a:	490f      	ldr	r1, [pc, #60]	; (8005648 <_scanf_float+0x414>)
 800560c:	f000 f8e2 	bl	80057d4 <siprintf>
 8005610:	e7ce      	b.n	80055b0 <_scanf_float+0x37c>
 8005612:	f01c 0f04 	tst.w	ip, #4
 8005616:	d1db      	bne.n	80055d0 <_scanf_float+0x39c>
 8005618:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800561c:	f8cc 2000 	str.w	r2, [ip]
 8005620:	f8d3 8000 	ldr.w	r8, [r3]
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	f7fb f9f0 	bl	8000a0c <__aeabi_dcmpun>
 800562c:	b128      	cbz	r0, 800563a <_scanf_float+0x406>
 800562e:	4807      	ldr	r0, [pc, #28]	; (800564c <_scanf_float+0x418>)
 8005630:	f000 f9c2 	bl	80059b8 <nanf>
 8005634:	f8c8 0000 	str.w	r0, [r8]
 8005638:	e7cf      	b.n	80055da <_scanf_float+0x3a6>
 800563a:	4630      	mov	r0, r6
 800563c:	4639      	mov	r1, r7
 800563e:	f7fb fa43 	bl	8000ac8 <__aeabi_d2f>
 8005642:	e7f7      	b.n	8005634 <_scanf_float+0x400>
 8005644:	2500      	movs	r5, #0
 8005646:	e638      	b.n	80052ba <_scanf_float+0x86>
 8005648:	0800915e 	.word	0x0800915e
 800564c:	080094f5 	.word	0x080094f5

08005650 <std>:
 8005650:	2300      	movs	r3, #0
 8005652:	b510      	push	{r4, lr}
 8005654:	4604      	mov	r4, r0
 8005656:	e9c0 3300 	strd	r3, r3, [r0]
 800565a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565e:	6083      	str	r3, [r0, #8]
 8005660:	8181      	strh	r1, [r0, #12]
 8005662:	6643      	str	r3, [r0, #100]	; 0x64
 8005664:	81c2      	strh	r2, [r0, #14]
 8005666:	6183      	str	r3, [r0, #24]
 8005668:	4619      	mov	r1, r3
 800566a:	2208      	movs	r2, #8
 800566c:	305c      	adds	r0, #92	; 0x5c
 800566e:	f000 f914 	bl	800589a <memset>
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <std+0x58>)
 8005674:	6224      	str	r4, [r4, #32]
 8005676:	6263      	str	r3, [r4, #36]	; 0x24
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <std+0x5c>)
 800567a:	62a3      	str	r3, [r4, #40]	; 0x28
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <std+0x60>)
 800567e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <std+0x64>)
 8005682:	6323      	str	r3, [r4, #48]	; 0x30
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <std+0x68>)
 8005686:	429c      	cmp	r4, r3
 8005688:	d006      	beq.n	8005698 <std+0x48>
 800568a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800568e:	4294      	cmp	r4, r2
 8005690:	d002      	beq.n	8005698 <std+0x48>
 8005692:	33d0      	adds	r3, #208	; 0xd0
 8005694:	429c      	cmp	r4, r3
 8005696:	d105      	bne.n	80056a4 <std+0x54>
 8005698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800569c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a0:	f000 b978 	b.w	8005994 <__retarget_lock_init_recursive>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	08005815 	.word	0x08005815
 80056ac:	08005837 	.word	0x08005837
 80056b0:	0800586f 	.word	0x0800586f
 80056b4:	08005893 	.word	0x08005893
 80056b8:	20000454 	.word	0x20000454

080056bc <stdio_exit_handler>:
 80056bc:	4a02      	ldr	r2, [pc, #8]	; (80056c8 <stdio_exit_handler+0xc>)
 80056be:	4903      	ldr	r1, [pc, #12]	; (80056cc <stdio_exit_handler+0x10>)
 80056c0:	4803      	ldr	r0, [pc, #12]	; (80056d0 <stdio_exit_handler+0x14>)
 80056c2:	f000 b869 	b.w	8005798 <_fwalk_sglue>
 80056c6:	bf00      	nop
 80056c8:	20000010 	.word	0x20000010
 80056cc:	080082c1 	.word	0x080082c1
 80056d0:	2000001c 	.word	0x2000001c

080056d4 <cleanup_stdio>:
 80056d4:	6841      	ldr	r1, [r0, #4]
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <cleanup_stdio+0x34>)
 80056d8:	b510      	push	{r4, lr}
 80056da:	4299      	cmp	r1, r3
 80056dc:	4604      	mov	r4, r0
 80056de:	d001      	beq.n	80056e4 <cleanup_stdio+0x10>
 80056e0:	f002 fdee 	bl	80082c0 <_fflush_r>
 80056e4:	68a1      	ldr	r1, [r4, #8]
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <cleanup_stdio+0x38>)
 80056e8:	4299      	cmp	r1, r3
 80056ea:	d002      	beq.n	80056f2 <cleanup_stdio+0x1e>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f002 fde7 	bl	80082c0 <_fflush_r>
 80056f2:	68e1      	ldr	r1, [r4, #12]
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <cleanup_stdio+0x3c>)
 80056f6:	4299      	cmp	r1, r3
 80056f8:	d004      	beq.n	8005704 <cleanup_stdio+0x30>
 80056fa:	4620      	mov	r0, r4
 80056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005700:	f002 bdde 	b.w	80082c0 <_fflush_r>
 8005704:	bd10      	pop	{r4, pc}
 8005706:	bf00      	nop
 8005708:	20000454 	.word	0x20000454
 800570c:	200004bc 	.word	0x200004bc
 8005710:	20000524 	.word	0x20000524

08005714 <global_stdio_init.part.0>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <global_stdio_init.part.0+0x30>)
 8005718:	4c0b      	ldr	r4, [pc, #44]	; (8005748 <global_stdio_init.part.0+0x34>)
 800571a:	4a0c      	ldr	r2, [pc, #48]	; (800574c <global_stdio_init.part.0+0x38>)
 800571c:	4620      	mov	r0, r4
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	2104      	movs	r1, #4
 8005722:	2200      	movs	r2, #0
 8005724:	f7ff ff94 	bl	8005650 <std>
 8005728:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800572c:	2201      	movs	r2, #1
 800572e:	2109      	movs	r1, #9
 8005730:	f7ff ff8e 	bl	8005650 <std>
 8005734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005738:	2202      	movs	r2, #2
 800573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573e:	2112      	movs	r1, #18
 8005740:	f7ff bf86 	b.w	8005650 <std>
 8005744:	2000058c 	.word	0x2000058c
 8005748:	20000454 	.word	0x20000454
 800574c:	080056bd 	.word	0x080056bd

08005750 <__sfp_lock_acquire>:
 8005750:	4801      	ldr	r0, [pc, #4]	; (8005758 <__sfp_lock_acquire+0x8>)
 8005752:	f000 b920 	b.w	8005996 <__retarget_lock_acquire_recursive>
 8005756:	bf00      	nop
 8005758:	20000595 	.word	0x20000595

0800575c <__sfp_lock_release>:
 800575c:	4801      	ldr	r0, [pc, #4]	; (8005764 <__sfp_lock_release+0x8>)
 800575e:	f000 b91b 	b.w	8005998 <__retarget_lock_release_recursive>
 8005762:	bf00      	nop
 8005764:	20000595 	.word	0x20000595

08005768 <__sinit>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4604      	mov	r4, r0
 800576c:	f7ff fff0 	bl	8005750 <__sfp_lock_acquire>
 8005770:	6a23      	ldr	r3, [r4, #32]
 8005772:	b11b      	cbz	r3, 800577c <__sinit+0x14>
 8005774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005778:	f7ff bff0 	b.w	800575c <__sfp_lock_release>
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <__sinit+0x28>)
 800577e:	6223      	str	r3, [r4, #32]
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <__sinit+0x2c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f5      	bne.n	8005774 <__sinit+0xc>
 8005788:	f7ff ffc4 	bl	8005714 <global_stdio_init.part.0>
 800578c:	e7f2      	b.n	8005774 <__sinit+0xc>
 800578e:	bf00      	nop
 8005790:	080056d5 	.word	0x080056d5
 8005794:	2000058c 	.word	0x2000058c

08005798 <_fwalk_sglue>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	4607      	mov	r7, r0
 800579e:	4688      	mov	r8, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	2600      	movs	r6, #0
 80057a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a8:	f1b9 0901 	subs.w	r9, r9, #1
 80057ac:	d505      	bpl.n	80057ba <_fwalk_sglue+0x22>
 80057ae:	6824      	ldr	r4, [r4, #0]
 80057b0:	2c00      	cmp	r4, #0
 80057b2:	d1f7      	bne.n	80057a4 <_fwalk_sglue+0xc>
 80057b4:	4630      	mov	r0, r6
 80057b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d907      	bls.n	80057d0 <_fwalk_sglue+0x38>
 80057c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c4:	3301      	adds	r3, #1
 80057c6:	d003      	beq.n	80057d0 <_fwalk_sglue+0x38>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	4306      	orrs	r6, r0
 80057d0:	3568      	adds	r5, #104	; 0x68
 80057d2:	e7e9      	b.n	80057a8 <_fwalk_sglue+0x10>

080057d4 <siprintf>:
 80057d4:	b40e      	push	{r1, r2, r3}
 80057d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057da:	b500      	push	{lr}
 80057dc:	b09c      	sub	sp, #112	; 0x70
 80057de:	ab1d      	add	r3, sp, #116	; 0x74
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	9006      	str	r0, [sp, #24]
 80057e4:	9107      	str	r1, [sp, #28]
 80057e6:	9104      	str	r1, [sp, #16]
 80057e8:	4808      	ldr	r0, [pc, #32]	; (800580c <siprintf+0x38>)
 80057ea:	4909      	ldr	r1, [pc, #36]	; (8005810 <siprintf+0x3c>)
 80057ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f0:	9105      	str	r1, [sp, #20]
 80057f2:	6800      	ldr	r0, [r0, #0]
 80057f4:	a902      	add	r1, sp, #8
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	f002 fbe2 	bl	8007fc0 <_svfiprintf_r>
 80057fc:	2200      	movs	r2, #0
 80057fe:	9b02      	ldr	r3, [sp, #8]
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	b01c      	add	sp, #112	; 0x70
 8005804:	f85d eb04 	ldr.w	lr, [sp], #4
 8005808:	b003      	add	sp, #12
 800580a:	4770      	bx	lr
 800580c:	20000068 	.word	0x20000068
 8005810:	ffff0208 	.word	0xffff0208

08005814 <__sread>:
 8005814:	b510      	push	{r4, lr}
 8005816:	460c      	mov	r4, r1
 8005818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581c:	f000 f86c 	bl	80058f8 <_read_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	bfab      	itete	ge
 8005824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005826:	89a3      	ldrhlt	r3, [r4, #12]
 8005828:	181b      	addge	r3, r3, r0
 800582a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800582e:	bfac      	ite	ge
 8005830:	6563      	strge	r3, [r4, #84]	; 0x54
 8005832:	81a3      	strhlt	r3, [r4, #12]
 8005834:	bd10      	pop	{r4, pc}

08005836 <__swrite>:
 8005836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583a:	461f      	mov	r7, r3
 800583c:	898b      	ldrh	r3, [r1, #12]
 800583e:	4605      	mov	r5, r0
 8005840:	05db      	lsls	r3, r3, #23
 8005842:	460c      	mov	r4, r1
 8005844:	4616      	mov	r6, r2
 8005846:	d505      	bpl.n	8005854 <__swrite+0x1e>
 8005848:	2302      	movs	r3, #2
 800584a:	2200      	movs	r2, #0
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	f000 f840 	bl	80058d4 <_lseek_r>
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	4632      	mov	r2, r6
 8005858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	4628      	mov	r0, r5
 8005860:	463b      	mov	r3, r7
 8005862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586a:	f000 b857 	b.w	800591c <_write_r>

0800586e <__sseek>:
 800586e:	b510      	push	{r4, lr}
 8005870:	460c      	mov	r4, r1
 8005872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005876:	f000 f82d 	bl	80058d4 <_lseek_r>
 800587a:	1c43      	adds	r3, r0, #1
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	bf15      	itete	ne
 8005880:	6560      	strne	r0, [r4, #84]	; 0x54
 8005882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800588a:	81a3      	strheq	r3, [r4, #12]
 800588c:	bf18      	it	ne
 800588e:	81a3      	strhne	r3, [r4, #12]
 8005890:	bd10      	pop	{r4, pc}

08005892 <__sclose>:
 8005892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005896:	f000 b80d 	b.w	80058b4 <_close_r>

0800589a <memset>:
 800589a:	4603      	mov	r3, r0
 800589c:	4402      	add	r2, r0
 800589e:	4293      	cmp	r3, r2
 80058a0:	d100      	bne.n	80058a4 <memset+0xa>
 80058a2:	4770      	bx	lr
 80058a4:	f803 1b01 	strb.w	r1, [r3], #1
 80058a8:	e7f9      	b.n	800589e <memset+0x4>
	...

080058ac <_localeconv_r>:
 80058ac:	4800      	ldr	r0, [pc, #0]	; (80058b0 <_localeconv_r+0x4>)
 80058ae:	4770      	bx	lr
 80058b0:	2000015c 	.word	0x2000015c

080058b4 <_close_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	2300      	movs	r3, #0
 80058b8:	4d05      	ldr	r5, [pc, #20]	; (80058d0 <_close_r+0x1c>)
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	f7fc f912 	bl	8001ae8 <_close>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_close_r+0x1a>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_close_r+0x1a>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	20000590 	.word	0x20000590

080058d4 <_lseek_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	4d05      	ldr	r5, [pc, #20]	; (80058f4 <_lseek_r+0x20>)
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fc f924 	bl	8001b30 <_lseek>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_lseek_r+0x1e>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_lseek_r+0x1e>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20000590 	.word	0x20000590

080058f8 <_read_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	2200      	movs	r2, #0
 8005902:	4d05      	ldr	r5, [pc, #20]	; (8005918 <_read_r+0x20>)
 8005904:	602a      	str	r2, [r5, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	f7fc f8b5 	bl	8001a76 <_read>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_read_r+0x1e>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	b103      	cbz	r3, 8005916 <_read_r+0x1e>
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	20000590 	.word	0x20000590

0800591c <_write_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	2200      	movs	r2, #0
 8005926:	4d05      	ldr	r5, [pc, #20]	; (800593c <_write_r+0x20>)
 8005928:	602a      	str	r2, [r5, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	f7fc f8c0 	bl	8001ab0 <_write>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_write_r+0x1e>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_write_r+0x1e>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	20000590 	.word	0x20000590

08005940 <__errno>:
 8005940:	4b01      	ldr	r3, [pc, #4]	; (8005948 <__errno+0x8>)
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000068 	.word	0x20000068

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	2600      	movs	r6, #0
 8005950:	4d0c      	ldr	r5, [pc, #48]	; (8005984 <__libc_init_array+0x38>)
 8005952:	4c0d      	ldr	r4, [pc, #52]	; (8005988 <__libc_init_array+0x3c>)
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	42a6      	cmp	r6, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	f003 fbc2 	bl	80090e4 <_init>
 8005960:	2600      	movs	r6, #0
 8005962:	4d0a      	ldr	r5, [pc, #40]	; (800598c <__libc_init_array+0x40>)
 8005964:	4c0a      	ldr	r4, [pc, #40]	; (8005990 <__libc_init_array+0x44>)
 8005966:	1b64      	subs	r4, r4, r5
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	42a6      	cmp	r6, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f855 3b04 	ldr.w	r3, [r5], #4
 8005974:	4798      	blx	r3
 8005976:	3601      	adds	r6, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f855 3b04 	ldr.w	r3, [r5], #4
 800597e:	4798      	blx	r3
 8005980:	3601      	adds	r6, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	08009558 	.word	0x08009558
 8005988:	08009558 	.word	0x08009558
 800598c:	08009558 	.word	0x08009558
 8005990:	0800955c 	.word	0x0800955c

08005994 <__retarget_lock_init_recursive>:
 8005994:	4770      	bx	lr

08005996 <__retarget_lock_acquire_recursive>:
 8005996:	4770      	bx	lr

08005998 <__retarget_lock_release_recursive>:
 8005998:	4770      	bx	lr

0800599a <memchr>:
 800599a:	4603      	mov	r3, r0
 800599c:	b510      	push	{r4, lr}
 800599e:	b2c9      	uxtb	r1, r1
 80059a0:	4402      	add	r2, r0
 80059a2:	4293      	cmp	r3, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	d101      	bne.n	80059ac <memchr+0x12>
 80059a8:	2000      	movs	r0, #0
 80059aa:	e003      	b.n	80059b4 <memchr+0x1a>
 80059ac:	7804      	ldrb	r4, [r0, #0]
 80059ae:	3301      	adds	r3, #1
 80059b0:	428c      	cmp	r4, r1
 80059b2:	d1f6      	bne.n	80059a2 <memchr+0x8>
 80059b4:	bd10      	pop	{r4, pc}
	...

080059b8 <nanf>:
 80059b8:	4800      	ldr	r0, [pc, #0]	; (80059bc <nanf+0x4>)
 80059ba:	4770      	bx	lr
 80059bc:	7fc00000 	.word	0x7fc00000

080059c0 <quorem>:
 80059c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	6903      	ldr	r3, [r0, #16]
 80059c6:	690c      	ldr	r4, [r1, #16]
 80059c8:	4607      	mov	r7, r0
 80059ca:	42a3      	cmp	r3, r4
 80059cc:	db7f      	blt.n	8005ace <quorem+0x10e>
 80059ce:	3c01      	subs	r4, #1
 80059d0:	f100 0514 	add.w	r5, r0, #20
 80059d4:	f101 0814 	add.w	r8, r1, #20
 80059d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059e6:	3301      	adds	r3, #1
 80059e8:	429a      	cmp	r2, r3
 80059ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80059ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059f6:	d331      	bcc.n	8005a5c <quorem+0x9c>
 80059f8:	f04f 0e00 	mov.w	lr, #0
 80059fc:	4640      	mov	r0, r8
 80059fe:	46ac      	mov	ip, r5
 8005a00:	46f2      	mov	sl, lr
 8005a02:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a06:	b293      	uxth	r3, r2
 8005a08:	fb06 e303 	mla	r3, r6, r3, lr
 8005a0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a10:	0c1a      	lsrs	r2, r3, #16
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	fb06 220e 	mla	r2, r6, lr, r2
 8005a18:	ebaa 0303 	sub.w	r3, sl, r3
 8005a1c:	f8dc a000 	ldr.w	sl, [ip]
 8005a20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a24:	fa1f fa8a 	uxth.w	sl, sl
 8005a28:	4453      	add	r3, sl
 8005a2a:	f8dc a000 	ldr.w	sl, [ip]
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a3e:	4581      	cmp	r9, r0
 8005a40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a44:	f84c 3b04 	str.w	r3, [ip], #4
 8005a48:	d2db      	bcs.n	8005a02 <quorem+0x42>
 8005a4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a4e:	b92b      	cbnz	r3, 8005a5c <quorem+0x9c>
 8005a50:	9b01      	ldr	r3, [sp, #4]
 8005a52:	3b04      	subs	r3, #4
 8005a54:	429d      	cmp	r5, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	d32d      	bcc.n	8005ab6 <quorem+0xf6>
 8005a5a:	613c      	str	r4, [r7, #16]
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f001 f9df 	bl	8006e20 <__mcmp>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	db23      	blt.n	8005aae <quorem+0xee>
 8005a66:	4629      	mov	r1, r5
 8005a68:	2000      	movs	r0, #0
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a70:	f8d1 c000 	ldr.w	ip, [r1]
 8005a74:	b293      	uxth	r3, r2
 8005a76:	1ac3      	subs	r3, r0, r3
 8005a78:	0c12      	lsrs	r2, r2, #16
 8005a7a:	fa1f f08c 	uxth.w	r0, ip
 8005a7e:	4403      	add	r3, r0
 8005a80:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a8e:	45c1      	cmp	r9, r8
 8005a90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a94:	f841 3b04 	str.w	r3, [r1], #4
 8005a98:	d2e8      	bcs.n	8005a6c <quorem+0xac>
 8005a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aa2:	b922      	cbnz	r2, 8005aae <quorem+0xee>
 8005aa4:	3b04      	subs	r3, #4
 8005aa6:	429d      	cmp	r5, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	d30a      	bcc.n	8005ac2 <quorem+0x102>
 8005aac:	613c      	str	r4, [r7, #16]
 8005aae:	4630      	mov	r0, r6
 8005ab0:	b003      	add	sp, #12
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	3b04      	subs	r3, #4
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	d1cd      	bne.n	8005a5a <quorem+0x9a>
 8005abe:	3c01      	subs	r4, #1
 8005ac0:	e7c8      	b.n	8005a54 <quorem+0x94>
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d1f0      	bne.n	8005aac <quorem+0xec>
 8005aca:	3c01      	subs	r4, #1
 8005acc:	e7eb      	b.n	8005aa6 <quorem+0xe6>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e7ee      	b.n	8005ab0 <quorem+0xf0>
 8005ad2:	0000      	movs	r0, r0
 8005ad4:	0000      	movs	r0, r0
	...

08005ad8 <_dtoa_r>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	4616      	mov	r6, r2
 8005ade:	461f      	mov	r7, r3
 8005ae0:	69c4      	ldr	r4, [r0, #28]
 8005ae2:	b099      	sub	sp, #100	; 0x64
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005aea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005aee:	b974      	cbnz	r4, 8005b0e <_dtoa_r+0x36>
 8005af0:	2010      	movs	r0, #16
 8005af2:	f000 fe1d 	bl	8006730 <malloc>
 8005af6:	4602      	mov	r2, r0
 8005af8:	61e8      	str	r0, [r5, #28]
 8005afa:	b920      	cbnz	r0, 8005b06 <_dtoa_r+0x2e>
 8005afc:	21ef      	movs	r1, #239	; 0xef
 8005afe:	4bac      	ldr	r3, [pc, #688]	; (8005db0 <_dtoa_r+0x2d8>)
 8005b00:	48ac      	ldr	r0, [pc, #688]	; (8005db4 <_dtoa_r+0x2dc>)
 8005b02:	f002 fc55 	bl	80083b0 <__assert_func>
 8005b06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b0a:	6004      	str	r4, [r0, #0]
 8005b0c:	60c4      	str	r4, [r0, #12]
 8005b0e:	69eb      	ldr	r3, [r5, #28]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	b151      	cbz	r1, 8005b2a <_dtoa_r+0x52>
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	2301      	movs	r3, #1
 8005b18:	4093      	lsls	r3, r2
 8005b1a:	604a      	str	r2, [r1, #4]
 8005b1c:	608b      	str	r3, [r1, #8]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 fefa 	bl	8006918 <_Bfree>
 8005b24:	2200      	movs	r2, #0
 8005b26:	69eb      	ldr	r3, [r5, #28]
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	1e3b      	subs	r3, r7, #0
 8005b2c:	bfaf      	iteee	ge
 8005b2e:	2300      	movge	r3, #0
 8005b30:	2201      	movlt	r2, #1
 8005b32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b36:	9305      	strlt	r3, [sp, #20]
 8005b38:	bfa8      	it	ge
 8005b3a:	f8c8 3000 	strge.w	r3, [r8]
 8005b3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b42:	4b9d      	ldr	r3, [pc, #628]	; (8005db8 <_dtoa_r+0x2e0>)
 8005b44:	bfb8      	it	lt
 8005b46:	f8c8 2000 	strlt.w	r2, [r8]
 8005b4a:	ea33 0309 	bics.w	r3, r3, r9
 8005b4e:	d119      	bne.n	8005b84 <_dtoa_r+0xac>
 8005b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b5c:	4333      	orrs	r3, r6
 8005b5e:	f000 8589 	beq.w	8006674 <_dtoa_r+0xb9c>
 8005b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b64:	b953      	cbnz	r3, 8005b7c <_dtoa_r+0xa4>
 8005b66:	4b95      	ldr	r3, [pc, #596]	; (8005dbc <_dtoa_r+0x2e4>)
 8005b68:	e023      	b.n	8005bb2 <_dtoa_r+0xda>
 8005b6a:	4b95      	ldr	r3, [pc, #596]	; (8005dc0 <_dtoa_r+0x2e8>)
 8005b6c:	9303      	str	r3, [sp, #12]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	9803      	ldr	r0, [sp, #12]
 8005b76:	b019      	add	sp, #100	; 0x64
 8005b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7c:	4b8f      	ldr	r3, [pc, #572]	; (8005dbc <_dtoa_r+0x2e4>)
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	3303      	adds	r3, #3
 8005b82:	e7f5      	b.n	8005b70 <_dtoa_r+0x98>
 8005b84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b90:	2200      	movs	r2, #0
 8005b92:	2300      	movs	r3, #0
 8005b94:	f7fa ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8005b98:	4680      	mov	r8, r0
 8005b9a:	b160      	cbz	r0, 8005bb6 <_dtoa_r+0xde>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8562 	beq.w	800666e <_dtoa_r+0xb96>
 8005baa:	4b86      	ldr	r3, [pc, #536]	; (8005dc4 <_dtoa_r+0x2ec>)
 8005bac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	9303      	str	r3, [sp, #12]
 8005bb4:	e7de      	b.n	8005b74 <_dtoa_r+0x9c>
 8005bb6:	ab16      	add	r3, sp, #88	; 0x58
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	ab17      	add	r3, sp, #92	; 0x5c
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bc4:	f001 fa3c 	bl	8007040 <__d2b>
 8005bc8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005bcc:	4682      	mov	sl, r0
 8005bce:	2c00      	cmp	r4, #0
 8005bd0:	d07e      	beq.n	8005cd0 <_dtoa_r+0x1f8>
 8005bd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005be4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005be8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005bec:	4619      	mov	r1, r3
 8005bee:	2200      	movs	r2, #0
 8005bf0:	4b75      	ldr	r3, [pc, #468]	; (8005dc8 <_dtoa_r+0x2f0>)
 8005bf2:	f7fa fab9 	bl	8000168 <__aeabi_dsub>
 8005bf6:	a368      	add	r3, pc, #416	; (adr r3, 8005d98 <_dtoa_r+0x2c0>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f7fa fc6c 	bl	80004d8 <__aeabi_dmul>
 8005c00:	a367      	add	r3, pc, #412	; (adr r3, 8005da0 <_dtoa_r+0x2c8>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fab1 	bl	800016c <__adddf3>
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	460f      	mov	r7, r1
 8005c10:	f7fa fbf8 	bl	8000404 <__aeabi_i2d>
 8005c14:	a364      	add	r3, pc, #400	; (adr r3, 8005da8 <_dtoa_r+0x2d0>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa fc5d 	bl	80004d8 <__aeabi_dmul>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4630      	mov	r0, r6
 8005c24:	4639      	mov	r1, r7
 8005c26:	f7fa faa1 	bl	800016c <__adddf3>
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460f      	mov	r7, r1
 8005c2e:	f7fa ff03 	bl	8000a38 <__aeabi_d2iz>
 8005c32:	2200      	movs	r2, #0
 8005c34:	4683      	mov	fp, r0
 8005c36:	2300      	movs	r3, #0
 8005c38:	4630      	mov	r0, r6
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	f7fa febe 	bl	80009bc <__aeabi_dcmplt>
 8005c40:	b148      	cbz	r0, 8005c56 <_dtoa_r+0x17e>
 8005c42:	4658      	mov	r0, fp
 8005c44:	f7fa fbde 	bl	8000404 <__aeabi_i2d>
 8005c48:	4632      	mov	r2, r6
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	f7fa feac 	bl	80009a8 <__aeabi_dcmpeq>
 8005c50:	b908      	cbnz	r0, 8005c56 <_dtoa_r+0x17e>
 8005c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c56:	f1bb 0f16 	cmp.w	fp, #22
 8005c5a:	d857      	bhi.n	8005d0c <_dtoa_r+0x234>
 8005c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c60:	4b5a      	ldr	r3, [pc, #360]	; (8005dcc <_dtoa_r+0x2f4>)
 8005c62:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa fea7 	bl	80009bc <__aeabi_dcmplt>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d04e      	beq.n	8005d10 <_dtoa_r+0x238>
 8005c72:	2300      	movs	r3, #0
 8005c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c7c:	1b1b      	subs	r3, r3, r4
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	bf46      	itte	mi
 8005c82:	f1c3 0901 	rsbmi	r9, r3, #1
 8005c86:	2300      	movmi	r3, #0
 8005c88:	f04f 0900 	movpl.w	r9, #0
 8005c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c8e:	bf48      	it	mi
 8005c90:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c92:	f1bb 0f00 	cmp.w	fp, #0
 8005c96:	db3d      	blt.n	8005d14 <_dtoa_r+0x23c>
 8005c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005c9e:	445b      	add	r3, fp
 8005ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca8:	2b09      	cmp	r3, #9
 8005caa:	d867      	bhi.n	8005d7c <_dtoa_r+0x2a4>
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	bfc4      	itt	gt
 8005cb0:	3b04      	subgt	r3, #4
 8005cb2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cb6:	bfc8      	it	gt
 8005cb8:	2400      	movgt	r4, #0
 8005cba:	f1a3 0302 	sub.w	r3, r3, #2
 8005cbe:	bfd8      	it	le
 8005cc0:	2401      	movle	r4, #1
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	f200 8086 	bhi.w	8005dd4 <_dtoa_r+0x2fc>
 8005cc8:	e8df f003 	tbb	[pc, r3]
 8005ccc:	5637392c 	.word	0x5637392c
 8005cd0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005cd4:	441c      	add	r4, r3
 8005cd6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	bfc1      	itttt	gt
 8005cde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ce2:	fa09 f903 	lslgt.w	r9, r9, r3
 8005ce6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005cea:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005cee:	bfd6      	itet	le
 8005cf0:	f1c3 0320 	rsble	r3, r3, #32
 8005cf4:	ea49 0003 	orrgt.w	r0, r9, r3
 8005cf8:	fa06 f003 	lslle.w	r0, r6, r3
 8005cfc:	f7fa fb72 	bl	80003e4 <__aeabi_ui2d>
 8005d00:	2201      	movs	r2, #1
 8005d02:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005d06:	3c01      	subs	r4, #1
 8005d08:	9213      	str	r2, [sp, #76]	; 0x4c
 8005d0a:	e76f      	b.n	8005bec <_dtoa_r+0x114>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e7b3      	b.n	8005c78 <_dtoa_r+0x1a0>
 8005d10:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d12:	e7b2      	b.n	8005c7a <_dtoa_r+0x1a2>
 8005d14:	f1cb 0300 	rsb	r3, fp, #0
 8005d18:	930a      	str	r3, [sp, #40]	; 0x28
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	eba9 090b 	sub.w	r9, r9, fp
 8005d20:	930e      	str	r3, [sp, #56]	; 0x38
 8005d22:	e7c0      	b.n	8005ca6 <_dtoa_r+0x1ce>
 8005d24:	2300      	movs	r3, #0
 8005d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dc55      	bgt.n	8005dda <_dtoa_r+0x302>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	461a      	mov	r2, r3
 8005d32:	9306      	str	r3, [sp, #24]
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d38:	e00b      	b.n	8005d52 <_dtoa_r+0x27a>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e7f3      	b.n	8005d26 <_dtoa_r+0x24e>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d44:	445b      	add	r3, fp
 8005d46:	9306      	str	r3, [sp, #24]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	9308      	str	r3, [sp, #32]
 8005d4e:	bfb8      	it	lt
 8005d50:	2301      	movlt	r3, #1
 8005d52:	2100      	movs	r1, #0
 8005d54:	2204      	movs	r2, #4
 8005d56:	69e8      	ldr	r0, [r5, #28]
 8005d58:	f102 0614 	add.w	r6, r2, #20
 8005d5c:	429e      	cmp	r6, r3
 8005d5e:	d940      	bls.n	8005de2 <_dtoa_r+0x30a>
 8005d60:	6041      	str	r1, [r0, #4]
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 fd98 	bl	8006898 <_Balloc>
 8005d68:	9003      	str	r0, [sp, #12]
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d13c      	bne.n	8005de8 <_dtoa_r+0x310>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	f240 11af 	movw	r1, #431	; 0x1af
 8005d74:	4b16      	ldr	r3, [pc, #88]	; (8005dd0 <_dtoa_r+0x2f8>)
 8005d76:	e6c3      	b.n	8005b00 <_dtoa_r+0x28>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e7e1      	b.n	8005d40 <_dtoa_r+0x268>
 8005d7c:	2401      	movs	r4, #1
 8005d7e:	2300      	movs	r3, #0
 8005d80:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d82:	9322      	str	r3, [sp, #136]	; 0x88
 8005d84:	f04f 33ff 	mov.w	r3, #4294967295
 8005d88:	2200      	movs	r2, #0
 8005d8a:	9306      	str	r3, [sp, #24]
 8005d8c:	9308      	str	r3, [sp, #32]
 8005d8e:	2312      	movs	r3, #18
 8005d90:	e7d1      	b.n	8005d36 <_dtoa_r+0x25e>
 8005d92:	bf00      	nop
 8005d94:	f3af 8000 	nop.w
 8005d98:	636f4361 	.word	0x636f4361
 8005d9c:	3fd287a7 	.word	0x3fd287a7
 8005da0:	8b60c8b3 	.word	0x8b60c8b3
 8005da4:	3fc68a28 	.word	0x3fc68a28
 8005da8:	509f79fb 	.word	0x509f79fb
 8005dac:	3fd34413 	.word	0x3fd34413
 8005db0:	08009170 	.word	0x08009170
 8005db4:	08009187 	.word	0x08009187
 8005db8:	7ff00000 	.word	0x7ff00000
 8005dbc:	0800916c 	.word	0x0800916c
 8005dc0:	08009163 	.word	0x08009163
 8005dc4:	0800913b 	.word	0x0800913b
 8005dc8:	3ff80000 	.word	0x3ff80000
 8005dcc:	08009278 	.word	0x08009278
 8005dd0:	080091df 	.word	0x080091df
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd8:	e7d4      	b.n	8005d84 <_dtoa_r+0x2ac>
 8005dda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ddc:	9306      	str	r3, [sp, #24]
 8005dde:	9308      	str	r3, [sp, #32]
 8005de0:	e7b7      	b.n	8005d52 <_dtoa_r+0x27a>
 8005de2:	3101      	adds	r1, #1
 8005de4:	0052      	lsls	r2, r2, #1
 8005de6:	e7b7      	b.n	8005d58 <_dtoa_r+0x280>
 8005de8:	69eb      	ldr	r3, [r5, #28]
 8005dea:	9a03      	ldr	r2, [sp, #12]
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	9b08      	ldr	r3, [sp, #32]
 8005df0:	2b0e      	cmp	r3, #14
 8005df2:	f200 80a8 	bhi.w	8005f46 <_dtoa_r+0x46e>
 8005df6:	2c00      	cmp	r4, #0
 8005df8:	f000 80a5 	beq.w	8005f46 <_dtoa_r+0x46e>
 8005dfc:	f1bb 0f00 	cmp.w	fp, #0
 8005e00:	dd34      	ble.n	8005e6c <_dtoa_r+0x394>
 8005e02:	4b9a      	ldr	r3, [pc, #616]	; (800606c <_dtoa_r+0x594>)
 8005e04:	f00b 020f 	and.w	r2, fp, #15
 8005e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e18:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005e1c:	d016      	beq.n	8005e4c <_dtoa_r+0x374>
 8005e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e22:	4b93      	ldr	r3, [pc, #588]	; (8006070 <_dtoa_r+0x598>)
 8005e24:	2703      	movs	r7, #3
 8005e26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e2a:	f7fa fc7f 	bl	800072c <__aeabi_ddiv>
 8005e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e32:	f004 040f 	and.w	r4, r4, #15
 8005e36:	4e8e      	ldr	r6, [pc, #568]	; (8006070 <_dtoa_r+0x598>)
 8005e38:	b954      	cbnz	r4, 8005e50 <_dtoa_r+0x378>
 8005e3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e42:	f7fa fc73 	bl	800072c <__aeabi_ddiv>
 8005e46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e4a:	e029      	b.n	8005ea0 <_dtoa_r+0x3c8>
 8005e4c:	2702      	movs	r7, #2
 8005e4e:	e7f2      	b.n	8005e36 <_dtoa_r+0x35e>
 8005e50:	07e1      	lsls	r1, r4, #31
 8005e52:	d508      	bpl.n	8005e66 <_dtoa_r+0x38e>
 8005e54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e5c:	f7fa fb3c 	bl	80004d8 <__aeabi_dmul>
 8005e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e64:	3701      	adds	r7, #1
 8005e66:	1064      	asrs	r4, r4, #1
 8005e68:	3608      	adds	r6, #8
 8005e6a:	e7e5      	b.n	8005e38 <_dtoa_r+0x360>
 8005e6c:	f000 80a5 	beq.w	8005fba <_dtoa_r+0x4e2>
 8005e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e74:	f1cb 0400 	rsb	r4, fp, #0
 8005e78:	4b7c      	ldr	r3, [pc, #496]	; (800606c <_dtoa_r+0x594>)
 8005e7a:	f004 020f 	and.w	r2, r4, #15
 8005e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa fb27 	bl	80004d8 <__aeabi_dmul>
 8005e8a:	2702      	movs	r7, #2
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e92:	4e77      	ldr	r6, [pc, #476]	; (8006070 <_dtoa_r+0x598>)
 8005e94:	1124      	asrs	r4, r4, #4
 8005e96:	2c00      	cmp	r4, #0
 8005e98:	f040 8084 	bne.w	8005fa4 <_dtoa_r+0x4cc>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1d2      	bne.n	8005e46 <_dtoa_r+0x36e>
 8005ea0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005ea4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8087 	beq.w	8005fbe <_dtoa_r+0x4e6>
 8005eb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4b6f      	ldr	r3, [pc, #444]	; (8006074 <_dtoa_r+0x59c>)
 8005eb8:	f7fa fd80 	bl	80009bc <__aeabi_dcmplt>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d07e      	beq.n	8005fbe <_dtoa_r+0x4e6>
 8005ec0:	9b08      	ldr	r3, [sp, #32]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d07b      	beq.n	8005fbe <_dtoa_r+0x4e6>
 8005ec6:	9b06      	ldr	r3, [sp, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dd38      	ble.n	8005f3e <_dtoa_r+0x466>
 8005ecc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	4b69      	ldr	r3, [pc, #420]	; (8006078 <_dtoa_r+0x5a0>)
 8005ed4:	f7fa fb00 	bl	80004d8 <__aeabi_dmul>
 8005ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005edc:	9c06      	ldr	r4, [sp, #24]
 8005ede:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005ee2:	3701      	adds	r7, #1
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7fa fa8d 	bl	8000404 <__aeabi_i2d>
 8005eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eee:	f7fa faf3 	bl	80004d8 <__aeabi_dmul>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	4b61      	ldr	r3, [pc, #388]	; (800607c <_dtoa_r+0x5a4>)
 8005ef6:	f7fa f939 	bl	800016c <__adddf3>
 8005efa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005efe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f02:	9611      	str	r6, [sp, #68]	; 0x44
 8005f04:	2c00      	cmp	r4, #0
 8005f06:	d15d      	bne.n	8005fc4 <_dtoa_r+0x4ec>
 8005f08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4b5c      	ldr	r3, [pc, #368]	; (8006080 <_dtoa_r+0x5a8>)
 8005f10:	f7fa f92a 	bl	8000168 <__aeabi_dsub>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f1c:	4633      	mov	r3, r6
 8005f1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f20:	f7fa fd6a 	bl	80009f8 <__aeabi_dcmpgt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f040 8295 	bne.w	8006454 <_dtoa_r+0x97c>
 8005f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f34:	f7fa fd42 	bl	80009bc <__aeabi_dcmplt>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	f040 8289 	bne.w	8006450 <_dtoa_r+0x978>
 8005f3e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005f42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f2c0 8151 	blt.w	80061f0 <_dtoa_r+0x718>
 8005f4e:	f1bb 0f0e 	cmp.w	fp, #14
 8005f52:	f300 814d 	bgt.w	80061f0 <_dtoa_r+0x718>
 8005f56:	4b45      	ldr	r3, [pc, #276]	; (800606c <_dtoa_r+0x594>)
 8005f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f60:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f280 80da 	bge.w	8006120 <_dtoa_r+0x648>
 8005f6c:	9b08      	ldr	r3, [sp, #32]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f300 80d6 	bgt.w	8006120 <_dtoa_r+0x648>
 8005f74:	f040 826b 	bne.w	800644e <_dtoa_r+0x976>
 8005f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	4b40      	ldr	r3, [pc, #256]	; (8006080 <_dtoa_r+0x5a8>)
 8005f80:	f7fa faaa 	bl	80004d8 <__aeabi_dmul>
 8005f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f88:	f7fa fd2c 	bl	80009e4 <__aeabi_dcmpge>
 8005f8c:	9c08      	ldr	r4, [sp, #32]
 8005f8e:	4626      	mov	r6, r4
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f040 8241 	bne.w	8006418 <_dtoa_r+0x940>
 8005f96:	2331      	movs	r3, #49	; 0x31
 8005f98:	9f03      	ldr	r7, [sp, #12]
 8005f9a:	f10b 0b01 	add.w	fp, fp, #1
 8005f9e:	f807 3b01 	strb.w	r3, [r7], #1
 8005fa2:	e23d      	b.n	8006420 <_dtoa_r+0x948>
 8005fa4:	07e2      	lsls	r2, r4, #31
 8005fa6:	d505      	bpl.n	8005fb4 <_dtoa_r+0x4dc>
 8005fa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	3701      	adds	r7, #1
 8005fb4:	1064      	asrs	r4, r4, #1
 8005fb6:	3608      	adds	r6, #8
 8005fb8:	e76d      	b.n	8005e96 <_dtoa_r+0x3be>
 8005fba:	2702      	movs	r7, #2
 8005fbc:	e770      	b.n	8005ea0 <_dtoa_r+0x3c8>
 8005fbe:	46d8      	mov	r8, fp
 8005fc0:	9c08      	ldr	r4, [sp, #32]
 8005fc2:	e78f      	b.n	8005ee4 <_dtoa_r+0x40c>
 8005fc4:	9903      	ldr	r1, [sp, #12]
 8005fc6:	4b29      	ldr	r3, [pc, #164]	; (800606c <_dtoa_r+0x594>)
 8005fc8:	4421      	add	r1, r4
 8005fca:	9112      	str	r1, [sp, #72]	; 0x48
 8005fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fd2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005fd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fda:	2900      	cmp	r1, #0
 8005fdc:	d054      	beq.n	8006088 <_dtoa_r+0x5b0>
 8005fde:	2000      	movs	r0, #0
 8005fe0:	4928      	ldr	r1, [pc, #160]	; (8006084 <_dtoa_r+0x5ac>)
 8005fe2:	f7fa fba3 	bl	800072c <__aeabi_ddiv>
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	4632      	mov	r2, r6
 8005fea:	f7fa f8bd 	bl	8000168 <__aeabi_dsub>
 8005fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ff2:	9f03      	ldr	r7, [sp, #12]
 8005ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ff8:	f7fa fd1e 	bl	8000a38 <__aeabi_d2iz>
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	f7fa fa01 	bl	8000404 <__aeabi_i2d>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800600a:	f7fa f8ad 	bl	8000168 <__aeabi_dsub>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	3430      	adds	r4, #48	; 0x30
 8006014:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006018:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800601c:	f807 4b01 	strb.w	r4, [r7], #1
 8006020:	f7fa fccc 	bl	80009bc <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	d173      	bne.n	8006110 <_dtoa_r+0x638>
 8006028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800602c:	2000      	movs	r0, #0
 800602e:	4911      	ldr	r1, [pc, #68]	; (8006074 <_dtoa_r+0x59c>)
 8006030:	f7fa f89a 	bl	8000168 <__aeabi_dsub>
 8006034:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006038:	f7fa fcc0 	bl	80009bc <__aeabi_dcmplt>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 80b6 	bne.w	80061ae <_dtoa_r+0x6d6>
 8006042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006044:	429f      	cmp	r7, r3
 8006046:	f43f af7a 	beq.w	8005f3e <_dtoa_r+0x466>
 800604a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800604e:	2200      	movs	r2, #0
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <_dtoa_r+0x5a0>)
 8006052:	f7fa fa41 	bl	80004d8 <__aeabi_dmul>
 8006056:	2200      	movs	r2, #0
 8006058:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800605c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <_dtoa_r+0x5a0>)
 8006062:	f7fa fa39 	bl	80004d8 <__aeabi_dmul>
 8006066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800606a:	e7c3      	b.n	8005ff4 <_dtoa_r+0x51c>
 800606c:	08009278 	.word	0x08009278
 8006070:	08009250 	.word	0x08009250
 8006074:	3ff00000 	.word	0x3ff00000
 8006078:	40240000 	.word	0x40240000
 800607c:	401c0000 	.word	0x401c0000
 8006080:	40140000 	.word	0x40140000
 8006084:	3fe00000 	.word	0x3fe00000
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa fa24 	bl	80004d8 <__aeabi_dmul>
 8006090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006092:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006096:	9c03      	ldr	r4, [sp, #12]
 8006098:	9314      	str	r3, [sp, #80]	; 0x50
 800609a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800609e:	f7fa fccb 	bl	8000a38 <__aeabi_d2iz>
 80060a2:	9015      	str	r0, [sp, #84]	; 0x54
 80060a4:	f7fa f9ae 	bl	8000404 <__aeabi_i2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b0:	f7fa f85a 	bl	8000168 <__aeabi_dsub>
 80060b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060b6:	4606      	mov	r6, r0
 80060b8:	3330      	adds	r3, #48	; 0x30
 80060ba:	f804 3b01 	strb.w	r3, [r4], #1
 80060be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060c0:	460f      	mov	r7, r1
 80060c2:	429c      	cmp	r4, r3
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	d124      	bne.n	8006114 <_dtoa_r+0x63c>
 80060ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ce:	4baf      	ldr	r3, [pc, #700]	; (800638c <_dtoa_r+0x8b4>)
 80060d0:	f7fa f84c 	bl	800016c <__adddf3>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fc8c 	bl	80009f8 <__aeabi_dcmpgt>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d163      	bne.n	80061ac <_dtoa_r+0x6d4>
 80060e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060e8:	2000      	movs	r0, #0
 80060ea:	49a8      	ldr	r1, [pc, #672]	; (800638c <_dtoa_r+0x8b4>)
 80060ec:	f7fa f83c 	bl	8000168 <__aeabi_dsub>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fc60 	bl	80009bc <__aeabi_dcmplt>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f43f af1e 	beq.w	8005f3e <_dtoa_r+0x466>
 8006102:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006104:	1e7b      	subs	r3, r7, #1
 8006106:	9314      	str	r3, [sp, #80]	; 0x50
 8006108:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800610c:	2b30      	cmp	r3, #48	; 0x30
 800610e:	d0f8      	beq.n	8006102 <_dtoa_r+0x62a>
 8006110:	46c3      	mov	fp, r8
 8006112:	e03b      	b.n	800618c <_dtoa_r+0x6b4>
 8006114:	4b9e      	ldr	r3, [pc, #632]	; (8006390 <_dtoa_r+0x8b8>)
 8006116:	f7fa f9df 	bl	80004d8 <__aeabi_dmul>
 800611a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800611e:	e7bc      	b.n	800609a <_dtoa_r+0x5c2>
 8006120:	9f03      	ldr	r7, [sp, #12]
 8006122:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	f7fa fafd 	bl	800072c <__aeabi_ddiv>
 8006132:	f7fa fc81 	bl	8000a38 <__aeabi_d2iz>
 8006136:	4604      	mov	r4, r0
 8006138:	f7fa f964 	bl	8000404 <__aeabi_i2d>
 800613c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006140:	f7fa f9ca 	bl	80004d8 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4640      	mov	r0, r8
 800614a:	4649      	mov	r1, r9
 800614c:	f7fa f80c 	bl	8000168 <__aeabi_dsub>
 8006150:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006154:	f807 6b01 	strb.w	r6, [r7], #1
 8006158:	9e03      	ldr	r6, [sp, #12]
 800615a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800615e:	1bbe      	subs	r6, r7, r6
 8006160:	45b4      	cmp	ip, r6
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	d136      	bne.n	80061d6 <_dtoa_r+0x6fe>
 8006168:	f7fa f800 	bl	800016c <__adddf3>
 800616c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006170:	4680      	mov	r8, r0
 8006172:	4689      	mov	r9, r1
 8006174:	f7fa fc40 	bl	80009f8 <__aeabi_dcmpgt>
 8006178:	bb58      	cbnz	r0, 80061d2 <_dtoa_r+0x6fa>
 800617a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa fc11 	bl	80009a8 <__aeabi_dcmpeq>
 8006186:	b108      	cbz	r0, 800618c <_dtoa_r+0x6b4>
 8006188:	07e3      	lsls	r3, r4, #31
 800618a:	d422      	bmi.n	80061d2 <_dtoa_r+0x6fa>
 800618c:	4651      	mov	r1, sl
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fbc2 	bl	8006918 <_Bfree>
 8006194:	2300      	movs	r3, #0
 8006196:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006198:	703b      	strb	r3, [r7, #0]
 800619a:	f10b 0301 	add.w	r3, fp, #1
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f43f ace6 	beq.w	8005b74 <_dtoa_r+0x9c>
 80061a8:	601f      	str	r7, [r3, #0]
 80061aa:	e4e3      	b.n	8005b74 <_dtoa_r+0x9c>
 80061ac:	4627      	mov	r7, r4
 80061ae:	463b      	mov	r3, r7
 80061b0:	461f      	mov	r7, r3
 80061b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b6:	2a39      	cmp	r2, #57	; 0x39
 80061b8:	d107      	bne.n	80061ca <_dtoa_r+0x6f2>
 80061ba:	9a03      	ldr	r2, [sp, #12]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d1f7      	bne.n	80061b0 <_dtoa_r+0x6d8>
 80061c0:	2230      	movs	r2, #48	; 0x30
 80061c2:	9903      	ldr	r1, [sp, #12]
 80061c4:	f108 0801 	add.w	r8, r8, #1
 80061c8:	700a      	strb	r2, [r1, #0]
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	3201      	adds	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e79e      	b.n	8006110 <_dtoa_r+0x638>
 80061d2:	46d8      	mov	r8, fp
 80061d4:	e7eb      	b.n	80061ae <_dtoa_r+0x6d6>
 80061d6:	2200      	movs	r2, #0
 80061d8:	4b6d      	ldr	r3, [pc, #436]	; (8006390 <_dtoa_r+0x8b8>)
 80061da:	f7fa f97d 	bl	80004d8 <__aeabi_dmul>
 80061de:	2200      	movs	r2, #0
 80061e0:	2300      	movs	r3, #0
 80061e2:	4680      	mov	r8, r0
 80061e4:	4689      	mov	r9, r1
 80061e6:	f7fa fbdf 	bl	80009a8 <__aeabi_dcmpeq>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d09b      	beq.n	8006126 <_dtoa_r+0x64e>
 80061ee:	e7cd      	b.n	800618c <_dtoa_r+0x6b4>
 80061f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	f000 80c4 	beq.w	8006380 <_dtoa_r+0x8a8>
 80061f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	f300 80a8 	bgt.w	8006350 <_dtoa_r+0x878>
 8006200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006202:	2a00      	cmp	r2, #0
 8006204:	f000 80a0 	beq.w	8006348 <_dtoa_r+0x870>
 8006208:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800620c:	464f      	mov	r7, r9
 800620e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006212:	2101      	movs	r1, #1
 8006214:	441a      	add	r2, r3
 8006216:	4628      	mov	r0, r5
 8006218:	4499      	add	r9, r3
 800621a:	9209      	str	r2, [sp, #36]	; 0x24
 800621c:	f000 fc7c 	bl	8006b18 <__i2b>
 8006220:	4606      	mov	r6, r0
 8006222:	b15f      	cbz	r7, 800623c <_dtoa_r+0x764>
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	dd08      	ble.n	800623c <_dtoa_r+0x764>
 800622a:	42bb      	cmp	r3, r7
 800622c:	bfa8      	it	ge
 800622e:	463b      	movge	r3, r7
 8006230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006232:	eba9 0903 	sub.w	r9, r9, r3
 8006236:	1aff      	subs	r7, r7, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	9309      	str	r3, [sp, #36]	; 0x24
 800623c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623e:	b1f3      	cbz	r3, 800627e <_dtoa_r+0x7a6>
 8006240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80a0 	beq.w	8006388 <_dtoa_r+0x8b0>
 8006248:	2c00      	cmp	r4, #0
 800624a:	dd10      	ble.n	800626e <_dtoa_r+0x796>
 800624c:	4631      	mov	r1, r6
 800624e:	4622      	mov	r2, r4
 8006250:	4628      	mov	r0, r5
 8006252:	f000 fd1f 	bl	8006c94 <__pow5mult>
 8006256:	4652      	mov	r2, sl
 8006258:	4601      	mov	r1, r0
 800625a:	4606      	mov	r6, r0
 800625c:	4628      	mov	r0, r5
 800625e:	f000 fc71 	bl	8006b44 <__multiply>
 8006262:	4680      	mov	r8, r0
 8006264:	4651      	mov	r1, sl
 8006266:	4628      	mov	r0, r5
 8006268:	f000 fb56 	bl	8006918 <_Bfree>
 800626c:	46c2      	mov	sl, r8
 800626e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006270:	1b1a      	subs	r2, r3, r4
 8006272:	d004      	beq.n	800627e <_dtoa_r+0x7a6>
 8006274:	4651      	mov	r1, sl
 8006276:	4628      	mov	r0, r5
 8006278:	f000 fd0c 	bl	8006c94 <__pow5mult>
 800627c:	4682      	mov	sl, r0
 800627e:	2101      	movs	r1, #1
 8006280:	4628      	mov	r0, r5
 8006282:	f000 fc49 	bl	8006b18 <__i2b>
 8006286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006288:	4604      	mov	r4, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	f340 8082 	ble.w	8006394 <_dtoa_r+0x8bc>
 8006290:	461a      	mov	r2, r3
 8006292:	4601      	mov	r1, r0
 8006294:	4628      	mov	r0, r5
 8006296:	f000 fcfd 	bl	8006c94 <__pow5mult>
 800629a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800629c:	4604      	mov	r4, r0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	dd7b      	ble.n	800639a <_dtoa_r+0x8c2>
 80062a2:	f04f 0800 	mov.w	r8, #0
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062ac:	6918      	ldr	r0, [r3, #16]
 80062ae:	f000 fbe5 	bl	8006a7c <__hi0bits>
 80062b2:	f1c0 0020 	rsb	r0, r0, #32
 80062b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b8:	4418      	add	r0, r3
 80062ba:	f010 001f 	ands.w	r0, r0, #31
 80062be:	f000 8092 	beq.w	80063e6 <_dtoa_r+0x90e>
 80062c2:	f1c0 0320 	rsb	r3, r0, #32
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	f340 8085 	ble.w	80063d6 <_dtoa_r+0x8fe>
 80062cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ce:	f1c0 001c 	rsb	r0, r0, #28
 80062d2:	4403      	add	r3, r0
 80062d4:	4481      	add	r9, r0
 80062d6:	4407      	add	r7, r0
 80062d8:	9309      	str	r3, [sp, #36]	; 0x24
 80062da:	f1b9 0f00 	cmp.w	r9, #0
 80062de:	dd05      	ble.n	80062ec <_dtoa_r+0x814>
 80062e0:	4651      	mov	r1, sl
 80062e2:	464a      	mov	r2, r9
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 fd2f 	bl	8006d48 <__lshift>
 80062ea:	4682      	mov	sl, r0
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dd05      	ble.n	80062fe <_dtoa_r+0x826>
 80062f2:	4621      	mov	r1, r4
 80062f4:	461a      	mov	r2, r3
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 fd26 	bl	8006d48 <__lshift>
 80062fc:	4604      	mov	r4, r0
 80062fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d072      	beq.n	80063ea <_dtoa_r+0x912>
 8006304:	4621      	mov	r1, r4
 8006306:	4650      	mov	r0, sl
 8006308:	f000 fd8a 	bl	8006e20 <__mcmp>
 800630c:	2800      	cmp	r0, #0
 800630e:	da6c      	bge.n	80063ea <_dtoa_r+0x912>
 8006310:	2300      	movs	r3, #0
 8006312:	4651      	mov	r1, sl
 8006314:	220a      	movs	r2, #10
 8006316:	4628      	mov	r0, r5
 8006318:	f000 fb20 	bl	800695c <__multadd>
 800631c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800631e:	4682      	mov	sl, r0
 8006320:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 81ac 	beq.w	8006682 <_dtoa_r+0xbaa>
 800632a:	2300      	movs	r3, #0
 800632c:	4631      	mov	r1, r6
 800632e:	220a      	movs	r2, #10
 8006330:	4628      	mov	r0, r5
 8006332:	f000 fb13 	bl	800695c <__multadd>
 8006336:	9b06      	ldr	r3, [sp, #24]
 8006338:	4606      	mov	r6, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	f300 8093 	bgt.w	8006466 <_dtoa_r+0x98e>
 8006340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006342:	2b02      	cmp	r3, #2
 8006344:	dc59      	bgt.n	80063fa <_dtoa_r+0x922>
 8006346:	e08e      	b.n	8006466 <_dtoa_r+0x98e>
 8006348:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800634a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800634e:	e75d      	b.n	800620c <_dtoa_r+0x734>
 8006350:	9b08      	ldr	r3, [sp, #32]
 8006352:	1e5c      	subs	r4, r3, #1
 8006354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006356:	42a3      	cmp	r3, r4
 8006358:	bfbf      	itttt	lt
 800635a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800635c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800635e:	1ae3      	sublt	r3, r4, r3
 8006360:	18d2      	addlt	r2, r2, r3
 8006362:	bfa8      	it	ge
 8006364:	1b1c      	subge	r4, r3, r4
 8006366:	9b08      	ldr	r3, [sp, #32]
 8006368:	bfbe      	ittt	lt
 800636a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800636c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800636e:	2400      	movlt	r4, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	bfb5      	itete	lt
 8006374:	eba9 0703 	sublt.w	r7, r9, r3
 8006378:	464f      	movge	r7, r9
 800637a:	2300      	movlt	r3, #0
 800637c:	9b08      	ldrge	r3, [sp, #32]
 800637e:	e747      	b.n	8006210 <_dtoa_r+0x738>
 8006380:	464f      	mov	r7, r9
 8006382:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006384:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006386:	e74c      	b.n	8006222 <_dtoa_r+0x74a>
 8006388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800638a:	e773      	b.n	8006274 <_dtoa_r+0x79c>
 800638c:	3fe00000 	.word	0x3fe00000
 8006390:	40240000 	.word	0x40240000
 8006394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006396:	2b01      	cmp	r3, #1
 8006398:	dc18      	bgt.n	80063cc <_dtoa_r+0x8f4>
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	b9b3      	cbnz	r3, 80063cc <_dtoa_r+0x8f4>
 800639e:	9b05      	ldr	r3, [sp, #20]
 80063a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063a4:	b993      	cbnz	r3, 80063cc <_dtoa_r+0x8f4>
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ac:	0d1b      	lsrs	r3, r3, #20
 80063ae:	051b      	lsls	r3, r3, #20
 80063b0:	b17b      	cbz	r3, 80063d2 <_dtoa_r+0x8fa>
 80063b2:	f04f 0801 	mov.w	r8, #1
 80063b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b8:	f109 0901 	add.w	r9, r9, #1
 80063bc:	3301      	adds	r3, #1
 80063be:	9309      	str	r3, [sp, #36]	; 0x24
 80063c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f47f af6f 	bne.w	80062a6 <_dtoa_r+0x7ce>
 80063c8:	2001      	movs	r0, #1
 80063ca:	e774      	b.n	80062b6 <_dtoa_r+0x7de>
 80063cc:	f04f 0800 	mov.w	r8, #0
 80063d0:	e7f6      	b.n	80063c0 <_dtoa_r+0x8e8>
 80063d2:	4698      	mov	r8, r3
 80063d4:	e7f4      	b.n	80063c0 <_dtoa_r+0x8e8>
 80063d6:	d080      	beq.n	80062da <_dtoa_r+0x802>
 80063d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063da:	331c      	adds	r3, #28
 80063dc:	441a      	add	r2, r3
 80063de:	4499      	add	r9, r3
 80063e0:	441f      	add	r7, r3
 80063e2:	9209      	str	r2, [sp, #36]	; 0x24
 80063e4:	e779      	b.n	80062da <_dtoa_r+0x802>
 80063e6:	4603      	mov	r3, r0
 80063e8:	e7f6      	b.n	80063d8 <_dtoa_r+0x900>
 80063ea:	9b08      	ldr	r3, [sp, #32]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dc34      	bgt.n	800645a <_dtoa_r+0x982>
 80063f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	dd31      	ble.n	800645a <_dtoa_r+0x982>
 80063f6:	9b08      	ldr	r3, [sp, #32]
 80063f8:	9306      	str	r3, [sp, #24]
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	b963      	cbnz	r3, 8006418 <_dtoa_r+0x940>
 80063fe:	4621      	mov	r1, r4
 8006400:	2205      	movs	r2, #5
 8006402:	4628      	mov	r0, r5
 8006404:	f000 faaa 	bl	800695c <__multadd>
 8006408:	4601      	mov	r1, r0
 800640a:	4604      	mov	r4, r0
 800640c:	4650      	mov	r0, sl
 800640e:	f000 fd07 	bl	8006e20 <__mcmp>
 8006412:	2800      	cmp	r0, #0
 8006414:	f73f adbf 	bgt.w	8005f96 <_dtoa_r+0x4be>
 8006418:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800641a:	9f03      	ldr	r7, [sp, #12]
 800641c:	ea6f 0b03 	mvn.w	fp, r3
 8006420:	f04f 0800 	mov.w	r8, #0
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f000 fa76 	bl	8006918 <_Bfree>
 800642c:	2e00      	cmp	r6, #0
 800642e:	f43f aead 	beq.w	800618c <_dtoa_r+0x6b4>
 8006432:	f1b8 0f00 	cmp.w	r8, #0
 8006436:	d005      	beq.n	8006444 <_dtoa_r+0x96c>
 8006438:	45b0      	cmp	r8, r6
 800643a:	d003      	beq.n	8006444 <_dtoa_r+0x96c>
 800643c:	4641      	mov	r1, r8
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fa6a 	bl	8006918 <_Bfree>
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	f000 fa66 	bl	8006918 <_Bfree>
 800644c:	e69e      	b.n	800618c <_dtoa_r+0x6b4>
 800644e:	2400      	movs	r4, #0
 8006450:	4626      	mov	r6, r4
 8006452:	e7e1      	b.n	8006418 <_dtoa_r+0x940>
 8006454:	46c3      	mov	fp, r8
 8006456:	4626      	mov	r6, r4
 8006458:	e59d      	b.n	8005f96 <_dtoa_r+0x4be>
 800645a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80c8 	beq.w	80065f2 <_dtoa_r+0xb1a>
 8006462:	9b08      	ldr	r3, [sp, #32]
 8006464:	9306      	str	r3, [sp, #24]
 8006466:	2f00      	cmp	r7, #0
 8006468:	dd05      	ble.n	8006476 <_dtoa_r+0x99e>
 800646a:	4631      	mov	r1, r6
 800646c:	463a      	mov	r2, r7
 800646e:	4628      	mov	r0, r5
 8006470:	f000 fc6a 	bl	8006d48 <__lshift>
 8006474:	4606      	mov	r6, r0
 8006476:	f1b8 0f00 	cmp.w	r8, #0
 800647a:	d05b      	beq.n	8006534 <_dtoa_r+0xa5c>
 800647c:	4628      	mov	r0, r5
 800647e:	6871      	ldr	r1, [r6, #4]
 8006480:	f000 fa0a 	bl	8006898 <_Balloc>
 8006484:	4607      	mov	r7, r0
 8006486:	b928      	cbnz	r0, 8006494 <_dtoa_r+0x9bc>
 8006488:	4602      	mov	r2, r0
 800648a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800648e:	4b81      	ldr	r3, [pc, #516]	; (8006694 <_dtoa_r+0xbbc>)
 8006490:	f7ff bb36 	b.w	8005b00 <_dtoa_r+0x28>
 8006494:	6932      	ldr	r2, [r6, #16]
 8006496:	f106 010c 	add.w	r1, r6, #12
 800649a:	3202      	adds	r2, #2
 800649c:	0092      	lsls	r2, r2, #2
 800649e:	300c      	adds	r0, #12
 80064a0:	f001 ff72 	bl	8008388 <memcpy>
 80064a4:	2201      	movs	r2, #1
 80064a6:	4639      	mov	r1, r7
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 fc4d 	bl	8006d48 <__lshift>
 80064ae:	46b0      	mov	r8, r6
 80064b0:	4606      	mov	r6, r0
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	9a03      	ldr	r2, [sp, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	9308      	str	r3, [sp, #32]
 80064ba:	9b06      	ldr	r3, [sp, #24]
 80064bc:	4413      	add	r3, r2
 80064be:	930b      	str	r3, [sp, #44]	; 0x2c
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	930a      	str	r3, [sp, #40]	; 0x28
 80064c8:	9b08      	ldr	r3, [sp, #32]
 80064ca:	4621      	mov	r1, r4
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4650      	mov	r0, sl
 80064d0:	9304      	str	r3, [sp, #16]
 80064d2:	f7ff fa75 	bl	80059c0 <quorem>
 80064d6:	4641      	mov	r1, r8
 80064d8:	9006      	str	r0, [sp, #24]
 80064da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064de:	4650      	mov	r0, sl
 80064e0:	f000 fc9e 	bl	8006e20 <__mcmp>
 80064e4:	4632      	mov	r2, r6
 80064e6:	9009      	str	r0, [sp, #36]	; 0x24
 80064e8:	4621      	mov	r1, r4
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 fcb4 	bl	8006e58 <__mdiff>
 80064f0:	68c2      	ldr	r2, [r0, #12]
 80064f2:	4607      	mov	r7, r0
 80064f4:	bb02      	cbnz	r2, 8006538 <_dtoa_r+0xa60>
 80064f6:	4601      	mov	r1, r0
 80064f8:	4650      	mov	r0, sl
 80064fa:	f000 fc91 	bl	8006e20 <__mcmp>
 80064fe:	4602      	mov	r2, r0
 8006500:	4639      	mov	r1, r7
 8006502:	4628      	mov	r0, r5
 8006504:	920c      	str	r2, [sp, #48]	; 0x30
 8006506:	f000 fa07 	bl	8006918 <_Bfree>
 800650a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800650c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800650e:	9f08      	ldr	r7, [sp, #32]
 8006510:	ea43 0102 	orr.w	r1, r3, r2
 8006514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006516:	4319      	orrs	r1, r3
 8006518:	d110      	bne.n	800653c <_dtoa_r+0xa64>
 800651a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800651e:	d029      	beq.n	8006574 <_dtoa_r+0xa9c>
 8006520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	dd02      	ble.n	800652c <_dtoa_r+0xa54>
 8006526:	9b06      	ldr	r3, [sp, #24]
 8006528:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800652c:	9b04      	ldr	r3, [sp, #16]
 800652e:	f883 9000 	strb.w	r9, [r3]
 8006532:	e777      	b.n	8006424 <_dtoa_r+0x94c>
 8006534:	4630      	mov	r0, r6
 8006536:	e7ba      	b.n	80064ae <_dtoa_r+0x9d6>
 8006538:	2201      	movs	r2, #1
 800653a:	e7e1      	b.n	8006500 <_dtoa_r+0xa28>
 800653c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	db04      	blt.n	800654c <_dtoa_r+0xa74>
 8006542:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006544:	430b      	orrs	r3, r1
 8006546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006548:	430b      	orrs	r3, r1
 800654a:	d120      	bne.n	800658e <_dtoa_r+0xab6>
 800654c:	2a00      	cmp	r2, #0
 800654e:	dded      	ble.n	800652c <_dtoa_r+0xa54>
 8006550:	4651      	mov	r1, sl
 8006552:	2201      	movs	r2, #1
 8006554:	4628      	mov	r0, r5
 8006556:	f000 fbf7 	bl	8006d48 <__lshift>
 800655a:	4621      	mov	r1, r4
 800655c:	4682      	mov	sl, r0
 800655e:	f000 fc5f 	bl	8006e20 <__mcmp>
 8006562:	2800      	cmp	r0, #0
 8006564:	dc03      	bgt.n	800656e <_dtoa_r+0xa96>
 8006566:	d1e1      	bne.n	800652c <_dtoa_r+0xa54>
 8006568:	f019 0f01 	tst.w	r9, #1
 800656c:	d0de      	beq.n	800652c <_dtoa_r+0xa54>
 800656e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006572:	d1d8      	bne.n	8006526 <_dtoa_r+0xa4e>
 8006574:	2339      	movs	r3, #57	; 0x39
 8006576:	9a04      	ldr	r2, [sp, #16]
 8006578:	7013      	strb	r3, [r2, #0]
 800657a:	463b      	mov	r3, r7
 800657c:	461f      	mov	r7, r3
 800657e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006582:	3b01      	subs	r3, #1
 8006584:	2a39      	cmp	r2, #57	; 0x39
 8006586:	d06b      	beq.n	8006660 <_dtoa_r+0xb88>
 8006588:	3201      	adds	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e74a      	b.n	8006424 <_dtoa_r+0x94c>
 800658e:	2a00      	cmp	r2, #0
 8006590:	dd07      	ble.n	80065a2 <_dtoa_r+0xaca>
 8006592:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006596:	d0ed      	beq.n	8006574 <_dtoa_r+0xa9c>
 8006598:	9a04      	ldr	r2, [sp, #16]
 800659a:	f109 0301 	add.w	r3, r9, #1
 800659e:	7013      	strb	r3, [r2, #0]
 80065a0:	e740      	b.n	8006424 <_dtoa_r+0x94c>
 80065a2:	9b08      	ldr	r3, [sp, #32]
 80065a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d042      	beq.n	8006634 <_dtoa_r+0xb5c>
 80065ae:	4651      	mov	r1, sl
 80065b0:	2300      	movs	r3, #0
 80065b2:	220a      	movs	r2, #10
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 f9d1 	bl	800695c <__multadd>
 80065ba:	45b0      	cmp	r8, r6
 80065bc:	4682      	mov	sl, r0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	f04f 020a 	mov.w	r2, #10
 80065c6:	4641      	mov	r1, r8
 80065c8:	4628      	mov	r0, r5
 80065ca:	d107      	bne.n	80065dc <_dtoa_r+0xb04>
 80065cc:	f000 f9c6 	bl	800695c <__multadd>
 80065d0:	4680      	mov	r8, r0
 80065d2:	4606      	mov	r6, r0
 80065d4:	9b08      	ldr	r3, [sp, #32]
 80065d6:	3301      	adds	r3, #1
 80065d8:	9308      	str	r3, [sp, #32]
 80065da:	e775      	b.n	80064c8 <_dtoa_r+0x9f0>
 80065dc:	f000 f9be 	bl	800695c <__multadd>
 80065e0:	4631      	mov	r1, r6
 80065e2:	4680      	mov	r8, r0
 80065e4:	2300      	movs	r3, #0
 80065e6:	220a      	movs	r2, #10
 80065e8:	4628      	mov	r0, r5
 80065ea:	f000 f9b7 	bl	800695c <__multadd>
 80065ee:	4606      	mov	r6, r0
 80065f0:	e7f0      	b.n	80065d4 <_dtoa_r+0xafc>
 80065f2:	9b08      	ldr	r3, [sp, #32]
 80065f4:	9306      	str	r3, [sp, #24]
 80065f6:	9f03      	ldr	r7, [sp, #12]
 80065f8:	4621      	mov	r1, r4
 80065fa:	4650      	mov	r0, sl
 80065fc:	f7ff f9e0 	bl	80059c0 <quorem>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006606:	f807 9b01 	strb.w	r9, [r7], #1
 800660a:	1afa      	subs	r2, r7, r3
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	4293      	cmp	r3, r2
 8006610:	dd07      	ble.n	8006622 <_dtoa_r+0xb4a>
 8006612:	4651      	mov	r1, sl
 8006614:	2300      	movs	r3, #0
 8006616:	220a      	movs	r2, #10
 8006618:	4628      	mov	r0, r5
 800661a:	f000 f99f 	bl	800695c <__multadd>
 800661e:	4682      	mov	sl, r0
 8006620:	e7ea      	b.n	80065f8 <_dtoa_r+0xb20>
 8006622:	9b06      	ldr	r3, [sp, #24]
 8006624:	f04f 0800 	mov.w	r8, #0
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfcc      	ite	gt
 800662c:	461f      	movgt	r7, r3
 800662e:	2701      	movle	r7, #1
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	441f      	add	r7, r3
 8006634:	4651      	mov	r1, sl
 8006636:	2201      	movs	r2, #1
 8006638:	4628      	mov	r0, r5
 800663a:	f000 fb85 	bl	8006d48 <__lshift>
 800663e:	4621      	mov	r1, r4
 8006640:	4682      	mov	sl, r0
 8006642:	f000 fbed 	bl	8006e20 <__mcmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	dc97      	bgt.n	800657a <_dtoa_r+0xaa2>
 800664a:	d102      	bne.n	8006652 <_dtoa_r+0xb7a>
 800664c:	f019 0f01 	tst.w	r9, #1
 8006650:	d193      	bne.n	800657a <_dtoa_r+0xaa2>
 8006652:	463b      	mov	r3, r7
 8006654:	461f      	mov	r7, r3
 8006656:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800665a:	2a30      	cmp	r2, #48	; 0x30
 800665c:	d0fa      	beq.n	8006654 <_dtoa_r+0xb7c>
 800665e:	e6e1      	b.n	8006424 <_dtoa_r+0x94c>
 8006660:	9a03      	ldr	r2, [sp, #12]
 8006662:	429a      	cmp	r2, r3
 8006664:	d18a      	bne.n	800657c <_dtoa_r+0xaa4>
 8006666:	2331      	movs	r3, #49	; 0x31
 8006668:	f10b 0b01 	add.w	fp, fp, #1
 800666c:	e797      	b.n	800659e <_dtoa_r+0xac6>
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <_dtoa_r+0xbc0>)
 8006670:	f7ff ba9f 	b.w	8005bb2 <_dtoa_r+0xda>
 8006674:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006676:	2b00      	cmp	r3, #0
 8006678:	f47f aa77 	bne.w	8005b6a <_dtoa_r+0x92>
 800667c:	4b07      	ldr	r3, [pc, #28]	; (800669c <_dtoa_r+0xbc4>)
 800667e:	f7ff ba98 	b.w	8005bb2 <_dtoa_r+0xda>
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	dcb6      	bgt.n	80065f6 <_dtoa_r+0xb1e>
 8006688:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800668a:	2b02      	cmp	r3, #2
 800668c:	f73f aeb5 	bgt.w	80063fa <_dtoa_r+0x922>
 8006690:	e7b1      	b.n	80065f6 <_dtoa_r+0xb1e>
 8006692:	bf00      	nop
 8006694:	080091df 	.word	0x080091df
 8006698:	0800913a 	.word	0x0800913a
 800669c:	08009163 	.word	0x08009163

080066a0 <_free_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4605      	mov	r5, r0
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d040      	beq.n	800672a <_free_r+0x8a>
 80066a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ac:	1f0c      	subs	r4, r1, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bfb8      	it	lt
 80066b2:	18e4      	addlt	r4, r4, r3
 80066b4:	f000 f8e4 	bl	8006880 <__malloc_lock>
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <_free_r+0x8c>)
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	b933      	cbnz	r3, 80066cc <_free_r+0x2c>
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	6014      	str	r4, [r2, #0]
 80066c2:	4628      	mov	r0, r5
 80066c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066c8:	f000 b8e0 	b.w	800688c <__malloc_unlock>
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	d908      	bls.n	80066e2 <_free_r+0x42>
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	1821      	adds	r1, r4, r0
 80066d4:	428b      	cmp	r3, r1
 80066d6:	bf01      	itttt	eq
 80066d8:	6819      	ldreq	r1, [r3, #0]
 80066da:	685b      	ldreq	r3, [r3, #4]
 80066dc:	1809      	addeq	r1, r1, r0
 80066de:	6021      	streq	r1, [r4, #0]
 80066e0:	e7ed      	b.n	80066be <_free_r+0x1e>
 80066e2:	461a      	mov	r2, r3
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	b10b      	cbz	r3, 80066ec <_free_r+0x4c>
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d9fa      	bls.n	80066e2 <_free_r+0x42>
 80066ec:	6811      	ldr	r1, [r2, #0]
 80066ee:	1850      	adds	r0, r2, r1
 80066f0:	42a0      	cmp	r0, r4
 80066f2:	d10b      	bne.n	800670c <_free_r+0x6c>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	4401      	add	r1, r0
 80066f8:	1850      	adds	r0, r2, r1
 80066fa:	4283      	cmp	r3, r0
 80066fc:	6011      	str	r1, [r2, #0]
 80066fe:	d1e0      	bne.n	80066c2 <_free_r+0x22>
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4408      	add	r0, r1
 8006706:	6010      	str	r0, [r2, #0]
 8006708:	6053      	str	r3, [r2, #4]
 800670a:	e7da      	b.n	80066c2 <_free_r+0x22>
 800670c:	d902      	bls.n	8006714 <_free_r+0x74>
 800670e:	230c      	movs	r3, #12
 8006710:	602b      	str	r3, [r5, #0]
 8006712:	e7d6      	b.n	80066c2 <_free_r+0x22>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	1821      	adds	r1, r4, r0
 8006718:	428b      	cmp	r3, r1
 800671a:	bf01      	itttt	eq
 800671c:	6819      	ldreq	r1, [r3, #0]
 800671e:	685b      	ldreq	r3, [r3, #4]
 8006720:	1809      	addeq	r1, r1, r0
 8006722:	6021      	streq	r1, [r4, #0]
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	6054      	str	r4, [r2, #4]
 8006728:	e7cb      	b.n	80066c2 <_free_r+0x22>
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	20000598 	.word	0x20000598

08006730 <malloc>:
 8006730:	4b02      	ldr	r3, [pc, #8]	; (800673c <malloc+0xc>)
 8006732:	4601      	mov	r1, r0
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	f000 b823 	b.w	8006780 <_malloc_r>
 800673a:	bf00      	nop
 800673c:	20000068 	.word	0x20000068

08006740 <sbrk_aligned>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	4e0e      	ldr	r6, [pc, #56]	; (800677c <sbrk_aligned+0x3c>)
 8006744:	460c      	mov	r4, r1
 8006746:	6831      	ldr	r1, [r6, #0]
 8006748:	4605      	mov	r5, r0
 800674a:	b911      	cbnz	r1, 8006752 <sbrk_aligned+0x12>
 800674c:	f001 fe0c 	bl	8008368 <_sbrk_r>
 8006750:	6030      	str	r0, [r6, #0]
 8006752:	4621      	mov	r1, r4
 8006754:	4628      	mov	r0, r5
 8006756:	f001 fe07 	bl	8008368 <_sbrk_r>
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	d00a      	beq.n	8006774 <sbrk_aligned+0x34>
 800675e:	1cc4      	adds	r4, r0, #3
 8006760:	f024 0403 	bic.w	r4, r4, #3
 8006764:	42a0      	cmp	r0, r4
 8006766:	d007      	beq.n	8006778 <sbrk_aligned+0x38>
 8006768:	1a21      	subs	r1, r4, r0
 800676a:	4628      	mov	r0, r5
 800676c:	f001 fdfc 	bl	8008368 <_sbrk_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d101      	bne.n	8006778 <sbrk_aligned+0x38>
 8006774:	f04f 34ff 	mov.w	r4, #4294967295
 8006778:	4620      	mov	r0, r4
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	2000059c 	.word	0x2000059c

08006780 <_malloc_r>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	1ccd      	adds	r5, r1, #3
 8006786:	f025 0503 	bic.w	r5, r5, #3
 800678a:	3508      	adds	r5, #8
 800678c:	2d0c      	cmp	r5, #12
 800678e:	bf38      	it	cc
 8006790:	250c      	movcc	r5, #12
 8006792:	2d00      	cmp	r5, #0
 8006794:	4607      	mov	r7, r0
 8006796:	db01      	blt.n	800679c <_malloc_r+0x1c>
 8006798:	42a9      	cmp	r1, r5
 800679a:	d905      	bls.n	80067a8 <_malloc_r+0x28>
 800679c:	230c      	movs	r3, #12
 800679e:	2600      	movs	r6, #0
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	4630      	mov	r0, r6
 80067a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800687c <_malloc_r+0xfc>
 80067ac:	f000 f868 	bl	8006880 <__malloc_lock>
 80067b0:	f8d8 3000 	ldr.w	r3, [r8]
 80067b4:	461c      	mov	r4, r3
 80067b6:	bb5c      	cbnz	r4, 8006810 <_malloc_r+0x90>
 80067b8:	4629      	mov	r1, r5
 80067ba:	4638      	mov	r0, r7
 80067bc:	f7ff ffc0 	bl	8006740 <sbrk_aligned>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	4604      	mov	r4, r0
 80067c4:	d155      	bne.n	8006872 <_malloc_r+0xf2>
 80067c6:	f8d8 4000 	ldr.w	r4, [r8]
 80067ca:	4626      	mov	r6, r4
 80067cc:	2e00      	cmp	r6, #0
 80067ce:	d145      	bne.n	800685c <_malloc_r+0xdc>
 80067d0:	2c00      	cmp	r4, #0
 80067d2:	d048      	beq.n	8006866 <_malloc_r+0xe6>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	4631      	mov	r1, r6
 80067d8:	4638      	mov	r0, r7
 80067da:	eb04 0903 	add.w	r9, r4, r3
 80067de:	f001 fdc3 	bl	8008368 <_sbrk_r>
 80067e2:	4581      	cmp	r9, r0
 80067e4:	d13f      	bne.n	8006866 <_malloc_r+0xe6>
 80067e6:	6821      	ldr	r1, [r4, #0]
 80067e8:	4638      	mov	r0, r7
 80067ea:	1a6d      	subs	r5, r5, r1
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7ff ffa7 	bl	8006740 <sbrk_aligned>
 80067f2:	3001      	adds	r0, #1
 80067f4:	d037      	beq.n	8006866 <_malloc_r+0xe6>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	442b      	add	r3, r5
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d038      	beq.n	8006876 <_malloc_r+0xf6>
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	42a2      	cmp	r2, r4
 8006808:	d12b      	bne.n	8006862 <_malloc_r+0xe2>
 800680a:	2200      	movs	r2, #0
 800680c:	605a      	str	r2, [r3, #4]
 800680e:	e00f      	b.n	8006830 <_malloc_r+0xb0>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	1b52      	subs	r2, r2, r5
 8006814:	d41f      	bmi.n	8006856 <_malloc_r+0xd6>
 8006816:	2a0b      	cmp	r2, #11
 8006818:	d917      	bls.n	800684a <_malloc_r+0xca>
 800681a:	1961      	adds	r1, r4, r5
 800681c:	42a3      	cmp	r3, r4
 800681e:	6025      	str	r5, [r4, #0]
 8006820:	bf18      	it	ne
 8006822:	6059      	strne	r1, [r3, #4]
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	bf08      	it	eq
 8006828:	f8c8 1000 	streq.w	r1, [r8]
 800682c:	5162      	str	r2, [r4, r5]
 800682e:	604b      	str	r3, [r1, #4]
 8006830:	4638      	mov	r0, r7
 8006832:	f104 060b 	add.w	r6, r4, #11
 8006836:	f000 f829 	bl	800688c <__malloc_unlock>
 800683a:	f026 0607 	bic.w	r6, r6, #7
 800683e:	1d23      	adds	r3, r4, #4
 8006840:	1af2      	subs	r2, r6, r3
 8006842:	d0ae      	beq.n	80067a2 <_malloc_r+0x22>
 8006844:	1b9b      	subs	r3, r3, r6
 8006846:	50a3      	str	r3, [r4, r2]
 8006848:	e7ab      	b.n	80067a2 <_malloc_r+0x22>
 800684a:	42a3      	cmp	r3, r4
 800684c:	6862      	ldr	r2, [r4, #4]
 800684e:	d1dd      	bne.n	800680c <_malloc_r+0x8c>
 8006850:	f8c8 2000 	str.w	r2, [r8]
 8006854:	e7ec      	b.n	8006830 <_malloc_r+0xb0>
 8006856:	4623      	mov	r3, r4
 8006858:	6864      	ldr	r4, [r4, #4]
 800685a:	e7ac      	b.n	80067b6 <_malloc_r+0x36>
 800685c:	4634      	mov	r4, r6
 800685e:	6876      	ldr	r6, [r6, #4]
 8006860:	e7b4      	b.n	80067cc <_malloc_r+0x4c>
 8006862:	4613      	mov	r3, r2
 8006864:	e7cc      	b.n	8006800 <_malloc_r+0x80>
 8006866:	230c      	movs	r3, #12
 8006868:	4638      	mov	r0, r7
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	f000 f80e 	bl	800688c <__malloc_unlock>
 8006870:	e797      	b.n	80067a2 <_malloc_r+0x22>
 8006872:	6025      	str	r5, [r4, #0]
 8006874:	e7dc      	b.n	8006830 <_malloc_r+0xb0>
 8006876:	605b      	str	r3, [r3, #4]
 8006878:	deff      	udf	#255	; 0xff
 800687a:	bf00      	nop
 800687c:	20000598 	.word	0x20000598

08006880 <__malloc_lock>:
 8006880:	4801      	ldr	r0, [pc, #4]	; (8006888 <__malloc_lock+0x8>)
 8006882:	f7ff b888 	b.w	8005996 <__retarget_lock_acquire_recursive>
 8006886:	bf00      	nop
 8006888:	20000594 	.word	0x20000594

0800688c <__malloc_unlock>:
 800688c:	4801      	ldr	r0, [pc, #4]	; (8006894 <__malloc_unlock+0x8>)
 800688e:	f7ff b883 	b.w	8005998 <__retarget_lock_release_recursive>
 8006892:	bf00      	nop
 8006894:	20000594 	.word	0x20000594

08006898 <_Balloc>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	69c6      	ldr	r6, [r0, #28]
 800689c:	4604      	mov	r4, r0
 800689e:	460d      	mov	r5, r1
 80068a0:	b976      	cbnz	r6, 80068c0 <_Balloc+0x28>
 80068a2:	2010      	movs	r0, #16
 80068a4:	f7ff ff44 	bl	8006730 <malloc>
 80068a8:	4602      	mov	r2, r0
 80068aa:	61e0      	str	r0, [r4, #28]
 80068ac:	b920      	cbnz	r0, 80068b8 <_Balloc+0x20>
 80068ae:	216b      	movs	r1, #107	; 0x6b
 80068b0:	4b17      	ldr	r3, [pc, #92]	; (8006910 <_Balloc+0x78>)
 80068b2:	4818      	ldr	r0, [pc, #96]	; (8006914 <_Balloc+0x7c>)
 80068b4:	f001 fd7c 	bl	80083b0 <__assert_func>
 80068b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068bc:	6006      	str	r6, [r0, #0]
 80068be:	60c6      	str	r6, [r0, #12]
 80068c0:	69e6      	ldr	r6, [r4, #28]
 80068c2:	68f3      	ldr	r3, [r6, #12]
 80068c4:	b183      	cbz	r3, 80068e8 <_Balloc+0x50>
 80068c6:	69e3      	ldr	r3, [r4, #28]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068ce:	b9b8      	cbnz	r0, 8006900 <_Balloc+0x68>
 80068d0:	2101      	movs	r1, #1
 80068d2:	fa01 f605 	lsl.w	r6, r1, r5
 80068d6:	1d72      	adds	r2, r6, #5
 80068d8:	4620      	mov	r0, r4
 80068da:	0092      	lsls	r2, r2, #2
 80068dc:	f001 fd86 	bl	80083ec <_calloc_r>
 80068e0:	b160      	cbz	r0, 80068fc <_Balloc+0x64>
 80068e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068e6:	e00e      	b.n	8006906 <_Balloc+0x6e>
 80068e8:	2221      	movs	r2, #33	; 0x21
 80068ea:	2104      	movs	r1, #4
 80068ec:	4620      	mov	r0, r4
 80068ee:	f001 fd7d 	bl	80083ec <_calloc_r>
 80068f2:	69e3      	ldr	r3, [r4, #28]
 80068f4:	60f0      	str	r0, [r6, #12]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e4      	bne.n	80068c6 <_Balloc+0x2e>
 80068fc:	2000      	movs	r0, #0
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	6802      	ldr	r2, [r0, #0]
 8006902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006906:	2300      	movs	r3, #0
 8006908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800690c:	e7f7      	b.n	80068fe <_Balloc+0x66>
 800690e:	bf00      	nop
 8006910:	08009170 	.word	0x08009170
 8006914:	080091f0 	.word	0x080091f0

08006918 <_Bfree>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	69c6      	ldr	r6, [r0, #28]
 800691c:	4605      	mov	r5, r0
 800691e:	460c      	mov	r4, r1
 8006920:	b976      	cbnz	r6, 8006940 <_Bfree+0x28>
 8006922:	2010      	movs	r0, #16
 8006924:	f7ff ff04 	bl	8006730 <malloc>
 8006928:	4602      	mov	r2, r0
 800692a:	61e8      	str	r0, [r5, #28]
 800692c:	b920      	cbnz	r0, 8006938 <_Bfree+0x20>
 800692e:	218f      	movs	r1, #143	; 0x8f
 8006930:	4b08      	ldr	r3, [pc, #32]	; (8006954 <_Bfree+0x3c>)
 8006932:	4809      	ldr	r0, [pc, #36]	; (8006958 <_Bfree+0x40>)
 8006934:	f001 fd3c 	bl	80083b0 <__assert_func>
 8006938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800693c:	6006      	str	r6, [r0, #0]
 800693e:	60c6      	str	r6, [r0, #12]
 8006940:	b13c      	cbz	r4, 8006952 <_Bfree+0x3a>
 8006942:	69eb      	ldr	r3, [r5, #28]
 8006944:	6862      	ldr	r2, [r4, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800694c:	6021      	str	r1, [r4, #0]
 800694e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	08009170 	.word	0x08009170
 8006958:	080091f0 	.word	0x080091f0

0800695c <__multadd>:
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	4607      	mov	r7, r0
 8006962:	460c      	mov	r4, r1
 8006964:	461e      	mov	r6, r3
 8006966:	2000      	movs	r0, #0
 8006968:	690d      	ldr	r5, [r1, #16]
 800696a:	f101 0c14 	add.w	ip, r1, #20
 800696e:	f8dc 3000 	ldr.w	r3, [ip]
 8006972:	3001      	adds	r0, #1
 8006974:	b299      	uxth	r1, r3
 8006976:	fb02 6101 	mla	r1, r2, r1, r6
 800697a:	0c1e      	lsrs	r6, r3, #16
 800697c:	0c0b      	lsrs	r3, r1, #16
 800697e:	fb02 3306 	mla	r3, r2, r6, r3
 8006982:	b289      	uxth	r1, r1
 8006984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006988:	4285      	cmp	r5, r0
 800698a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800698e:	f84c 1b04 	str.w	r1, [ip], #4
 8006992:	dcec      	bgt.n	800696e <__multadd+0x12>
 8006994:	b30e      	cbz	r6, 80069da <__multadd+0x7e>
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	42ab      	cmp	r3, r5
 800699a:	dc19      	bgt.n	80069d0 <__multadd+0x74>
 800699c:	6861      	ldr	r1, [r4, #4]
 800699e:	4638      	mov	r0, r7
 80069a0:	3101      	adds	r1, #1
 80069a2:	f7ff ff79 	bl	8006898 <_Balloc>
 80069a6:	4680      	mov	r8, r0
 80069a8:	b928      	cbnz	r0, 80069b6 <__multadd+0x5a>
 80069aa:	4602      	mov	r2, r0
 80069ac:	21ba      	movs	r1, #186	; 0xba
 80069ae:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <__multadd+0x84>)
 80069b0:	480c      	ldr	r0, [pc, #48]	; (80069e4 <__multadd+0x88>)
 80069b2:	f001 fcfd 	bl	80083b0 <__assert_func>
 80069b6:	6922      	ldr	r2, [r4, #16]
 80069b8:	f104 010c 	add.w	r1, r4, #12
 80069bc:	3202      	adds	r2, #2
 80069be:	0092      	lsls	r2, r2, #2
 80069c0:	300c      	adds	r0, #12
 80069c2:	f001 fce1 	bl	8008388 <memcpy>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7ff ffa5 	bl	8006918 <_Bfree>
 80069ce:	4644      	mov	r4, r8
 80069d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069d4:	3501      	adds	r5, #1
 80069d6:	615e      	str	r6, [r3, #20]
 80069d8:	6125      	str	r5, [r4, #16]
 80069da:	4620      	mov	r0, r4
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	080091df 	.word	0x080091df
 80069e4:	080091f0 	.word	0x080091f0

080069e8 <__s2b>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	4615      	mov	r5, r2
 80069ee:	2209      	movs	r2, #9
 80069f0:	461f      	mov	r7, r3
 80069f2:	3308      	adds	r3, #8
 80069f4:	460c      	mov	r4, r1
 80069f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80069fa:	4606      	mov	r6, r0
 80069fc:	2201      	movs	r2, #1
 80069fe:	2100      	movs	r1, #0
 8006a00:	429a      	cmp	r2, r3
 8006a02:	db09      	blt.n	8006a18 <__s2b+0x30>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff ff47 	bl	8006898 <_Balloc>
 8006a0a:	b940      	cbnz	r0, 8006a1e <__s2b+0x36>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	21d3      	movs	r1, #211	; 0xd3
 8006a10:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <__s2b+0x8c>)
 8006a12:	4819      	ldr	r0, [pc, #100]	; (8006a78 <__s2b+0x90>)
 8006a14:	f001 fccc 	bl	80083b0 <__assert_func>
 8006a18:	0052      	lsls	r2, r2, #1
 8006a1a:	3101      	adds	r1, #1
 8006a1c:	e7f0      	b.n	8006a00 <__s2b+0x18>
 8006a1e:	9b08      	ldr	r3, [sp, #32]
 8006a20:	2d09      	cmp	r5, #9
 8006a22:	6143      	str	r3, [r0, #20]
 8006a24:	f04f 0301 	mov.w	r3, #1
 8006a28:	6103      	str	r3, [r0, #16]
 8006a2a:	dd16      	ble.n	8006a5a <__s2b+0x72>
 8006a2c:	f104 0909 	add.w	r9, r4, #9
 8006a30:	46c8      	mov	r8, r9
 8006a32:	442c      	add	r4, r5
 8006a34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a38:	4601      	mov	r1, r0
 8006a3a:	220a      	movs	r2, #10
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	3b30      	subs	r3, #48	; 0x30
 8006a40:	f7ff ff8c 	bl	800695c <__multadd>
 8006a44:	45a0      	cmp	r8, r4
 8006a46:	d1f5      	bne.n	8006a34 <__s2b+0x4c>
 8006a48:	f1a5 0408 	sub.w	r4, r5, #8
 8006a4c:	444c      	add	r4, r9
 8006a4e:	1b2d      	subs	r5, r5, r4
 8006a50:	1963      	adds	r3, r4, r5
 8006a52:	42bb      	cmp	r3, r7
 8006a54:	db04      	blt.n	8006a60 <__s2b+0x78>
 8006a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5a:	2509      	movs	r5, #9
 8006a5c:	340a      	adds	r4, #10
 8006a5e:	e7f6      	b.n	8006a4e <__s2b+0x66>
 8006a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a64:	4601      	mov	r1, r0
 8006a66:	220a      	movs	r2, #10
 8006a68:	4630      	mov	r0, r6
 8006a6a:	3b30      	subs	r3, #48	; 0x30
 8006a6c:	f7ff ff76 	bl	800695c <__multadd>
 8006a70:	e7ee      	b.n	8006a50 <__s2b+0x68>
 8006a72:	bf00      	nop
 8006a74:	080091df 	.word	0x080091df
 8006a78:	080091f0 	.word	0x080091f0

08006a7c <__hi0bits>:
 8006a7c:	0c02      	lsrs	r2, r0, #16
 8006a7e:	0412      	lsls	r2, r2, #16
 8006a80:	4603      	mov	r3, r0
 8006a82:	b9ca      	cbnz	r2, 8006ab8 <__hi0bits+0x3c>
 8006a84:	0403      	lsls	r3, r0, #16
 8006a86:	2010      	movs	r0, #16
 8006a88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a8c:	bf04      	itt	eq
 8006a8e:	021b      	lsleq	r3, r3, #8
 8006a90:	3008      	addeq	r0, #8
 8006a92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a96:	bf04      	itt	eq
 8006a98:	011b      	lsleq	r3, r3, #4
 8006a9a:	3004      	addeq	r0, #4
 8006a9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006aa0:	bf04      	itt	eq
 8006aa2:	009b      	lsleq	r3, r3, #2
 8006aa4:	3002      	addeq	r0, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	db05      	blt.n	8006ab6 <__hi0bits+0x3a>
 8006aaa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006aae:	f100 0001 	add.w	r0, r0, #1
 8006ab2:	bf08      	it	eq
 8006ab4:	2020      	moveq	r0, #32
 8006ab6:	4770      	bx	lr
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e7e5      	b.n	8006a88 <__hi0bits+0xc>

08006abc <__lo0bits>:
 8006abc:	6803      	ldr	r3, [r0, #0]
 8006abe:	4602      	mov	r2, r0
 8006ac0:	f013 0007 	ands.w	r0, r3, #7
 8006ac4:	d00b      	beq.n	8006ade <__lo0bits+0x22>
 8006ac6:	07d9      	lsls	r1, r3, #31
 8006ac8:	d421      	bmi.n	8006b0e <__lo0bits+0x52>
 8006aca:	0798      	lsls	r0, r3, #30
 8006acc:	bf49      	itett	mi
 8006ace:	085b      	lsrmi	r3, r3, #1
 8006ad0:	089b      	lsrpl	r3, r3, #2
 8006ad2:	2001      	movmi	r0, #1
 8006ad4:	6013      	strmi	r3, [r2, #0]
 8006ad6:	bf5c      	itt	pl
 8006ad8:	2002      	movpl	r0, #2
 8006ada:	6013      	strpl	r3, [r2, #0]
 8006adc:	4770      	bx	lr
 8006ade:	b299      	uxth	r1, r3
 8006ae0:	b909      	cbnz	r1, 8006ae6 <__lo0bits+0x2a>
 8006ae2:	2010      	movs	r0, #16
 8006ae4:	0c1b      	lsrs	r3, r3, #16
 8006ae6:	b2d9      	uxtb	r1, r3
 8006ae8:	b909      	cbnz	r1, 8006aee <__lo0bits+0x32>
 8006aea:	3008      	adds	r0, #8
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	0719      	lsls	r1, r3, #28
 8006af0:	bf04      	itt	eq
 8006af2:	091b      	lsreq	r3, r3, #4
 8006af4:	3004      	addeq	r0, #4
 8006af6:	0799      	lsls	r1, r3, #30
 8006af8:	bf04      	itt	eq
 8006afa:	089b      	lsreq	r3, r3, #2
 8006afc:	3002      	addeq	r0, #2
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d403      	bmi.n	8006b0a <__lo0bits+0x4e>
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	f100 0001 	add.w	r0, r0, #1
 8006b08:	d003      	beq.n	8006b12 <__lo0bits+0x56>
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4770      	bx	lr
 8006b0e:	2000      	movs	r0, #0
 8006b10:	4770      	bx	lr
 8006b12:	2020      	movs	r0, #32
 8006b14:	4770      	bx	lr
	...

08006b18 <__i2b>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	f7ff febb 	bl	8006898 <_Balloc>
 8006b22:	4602      	mov	r2, r0
 8006b24:	b928      	cbnz	r0, 8006b32 <__i2b+0x1a>
 8006b26:	f240 1145 	movw	r1, #325	; 0x145
 8006b2a:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <__i2b+0x24>)
 8006b2c:	4804      	ldr	r0, [pc, #16]	; (8006b40 <__i2b+0x28>)
 8006b2e:	f001 fc3f 	bl	80083b0 <__assert_func>
 8006b32:	2301      	movs	r3, #1
 8006b34:	6144      	str	r4, [r0, #20]
 8006b36:	6103      	str	r3, [r0, #16]
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	080091df 	.word	0x080091df
 8006b40:	080091f0 	.word	0x080091f0

08006b44 <__multiply>:
 8006b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b48:	4691      	mov	r9, r2
 8006b4a:	690a      	ldr	r2, [r1, #16]
 8006b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b50:	460c      	mov	r4, r1
 8006b52:	429a      	cmp	r2, r3
 8006b54:	bfbe      	ittt	lt
 8006b56:	460b      	movlt	r3, r1
 8006b58:	464c      	movlt	r4, r9
 8006b5a:	4699      	movlt	r9, r3
 8006b5c:	6927      	ldr	r7, [r4, #16]
 8006b5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	eb07 060a 	add.w	r6, r7, sl
 8006b6a:	42b3      	cmp	r3, r6
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	bfb8      	it	lt
 8006b70:	3101      	addlt	r1, #1
 8006b72:	f7ff fe91 	bl	8006898 <_Balloc>
 8006b76:	b930      	cbnz	r0, 8006b86 <__multiply+0x42>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b7e:	4b43      	ldr	r3, [pc, #268]	; (8006c8c <__multiply+0x148>)
 8006b80:	4843      	ldr	r0, [pc, #268]	; (8006c90 <__multiply+0x14c>)
 8006b82:	f001 fc15 	bl	80083b0 <__assert_func>
 8006b86:	f100 0514 	add.w	r5, r0, #20
 8006b8a:	462b      	mov	r3, r5
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b92:	4543      	cmp	r3, r8
 8006b94:	d321      	bcc.n	8006bda <__multiply+0x96>
 8006b96:	f104 0314 	add.w	r3, r4, #20
 8006b9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b9e:	f109 0314 	add.w	r3, r9, #20
 8006ba2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ba6:	9202      	str	r2, [sp, #8]
 8006ba8:	1b3a      	subs	r2, r7, r4
 8006baa:	3a15      	subs	r2, #21
 8006bac:	f022 0203 	bic.w	r2, r2, #3
 8006bb0:	3204      	adds	r2, #4
 8006bb2:	f104 0115 	add.w	r1, r4, #21
 8006bb6:	428f      	cmp	r7, r1
 8006bb8:	bf38      	it	cc
 8006bba:	2204      	movcc	r2, #4
 8006bbc:	9201      	str	r2, [sp, #4]
 8006bbe:	9a02      	ldr	r2, [sp, #8]
 8006bc0:	9303      	str	r3, [sp, #12]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d80c      	bhi.n	8006be0 <__multiply+0x9c>
 8006bc6:	2e00      	cmp	r6, #0
 8006bc8:	dd03      	ble.n	8006bd2 <__multiply+0x8e>
 8006bca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d05a      	beq.n	8006c88 <__multiply+0x144>
 8006bd2:	6106      	str	r6, [r0, #16]
 8006bd4:	b005      	add	sp, #20
 8006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bda:	f843 2b04 	str.w	r2, [r3], #4
 8006bde:	e7d8      	b.n	8006b92 <__multiply+0x4e>
 8006be0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006be4:	f1ba 0f00 	cmp.w	sl, #0
 8006be8:	d023      	beq.n	8006c32 <__multiply+0xee>
 8006bea:	46a9      	mov	r9, r5
 8006bec:	f04f 0c00 	mov.w	ip, #0
 8006bf0:	f104 0e14 	add.w	lr, r4, #20
 8006bf4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bf8:	f8d9 1000 	ldr.w	r1, [r9]
 8006bfc:	fa1f fb82 	uxth.w	fp, r2
 8006c00:	b289      	uxth	r1, r1
 8006c02:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c06:	4461      	add	r1, ip
 8006c08:	f8d9 c000 	ldr.w	ip, [r9]
 8006c0c:	0c12      	lsrs	r2, r2, #16
 8006c0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c12:	fb0a c202 	mla	r2, sl, r2, ip
 8006c16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c1a:	b289      	uxth	r1, r1
 8006c1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c20:	4577      	cmp	r7, lr
 8006c22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c26:	f849 1b04 	str.w	r1, [r9], #4
 8006c2a:	d8e3      	bhi.n	8006bf4 <__multiply+0xb0>
 8006c2c:	9a01      	ldr	r2, [sp, #4]
 8006c2e:	f845 c002 	str.w	ip, [r5, r2]
 8006c32:	9a03      	ldr	r2, [sp, #12]
 8006c34:	3304      	adds	r3, #4
 8006c36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c3a:	f1b9 0f00 	cmp.w	r9, #0
 8006c3e:	d021      	beq.n	8006c84 <__multiply+0x140>
 8006c40:	46ae      	mov	lr, r5
 8006c42:	f04f 0a00 	mov.w	sl, #0
 8006c46:	6829      	ldr	r1, [r5, #0]
 8006c48:	f104 0c14 	add.w	ip, r4, #20
 8006c4c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c54:	b289      	uxth	r1, r1
 8006c56:	fb09 220b 	mla	r2, r9, fp, r2
 8006c5a:	4452      	add	r2, sl
 8006c5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c60:	f84e 1b04 	str.w	r1, [lr], #4
 8006c64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c6c:	f8be 1000 	ldrh.w	r1, [lr]
 8006c70:	4567      	cmp	r7, ip
 8006c72:	fb09 110a 	mla	r1, r9, sl, r1
 8006c76:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c7a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c7e:	d8e5      	bhi.n	8006c4c <__multiply+0x108>
 8006c80:	9a01      	ldr	r2, [sp, #4]
 8006c82:	50a9      	str	r1, [r5, r2]
 8006c84:	3504      	adds	r5, #4
 8006c86:	e79a      	b.n	8006bbe <__multiply+0x7a>
 8006c88:	3e01      	subs	r6, #1
 8006c8a:	e79c      	b.n	8006bc6 <__multiply+0x82>
 8006c8c:	080091df 	.word	0x080091df
 8006c90:	080091f0 	.word	0x080091f0

08006c94 <__pow5mult>:
 8006c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	4615      	mov	r5, r2
 8006c9a:	f012 0203 	ands.w	r2, r2, #3
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460f      	mov	r7, r1
 8006ca2:	d007      	beq.n	8006cb4 <__pow5mult+0x20>
 8006ca4:	4c25      	ldr	r4, [pc, #148]	; (8006d3c <__pow5mult+0xa8>)
 8006ca6:	3a01      	subs	r2, #1
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cae:	f7ff fe55 	bl	800695c <__multadd>
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	10ad      	asrs	r5, r5, #2
 8006cb6:	d03d      	beq.n	8006d34 <__pow5mult+0xa0>
 8006cb8:	69f4      	ldr	r4, [r6, #28]
 8006cba:	b97c      	cbnz	r4, 8006cdc <__pow5mult+0x48>
 8006cbc:	2010      	movs	r0, #16
 8006cbe:	f7ff fd37 	bl	8006730 <malloc>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	61f0      	str	r0, [r6, #28]
 8006cc6:	b928      	cbnz	r0, 8006cd4 <__pow5mult+0x40>
 8006cc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006ccc:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <__pow5mult+0xac>)
 8006cce:	481d      	ldr	r0, [pc, #116]	; (8006d44 <__pow5mult+0xb0>)
 8006cd0:	f001 fb6e 	bl	80083b0 <__assert_func>
 8006cd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cd8:	6004      	str	r4, [r0, #0]
 8006cda:	60c4      	str	r4, [r0, #12]
 8006cdc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ce4:	b94c      	cbnz	r4, 8006cfa <__pow5mult+0x66>
 8006ce6:	f240 2171 	movw	r1, #625	; 0x271
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ff14 	bl	8006b18 <__i2b>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cf8:	6003      	str	r3, [r0, #0]
 8006cfa:	f04f 0900 	mov.w	r9, #0
 8006cfe:	07eb      	lsls	r3, r5, #31
 8006d00:	d50a      	bpl.n	8006d18 <__pow5mult+0x84>
 8006d02:	4639      	mov	r1, r7
 8006d04:	4622      	mov	r2, r4
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff ff1c 	bl	8006b44 <__multiply>
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4639      	mov	r1, r7
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7ff fe01 	bl	8006918 <_Bfree>
 8006d16:	4647      	mov	r7, r8
 8006d18:	106d      	asrs	r5, r5, #1
 8006d1a:	d00b      	beq.n	8006d34 <__pow5mult+0xa0>
 8006d1c:	6820      	ldr	r0, [r4, #0]
 8006d1e:	b938      	cbnz	r0, 8006d30 <__pow5mult+0x9c>
 8006d20:	4622      	mov	r2, r4
 8006d22:	4621      	mov	r1, r4
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7ff ff0d 	bl	8006b44 <__multiply>
 8006d2a:	6020      	str	r0, [r4, #0]
 8006d2c:	f8c0 9000 	str.w	r9, [r0]
 8006d30:	4604      	mov	r4, r0
 8006d32:	e7e4      	b.n	8006cfe <__pow5mult+0x6a>
 8006d34:	4638      	mov	r0, r7
 8006d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08009340 	.word	0x08009340
 8006d40:	08009170 	.word	0x08009170
 8006d44:	080091f0 	.word	0x080091f0

08006d48 <__lshift>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	4607      	mov	r7, r0
 8006d50:	4691      	mov	r9, r2
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	6849      	ldr	r1, [r1, #4]
 8006d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d60:	f108 0601 	add.w	r6, r8, #1
 8006d64:	42b3      	cmp	r3, r6
 8006d66:	db0b      	blt.n	8006d80 <__lshift+0x38>
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff fd95 	bl	8006898 <_Balloc>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b948      	cbnz	r0, 8006d86 <__lshift+0x3e>
 8006d72:	4602      	mov	r2, r0
 8006d74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d78:	4b27      	ldr	r3, [pc, #156]	; (8006e18 <__lshift+0xd0>)
 8006d7a:	4828      	ldr	r0, [pc, #160]	; (8006e1c <__lshift+0xd4>)
 8006d7c:	f001 fb18 	bl	80083b0 <__assert_func>
 8006d80:	3101      	adds	r1, #1
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	e7ee      	b.n	8006d64 <__lshift+0x1c>
 8006d86:	2300      	movs	r3, #0
 8006d88:	f100 0114 	add.w	r1, r0, #20
 8006d8c:	f100 0210 	add.w	r2, r0, #16
 8006d90:	4618      	mov	r0, r3
 8006d92:	4553      	cmp	r3, sl
 8006d94:	db33      	blt.n	8006dfe <__lshift+0xb6>
 8006d96:	6920      	ldr	r0, [r4, #16]
 8006d98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d9c:	f104 0314 	add.w	r3, r4, #20
 8006da0:	f019 091f 	ands.w	r9, r9, #31
 8006da4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006da8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dac:	d02b      	beq.n	8006e06 <__lshift+0xbe>
 8006dae:	468a      	mov	sl, r1
 8006db0:	2200      	movs	r2, #0
 8006db2:	f1c9 0e20 	rsb	lr, r9, #32
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	fa00 f009 	lsl.w	r0, r0, r9
 8006dbc:	4310      	orrs	r0, r2
 8006dbe:	f84a 0b04 	str.w	r0, [sl], #4
 8006dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc6:	459c      	cmp	ip, r3
 8006dc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dcc:	d8f3      	bhi.n	8006db6 <__lshift+0x6e>
 8006dce:	ebac 0304 	sub.w	r3, ip, r4
 8006dd2:	3b15      	subs	r3, #21
 8006dd4:	f023 0303 	bic.w	r3, r3, #3
 8006dd8:	3304      	adds	r3, #4
 8006dda:	f104 0015 	add.w	r0, r4, #21
 8006dde:	4584      	cmp	ip, r0
 8006de0:	bf38      	it	cc
 8006de2:	2304      	movcc	r3, #4
 8006de4:	50ca      	str	r2, [r1, r3]
 8006de6:	b10a      	cbz	r2, 8006dec <__lshift+0xa4>
 8006de8:	f108 0602 	add.w	r6, r8, #2
 8006dec:	3e01      	subs	r6, #1
 8006dee:	4638      	mov	r0, r7
 8006df0:	4621      	mov	r1, r4
 8006df2:	612e      	str	r6, [r5, #16]
 8006df4:	f7ff fd90 	bl	8006918 <_Bfree>
 8006df8:	4628      	mov	r0, r5
 8006dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e02:	3301      	adds	r3, #1
 8006e04:	e7c5      	b.n	8006d92 <__lshift+0x4a>
 8006e06:	3904      	subs	r1, #4
 8006e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0c:	459c      	cmp	ip, r3
 8006e0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e12:	d8f9      	bhi.n	8006e08 <__lshift+0xc0>
 8006e14:	e7ea      	b.n	8006dec <__lshift+0xa4>
 8006e16:	bf00      	nop
 8006e18:	080091df 	.word	0x080091df
 8006e1c:	080091f0 	.word	0x080091f0

08006e20 <__mcmp>:
 8006e20:	4603      	mov	r3, r0
 8006e22:	690a      	ldr	r2, [r1, #16]
 8006e24:	6900      	ldr	r0, [r0, #16]
 8006e26:	b530      	push	{r4, r5, lr}
 8006e28:	1a80      	subs	r0, r0, r2
 8006e2a:	d10d      	bne.n	8006e48 <__mcmp+0x28>
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	3114      	adds	r1, #20
 8006e30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e40:	4295      	cmp	r5, r2
 8006e42:	d002      	beq.n	8006e4a <__mcmp+0x2a>
 8006e44:	d304      	bcc.n	8006e50 <__mcmp+0x30>
 8006e46:	2001      	movs	r0, #1
 8006e48:	bd30      	pop	{r4, r5, pc}
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	d3f4      	bcc.n	8006e38 <__mcmp+0x18>
 8006e4e:	e7fb      	b.n	8006e48 <__mcmp+0x28>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	e7f8      	b.n	8006e48 <__mcmp+0x28>
	...

08006e58 <__mdiff>:
 8006e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	4607      	mov	r7, r0
 8006e60:	4611      	mov	r1, r2
 8006e62:	4628      	mov	r0, r5
 8006e64:	4614      	mov	r4, r2
 8006e66:	f7ff ffdb 	bl	8006e20 <__mcmp>
 8006e6a:	1e06      	subs	r6, r0, #0
 8006e6c:	d111      	bne.n	8006e92 <__mdiff+0x3a>
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4638      	mov	r0, r7
 8006e72:	f7ff fd11 	bl	8006898 <_Balloc>
 8006e76:	4602      	mov	r2, r0
 8006e78:	b928      	cbnz	r0, 8006e86 <__mdiff+0x2e>
 8006e7a:	f240 2137 	movw	r1, #567	; 0x237
 8006e7e:	4b3a      	ldr	r3, [pc, #232]	; (8006f68 <__mdiff+0x110>)
 8006e80:	483a      	ldr	r0, [pc, #232]	; (8006f6c <__mdiff+0x114>)
 8006e82:	f001 fa95 	bl	80083b0 <__assert_func>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	bfa4      	itt	ge
 8006e94:	4623      	movge	r3, r4
 8006e96:	462c      	movge	r4, r5
 8006e98:	4638      	mov	r0, r7
 8006e9a:	6861      	ldr	r1, [r4, #4]
 8006e9c:	bfa6      	itte	ge
 8006e9e:	461d      	movge	r5, r3
 8006ea0:	2600      	movge	r6, #0
 8006ea2:	2601      	movlt	r6, #1
 8006ea4:	f7ff fcf8 	bl	8006898 <_Balloc>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	b918      	cbnz	r0, 8006eb4 <__mdiff+0x5c>
 8006eac:	f240 2145 	movw	r1, #581	; 0x245
 8006eb0:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <__mdiff+0x110>)
 8006eb2:	e7e5      	b.n	8006e80 <__mdiff+0x28>
 8006eb4:	f102 0814 	add.w	r8, r2, #20
 8006eb8:	46c2      	mov	sl, r8
 8006eba:	f04f 0c00 	mov.w	ip, #0
 8006ebe:	6927      	ldr	r7, [r4, #16]
 8006ec0:	60c6      	str	r6, [r0, #12]
 8006ec2:	692e      	ldr	r6, [r5, #16]
 8006ec4:	f104 0014 	add.w	r0, r4, #20
 8006ec8:	f105 0914 	add.w	r9, r5, #20
 8006ecc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006ed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ed4:	3410      	adds	r4, #16
 8006ed6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006eda:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ede:	fa1f f18b 	uxth.w	r1, fp
 8006ee2:	4461      	add	r1, ip
 8006ee4:	fa1f fc83 	uxth.w	ip, r3
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	eba1 010c 	sub.w	r1, r1, ip
 8006eee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ef2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ef6:	b289      	uxth	r1, r1
 8006ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006efc:	454e      	cmp	r6, r9
 8006efe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f02:	f84a 1b04 	str.w	r1, [sl], #4
 8006f06:	d8e6      	bhi.n	8006ed6 <__mdiff+0x7e>
 8006f08:	1b73      	subs	r3, r6, r5
 8006f0a:	3b15      	subs	r3, #21
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	3515      	adds	r5, #21
 8006f12:	3304      	adds	r3, #4
 8006f14:	42ae      	cmp	r6, r5
 8006f16:	bf38      	it	cc
 8006f18:	2304      	movcc	r3, #4
 8006f1a:	4418      	add	r0, r3
 8006f1c:	4443      	add	r3, r8
 8006f1e:	461e      	mov	r6, r3
 8006f20:	4605      	mov	r5, r0
 8006f22:	4575      	cmp	r5, lr
 8006f24:	d30e      	bcc.n	8006f44 <__mdiff+0xec>
 8006f26:	f10e 0103 	add.w	r1, lr, #3
 8006f2a:	1a09      	subs	r1, r1, r0
 8006f2c:	f021 0103 	bic.w	r1, r1, #3
 8006f30:	3803      	subs	r0, #3
 8006f32:	4586      	cmp	lr, r0
 8006f34:	bf38      	it	cc
 8006f36:	2100      	movcc	r1, #0
 8006f38:	440b      	add	r3, r1
 8006f3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f3e:	b189      	cbz	r1, 8006f64 <__mdiff+0x10c>
 8006f40:	6117      	str	r7, [r2, #16]
 8006f42:	e7a3      	b.n	8006e8c <__mdiff+0x34>
 8006f44:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f48:	fa1f f188 	uxth.w	r1, r8
 8006f4c:	4461      	add	r1, ip
 8006f4e:	140c      	asrs	r4, r1, #16
 8006f50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f54:	b289      	uxth	r1, r1
 8006f56:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f5a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006f5e:	f846 1b04 	str.w	r1, [r6], #4
 8006f62:	e7de      	b.n	8006f22 <__mdiff+0xca>
 8006f64:	3f01      	subs	r7, #1
 8006f66:	e7e8      	b.n	8006f3a <__mdiff+0xe2>
 8006f68:	080091df 	.word	0x080091df
 8006f6c:	080091f0 	.word	0x080091f0

08006f70 <__ulp>:
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <__ulp+0x3c>)
 8006f72:	400b      	ands	r3, r1
 8006f74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dc08      	bgt.n	8006f8e <__ulp+0x1e>
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006f82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006f86:	da04      	bge.n	8006f92 <__ulp+0x22>
 8006f88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f8c:	4113      	asrs	r3, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	e008      	b.n	8006fa4 <__ulp+0x34>
 8006f92:	f1a2 0314 	sub.w	r3, r2, #20
 8006f96:	2b1e      	cmp	r3, #30
 8006f98:	bfd6      	itet	le
 8006f9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006f9e:	2201      	movgt	r2, #1
 8006fa0:	40da      	lsrle	r2, r3
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	7ff00000 	.word	0x7ff00000

08006fb0 <__b2d>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	6905      	ldr	r5, [r0, #16]
 8006fb4:	f100 0714 	add.w	r7, r0, #20
 8006fb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006fbc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006fc0:	1f2e      	subs	r6, r5, #4
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f7ff fd5a 	bl	8006a7c <__hi0bits>
 8006fc8:	f1c0 0220 	rsb	r2, r0, #32
 8006fcc:	280a      	cmp	r0, #10
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800703c <__b2d+0x8c>
 8006fd4:	600a      	str	r2, [r1, #0]
 8006fd6:	dc12      	bgt.n	8006ffe <__b2d+0x4e>
 8006fd8:	f1c0 0e0b 	rsb	lr, r0, #11
 8006fdc:	fa24 f20e 	lsr.w	r2, r4, lr
 8006fe0:	42b7      	cmp	r7, r6
 8006fe2:	ea42 010c 	orr.w	r1, r2, ip
 8006fe6:	bf2c      	ite	cs
 8006fe8:	2200      	movcs	r2, #0
 8006fea:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006fee:	3315      	adds	r3, #21
 8006ff0:	fa04 f303 	lsl.w	r3, r4, r3
 8006ff4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	42b7      	cmp	r7, r6
 8007000:	bf2e      	itee	cs
 8007002:	2200      	movcs	r2, #0
 8007004:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007008:	f1a5 0608 	subcc.w	r6, r5, #8
 800700c:	3b0b      	subs	r3, #11
 800700e:	d012      	beq.n	8007036 <__b2d+0x86>
 8007010:	f1c3 0520 	rsb	r5, r3, #32
 8007014:	fa22 f105 	lsr.w	r1, r2, r5
 8007018:	409c      	lsls	r4, r3
 800701a:	430c      	orrs	r4, r1
 800701c:	42be      	cmp	r6, r7
 800701e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007022:	bf94      	ite	ls
 8007024:	2400      	movls	r4, #0
 8007026:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800702a:	409a      	lsls	r2, r3
 800702c:	40ec      	lsrs	r4, r5
 800702e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007032:	4322      	orrs	r2, r4
 8007034:	e7e1      	b.n	8006ffa <__b2d+0x4a>
 8007036:	ea44 010c 	orr.w	r1, r4, ip
 800703a:	e7de      	b.n	8006ffa <__b2d+0x4a>
 800703c:	3ff00000 	.word	0x3ff00000

08007040 <__d2b>:
 8007040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007042:	2101      	movs	r1, #1
 8007044:	4617      	mov	r7, r2
 8007046:	461c      	mov	r4, r3
 8007048:	9e08      	ldr	r6, [sp, #32]
 800704a:	f7ff fc25 	bl	8006898 <_Balloc>
 800704e:	4605      	mov	r5, r0
 8007050:	b930      	cbnz	r0, 8007060 <__d2b+0x20>
 8007052:	4602      	mov	r2, r0
 8007054:	f240 310f 	movw	r1, #783	; 0x30f
 8007058:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <__d2b+0xa4>)
 800705a:	4823      	ldr	r0, [pc, #140]	; (80070e8 <__d2b+0xa8>)
 800705c:	f001 f9a8 	bl	80083b0 <__assert_func>
 8007060:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007064:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007068:	bb24      	cbnz	r4, 80070b4 <__d2b+0x74>
 800706a:	2f00      	cmp	r7, #0
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	d026      	beq.n	80070be <__d2b+0x7e>
 8007070:	4668      	mov	r0, sp
 8007072:	9700      	str	r7, [sp, #0]
 8007074:	f7ff fd22 	bl	8006abc <__lo0bits>
 8007078:	e9dd 1200 	ldrd	r1, r2, [sp]
 800707c:	b1e8      	cbz	r0, 80070ba <__d2b+0x7a>
 800707e:	f1c0 0320 	rsb	r3, r0, #32
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	430b      	orrs	r3, r1
 8007088:	40c2      	lsrs	r2, r0
 800708a:	616b      	str	r3, [r5, #20]
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bf14      	ite	ne
 8007094:	2102      	movne	r1, #2
 8007096:	2101      	moveq	r1, #1
 8007098:	61ab      	str	r3, [r5, #24]
 800709a:	6129      	str	r1, [r5, #16]
 800709c:	b1bc      	cbz	r4, 80070ce <__d2b+0x8e>
 800709e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80070a2:	4404      	add	r4, r0
 80070a4:	6034      	str	r4, [r6, #0]
 80070a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ac:	6018      	str	r0, [r3, #0]
 80070ae:	4628      	mov	r0, r5
 80070b0:	b003      	add	sp, #12
 80070b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070b8:	e7d7      	b.n	800706a <__d2b+0x2a>
 80070ba:	6169      	str	r1, [r5, #20]
 80070bc:	e7e7      	b.n	800708e <__d2b+0x4e>
 80070be:	a801      	add	r0, sp, #4
 80070c0:	f7ff fcfc 	bl	8006abc <__lo0bits>
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	2101      	movs	r1, #1
 80070c8:	616b      	str	r3, [r5, #20]
 80070ca:	3020      	adds	r0, #32
 80070cc:	e7e5      	b.n	800709a <__d2b+0x5a>
 80070ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070d2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80070d6:	6030      	str	r0, [r6, #0]
 80070d8:	6918      	ldr	r0, [r3, #16]
 80070da:	f7ff fccf 	bl	8006a7c <__hi0bits>
 80070de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80070e2:	e7e2      	b.n	80070aa <__d2b+0x6a>
 80070e4:	080091df 	.word	0x080091df
 80070e8:	080091f0 	.word	0x080091f0

080070ec <__ratio>:
 80070ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f0:	4688      	mov	r8, r1
 80070f2:	4669      	mov	r1, sp
 80070f4:	4681      	mov	r9, r0
 80070f6:	f7ff ff5b 	bl	8006fb0 <__b2d>
 80070fa:	460f      	mov	r7, r1
 80070fc:	4604      	mov	r4, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	4640      	mov	r0, r8
 8007102:	a901      	add	r1, sp, #4
 8007104:	f7ff ff54 	bl	8006fb0 <__b2d>
 8007108:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800710c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007110:	468b      	mov	fp, r1
 8007112:	eba3 0c02 	sub.w	ip, r3, r2
 8007116:	e9dd 3200 	ldrd	r3, r2, [sp]
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007120:	2b00      	cmp	r3, #0
 8007122:	bfd5      	itete	le
 8007124:	460a      	movle	r2, r1
 8007126:	462a      	movgt	r2, r5
 8007128:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800712c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007130:	bfd8      	it	le
 8007132:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007136:	465b      	mov	r3, fp
 8007138:	4602      	mov	r2, r0
 800713a:	4639      	mov	r1, r7
 800713c:	4620      	mov	r0, r4
 800713e:	f7f9 faf5 	bl	800072c <__aeabi_ddiv>
 8007142:	b003      	add	sp, #12
 8007144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007148 <__copybits>:
 8007148:	3901      	subs	r1, #1
 800714a:	b570      	push	{r4, r5, r6, lr}
 800714c:	1149      	asrs	r1, r1, #5
 800714e:	6914      	ldr	r4, [r2, #16]
 8007150:	3101      	adds	r1, #1
 8007152:	f102 0314 	add.w	r3, r2, #20
 8007156:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800715a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800715e:	1f05      	subs	r5, r0, #4
 8007160:	42a3      	cmp	r3, r4
 8007162:	d30c      	bcc.n	800717e <__copybits+0x36>
 8007164:	1aa3      	subs	r3, r4, r2
 8007166:	3b11      	subs	r3, #17
 8007168:	f023 0303 	bic.w	r3, r3, #3
 800716c:	3211      	adds	r2, #17
 800716e:	42a2      	cmp	r2, r4
 8007170:	bf88      	it	hi
 8007172:	2300      	movhi	r3, #0
 8007174:	4418      	add	r0, r3
 8007176:	2300      	movs	r3, #0
 8007178:	4288      	cmp	r0, r1
 800717a:	d305      	bcc.n	8007188 <__copybits+0x40>
 800717c:	bd70      	pop	{r4, r5, r6, pc}
 800717e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007182:	f845 6f04 	str.w	r6, [r5, #4]!
 8007186:	e7eb      	b.n	8007160 <__copybits+0x18>
 8007188:	f840 3b04 	str.w	r3, [r0], #4
 800718c:	e7f4      	b.n	8007178 <__copybits+0x30>

0800718e <__any_on>:
 800718e:	f100 0214 	add.w	r2, r0, #20
 8007192:	6900      	ldr	r0, [r0, #16]
 8007194:	114b      	asrs	r3, r1, #5
 8007196:	4298      	cmp	r0, r3
 8007198:	b510      	push	{r4, lr}
 800719a:	db11      	blt.n	80071c0 <__any_on+0x32>
 800719c:	dd0a      	ble.n	80071b4 <__any_on+0x26>
 800719e:	f011 011f 	ands.w	r1, r1, #31
 80071a2:	d007      	beq.n	80071b4 <__any_on+0x26>
 80071a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80071a8:	fa24 f001 	lsr.w	r0, r4, r1
 80071ac:	fa00 f101 	lsl.w	r1, r0, r1
 80071b0:	428c      	cmp	r4, r1
 80071b2:	d10b      	bne.n	80071cc <__any_on+0x3e>
 80071b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d803      	bhi.n	80071c4 <__any_on+0x36>
 80071bc:	2000      	movs	r0, #0
 80071be:	bd10      	pop	{r4, pc}
 80071c0:	4603      	mov	r3, r0
 80071c2:	e7f7      	b.n	80071b4 <__any_on+0x26>
 80071c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071c8:	2900      	cmp	r1, #0
 80071ca:	d0f5      	beq.n	80071b8 <__any_on+0x2a>
 80071cc:	2001      	movs	r0, #1
 80071ce:	e7f6      	b.n	80071be <__any_on+0x30>

080071d0 <sulp>:
 80071d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d4:	460f      	mov	r7, r1
 80071d6:	4690      	mov	r8, r2
 80071d8:	f7ff feca 	bl	8006f70 <__ulp>
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	f1b8 0f00 	cmp.w	r8, #0
 80071e4:	d011      	beq.n	800720a <sulp+0x3a>
 80071e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80071ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dd0b      	ble.n	800720a <sulp+0x3a>
 80071f2:	2400      	movs	r4, #0
 80071f4:	051b      	lsls	r3, r3, #20
 80071f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80071fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80071fe:	4622      	mov	r2, r4
 8007200:	462b      	mov	r3, r5
 8007202:	f7f9 f969 	bl	80004d8 <__aeabi_dmul>
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
 800720a:	4620      	mov	r0, r4
 800720c:	4629      	mov	r1, r5
 800720e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007212:	0000      	movs	r0, r0
 8007214:	0000      	movs	r0, r0
	...

08007218 <_strtod_l>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	b09f      	sub	sp, #124	; 0x7c
 800721e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007220:	2200      	movs	r2, #0
 8007222:	4604      	mov	r4, r0
 8007224:	921a      	str	r2, [sp, #104]	; 0x68
 8007226:	460d      	mov	r5, r1
 8007228:	f04f 0800 	mov.w	r8, #0
 800722c:	f04f 0900 	mov.w	r9, #0
 8007230:	460a      	mov	r2, r1
 8007232:	9219      	str	r2, [sp, #100]	; 0x64
 8007234:	7811      	ldrb	r1, [r2, #0]
 8007236:	292b      	cmp	r1, #43	; 0x2b
 8007238:	d04a      	beq.n	80072d0 <_strtod_l+0xb8>
 800723a:	d838      	bhi.n	80072ae <_strtod_l+0x96>
 800723c:	290d      	cmp	r1, #13
 800723e:	d832      	bhi.n	80072a6 <_strtod_l+0x8e>
 8007240:	2908      	cmp	r1, #8
 8007242:	d832      	bhi.n	80072aa <_strtod_l+0x92>
 8007244:	2900      	cmp	r1, #0
 8007246:	d03b      	beq.n	80072c0 <_strtod_l+0xa8>
 8007248:	2200      	movs	r2, #0
 800724a:	920e      	str	r2, [sp, #56]	; 0x38
 800724c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800724e:	7832      	ldrb	r2, [r6, #0]
 8007250:	2a30      	cmp	r2, #48	; 0x30
 8007252:	f040 80b2 	bne.w	80073ba <_strtod_l+0x1a2>
 8007256:	7872      	ldrb	r2, [r6, #1]
 8007258:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800725c:	2a58      	cmp	r2, #88	; 0x58
 800725e:	d16e      	bne.n	800733e <_strtod_l+0x126>
 8007260:	9302      	str	r3, [sp, #8]
 8007262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007264:	4620      	mov	r0, r4
 8007266:	9301      	str	r3, [sp, #4]
 8007268:	ab1a      	add	r3, sp, #104	; 0x68
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	4a8c      	ldr	r2, [pc, #560]	; (80074a0 <_strtod_l+0x288>)
 800726e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007270:	a919      	add	r1, sp, #100	; 0x64
 8007272:	f001 f937 	bl	80084e4 <__gethex>
 8007276:	f010 070f 	ands.w	r7, r0, #15
 800727a:	4605      	mov	r5, r0
 800727c:	d005      	beq.n	800728a <_strtod_l+0x72>
 800727e:	2f06      	cmp	r7, #6
 8007280:	d128      	bne.n	80072d4 <_strtod_l+0xbc>
 8007282:	2300      	movs	r3, #0
 8007284:	3601      	adds	r6, #1
 8007286:	9619      	str	r6, [sp, #100]	; 0x64
 8007288:	930e      	str	r3, [sp, #56]	; 0x38
 800728a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 85a0 	bne.w	8007dd2 <_strtod_l+0xbba>
 8007292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007294:	b1cb      	cbz	r3, 80072ca <_strtod_l+0xb2>
 8007296:	4642      	mov	r2, r8
 8007298:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800729c:	4610      	mov	r0, r2
 800729e:	4619      	mov	r1, r3
 80072a0:	b01f      	add	sp, #124	; 0x7c
 80072a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a6:	2920      	cmp	r1, #32
 80072a8:	d1ce      	bne.n	8007248 <_strtod_l+0x30>
 80072aa:	3201      	adds	r2, #1
 80072ac:	e7c1      	b.n	8007232 <_strtod_l+0x1a>
 80072ae:	292d      	cmp	r1, #45	; 0x2d
 80072b0:	d1ca      	bne.n	8007248 <_strtod_l+0x30>
 80072b2:	2101      	movs	r1, #1
 80072b4:	910e      	str	r1, [sp, #56]	; 0x38
 80072b6:	1c51      	adds	r1, r2, #1
 80072b8:	9119      	str	r1, [sp, #100]	; 0x64
 80072ba:	7852      	ldrb	r2, [r2, #1]
 80072bc:	2a00      	cmp	r2, #0
 80072be:	d1c5      	bne.n	800724c <_strtod_l+0x34>
 80072c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072c2:	9519      	str	r5, [sp, #100]	; 0x64
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8582 	bne.w	8007dce <_strtod_l+0xbb6>
 80072ca:	4642      	mov	r2, r8
 80072cc:	464b      	mov	r3, r9
 80072ce:	e7e5      	b.n	800729c <_strtod_l+0x84>
 80072d0:	2100      	movs	r1, #0
 80072d2:	e7ef      	b.n	80072b4 <_strtod_l+0x9c>
 80072d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80072d6:	b13a      	cbz	r2, 80072e8 <_strtod_l+0xd0>
 80072d8:	2135      	movs	r1, #53	; 0x35
 80072da:	a81c      	add	r0, sp, #112	; 0x70
 80072dc:	f7ff ff34 	bl	8007148 <__copybits>
 80072e0:	4620      	mov	r0, r4
 80072e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072e4:	f7ff fb18 	bl	8006918 <_Bfree>
 80072e8:	3f01      	subs	r7, #1
 80072ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80072ec:	2f04      	cmp	r7, #4
 80072ee:	d806      	bhi.n	80072fe <_strtod_l+0xe6>
 80072f0:	e8df f007 	tbb	[pc, r7]
 80072f4:	201d0314 	.word	0x201d0314
 80072f8:	14          	.byte	0x14
 80072f9:	00          	.byte	0x00
 80072fa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80072fe:	05e9      	lsls	r1, r5, #23
 8007300:	bf48      	it	mi
 8007302:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007306:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800730a:	0d1b      	lsrs	r3, r3, #20
 800730c:	051b      	lsls	r3, r3, #20
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1bb      	bne.n	800728a <_strtod_l+0x72>
 8007312:	f7fe fb15 	bl	8005940 <__errno>
 8007316:	2322      	movs	r3, #34	; 0x22
 8007318:	6003      	str	r3, [r0, #0]
 800731a:	e7b6      	b.n	800728a <_strtod_l+0x72>
 800731c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007320:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007324:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007328:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800732c:	e7e7      	b.n	80072fe <_strtod_l+0xe6>
 800732e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80074a4 <_strtod_l+0x28c>
 8007332:	e7e4      	b.n	80072fe <_strtod_l+0xe6>
 8007334:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007338:	f04f 38ff 	mov.w	r8, #4294967295
 800733c:	e7df      	b.n	80072fe <_strtod_l+0xe6>
 800733e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	9219      	str	r2, [sp, #100]	; 0x64
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b30      	cmp	r3, #48	; 0x30
 8007348:	d0f9      	beq.n	800733e <_strtod_l+0x126>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d09d      	beq.n	800728a <_strtod_l+0x72>
 800734e:	2301      	movs	r3, #1
 8007350:	f04f 0a00 	mov.w	sl, #0
 8007354:	220a      	movs	r2, #10
 8007356:	46d3      	mov	fp, sl
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800735c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007360:	930b      	str	r3, [sp, #44]	; 0x2c
 8007362:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007364:	7806      	ldrb	r6, [r0, #0]
 8007366:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800736a:	b2d9      	uxtb	r1, r3
 800736c:	2909      	cmp	r1, #9
 800736e:	d926      	bls.n	80073be <_strtod_l+0x1a6>
 8007370:	2201      	movs	r2, #1
 8007372:	494d      	ldr	r1, [pc, #308]	; (80074a8 <_strtod_l+0x290>)
 8007374:	f000 ffe6 	bl	8008344 <strncmp>
 8007378:	2800      	cmp	r0, #0
 800737a:	d030      	beq.n	80073de <_strtod_l+0x1c6>
 800737c:	2000      	movs	r0, #0
 800737e:	4632      	mov	r2, r6
 8007380:	4603      	mov	r3, r0
 8007382:	465e      	mov	r6, fp
 8007384:	9008      	str	r0, [sp, #32]
 8007386:	2a65      	cmp	r2, #101	; 0x65
 8007388:	d001      	beq.n	800738e <_strtod_l+0x176>
 800738a:	2a45      	cmp	r2, #69	; 0x45
 800738c:	d113      	bne.n	80073b6 <_strtod_l+0x19e>
 800738e:	b91e      	cbnz	r6, 8007398 <_strtod_l+0x180>
 8007390:	9a05      	ldr	r2, [sp, #20]
 8007392:	4302      	orrs	r2, r0
 8007394:	d094      	beq.n	80072c0 <_strtod_l+0xa8>
 8007396:	2600      	movs	r6, #0
 8007398:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800739a:	1c6a      	adds	r2, r5, #1
 800739c:	9219      	str	r2, [sp, #100]	; 0x64
 800739e:	786a      	ldrb	r2, [r5, #1]
 80073a0:	2a2b      	cmp	r2, #43	; 0x2b
 80073a2:	d074      	beq.n	800748e <_strtod_l+0x276>
 80073a4:	2a2d      	cmp	r2, #45	; 0x2d
 80073a6:	d078      	beq.n	800749a <_strtod_l+0x282>
 80073a8:	f04f 0c00 	mov.w	ip, #0
 80073ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80073b0:	2909      	cmp	r1, #9
 80073b2:	d97f      	bls.n	80074b4 <_strtod_l+0x29c>
 80073b4:	9519      	str	r5, [sp, #100]	; 0x64
 80073b6:	2700      	movs	r7, #0
 80073b8:	e09e      	b.n	80074f8 <_strtod_l+0x2e0>
 80073ba:	2300      	movs	r3, #0
 80073bc:	e7c8      	b.n	8007350 <_strtod_l+0x138>
 80073be:	f1bb 0f08 	cmp.w	fp, #8
 80073c2:	bfd8      	it	le
 80073c4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80073c6:	f100 0001 	add.w	r0, r0, #1
 80073ca:	bfd6      	itet	le
 80073cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80073d0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80073d4:	930a      	strle	r3, [sp, #40]	; 0x28
 80073d6:	f10b 0b01 	add.w	fp, fp, #1
 80073da:	9019      	str	r0, [sp, #100]	; 0x64
 80073dc:	e7c1      	b.n	8007362 <_strtod_l+0x14a>
 80073de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	9219      	str	r2, [sp, #100]	; 0x64
 80073e4:	785a      	ldrb	r2, [r3, #1]
 80073e6:	f1bb 0f00 	cmp.w	fp, #0
 80073ea:	d037      	beq.n	800745c <_strtod_l+0x244>
 80073ec:	465e      	mov	r6, fp
 80073ee:	9008      	str	r0, [sp, #32]
 80073f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d912      	bls.n	800741e <_strtod_l+0x206>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e7c4      	b.n	8007386 <_strtod_l+0x16e>
 80073fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073fe:	3001      	adds	r0, #1
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	9219      	str	r2, [sp, #100]	; 0x64
 8007404:	785a      	ldrb	r2, [r3, #1]
 8007406:	2a30      	cmp	r2, #48	; 0x30
 8007408:	d0f8      	beq.n	80073fc <_strtod_l+0x1e4>
 800740a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800740e:	2b08      	cmp	r3, #8
 8007410:	f200 84e4 	bhi.w	8007ddc <_strtod_l+0xbc4>
 8007414:	9008      	str	r0, [sp, #32]
 8007416:	2000      	movs	r0, #0
 8007418:	4606      	mov	r6, r0
 800741a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800741c:	930b      	str	r3, [sp, #44]	; 0x2c
 800741e:	3a30      	subs	r2, #48	; 0x30
 8007420:	f100 0301 	add.w	r3, r0, #1
 8007424:	d014      	beq.n	8007450 <_strtod_l+0x238>
 8007426:	9908      	ldr	r1, [sp, #32]
 8007428:	eb00 0c06 	add.w	ip, r0, r6
 800742c:	4419      	add	r1, r3
 800742e:	9108      	str	r1, [sp, #32]
 8007430:	4633      	mov	r3, r6
 8007432:	210a      	movs	r1, #10
 8007434:	4563      	cmp	r3, ip
 8007436:	d113      	bne.n	8007460 <_strtod_l+0x248>
 8007438:	1833      	adds	r3, r6, r0
 800743a:	2b08      	cmp	r3, #8
 800743c:	f106 0601 	add.w	r6, r6, #1
 8007440:	4406      	add	r6, r0
 8007442:	dc1a      	bgt.n	800747a <_strtod_l+0x262>
 8007444:	230a      	movs	r3, #10
 8007446:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007448:	fb03 2301 	mla	r3, r3, r1, r2
 800744c:	930a      	str	r3, [sp, #40]	; 0x28
 800744e:	2300      	movs	r3, #0
 8007450:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007452:	4618      	mov	r0, r3
 8007454:	1c51      	adds	r1, r2, #1
 8007456:	9119      	str	r1, [sp, #100]	; 0x64
 8007458:	7852      	ldrb	r2, [r2, #1]
 800745a:	e7c9      	b.n	80073f0 <_strtod_l+0x1d8>
 800745c:	4658      	mov	r0, fp
 800745e:	e7d2      	b.n	8007406 <_strtod_l+0x1ee>
 8007460:	2b08      	cmp	r3, #8
 8007462:	f103 0301 	add.w	r3, r3, #1
 8007466:	dc03      	bgt.n	8007470 <_strtod_l+0x258>
 8007468:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800746a:	434f      	muls	r7, r1
 800746c:	970a      	str	r7, [sp, #40]	; 0x28
 800746e:	e7e1      	b.n	8007434 <_strtod_l+0x21c>
 8007470:	2b10      	cmp	r3, #16
 8007472:	bfd8      	it	le
 8007474:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007478:	e7dc      	b.n	8007434 <_strtod_l+0x21c>
 800747a:	2e10      	cmp	r6, #16
 800747c:	bfdc      	itt	le
 800747e:	230a      	movle	r3, #10
 8007480:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007484:	e7e3      	b.n	800744e <_strtod_l+0x236>
 8007486:	2300      	movs	r3, #0
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	2301      	movs	r3, #1
 800748c:	e780      	b.n	8007390 <_strtod_l+0x178>
 800748e:	f04f 0c00 	mov.w	ip, #0
 8007492:	1caa      	adds	r2, r5, #2
 8007494:	9219      	str	r2, [sp, #100]	; 0x64
 8007496:	78aa      	ldrb	r2, [r5, #2]
 8007498:	e788      	b.n	80073ac <_strtod_l+0x194>
 800749a:	f04f 0c01 	mov.w	ip, #1
 800749e:	e7f8      	b.n	8007492 <_strtod_l+0x27a>
 80074a0:	08009350 	.word	0x08009350
 80074a4:	7ff00000 	.word	0x7ff00000
 80074a8:	0800934c 	.word	0x0800934c
 80074ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074ae:	1c51      	adds	r1, r2, #1
 80074b0:	9119      	str	r1, [sp, #100]	; 0x64
 80074b2:	7852      	ldrb	r2, [r2, #1]
 80074b4:	2a30      	cmp	r2, #48	; 0x30
 80074b6:	d0f9      	beq.n	80074ac <_strtod_l+0x294>
 80074b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80074bc:	2908      	cmp	r1, #8
 80074be:	f63f af7a 	bhi.w	80073b6 <_strtod_l+0x19e>
 80074c2:	3a30      	subs	r2, #48	; 0x30
 80074c4:	9209      	str	r2, [sp, #36]	; 0x24
 80074c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074c8:	920c      	str	r2, [sp, #48]	; 0x30
 80074ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074cc:	1c57      	adds	r7, r2, #1
 80074ce:	9719      	str	r7, [sp, #100]	; 0x64
 80074d0:	7852      	ldrb	r2, [r2, #1]
 80074d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80074d6:	f1be 0f09 	cmp.w	lr, #9
 80074da:	d938      	bls.n	800754e <_strtod_l+0x336>
 80074dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074de:	1a7f      	subs	r7, r7, r1
 80074e0:	2f08      	cmp	r7, #8
 80074e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80074e6:	dc03      	bgt.n	80074f0 <_strtod_l+0x2d8>
 80074e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ea:	428f      	cmp	r7, r1
 80074ec:	bfa8      	it	ge
 80074ee:	460f      	movge	r7, r1
 80074f0:	f1bc 0f00 	cmp.w	ip, #0
 80074f4:	d000      	beq.n	80074f8 <_strtod_l+0x2e0>
 80074f6:	427f      	negs	r7, r7
 80074f8:	2e00      	cmp	r6, #0
 80074fa:	d14f      	bne.n	800759c <_strtod_l+0x384>
 80074fc:	9905      	ldr	r1, [sp, #20]
 80074fe:	4301      	orrs	r1, r0
 8007500:	f47f aec3 	bne.w	800728a <_strtod_l+0x72>
 8007504:	2b00      	cmp	r3, #0
 8007506:	f47f aedb 	bne.w	80072c0 <_strtod_l+0xa8>
 800750a:	2a69      	cmp	r2, #105	; 0x69
 800750c:	d029      	beq.n	8007562 <_strtod_l+0x34a>
 800750e:	dc26      	bgt.n	800755e <_strtod_l+0x346>
 8007510:	2a49      	cmp	r2, #73	; 0x49
 8007512:	d026      	beq.n	8007562 <_strtod_l+0x34a>
 8007514:	2a4e      	cmp	r2, #78	; 0x4e
 8007516:	f47f aed3 	bne.w	80072c0 <_strtod_l+0xa8>
 800751a:	499a      	ldr	r1, [pc, #616]	; (8007784 <_strtod_l+0x56c>)
 800751c:	a819      	add	r0, sp, #100	; 0x64
 800751e:	f001 fa23 	bl	8008968 <__match>
 8007522:	2800      	cmp	r0, #0
 8007524:	f43f aecc 	beq.w	80072c0 <_strtod_l+0xa8>
 8007528:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b28      	cmp	r3, #40	; 0x28
 800752e:	d12f      	bne.n	8007590 <_strtod_l+0x378>
 8007530:	4995      	ldr	r1, [pc, #596]	; (8007788 <_strtod_l+0x570>)
 8007532:	aa1c      	add	r2, sp, #112	; 0x70
 8007534:	a819      	add	r0, sp, #100	; 0x64
 8007536:	f001 fa2b 	bl	8008990 <__hexnan>
 800753a:	2805      	cmp	r0, #5
 800753c:	d128      	bne.n	8007590 <_strtod_l+0x378>
 800753e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007540:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007544:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007548:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800754c:	e69d      	b.n	800728a <_strtod_l+0x72>
 800754e:	210a      	movs	r1, #10
 8007550:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007552:	fb01 2107 	mla	r1, r1, r7, r2
 8007556:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800755a:	9209      	str	r2, [sp, #36]	; 0x24
 800755c:	e7b5      	b.n	80074ca <_strtod_l+0x2b2>
 800755e:	2a6e      	cmp	r2, #110	; 0x6e
 8007560:	e7d9      	b.n	8007516 <_strtod_l+0x2fe>
 8007562:	498a      	ldr	r1, [pc, #552]	; (800778c <_strtod_l+0x574>)
 8007564:	a819      	add	r0, sp, #100	; 0x64
 8007566:	f001 f9ff 	bl	8008968 <__match>
 800756a:	2800      	cmp	r0, #0
 800756c:	f43f aea8 	beq.w	80072c0 <_strtod_l+0xa8>
 8007570:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007572:	4987      	ldr	r1, [pc, #540]	; (8007790 <_strtod_l+0x578>)
 8007574:	3b01      	subs	r3, #1
 8007576:	a819      	add	r0, sp, #100	; 0x64
 8007578:	9319      	str	r3, [sp, #100]	; 0x64
 800757a:	f001 f9f5 	bl	8008968 <__match>
 800757e:	b910      	cbnz	r0, 8007586 <_strtod_l+0x36e>
 8007580:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007582:	3301      	adds	r3, #1
 8007584:	9319      	str	r3, [sp, #100]	; 0x64
 8007586:	f04f 0800 	mov.w	r8, #0
 800758a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007794 <_strtod_l+0x57c>
 800758e:	e67c      	b.n	800728a <_strtod_l+0x72>
 8007590:	4881      	ldr	r0, [pc, #516]	; (8007798 <_strtod_l+0x580>)
 8007592:	f000 ff07 	bl	80083a4 <nan>
 8007596:	4680      	mov	r8, r0
 8007598:	4689      	mov	r9, r1
 800759a:	e676      	b.n	800728a <_strtod_l+0x72>
 800759c:	9b08      	ldr	r3, [sp, #32]
 800759e:	f1bb 0f00 	cmp.w	fp, #0
 80075a2:	bf08      	it	eq
 80075a4:	46b3      	moveq	fp, r6
 80075a6:	1afb      	subs	r3, r7, r3
 80075a8:	2e10      	cmp	r6, #16
 80075aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075ac:	4635      	mov	r5, r6
 80075ae:	9309      	str	r3, [sp, #36]	; 0x24
 80075b0:	bfa8      	it	ge
 80075b2:	2510      	movge	r5, #16
 80075b4:	f7f8 ff16 	bl	80003e4 <__aeabi_ui2d>
 80075b8:	2e09      	cmp	r6, #9
 80075ba:	4680      	mov	r8, r0
 80075bc:	4689      	mov	r9, r1
 80075be:	dd13      	ble.n	80075e8 <_strtod_l+0x3d0>
 80075c0:	4b76      	ldr	r3, [pc, #472]	; (800779c <_strtod_l+0x584>)
 80075c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80075c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075ca:	f7f8 ff85 	bl	80004d8 <__aeabi_dmul>
 80075ce:	4680      	mov	r8, r0
 80075d0:	4650      	mov	r0, sl
 80075d2:	4689      	mov	r9, r1
 80075d4:	f7f8 ff06 	bl	80003e4 <__aeabi_ui2d>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f8 fdc4 	bl	800016c <__adddf3>
 80075e4:	4680      	mov	r8, r0
 80075e6:	4689      	mov	r9, r1
 80075e8:	2e0f      	cmp	r6, #15
 80075ea:	dc36      	bgt.n	800765a <_strtod_l+0x442>
 80075ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f43f ae4b 	beq.w	800728a <_strtod_l+0x72>
 80075f4:	dd22      	ble.n	800763c <_strtod_l+0x424>
 80075f6:	2b16      	cmp	r3, #22
 80075f8:	dc09      	bgt.n	800760e <_strtod_l+0x3f6>
 80075fa:	4968      	ldr	r1, [pc, #416]	; (800779c <_strtod_l+0x584>)
 80075fc:	4642      	mov	r2, r8
 80075fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007602:	464b      	mov	r3, r9
 8007604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007608:	f7f8 ff66 	bl	80004d8 <__aeabi_dmul>
 800760c:	e7c3      	b.n	8007596 <_strtod_l+0x37e>
 800760e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007610:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007614:	4293      	cmp	r3, r2
 8007616:	db20      	blt.n	800765a <_strtod_l+0x442>
 8007618:	4c60      	ldr	r4, [pc, #384]	; (800779c <_strtod_l+0x584>)
 800761a:	f1c6 060f 	rsb	r6, r6, #15
 800761e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007622:	4642      	mov	r2, r8
 8007624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007628:	464b      	mov	r3, r9
 800762a:	f7f8 ff55 	bl	80004d8 <__aeabi_dmul>
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	1b9e      	subs	r6, r3, r6
 8007632:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007636:	e9d4 2300 	ldrd	r2, r3, [r4]
 800763a:	e7e5      	b.n	8007608 <_strtod_l+0x3f0>
 800763c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763e:	3316      	adds	r3, #22
 8007640:	db0b      	blt.n	800765a <_strtod_l+0x442>
 8007642:	9b08      	ldr	r3, [sp, #32]
 8007644:	4640      	mov	r0, r8
 8007646:	1bdf      	subs	r7, r3, r7
 8007648:	4b54      	ldr	r3, [pc, #336]	; (800779c <_strtod_l+0x584>)
 800764a:	4649      	mov	r1, r9
 800764c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007654:	f7f9 f86a 	bl	800072c <__aeabi_ddiv>
 8007658:	e79d      	b.n	8007596 <_strtod_l+0x37e>
 800765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765c:	1b75      	subs	r5, r6, r5
 800765e:	441d      	add	r5, r3
 8007660:	2d00      	cmp	r5, #0
 8007662:	dd70      	ble.n	8007746 <_strtod_l+0x52e>
 8007664:	f015 030f 	ands.w	r3, r5, #15
 8007668:	d00a      	beq.n	8007680 <_strtod_l+0x468>
 800766a:	494c      	ldr	r1, [pc, #304]	; (800779c <_strtod_l+0x584>)
 800766c:	4642      	mov	r2, r8
 800766e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007676:	464b      	mov	r3, r9
 8007678:	f7f8 ff2e 	bl	80004d8 <__aeabi_dmul>
 800767c:	4680      	mov	r8, r0
 800767e:	4689      	mov	r9, r1
 8007680:	f035 050f 	bics.w	r5, r5, #15
 8007684:	d04d      	beq.n	8007722 <_strtod_l+0x50a>
 8007686:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800768a:	dd22      	ble.n	80076d2 <_strtod_l+0x4ba>
 800768c:	2600      	movs	r6, #0
 800768e:	46b3      	mov	fp, r6
 8007690:	960b      	str	r6, [sp, #44]	; 0x2c
 8007692:	9608      	str	r6, [sp, #32]
 8007694:	2322      	movs	r3, #34	; 0x22
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007794 <_strtod_l+0x57c>
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f43f adf1 	beq.w	800728a <_strtod_l+0x72>
 80076a8:	4620      	mov	r0, r4
 80076aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076ac:	f7ff f934 	bl	8006918 <_Bfree>
 80076b0:	4620      	mov	r0, r4
 80076b2:	9908      	ldr	r1, [sp, #32]
 80076b4:	f7ff f930 	bl	8006918 <_Bfree>
 80076b8:	4659      	mov	r1, fp
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff f92c 	bl	8006918 <_Bfree>
 80076c0:	4620      	mov	r0, r4
 80076c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076c4:	f7ff f928 	bl	8006918 <_Bfree>
 80076c8:	4631      	mov	r1, r6
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff f924 	bl	8006918 <_Bfree>
 80076d0:	e5db      	b.n	800728a <_strtod_l+0x72>
 80076d2:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <_strtod_l+0x588>)
 80076d4:	4640      	mov	r0, r8
 80076d6:	9305      	str	r3, [sp, #20]
 80076d8:	2300      	movs	r3, #0
 80076da:	4649      	mov	r1, r9
 80076dc:	469a      	mov	sl, r3
 80076de:	112d      	asrs	r5, r5, #4
 80076e0:	2d01      	cmp	r5, #1
 80076e2:	dc21      	bgt.n	8007728 <_strtod_l+0x510>
 80076e4:	b10b      	cbz	r3, 80076ea <_strtod_l+0x4d2>
 80076e6:	4680      	mov	r8, r0
 80076e8:	4689      	mov	r9, r1
 80076ea:	492d      	ldr	r1, [pc, #180]	; (80077a0 <_strtod_l+0x588>)
 80076ec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80076f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80076f4:	4642      	mov	r2, r8
 80076f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fa:	464b      	mov	r3, r9
 80076fc:	f7f8 feec 	bl	80004d8 <__aeabi_dmul>
 8007700:	4b24      	ldr	r3, [pc, #144]	; (8007794 <_strtod_l+0x57c>)
 8007702:	460a      	mov	r2, r1
 8007704:	400b      	ands	r3, r1
 8007706:	4927      	ldr	r1, [pc, #156]	; (80077a4 <_strtod_l+0x58c>)
 8007708:	4680      	mov	r8, r0
 800770a:	428b      	cmp	r3, r1
 800770c:	d8be      	bhi.n	800768c <_strtod_l+0x474>
 800770e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007712:	428b      	cmp	r3, r1
 8007714:	bf86      	itte	hi
 8007716:	f04f 38ff 	movhi.w	r8, #4294967295
 800771a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80077a8 <_strtod_l+0x590>
 800771e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007722:	2300      	movs	r3, #0
 8007724:	9305      	str	r3, [sp, #20]
 8007726:	e07b      	b.n	8007820 <_strtod_l+0x608>
 8007728:	07ea      	lsls	r2, r5, #31
 800772a:	d505      	bpl.n	8007738 <_strtod_l+0x520>
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fed1 	bl	80004d8 <__aeabi_dmul>
 8007736:	2301      	movs	r3, #1
 8007738:	9a05      	ldr	r2, [sp, #20]
 800773a:	f10a 0a01 	add.w	sl, sl, #1
 800773e:	3208      	adds	r2, #8
 8007740:	106d      	asrs	r5, r5, #1
 8007742:	9205      	str	r2, [sp, #20]
 8007744:	e7cc      	b.n	80076e0 <_strtod_l+0x4c8>
 8007746:	d0ec      	beq.n	8007722 <_strtod_l+0x50a>
 8007748:	426d      	negs	r5, r5
 800774a:	f015 020f 	ands.w	r2, r5, #15
 800774e:	d00a      	beq.n	8007766 <_strtod_l+0x54e>
 8007750:	4b12      	ldr	r3, [pc, #72]	; (800779c <_strtod_l+0x584>)
 8007752:	4640      	mov	r0, r8
 8007754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007758:	4649      	mov	r1, r9
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f8 ffe5 	bl	800072c <__aeabi_ddiv>
 8007762:	4680      	mov	r8, r0
 8007764:	4689      	mov	r9, r1
 8007766:	112d      	asrs	r5, r5, #4
 8007768:	d0db      	beq.n	8007722 <_strtod_l+0x50a>
 800776a:	2d1f      	cmp	r5, #31
 800776c:	dd1e      	ble.n	80077ac <_strtod_l+0x594>
 800776e:	2600      	movs	r6, #0
 8007770:	46b3      	mov	fp, r6
 8007772:	960b      	str	r6, [sp, #44]	; 0x2c
 8007774:	9608      	str	r6, [sp, #32]
 8007776:	2322      	movs	r3, #34	; 0x22
 8007778:	f04f 0800 	mov.w	r8, #0
 800777c:	f04f 0900 	mov.w	r9, #0
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	e78d      	b.n	80076a0 <_strtod_l+0x488>
 8007784:	08009137 	.word	0x08009137
 8007788:	08009364 	.word	0x08009364
 800778c:	0800912f 	.word	0x0800912f
 8007790:	08009166 	.word	0x08009166
 8007794:	7ff00000 	.word	0x7ff00000
 8007798:	080094f5 	.word	0x080094f5
 800779c:	08009278 	.word	0x08009278
 80077a0:	08009250 	.word	0x08009250
 80077a4:	7ca00000 	.word	0x7ca00000
 80077a8:	7fefffff 	.word	0x7fefffff
 80077ac:	f015 0310 	ands.w	r3, r5, #16
 80077b0:	bf18      	it	ne
 80077b2:	236a      	movne	r3, #106	; 0x6a
 80077b4:	4640      	mov	r0, r8
 80077b6:	9305      	str	r3, [sp, #20]
 80077b8:	4649      	mov	r1, r9
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007a88 <_strtod_l+0x870>
 80077c0:	07ea      	lsls	r2, r5, #31
 80077c2:	d504      	bpl.n	80077ce <_strtod_l+0x5b6>
 80077c4:	e9da 2300 	ldrd	r2, r3, [sl]
 80077c8:	f7f8 fe86 	bl	80004d8 <__aeabi_dmul>
 80077cc:	2301      	movs	r3, #1
 80077ce:	106d      	asrs	r5, r5, #1
 80077d0:	f10a 0a08 	add.w	sl, sl, #8
 80077d4:	d1f4      	bne.n	80077c0 <_strtod_l+0x5a8>
 80077d6:	b10b      	cbz	r3, 80077dc <_strtod_l+0x5c4>
 80077d8:	4680      	mov	r8, r0
 80077da:	4689      	mov	r9, r1
 80077dc:	9b05      	ldr	r3, [sp, #20]
 80077de:	b1bb      	cbz	r3, 8007810 <_strtod_l+0x5f8>
 80077e0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80077e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	4649      	mov	r1, r9
 80077ec:	dd10      	ble.n	8007810 <_strtod_l+0x5f8>
 80077ee:	2b1f      	cmp	r3, #31
 80077f0:	f340 8128 	ble.w	8007a44 <_strtod_l+0x82c>
 80077f4:	2b34      	cmp	r3, #52	; 0x34
 80077f6:	bfd8      	it	le
 80077f8:	f04f 33ff 	movle.w	r3, #4294967295
 80077fc:	f04f 0800 	mov.w	r8, #0
 8007800:	bfcf      	iteee	gt
 8007802:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007806:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800780a:	4093      	lslle	r3, r2
 800780c:	ea03 0901 	andle.w	r9, r3, r1
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f9 f8c6 	bl	80009a8 <__aeabi_dcmpeq>
 800781c:	2800      	cmp	r0, #0
 800781e:	d1a6      	bne.n	800776e <_strtod_l+0x556>
 8007820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007822:	465a      	mov	r2, fp
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4620      	mov	r0, r4
 8007828:	4633      	mov	r3, r6
 800782a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800782c:	f7ff f8dc 	bl	80069e8 <__s2b>
 8007830:	900b      	str	r0, [sp, #44]	; 0x2c
 8007832:	2800      	cmp	r0, #0
 8007834:	f43f af2a 	beq.w	800768c <_strtod_l+0x474>
 8007838:	2600      	movs	r6, #0
 800783a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800783c:	9b08      	ldr	r3, [sp, #32]
 800783e:	2a00      	cmp	r2, #0
 8007840:	eba3 0307 	sub.w	r3, r3, r7
 8007844:	bfa8      	it	ge
 8007846:	2300      	movge	r3, #0
 8007848:	46b3      	mov	fp, r6
 800784a:	9312      	str	r3, [sp, #72]	; 0x48
 800784c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007850:	9316      	str	r3, [sp, #88]	; 0x58
 8007852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007854:	4620      	mov	r0, r4
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	f7ff f81e 	bl	8006898 <_Balloc>
 800785c:	9008      	str	r0, [sp, #32]
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f af18 	beq.w	8007694 <_strtod_l+0x47c>
 8007864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007866:	300c      	adds	r0, #12
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	f103 010c 	add.w	r1, r3, #12
 800786e:	3202      	adds	r2, #2
 8007870:	0092      	lsls	r2, r2, #2
 8007872:	f000 fd89 	bl	8008388 <memcpy>
 8007876:	ab1c      	add	r3, sp, #112	; 0x70
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	ab1b      	add	r3, sp, #108	; 0x6c
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4642      	mov	r2, r8
 8007880:	464b      	mov	r3, r9
 8007882:	4620      	mov	r0, r4
 8007884:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007888:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800788c:	f7ff fbd8 	bl	8007040 <__d2b>
 8007890:	901a      	str	r0, [sp, #104]	; 0x68
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f aefe 	beq.w	8007694 <_strtod_l+0x47c>
 8007898:	2101      	movs	r1, #1
 800789a:	4620      	mov	r0, r4
 800789c:	f7ff f93c 	bl	8006b18 <__i2b>
 80078a0:	4683      	mov	fp, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f43f aef6 	beq.w	8007694 <_strtod_l+0x47c>
 80078a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80078aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80078ac:	2f00      	cmp	r7, #0
 80078ae:	bfab      	itete	ge
 80078b0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80078b2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80078b4:	eb07 0a03 	addge.w	sl, r7, r3
 80078b8:	1bdd      	sublt	r5, r3, r7
 80078ba:	9b05      	ldr	r3, [sp, #20]
 80078bc:	bfa8      	it	ge
 80078be:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80078c0:	eba7 0703 	sub.w	r7, r7, r3
 80078c4:	4417      	add	r7, r2
 80078c6:	4b71      	ldr	r3, [pc, #452]	; (8007a8c <_strtod_l+0x874>)
 80078c8:	f107 37ff 	add.w	r7, r7, #4294967295
 80078cc:	bfb8      	it	lt
 80078ce:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80078d2:	429f      	cmp	r7, r3
 80078d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078d8:	f280 80c7 	bge.w	8007a6a <_strtod_l+0x852>
 80078dc:	1bdb      	subs	r3, r3, r7
 80078de:	2b1f      	cmp	r3, #31
 80078e0:	f04f 0101 	mov.w	r1, #1
 80078e4:	eba2 0203 	sub.w	r2, r2, r3
 80078e8:	f300 80b3 	bgt.w	8007a52 <_strtod_l+0x83a>
 80078ec:	fa01 f303 	lsl.w	r3, r1, r3
 80078f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80078f2:	2300      	movs	r3, #0
 80078f4:	9310      	str	r3, [sp, #64]	; 0x40
 80078f6:	eb0a 0702 	add.w	r7, sl, r2
 80078fa:	9b05      	ldr	r3, [sp, #20]
 80078fc:	45ba      	cmp	sl, r7
 80078fe:	4415      	add	r5, r2
 8007900:	441d      	add	r5, r3
 8007902:	4653      	mov	r3, sl
 8007904:	bfa8      	it	ge
 8007906:	463b      	movge	r3, r7
 8007908:	42ab      	cmp	r3, r5
 800790a:	bfa8      	it	ge
 800790c:	462b      	movge	r3, r5
 800790e:	2b00      	cmp	r3, #0
 8007910:	bfc2      	ittt	gt
 8007912:	1aff      	subgt	r7, r7, r3
 8007914:	1aed      	subgt	r5, r5, r3
 8007916:	ebaa 0a03 	subgt.w	sl, sl, r3
 800791a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd17      	ble.n	8007950 <_strtod_l+0x738>
 8007920:	4659      	mov	r1, fp
 8007922:	461a      	mov	r2, r3
 8007924:	4620      	mov	r0, r4
 8007926:	f7ff f9b5 	bl	8006c94 <__pow5mult>
 800792a:	4683      	mov	fp, r0
 800792c:	2800      	cmp	r0, #0
 800792e:	f43f aeb1 	beq.w	8007694 <_strtod_l+0x47c>
 8007932:	4601      	mov	r1, r0
 8007934:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007936:	4620      	mov	r0, r4
 8007938:	f7ff f904 	bl	8006b44 <__multiply>
 800793c:	900a      	str	r0, [sp, #40]	; 0x28
 800793e:	2800      	cmp	r0, #0
 8007940:	f43f aea8 	beq.w	8007694 <_strtod_l+0x47c>
 8007944:	4620      	mov	r0, r4
 8007946:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007948:	f7fe ffe6 	bl	8006918 <_Bfree>
 800794c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794e:	931a      	str	r3, [sp, #104]	; 0x68
 8007950:	2f00      	cmp	r7, #0
 8007952:	f300 808f 	bgt.w	8007a74 <_strtod_l+0x85c>
 8007956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	dd08      	ble.n	800796e <_strtod_l+0x756>
 800795c:	4620      	mov	r0, r4
 800795e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007960:	9908      	ldr	r1, [sp, #32]
 8007962:	f7ff f997 	bl	8006c94 <__pow5mult>
 8007966:	9008      	str	r0, [sp, #32]
 8007968:	2800      	cmp	r0, #0
 800796a:	f43f ae93 	beq.w	8007694 <_strtod_l+0x47c>
 800796e:	2d00      	cmp	r5, #0
 8007970:	dd08      	ble.n	8007984 <_strtod_l+0x76c>
 8007972:	462a      	mov	r2, r5
 8007974:	4620      	mov	r0, r4
 8007976:	9908      	ldr	r1, [sp, #32]
 8007978:	f7ff f9e6 	bl	8006d48 <__lshift>
 800797c:	9008      	str	r0, [sp, #32]
 800797e:	2800      	cmp	r0, #0
 8007980:	f43f ae88 	beq.w	8007694 <_strtod_l+0x47c>
 8007984:	f1ba 0f00 	cmp.w	sl, #0
 8007988:	dd08      	ble.n	800799c <_strtod_l+0x784>
 800798a:	4659      	mov	r1, fp
 800798c:	4652      	mov	r2, sl
 800798e:	4620      	mov	r0, r4
 8007990:	f7ff f9da 	bl	8006d48 <__lshift>
 8007994:	4683      	mov	fp, r0
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f ae7c 	beq.w	8007694 <_strtod_l+0x47c>
 800799c:	4620      	mov	r0, r4
 800799e:	9a08      	ldr	r2, [sp, #32]
 80079a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079a2:	f7ff fa59 	bl	8006e58 <__mdiff>
 80079a6:	4606      	mov	r6, r0
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f43f ae73 	beq.w	8007694 <_strtod_l+0x47c>
 80079ae:	2500      	movs	r5, #0
 80079b0:	68c3      	ldr	r3, [r0, #12]
 80079b2:	4659      	mov	r1, fp
 80079b4:	60c5      	str	r5, [r0, #12]
 80079b6:	930a      	str	r3, [sp, #40]	; 0x28
 80079b8:	f7ff fa32 	bl	8006e20 <__mcmp>
 80079bc:	42a8      	cmp	r0, r5
 80079be:	da6b      	bge.n	8007a98 <_strtod_l+0x880>
 80079c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c2:	ea53 0308 	orrs.w	r3, r3, r8
 80079c6:	f040 808f 	bne.w	8007ae8 <_strtod_l+0x8d0>
 80079ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f040 808a 	bne.w	8007ae8 <_strtod_l+0x8d0>
 80079d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079d8:	0d1b      	lsrs	r3, r3, #20
 80079da:	051b      	lsls	r3, r3, #20
 80079dc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079e0:	f240 8082 	bls.w	8007ae8 <_strtod_l+0x8d0>
 80079e4:	6973      	ldr	r3, [r6, #20]
 80079e6:	b913      	cbnz	r3, 80079ee <_strtod_l+0x7d6>
 80079e8:	6933      	ldr	r3, [r6, #16]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	dd7c      	ble.n	8007ae8 <_strtod_l+0x8d0>
 80079ee:	4631      	mov	r1, r6
 80079f0:	2201      	movs	r2, #1
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff f9a8 	bl	8006d48 <__lshift>
 80079f8:	4659      	mov	r1, fp
 80079fa:	4606      	mov	r6, r0
 80079fc:	f7ff fa10 	bl	8006e20 <__mcmp>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	dd71      	ble.n	8007ae8 <_strtod_l+0x8d0>
 8007a04:	9905      	ldr	r1, [sp, #20]
 8007a06:	464b      	mov	r3, r9
 8007a08:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <_strtod_l+0x878>)
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	f000 808d 	beq.w	8007b2a <_strtod_l+0x912>
 8007a10:	ea02 0109 	and.w	r1, r2, r9
 8007a14:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a18:	f300 8087 	bgt.w	8007b2a <_strtod_l+0x912>
 8007a1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a20:	f77f aea9 	ble.w	8007776 <_strtod_l+0x55e>
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <_strtod_l+0x87c>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f7f8 fd54 	bl	80004d8 <__aeabi_dmul>
 8007a30:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <_strtod_l+0x878>)
 8007a32:	4680      	mov	r8, r0
 8007a34:	400b      	ands	r3, r1
 8007a36:	4689      	mov	r9, r1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f47f ae35 	bne.w	80076a8 <_strtod_l+0x490>
 8007a3e:	2322      	movs	r3, #34	; 0x22
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	e631      	b.n	80076a8 <_strtod_l+0x490>
 8007a44:	f04f 32ff 	mov.w	r2, #4294967295
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	ea03 0808 	and.w	r8, r3, r8
 8007a50:	e6de      	b.n	8007810 <_strtod_l+0x5f8>
 8007a52:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007a56:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007a5a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007a5e:	37e2      	adds	r7, #226	; 0xe2
 8007a60:	fa01 f307 	lsl.w	r3, r1, r7
 8007a64:	9310      	str	r3, [sp, #64]	; 0x40
 8007a66:	9113      	str	r1, [sp, #76]	; 0x4c
 8007a68:	e745      	b.n	80078f6 <_strtod_l+0x6de>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9310      	str	r3, [sp, #64]	; 0x40
 8007a6e:	2301      	movs	r3, #1
 8007a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a72:	e740      	b.n	80078f6 <_strtod_l+0x6de>
 8007a74:	463a      	mov	r2, r7
 8007a76:	4620      	mov	r0, r4
 8007a78:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a7a:	f7ff f965 	bl	8006d48 <__lshift>
 8007a7e:	901a      	str	r0, [sp, #104]	; 0x68
 8007a80:	2800      	cmp	r0, #0
 8007a82:	f47f af68 	bne.w	8007956 <_strtod_l+0x73e>
 8007a86:	e605      	b.n	8007694 <_strtod_l+0x47c>
 8007a88:	08009378 	.word	0x08009378
 8007a8c:	fffffc02 	.word	0xfffffc02
 8007a90:	7ff00000 	.word	0x7ff00000
 8007a94:	39500000 	.word	0x39500000
 8007a98:	46ca      	mov	sl, r9
 8007a9a:	d165      	bne.n	8007b68 <_strtod_l+0x950>
 8007a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aa2:	b352      	cbz	r2, 8007afa <_strtod_l+0x8e2>
 8007aa4:	4a9e      	ldr	r2, [pc, #632]	; (8007d20 <_strtod_l+0xb08>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d12a      	bne.n	8007b00 <_strtod_l+0x8e8>
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	4641      	mov	r1, r8
 8007aae:	b1fb      	cbz	r3, 8007af0 <_strtod_l+0x8d8>
 8007ab0:	4b9c      	ldr	r3, [pc, #624]	; (8007d24 <_strtod_l+0xb0c>)
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	ea09 0303 	and.w	r3, r9, r3
 8007aba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007abe:	d81a      	bhi.n	8007af6 <_strtod_l+0x8de>
 8007ac0:	0d1b      	lsrs	r3, r3, #20
 8007ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	4299      	cmp	r1, r3
 8007acc:	d118      	bne.n	8007b00 <_strtod_l+0x8e8>
 8007ace:	4b96      	ldr	r3, [pc, #600]	; (8007d28 <_strtod_l+0xb10>)
 8007ad0:	459a      	cmp	sl, r3
 8007ad2:	d102      	bne.n	8007ada <_strtod_l+0x8c2>
 8007ad4:	3101      	adds	r1, #1
 8007ad6:	f43f addd 	beq.w	8007694 <_strtod_l+0x47c>
 8007ada:	f04f 0800 	mov.w	r8, #0
 8007ade:	4b91      	ldr	r3, [pc, #580]	; (8007d24 <_strtod_l+0xb0c>)
 8007ae0:	ea0a 0303 	and.w	r3, sl, r3
 8007ae4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d19a      	bne.n	8007a24 <_strtod_l+0x80c>
 8007aee:	e5db      	b.n	80076a8 <_strtod_l+0x490>
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295
 8007af4:	e7e9      	b.n	8007aca <_strtod_l+0x8b2>
 8007af6:	4613      	mov	r3, r2
 8007af8:	e7e7      	b.n	8007aca <_strtod_l+0x8b2>
 8007afa:	ea53 0308 	orrs.w	r3, r3, r8
 8007afe:	d081      	beq.n	8007a04 <_strtod_l+0x7ec>
 8007b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b02:	b1e3      	cbz	r3, 8007b3e <_strtod_l+0x926>
 8007b04:	ea13 0f0a 	tst.w	r3, sl
 8007b08:	d0ee      	beq.n	8007ae8 <_strtod_l+0x8d0>
 8007b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	9a05      	ldr	r2, [sp, #20]
 8007b12:	b1c3      	cbz	r3, 8007b46 <_strtod_l+0x92e>
 8007b14:	f7ff fb5c 	bl	80071d0 <sulp>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b20:	f7f8 fb24 	bl	800016c <__adddf3>
 8007b24:	4680      	mov	r8, r0
 8007b26:	4689      	mov	r9, r1
 8007b28:	e7de      	b.n	8007ae8 <_strtod_l+0x8d0>
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007b34:	f04f 38ff 	mov.w	r8, #4294967295
 8007b38:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007b3c:	e7d4      	b.n	8007ae8 <_strtod_l+0x8d0>
 8007b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b40:	ea13 0f08 	tst.w	r3, r8
 8007b44:	e7e0      	b.n	8007b08 <_strtod_l+0x8f0>
 8007b46:	f7ff fb43 	bl	80071d0 <sulp>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b52:	f7f8 fb09 	bl	8000168 <__aeabi_dsub>
 8007b56:	2200      	movs	r2, #0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4689      	mov	r9, r1
 8007b5e:	f7f8 ff23 	bl	80009a8 <__aeabi_dcmpeq>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0c0      	beq.n	8007ae8 <_strtod_l+0x8d0>
 8007b66:	e606      	b.n	8007776 <_strtod_l+0x55e>
 8007b68:	4659      	mov	r1, fp
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7ff fabe 	bl	80070ec <__ratio>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b7e:	f7f8 ff27 	bl	80009d0 <__aeabi_dcmple>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d06f      	beq.n	8007c66 <_strtod_l+0xa4e>
 8007b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d17c      	bne.n	8007c86 <_strtod_l+0xa6e>
 8007b8c:	f1b8 0f00 	cmp.w	r8, #0
 8007b90:	d159      	bne.n	8007c46 <_strtod_l+0xa2e>
 8007b92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d17b      	bne.n	8007c92 <_strtod_l+0xa7a>
 8007b9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4b62      	ldr	r3, [pc, #392]	; (8007d2c <_strtod_l+0xb14>)
 8007ba2:	f7f8 ff0b 	bl	80009bc <__aeabi_dcmplt>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d15a      	bne.n	8007c60 <_strtod_l+0xa48>
 8007baa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4b5f      	ldr	r3, [pc, #380]	; (8007d30 <_strtod_l+0xb18>)
 8007bb2:	f7f8 fc91 	bl	80004d8 <__aeabi_dmul>
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	460f      	mov	r7, r1
 8007bba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007bbe:	9506      	str	r5, [sp, #24]
 8007bc0:	9307      	str	r3, [sp, #28]
 8007bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bc6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007bca:	4b56      	ldr	r3, [pc, #344]	; (8007d24 <_strtod_l+0xb0c>)
 8007bcc:	4a55      	ldr	r2, [pc, #340]	; (8007d24 <_strtod_l+0xb0c>)
 8007bce:	ea0a 0303 	and.w	r3, sl, r3
 8007bd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8007bd4:	4b57      	ldr	r3, [pc, #348]	; (8007d34 <_strtod_l+0xb1c>)
 8007bd6:	ea0a 0202 	and.w	r2, sl, r2
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	f040 80b0 	bne.w	8007d40 <_strtod_l+0xb28>
 8007be0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007be4:	4640      	mov	r0, r8
 8007be6:	4649      	mov	r1, r9
 8007be8:	f7ff f9c2 	bl	8006f70 <__ulp>
 8007bec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bf0:	f7f8 fc72 	bl	80004d8 <__aeabi_dmul>
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	f7f8 fab8 	bl	800016c <__adddf3>
 8007bfc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007d24 <_strtod_l+0xb0c>
 8007c00:	4a4d      	ldr	r2, [pc, #308]	; (8007d38 <_strtod_l+0xb20>)
 8007c02:	ea01 0a0a 	and.w	sl, r1, sl
 8007c06:	4592      	cmp	sl, r2
 8007c08:	4680      	mov	r8, r0
 8007c0a:	d948      	bls.n	8007c9e <_strtod_l+0xa86>
 8007c0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c0e:	4b46      	ldr	r3, [pc, #280]	; (8007d28 <_strtod_l+0xb10>)
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d103      	bne.n	8007c1c <_strtod_l+0xa04>
 8007c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c16:	3301      	adds	r3, #1
 8007c18:	f43f ad3c 	beq.w	8007694 <_strtod_l+0x47c>
 8007c1c:	f04f 38ff 	mov.w	r8, #4294967295
 8007c20:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007d28 <_strtod_l+0xb10>
 8007c24:	4620      	mov	r0, r4
 8007c26:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c28:	f7fe fe76 	bl	8006918 <_Bfree>
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	9908      	ldr	r1, [sp, #32]
 8007c30:	f7fe fe72 	bl	8006918 <_Bfree>
 8007c34:	4659      	mov	r1, fp
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7fe fe6e 	bl	8006918 <_Bfree>
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7fe fe6a 	bl	8006918 <_Bfree>
 8007c44:	e605      	b.n	8007852 <_strtod_l+0x63a>
 8007c46:	f1b8 0f01 	cmp.w	r8, #1
 8007c4a:	d103      	bne.n	8007c54 <_strtod_l+0xa3c>
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	f43f ad91 	beq.w	8007776 <_strtod_l+0x55e>
 8007c54:	2200      	movs	r2, #0
 8007c56:	4b39      	ldr	r3, [pc, #228]	; (8007d3c <_strtod_l+0xb24>)
 8007c58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c5e:	e016      	b.n	8007c8e <_strtod_l+0xa76>
 8007c60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c62:	4f33      	ldr	r7, [pc, #204]	; (8007d30 <_strtod_l+0xb18>)
 8007c64:	e7a9      	b.n	8007bba <_strtod_l+0x9a2>
 8007c66:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <_strtod_l+0xb18>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c6e:	f7f8 fc33 	bl	80004d8 <__aeabi_dmul>
 8007c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c74:	4605      	mov	r5, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d09e      	beq.n	8007bba <_strtod_l+0x9a2>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c84:	e79d      	b.n	8007bc2 <_strtod_l+0x9aa>
 8007c86:	2200      	movs	r2, #0
 8007c88:	4b28      	ldr	r3, [pc, #160]	; (8007d2c <_strtod_l+0xb14>)
 8007c8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c8e:	4f27      	ldr	r7, [pc, #156]	; (8007d2c <_strtod_l+0xb14>)
 8007c90:	e797      	b.n	8007bc2 <_strtod_l+0x9aa>
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b29      	ldr	r3, [pc, #164]	; (8007d3c <_strtod_l+0xb24>)
 8007c96:	4645      	mov	r5, r8
 8007c98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c9c:	e7f7      	b.n	8007c8e <_strtod_l+0xa76>
 8007c9e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007ca2:	9b05      	ldr	r3, [sp, #20]
 8007ca4:	46ca      	mov	sl, r9
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1bc      	bne.n	8007c24 <_strtod_l+0xa0c>
 8007caa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cb0:	0d1b      	lsrs	r3, r3, #20
 8007cb2:	051b      	lsls	r3, r3, #20
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1b5      	bne.n	8007c24 <_strtod_l+0xa0c>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 ff54 	bl	8000b68 <__aeabi_d2lz>
 8007cc0:	f7f8 fbdc 	bl	800047c <__aeabi_l2d>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4628      	mov	r0, r5
 8007cca:	4639      	mov	r1, r7
 8007ccc:	f7f8 fa4c 	bl	8000168 <__aeabi_dsub>
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007cd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cde:	ea4a 0a08 	orr.w	sl, sl, r8
 8007ce2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007ce6:	d06c      	beq.n	8007dc2 <_strtod_l+0xbaa>
 8007ce8:	a309      	add	r3, pc, #36	; (adr r3, 8007d10 <_strtod_l+0xaf8>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 fe65 	bl	80009bc <__aeabi_dcmplt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f47f acd8 	bne.w	80076a8 <_strtod_l+0x490>
 8007cf8:	a307      	add	r3, pc, #28	; (adr r3, 8007d18 <_strtod_l+0xb00>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d02:	f7f8 fe79 	bl	80009f8 <__aeabi_dcmpgt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d08c      	beq.n	8007c24 <_strtod_l+0xa0c>
 8007d0a:	e4cd      	b.n	80076a8 <_strtod_l+0x490>
 8007d0c:	f3af 8000 	nop.w
 8007d10:	94a03595 	.word	0x94a03595
 8007d14:	3fdfffff 	.word	0x3fdfffff
 8007d18:	35afe535 	.word	0x35afe535
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	000fffff 	.word	0x000fffff
 8007d24:	7ff00000 	.word	0x7ff00000
 8007d28:	7fefffff 	.word	0x7fefffff
 8007d2c:	3ff00000 	.word	0x3ff00000
 8007d30:	3fe00000 	.word	0x3fe00000
 8007d34:	7fe00000 	.word	0x7fe00000
 8007d38:	7c9fffff 	.word	0x7c9fffff
 8007d3c:	bff00000 	.word	0xbff00000
 8007d40:	9b05      	ldr	r3, [sp, #20]
 8007d42:	b333      	cbz	r3, 8007d92 <_strtod_l+0xb7a>
 8007d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d4a:	d822      	bhi.n	8007d92 <_strtod_l+0xb7a>
 8007d4c:	a328      	add	r3, pc, #160	; (adr r3, 8007df0 <_strtod_l+0xbd8>)
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	4628      	mov	r0, r5
 8007d54:	4639      	mov	r1, r7
 8007d56:	f7f8 fe3b 	bl	80009d0 <__aeabi_dcmple>
 8007d5a:	b1a0      	cbz	r0, 8007d86 <_strtod_l+0xb6e>
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f7f8 fe92 	bl	8000a88 <__aeabi_d2uiz>
 8007d64:	2801      	cmp	r0, #1
 8007d66:	bf38      	it	cc
 8007d68:	2001      	movcc	r0, #1
 8007d6a:	f7f8 fb3b 	bl	80003e4 <__aeabi_ui2d>
 8007d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d70:	4605      	mov	r5, r0
 8007d72:	460f      	mov	r7, r1
 8007d74:	bb03      	cbnz	r3, 8007db8 <_strtod_l+0xba0>
 8007d76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d7a:	9014      	str	r0, [sp, #80]	; 0x50
 8007d7c:	9315      	str	r3, [sp, #84]	; 0x54
 8007d7e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007d82:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d8a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	9311      	str	r3, [sp, #68]	; 0x44
 8007d92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d96:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007d9a:	f7ff f8e9 	bl	8006f70 <__ulp>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4640      	mov	r0, r8
 8007da4:	4649      	mov	r1, r9
 8007da6:	f7f8 fb97 	bl	80004d8 <__aeabi_dmul>
 8007daa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dae:	f7f8 f9dd 	bl	800016c <__adddf3>
 8007db2:	4680      	mov	r8, r0
 8007db4:	4689      	mov	r9, r1
 8007db6:	e774      	b.n	8007ca2 <_strtod_l+0xa8a>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007dc0:	e7dd      	b.n	8007d7e <_strtod_l+0xb66>
 8007dc2:	a30d      	add	r3, pc, #52	; (adr r3, 8007df8 <_strtod_l+0xbe0>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fdf8 	bl	80009bc <__aeabi_dcmplt>
 8007dcc:	e79b      	b.n	8007d06 <_strtod_l+0xaee>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8007dd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	f7ff ba5b 	b.w	8007292 <_strtod_l+0x7a>
 8007ddc:	2a65      	cmp	r2, #101	; 0x65
 8007dde:	f43f ab52 	beq.w	8007486 <_strtod_l+0x26e>
 8007de2:	2a45      	cmp	r2, #69	; 0x45
 8007de4:	f43f ab4f 	beq.w	8007486 <_strtod_l+0x26e>
 8007de8:	2301      	movs	r3, #1
 8007dea:	f7ff bb87 	b.w	80074fc <_strtod_l+0x2e4>
 8007dee:	bf00      	nop
 8007df0:	ffc00000 	.word	0xffc00000
 8007df4:	41dfffff 	.word	0x41dfffff
 8007df8:	94a03595 	.word	0x94a03595
 8007dfc:	3fcfffff 	.word	0x3fcfffff

08007e00 <_strtod_r>:
 8007e00:	4b01      	ldr	r3, [pc, #4]	; (8007e08 <_strtod_r+0x8>)
 8007e02:	f7ff ba09 	b.w	8007218 <_strtod_l>
 8007e06:	bf00      	nop
 8007e08:	2000006c 	.word	0x2000006c

08007e0c <_strtol_l.constprop.0>:
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e12:	4686      	mov	lr, r0
 8007e14:	4690      	mov	r8, r2
 8007e16:	d001      	beq.n	8007e1c <_strtol_l.constprop.0+0x10>
 8007e18:	2b24      	cmp	r3, #36	; 0x24
 8007e1a:	d906      	bls.n	8007e2a <_strtol_l.constprop.0+0x1e>
 8007e1c:	f7fd fd90 	bl	8005940 <__errno>
 8007e20:	2316      	movs	r3, #22
 8007e22:	6003      	str	r3, [r0, #0]
 8007e24:	2000      	movs	r0, #0
 8007e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	4835      	ldr	r0, [pc, #212]	; (8007f04 <_strtol_l.constprop.0+0xf8>)
 8007e2e:	462a      	mov	r2, r5
 8007e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e34:	5d06      	ldrb	r6, [r0, r4]
 8007e36:	f016 0608 	ands.w	r6, r6, #8
 8007e3a:	d1f8      	bne.n	8007e2e <_strtol_l.constprop.0+0x22>
 8007e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8007e3e:	d12e      	bne.n	8007e9e <_strtol_l.constprop.0+0x92>
 8007e40:	2601      	movs	r6, #1
 8007e42:	782c      	ldrb	r4, [r5, #0]
 8007e44:	1c95      	adds	r5, r2, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d057      	beq.n	8007efa <_strtol_l.constprop.0+0xee>
 8007e4a:	2b10      	cmp	r3, #16
 8007e4c:	d109      	bne.n	8007e62 <_strtol_l.constprop.0+0x56>
 8007e4e:	2c30      	cmp	r4, #48	; 0x30
 8007e50:	d107      	bne.n	8007e62 <_strtol_l.constprop.0+0x56>
 8007e52:	782a      	ldrb	r2, [r5, #0]
 8007e54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e58:	2a58      	cmp	r2, #88	; 0x58
 8007e5a:	d149      	bne.n	8007ef0 <_strtol_l.constprop.0+0xe4>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	786c      	ldrb	r4, [r5, #1]
 8007e60:	3502      	adds	r5, #2
 8007e62:	2200      	movs	r2, #0
 8007e64:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007e68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e6c:	fbbc f9f3 	udiv	r9, ip, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e76:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007e7a:	2f09      	cmp	r7, #9
 8007e7c:	d814      	bhi.n	8007ea8 <_strtol_l.constprop.0+0x9c>
 8007e7e:	463c      	mov	r4, r7
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	dd20      	ble.n	8007ec6 <_strtol_l.constprop.0+0xba>
 8007e84:	1c57      	adds	r7, r2, #1
 8007e86:	d007      	beq.n	8007e98 <_strtol_l.constprop.0+0x8c>
 8007e88:	4581      	cmp	r9, r0
 8007e8a:	d319      	bcc.n	8007ec0 <_strtol_l.constprop.0+0xb4>
 8007e8c:	d101      	bne.n	8007e92 <_strtol_l.constprop.0+0x86>
 8007e8e:	45a2      	cmp	sl, r4
 8007e90:	db16      	blt.n	8007ec0 <_strtol_l.constprop.0+0xb4>
 8007e92:	2201      	movs	r2, #1
 8007e94:	fb00 4003 	mla	r0, r0, r3, r4
 8007e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e9c:	e7eb      	b.n	8007e76 <_strtol_l.constprop.0+0x6a>
 8007e9e:	2c2b      	cmp	r4, #43	; 0x2b
 8007ea0:	bf04      	itt	eq
 8007ea2:	782c      	ldrbeq	r4, [r5, #0]
 8007ea4:	1c95      	addeq	r5, r2, #2
 8007ea6:	e7ce      	b.n	8007e46 <_strtol_l.constprop.0+0x3a>
 8007ea8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007eac:	2f19      	cmp	r7, #25
 8007eae:	d801      	bhi.n	8007eb4 <_strtol_l.constprop.0+0xa8>
 8007eb0:	3c37      	subs	r4, #55	; 0x37
 8007eb2:	e7e5      	b.n	8007e80 <_strtol_l.constprop.0+0x74>
 8007eb4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007eb8:	2f19      	cmp	r7, #25
 8007eba:	d804      	bhi.n	8007ec6 <_strtol_l.constprop.0+0xba>
 8007ebc:	3c57      	subs	r4, #87	; 0x57
 8007ebe:	e7df      	b.n	8007e80 <_strtol_l.constprop.0+0x74>
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec4:	e7e8      	b.n	8007e98 <_strtol_l.constprop.0+0x8c>
 8007ec6:	1c53      	adds	r3, r2, #1
 8007ec8:	d108      	bne.n	8007edc <_strtol_l.constprop.0+0xd0>
 8007eca:	2322      	movs	r3, #34	; 0x22
 8007ecc:	4660      	mov	r0, ip
 8007ece:	f8ce 3000 	str.w	r3, [lr]
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	d0a6      	beq.n	8007e26 <_strtol_l.constprop.0+0x1a>
 8007ed8:	1e69      	subs	r1, r5, #1
 8007eda:	e006      	b.n	8007eea <_strtol_l.constprop.0+0xde>
 8007edc:	b106      	cbz	r6, 8007ee0 <_strtol_l.constprop.0+0xd4>
 8007ede:	4240      	negs	r0, r0
 8007ee0:	f1b8 0f00 	cmp.w	r8, #0
 8007ee4:	d09f      	beq.n	8007e26 <_strtol_l.constprop.0+0x1a>
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	d1f6      	bne.n	8007ed8 <_strtol_l.constprop.0+0xcc>
 8007eea:	f8c8 1000 	str.w	r1, [r8]
 8007eee:	e79a      	b.n	8007e26 <_strtol_l.constprop.0+0x1a>
 8007ef0:	2430      	movs	r4, #48	; 0x30
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1b5      	bne.n	8007e62 <_strtol_l.constprop.0+0x56>
 8007ef6:	2308      	movs	r3, #8
 8007ef8:	e7b3      	b.n	8007e62 <_strtol_l.constprop.0+0x56>
 8007efa:	2c30      	cmp	r4, #48	; 0x30
 8007efc:	d0a9      	beq.n	8007e52 <_strtol_l.constprop.0+0x46>
 8007efe:	230a      	movs	r3, #10
 8007f00:	e7af      	b.n	8007e62 <_strtol_l.constprop.0+0x56>
 8007f02:	bf00      	nop
 8007f04:	080093a1 	.word	0x080093a1

08007f08 <_strtol_r>:
 8007f08:	f7ff bf80 	b.w	8007e0c <_strtol_l.constprop.0>

08007f0c <__ssputs_r>:
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	461f      	mov	r7, r3
 8007f12:	688e      	ldr	r6, [r1, #8]
 8007f14:	4682      	mov	sl, r0
 8007f16:	42be      	cmp	r6, r7
 8007f18:	460c      	mov	r4, r1
 8007f1a:	4690      	mov	r8, r2
 8007f1c:	680b      	ldr	r3, [r1, #0]
 8007f1e:	d82c      	bhi.n	8007f7a <__ssputs_r+0x6e>
 8007f20:	898a      	ldrh	r2, [r1, #12]
 8007f22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f26:	d026      	beq.n	8007f76 <__ssputs_r+0x6a>
 8007f28:	6965      	ldr	r5, [r4, #20]
 8007f2a:	6909      	ldr	r1, [r1, #16]
 8007f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f30:	eba3 0901 	sub.w	r9, r3, r1
 8007f34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f38:	1c7b      	adds	r3, r7, #1
 8007f3a:	444b      	add	r3, r9
 8007f3c:	106d      	asrs	r5, r5, #1
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	bf38      	it	cc
 8007f42:	461d      	movcc	r5, r3
 8007f44:	0553      	lsls	r3, r2, #21
 8007f46:	d527      	bpl.n	8007f98 <__ssputs_r+0x8c>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	f7fe fc19 	bl	8006780 <_malloc_r>
 8007f4e:	4606      	mov	r6, r0
 8007f50:	b360      	cbz	r0, 8007fac <__ssputs_r+0xa0>
 8007f52:	464a      	mov	r2, r9
 8007f54:	6921      	ldr	r1, [r4, #16]
 8007f56:	f000 fa17 	bl	8008388 <memcpy>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	6126      	str	r6, [r4, #16]
 8007f68:	444e      	add	r6, r9
 8007f6a:	6026      	str	r6, [r4, #0]
 8007f6c:	463e      	mov	r6, r7
 8007f6e:	6165      	str	r5, [r4, #20]
 8007f70:	eba5 0509 	sub.w	r5, r5, r9
 8007f74:	60a5      	str	r5, [r4, #8]
 8007f76:	42be      	cmp	r6, r7
 8007f78:	d900      	bls.n	8007f7c <__ssputs_r+0x70>
 8007f7a:	463e      	mov	r6, r7
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	4641      	mov	r1, r8
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	f000 f9c5 	bl	8008310 <memmove>
 8007f86:	2000      	movs	r0, #0
 8007f88:	68a3      	ldr	r3, [r4, #8]
 8007f8a:	1b9b      	subs	r3, r3, r6
 8007f8c:	60a3      	str	r3, [r4, #8]
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	4433      	add	r3, r6
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f98:	462a      	mov	r2, r5
 8007f9a:	f000 fda6 	bl	8008aea <_realloc_r>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d1e0      	bne.n	8007f66 <__ssputs_r+0x5a>
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	6921      	ldr	r1, [r4, #16]
 8007fa8:	f7fe fb7a 	bl	80066a0 <_free_r>
 8007fac:	230c      	movs	r3, #12
 8007fae:	f8ca 3000 	str.w	r3, [sl]
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	e7e9      	b.n	8007f94 <__ssputs_r+0x88>

08007fc0 <_svfiprintf_r>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	4698      	mov	r8, r3
 8007fc6:	898b      	ldrh	r3, [r1, #12]
 8007fc8:	4607      	mov	r7, r0
 8007fca:	061b      	lsls	r3, r3, #24
 8007fcc:	460d      	mov	r5, r1
 8007fce:	4614      	mov	r4, r2
 8007fd0:	b09d      	sub	sp, #116	; 0x74
 8007fd2:	d50e      	bpl.n	8007ff2 <_svfiprintf_r+0x32>
 8007fd4:	690b      	ldr	r3, [r1, #16]
 8007fd6:	b963      	cbnz	r3, 8007ff2 <_svfiprintf_r+0x32>
 8007fd8:	2140      	movs	r1, #64	; 0x40
 8007fda:	f7fe fbd1 	bl	8006780 <_malloc_r>
 8007fde:	6028      	str	r0, [r5, #0]
 8007fe0:	6128      	str	r0, [r5, #16]
 8007fe2:	b920      	cbnz	r0, 8007fee <_svfiprintf_r+0x2e>
 8007fe4:	230c      	movs	r3, #12
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	e0d0      	b.n	8008190 <_svfiprintf_r+0x1d0>
 8007fee:	2340      	movs	r3, #64	; 0x40
 8007ff0:	616b      	str	r3, [r5, #20]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff6:	2320      	movs	r3, #32
 8007ff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ffc:	2330      	movs	r3, #48	; 0x30
 8007ffe:	f04f 0901 	mov.w	r9, #1
 8008002:	f8cd 800c 	str.w	r8, [sp, #12]
 8008006:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80081a8 <_svfiprintf_r+0x1e8>
 800800a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800800e:	4623      	mov	r3, r4
 8008010:	469a      	mov	sl, r3
 8008012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008016:	b10a      	cbz	r2, 800801c <_svfiprintf_r+0x5c>
 8008018:	2a25      	cmp	r2, #37	; 0x25
 800801a:	d1f9      	bne.n	8008010 <_svfiprintf_r+0x50>
 800801c:	ebba 0b04 	subs.w	fp, sl, r4
 8008020:	d00b      	beq.n	800803a <_svfiprintf_r+0x7a>
 8008022:	465b      	mov	r3, fp
 8008024:	4622      	mov	r2, r4
 8008026:	4629      	mov	r1, r5
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff ff6f 	bl	8007f0c <__ssputs_r>
 800802e:	3001      	adds	r0, #1
 8008030:	f000 80a9 	beq.w	8008186 <_svfiprintf_r+0x1c6>
 8008034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008036:	445a      	add	r2, fp
 8008038:	9209      	str	r2, [sp, #36]	; 0x24
 800803a:	f89a 3000 	ldrb.w	r3, [sl]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80a1 	beq.w	8008186 <_svfiprintf_r+0x1c6>
 8008044:	2300      	movs	r3, #0
 8008046:	f04f 32ff 	mov.w	r2, #4294967295
 800804a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800804e:	f10a 0a01 	add.w	sl, sl, #1
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	9307      	str	r3, [sp, #28]
 8008056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800805a:	931a      	str	r3, [sp, #104]	; 0x68
 800805c:	4654      	mov	r4, sl
 800805e:	2205      	movs	r2, #5
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	4850      	ldr	r0, [pc, #320]	; (80081a8 <_svfiprintf_r+0x1e8>)
 8008066:	f7fd fc98 	bl	800599a <memchr>
 800806a:	9a04      	ldr	r2, [sp, #16]
 800806c:	b9d8      	cbnz	r0, 80080a6 <_svfiprintf_r+0xe6>
 800806e:	06d0      	lsls	r0, r2, #27
 8008070:	bf44      	itt	mi
 8008072:	2320      	movmi	r3, #32
 8008074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008078:	0711      	lsls	r1, r2, #28
 800807a:	bf44      	itt	mi
 800807c:	232b      	movmi	r3, #43	; 0x2b
 800807e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008082:	f89a 3000 	ldrb.w	r3, [sl]
 8008086:	2b2a      	cmp	r3, #42	; 0x2a
 8008088:	d015      	beq.n	80080b6 <_svfiprintf_r+0xf6>
 800808a:	4654      	mov	r4, sl
 800808c:	2000      	movs	r0, #0
 800808e:	f04f 0c0a 	mov.w	ip, #10
 8008092:	9a07      	ldr	r2, [sp, #28]
 8008094:	4621      	mov	r1, r4
 8008096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809a:	3b30      	subs	r3, #48	; 0x30
 800809c:	2b09      	cmp	r3, #9
 800809e:	d94d      	bls.n	800813c <_svfiprintf_r+0x17c>
 80080a0:	b1b0      	cbz	r0, 80080d0 <_svfiprintf_r+0x110>
 80080a2:	9207      	str	r2, [sp, #28]
 80080a4:	e014      	b.n	80080d0 <_svfiprintf_r+0x110>
 80080a6:	eba0 0308 	sub.w	r3, r0, r8
 80080aa:	fa09 f303 	lsl.w	r3, r9, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	46a2      	mov	sl, r4
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	e7d2      	b.n	800805c <_svfiprintf_r+0x9c>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	1d19      	adds	r1, r3, #4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	9103      	str	r1, [sp, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfbb      	ittet	lt
 80080c2:	425b      	neglt	r3, r3
 80080c4:	f042 0202 	orrlt.w	r2, r2, #2
 80080c8:	9307      	strge	r3, [sp, #28]
 80080ca:	9307      	strlt	r3, [sp, #28]
 80080cc:	bfb8      	it	lt
 80080ce:	9204      	strlt	r2, [sp, #16]
 80080d0:	7823      	ldrb	r3, [r4, #0]
 80080d2:	2b2e      	cmp	r3, #46	; 0x2e
 80080d4:	d10c      	bne.n	80080f0 <_svfiprintf_r+0x130>
 80080d6:	7863      	ldrb	r3, [r4, #1]
 80080d8:	2b2a      	cmp	r3, #42	; 0x2a
 80080da:	d134      	bne.n	8008146 <_svfiprintf_r+0x186>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	3402      	adds	r4, #2
 80080e0:	1d1a      	adds	r2, r3, #4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	9203      	str	r2, [sp, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bfb8      	it	lt
 80080ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80080ee:	9305      	str	r3, [sp, #20]
 80080f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80081ac <_svfiprintf_r+0x1ec>
 80080f4:	2203      	movs	r2, #3
 80080f6:	4650      	mov	r0, sl
 80080f8:	7821      	ldrb	r1, [r4, #0]
 80080fa:	f7fd fc4e 	bl	800599a <memchr>
 80080fe:	b138      	cbz	r0, 8008110 <_svfiprintf_r+0x150>
 8008100:	2240      	movs	r2, #64	; 0x40
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	eba0 000a 	sub.w	r0, r0, sl
 8008108:	4082      	lsls	r2, r0
 800810a:	4313      	orrs	r3, r2
 800810c:	3401      	adds	r4, #1
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008114:	2206      	movs	r2, #6
 8008116:	4826      	ldr	r0, [pc, #152]	; (80081b0 <_svfiprintf_r+0x1f0>)
 8008118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800811c:	f7fd fc3d 	bl	800599a <memchr>
 8008120:	2800      	cmp	r0, #0
 8008122:	d038      	beq.n	8008196 <_svfiprintf_r+0x1d6>
 8008124:	4b23      	ldr	r3, [pc, #140]	; (80081b4 <_svfiprintf_r+0x1f4>)
 8008126:	bb1b      	cbnz	r3, 8008170 <_svfiprintf_r+0x1b0>
 8008128:	9b03      	ldr	r3, [sp, #12]
 800812a:	3307      	adds	r3, #7
 800812c:	f023 0307 	bic.w	r3, r3, #7
 8008130:	3308      	adds	r3, #8
 8008132:	9303      	str	r3, [sp, #12]
 8008134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008136:	4433      	add	r3, r6
 8008138:	9309      	str	r3, [sp, #36]	; 0x24
 800813a:	e768      	b.n	800800e <_svfiprintf_r+0x4e>
 800813c:	460c      	mov	r4, r1
 800813e:	2001      	movs	r0, #1
 8008140:	fb0c 3202 	mla	r2, ip, r2, r3
 8008144:	e7a6      	b.n	8008094 <_svfiprintf_r+0xd4>
 8008146:	2300      	movs	r3, #0
 8008148:	f04f 0c0a 	mov.w	ip, #10
 800814c:	4619      	mov	r1, r3
 800814e:	3401      	adds	r4, #1
 8008150:	9305      	str	r3, [sp, #20]
 8008152:	4620      	mov	r0, r4
 8008154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008158:	3a30      	subs	r2, #48	; 0x30
 800815a:	2a09      	cmp	r2, #9
 800815c:	d903      	bls.n	8008166 <_svfiprintf_r+0x1a6>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0c6      	beq.n	80080f0 <_svfiprintf_r+0x130>
 8008162:	9105      	str	r1, [sp, #20]
 8008164:	e7c4      	b.n	80080f0 <_svfiprintf_r+0x130>
 8008166:	4604      	mov	r4, r0
 8008168:	2301      	movs	r3, #1
 800816a:	fb0c 2101 	mla	r1, ip, r1, r2
 800816e:	e7f0      	b.n	8008152 <_svfiprintf_r+0x192>
 8008170:	ab03      	add	r3, sp, #12
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	462a      	mov	r2, r5
 8008176:	4638      	mov	r0, r7
 8008178:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <_svfiprintf_r+0x1f8>)
 800817a:	a904      	add	r1, sp, #16
 800817c:	f7fc fc98 	bl	8004ab0 <_printf_float>
 8008180:	1c42      	adds	r2, r0, #1
 8008182:	4606      	mov	r6, r0
 8008184:	d1d6      	bne.n	8008134 <_svfiprintf_r+0x174>
 8008186:	89ab      	ldrh	r3, [r5, #12]
 8008188:	065b      	lsls	r3, r3, #25
 800818a:	f53f af2d 	bmi.w	8007fe8 <_svfiprintf_r+0x28>
 800818e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008190:	b01d      	add	sp, #116	; 0x74
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	ab03      	add	r3, sp, #12
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	462a      	mov	r2, r5
 800819c:	4638      	mov	r0, r7
 800819e:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <_svfiprintf_r+0x1f8>)
 80081a0:	a904      	add	r1, sp, #16
 80081a2:	f7fc ff25 	bl	8004ff0 <_printf_i>
 80081a6:	e7eb      	b.n	8008180 <_svfiprintf_r+0x1c0>
 80081a8:	080094a1 	.word	0x080094a1
 80081ac:	080094a7 	.word	0x080094a7
 80081b0:	080094ab 	.word	0x080094ab
 80081b4:	08004ab1 	.word	0x08004ab1
 80081b8:	08007f0d 	.word	0x08007f0d

080081bc <__sflush_r>:
 80081bc:	898a      	ldrh	r2, [r1, #12]
 80081be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c0:	4605      	mov	r5, r0
 80081c2:	0710      	lsls	r0, r2, #28
 80081c4:	460c      	mov	r4, r1
 80081c6:	d457      	bmi.n	8008278 <__sflush_r+0xbc>
 80081c8:	684b      	ldr	r3, [r1, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dc04      	bgt.n	80081d8 <__sflush_r+0x1c>
 80081ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc01      	bgt.n	80081d8 <__sflush_r+0x1c>
 80081d4:	2000      	movs	r0, #0
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d0fa      	beq.n	80081d4 <__sflush_r+0x18>
 80081de:	2300      	movs	r3, #0
 80081e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081e4:	682f      	ldr	r7, [r5, #0]
 80081e6:	6a21      	ldr	r1, [r4, #32]
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	d032      	beq.n	8008252 <__sflush_r+0x96>
 80081ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	075a      	lsls	r2, r3, #29
 80081f2:	d505      	bpl.n	8008200 <__sflush_r+0x44>
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	1ac0      	subs	r0, r0, r3
 80081f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081fa:	b10b      	cbz	r3, 8008200 <__sflush_r+0x44>
 80081fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081fe:	1ac0      	subs	r0, r0, r3
 8008200:	2300      	movs	r3, #0
 8008202:	4602      	mov	r2, r0
 8008204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008206:	4628      	mov	r0, r5
 8008208:	6a21      	ldr	r1, [r4, #32]
 800820a:	47b0      	blx	r6
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	d106      	bne.n	8008220 <__sflush_r+0x64>
 8008212:	6829      	ldr	r1, [r5, #0]
 8008214:	291d      	cmp	r1, #29
 8008216:	d82b      	bhi.n	8008270 <__sflush_r+0xb4>
 8008218:	4a28      	ldr	r2, [pc, #160]	; (80082bc <__sflush_r+0x100>)
 800821a:	410a      	asrs	r2, r1
 800821c:	07d6      	lsls	r6, r2, #31
 800821e:	d427      	bmi.n	8008270 <__sflush_r+0xb4>
 8008220:	2200      	movs	r2, #0
 8008222:	6062      	str	r2, [r4, #4]
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	04d9      	lsls	r1, r3, #19
 8008228:	6022      	str	r2, [r4, #0]
 800822a:	d504      	bpl.n	8008236 <__sflush_r+0x7a>
 800822c:	1c42      	adds	r2, r0, #1
 800822e:	d101      	bne.n	8008234 <__sflush_r+0x78>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b903      	cbnz	r3, 8008236 <__sflush_r+0x7a>
 8008234:	6560      	str	r0, [r4, #84]	; 0x54
 8008236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008238:	602f      	str	r7, [r5, #0]
 800823a:	2900      	cmp	r1, #0
 800823c:	d0ca      	beq.n	80081d4 <__sflush_r+0x18>
 800823e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008242:	4299      	cmp	r1, r3
 8008244:	d002      	beq.n	800824c <__sflush_r+0x90>
 8008246:	4628      	mov	r0, r5
 8008248:	f7fe fa2a 	bl	80066a0 <_free_r>
 800824c:	2000      	movs	r0, #0
 800824e:	6360      	str	r0, [r4, #52]	; 0x34
 8008250:	e7c1      	b.n	80081d6 <__sflush_r+0x1a>
 8008252:	2301      	movs	r3, #1
 8008254:	4628      	mov	r0, r5
 8008256:	47b0      	blx	r6
 8008258:	1c41      	adds	r1, r0, #1
 800825a:	d1c8      	bne.n	80081ee <__sflush_r+0x32>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0c5      	beq.n	80081ee <__sflush_r+0x32>
 8008262:	2b1d      	cmp	r3, #29
 8008264:	d001      	beq.n	800826a <__sflush_r+0xae>
 8008266:	2b16      	cmp	r3, #22
 8008268:	d101      	bne.n	800826e <__sflush_r+0xb2>
 800826a:	602f      	str	r7, [r5, #0]
 800826c:	e7b2      	b.n	80081d4 <__sflush_r+0x18>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	e7ae      	b.n	80081d6 <__sflush_r+0x1a>
 8008278:	690f      	ldr	r7, [r1, #16]
 800827a:	2f00      	cmp	r7, #0
 800827c:	d0aa      	beq.n	80081d4 <__sflush_r+0x18>
 800827e:	0793      	lsls	r3, r2, #30
 8008280:	bf18      	it	ne
 8008282:	2300      	movne	r3, #0
 8008284:	680e      	ldr	r6, [r1, #0]
 8008286:	bf08      	it	eq
 8008288:	694b      	ldreq	r3, [r1, #20]
 800828a:	1bf6      	subs	r6, r6, r7
 800828c:	600f      	str	r7, [r1, #0]
 800828e:	608b      	str	r3, [r1, #8]
 8008290:	2e00      	cmp	r6, #0
 8008292:	dd9f      	ble.n	80081d4 <__sflush_r+0x18>
 8008294:	4633      	mov	r3, r6
 8008296:	463a      	mov	r2, r7
 8008298:	4628      	mov	r0, r5
 800829a:	6a21      	ldr	r1, [r4, #32]
 800829c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80082a0:	47e0      	blx	ip
 80082a2:	2800      	cmp	r0, #0
 80082a4:	dc06      	bgt.n	80082b4 <__sflush_r+0xf8>
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	e790      	b.n	80081d6 <__sflush_r+0x1a>
 80082b4:	4407      	add	r7, r0
 80082b6:	1a36      	subs	r6, r6, r0
 80082b8:	e7ea      	b.n	8008290 <__sflush_r+0xd4>
 80082ba:	bf00      	nop
 80082bc:	dfbffffe 	.word	0xdfbffffe

080082c0 <_fflush_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	690b      	ldr	r3, [r1, #16]
 80082c4:	4605      	mov	r5, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b913      	cbnz	r3, 80082d0 <_fflush_r+0x10>
 80082ca:	2500      	movs	r5, #0
 80082cc:	4628      	mov	r0, r5
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	b118      	cbz	r0, 80082da <_fflush_r+0x1a>
 80082d2:	6a03      	ldr	r3, [r0, #32]
 80082d4:	b90b      	cbnz	r3, 80082da <_fflush_r+0x1a>
 80082d6:	f7fd fa47 	bl	8005768 <__sinit>
 80082da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f3      	beq.n	80082ca <_fflush_r+0xa>
 80082e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082e4:	07d0      	lsls	r0, r2, #31
 80082e6:	d404      	bmi.n	80082f2 <_fflush_r+0x32>
 80082e8:	0599      	lsls	r1, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_fflush_r+0x32>
 80082ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ee:	f7fd fb52 	bl	8005996 <__retarget_lock_acquire_recursive>
 80082f2:	4628      	mov	r0, r5
 80082f4:	4621      	mov	r1, r4
 80082f6:	f7ff ff61 	bl	80081bc <__sflush_r>
 80082fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082fc:	4605      	mov	r5, r0
 80082fe:	07da      	lsls	r2, r3, #31
 8008300:	d4e4      	bmi.n	80082cc <_fflush_r+0xc>
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	059b      	lsls	r3, r3, #22
 8008306:	d4e1      	bmi.n	80082cc <_fflush_r+0xc>
 8008308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830a:	f7fd fb45 	bl	8005998 <__retarget_lock_release_recursive>
 800830e:	e7dd      	b.n	80082cc <_fflush_r+0xc>

08008310 <memmove>:
 8008310:	4288      	cmp	r0, r1
 8008312:	b510      	push	{r4, lr}
 8008314:	eb01 0402 	add.w	r4, r1, r2
 8008318:	d902      	bls.n	8008320 <memmove+0x10>
 800831a:	4284      	cmp	r4, r0
 800831c:	4623      	mov	r3, r4
 800831e:	d807      	bhi.n	8008330 <memmove+0x20>
 8008320:	1e43      	subs	r3, r0, #1
 8008322:	42a1      	cmp	r1, r4
 8008324:	d008      	beq.n	8008338 <memmove+0x28>
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800832e:	e7f8      	b.n	8008322 <memmove+0x12>
 8008330:	4601      	mov	r1, r0
 8008332:	4402      	add	r2, r0
 8008334:	428a      	cmp	r2, r1
 8008336:	d100      	bne.n	800833a <memmove+0x2a>
 8008338:	bd10      	pop	{r4, pc}
 800833a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800833e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008342:	e7f7      	b.n	8008334 <memmove+0x24>

08008344 <strncmp>:
 8008344:	b510      	push	{r4, lr}
 8008346:	b16a      	cbz	r2, 8008364 <strncmp+0x20>
 8008348:	3901      	subs	r1, #1
 800834a:	1884      	adds	r4, r0, r2
 800834c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008350:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008354:	429a      	cmp	r2, r3
 8008356:	d103      	bne.n	8008360 <strncmp+0x1c>
 8008358:	42a0      	cmp	r0, r4
 800835a:	d001      	beq.n	8008360 <strncmp+0x1c>
 800835c:	2a00      	cmp	r2, #0
 800835e:	d1f5      	bne.n	800834c <strncmp+0x8>
 8008360:	1ad0      	subs	r0, r2, r3
 8008362:	bd10      	pop	{r4, pc}
 8008364:	4610      	mov	r0, r2
 8008366:	e7fc      	b.n	8008362 <strncmp+0x1e>

08008368 <_sbrk_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	2300      	movs	r3, #0
 800836c:	4d05      	ldr	r5, [pc, #20]	; (8008384 <_sbrk_r+0x1c>)
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	f7f9 fbe8 	bl	8001b48 <_sbrk>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_sbrk_r+0x1a>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_sbrk_r+0x1a>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20000590 	.word	0x20000590

08008388 <memcpy>:
 8008388:	440a      	add	r2, r1
 800838a:	4291      	cmp	r1, r2
 800838c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008390:	d100      	bne.n	8008394 <memcpy+0xc>
 8008392:	4770      	bx	lr
 8008394:	b510      	push	{r4, lr}
 8008396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839a:	4291      	cmp	r1, r2
 800839c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a0:	d1f9      	bne.n	8008396 <memcpy+0xe>
 80083a2:	bd10      	pop	{r4, pc}

080083a4 <nan>:
 80083a4:	2000      	movs	r0, #0
 80083a6:	4901      	ldr	r1, [pc, #4]	; (80083ac <nan+0x8>)
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	7ff80000 	.word	0x7ff80000

080083b0 <__assert_func>:
 80083b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083b2:	4614      	mov	r4, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <__assert_func+0x2c>)
 80083b8:	4605      	mov	r5, r0
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68d8      	ldr	r0, [r3, #12]
 80083be:	b14c      	cbz	r4, 80083d4 <__assert_func+0x24>
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <__assert_func+0x30>)
 80083c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083c6:	9100      	str	r1, [sp, #0]
 80083c8:	462b      	mov	r3, r5
 80083ca:	4906      	ldr	r1, [pc, #24]	; (80083e4 <__assert_func+0x34>)
 80083cc:	f000 fbca 	bl	8008b64 <fiprintf>
 80083d0:	f000 fbda 	bl	8008b88 <abort>
 80083d4:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <__assert_func+0x38>)
 80083d6:	461c      	mov	r4, r3
 80083d8:	e7f3      	b.n	80083c2 <__assert_func+0x12>
 80083da:	bf00      	nop
 80083dc:	20000068 	.word	0x20000068
 80083e0:	080094ba 	.word	0x080094ba
 80083e4:	080094c7 	.word	0x080094c7
 80083e8:	080094f5 	.word	0x080094f5

080083ec <_calloc_r>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	fba1 5402 	umull	r5, r4, r1, r2
 80083f2:	b934      	cbnz	r4, 8008402 <_calloc_r+0x16>
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7fe f9c3 	bl	8006780 <_malloc_r>
 80083fa:	4606      	mov	r6, r0
 80083fc:	b928      	cbnz	r0, 800840a <_calloc_r+0x1e>
 80083fe:	4630      	mov	r0, r6
 8008400:	bd70      	pop	{r4, r5, r6, pc}
 8008402:	220c      	movs	r2, #12
 8008404:	2600      	movs	r6, #0
 8008406:	6002      	str	r2, [r0, #0]
 8008408:	e7f9      	b.n	80083fe <_calloc_r+0x12>
 800840a:	462a      	mov	r2, r5
 800840c:	4621      	mov	r1, r4
 800840e:	f7fd fa44 	bl	800589a <memset>
 8008412:	e7f4      	b.n	80083fe <_calloc_r+0x12>

08008414 <rshift>:
 8008414:	6903      	ldr	r3, [r0, #16]
 8008416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800841a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800841e:	f100 0414 	add.w	r4, r0, #20
 8008422:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008426:	dd46      	ble.n	80084b6 <rshift+0xa2>
 8008428:	f011 011f 	ands.w	r1, r1, #31
 800842c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008430:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008434:	d10c      	bne.n	8008450 <rshift+0x3c>
 8008436:	4629      	mov	r1, r5
 8008438:	f100 0710 	add.w	r7, r0, #16
 800843c:	42b1      	cmp	r1, r6
 800843e:	d335      	bcc.n	80084ac <rshift+0x98>
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	1eea      	subs	r2, r5, #3
 8008446:	4296      	cmp	r6, r2
 8008448:	bf38      	it	cc
 800844a:	2300      	movcc	r3, #0
 800844c:	4423      	add	r3, r4
 800844e:	e015      	b.n	800847c <rshift+0x68>
 8008450:	46a1      	mov	r9, r4
 8008452:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008456:	f1c1 0820 	rsb	r8, r1, #32
 800845a:	40cf      	lsrs	r7, r1
 800845c:	f105 0e04 	add.w	lr, r5, #4
 8008460:	4576      	cmp	r6, lr
 8008462:	46f4      	mov	ip, lr
 8008464:	d816      	bhi.n	8008494 <rshift+0x80>
 8008466:	1a9a      	subs	r2, r3, r2
 8008468:	0092      	lsls	r2, r2, #2
 800846a:	3a04      	subs	r2, #4
 800846c:	3501      	adds	r5, #1
 800846e:	42ae      	cmp	r6, r5
 8008470:	bf38      	it	cc
 8008472:	2200      	movcc	r2, #0
 8008474:	18a3      	adds	r3, r4, r2
 8008476:	50a7      	str	r7, [r4, r2]
 8008478:	b107      	cbz	r7, 800847c <rshift+0x68>
 800847a:	3304      	adds	r3, #4
 800847c:	42a3      	cmp	r3, r4
 800847e:	eba3 0204 	sub.w	r2, r3, r4
 8008482:	bf08      	it	eq
 8008484:	2300      	moveq	r3, #0
 8008486:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800848a:	6102      	str	r2, [r0, #16]
 800848c:	bf08      	it	eq
 800848e:	6143      	streq	r3, [r0, #20]
 8008490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008494:	f8dc c000 	ldr.w	ip, [ip]
 8008498:	fa0c fc08 	lsl.w	ip, ip, r8
 800849c:	ea4c 0707 	orr.w	r7, ip, r7
 80084a0:	f849 7b04 	str.w	r7, [r9], #4
 80084a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084a8:	40cf      	lsrs	r7, r1
 80084aa:	e7d9      	b.n	8008460 <rshift+0x4c>
 80084ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80084b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80084b4:	e7c2      	b.n	800843c <rshift+0x28>
 80084b6:	4623      	mov	r3, r4
 80084b8:	e7e0      	b.n	800847c <rshift+0x68>

080084ba <__hexdig_fun>:
 80084ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084be:	2b09      	cmp	r3, #9
 80084c0:	d802      	bhi.n	80084c8 <__hexdig_fun+0xe>
 80084c2:	3820      	subs	r0, #32
 80084c4:	b2c0      	uxtb	r0, r0
 80084c6:	4770      	bx	lr
 80084c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084cc:	2b05      	cmp	r3, #5
 80084ce:	d801      	bhi.n	80084d4 <__hexdig_fun+0x1a>
 80084d0:	3847      	subs	r0, #71	; 0x47
 80084d2:	e7f7      	b.n	80084c4 <__hexdig_fun+0xa>
 80084d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084d8:	2b05      	cmp	r3, #5
 80084da:	d801      	bhi.n	80084e0 <__hexdig_fun+0x26>
 80084dc:	3827      	subs	r0, #39	; 0x27
 80084de:	e7f1      	b.n	80084c4 <__hexdig_fun+0xa>
 80084e0:	2000      	movs	r0, #0
 80084e2:	4770      	bx	lr

080084e4 <__gethex>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	4681      	mov	r9, r0
 80084ea:	468a      	mov	sl, r1
 80084ec:	4617      	mov	r7, r2
 80084ee:	680a      	ldr	r2, [r1, #0]
 80084f0:	b085      	sub	sp, #20
 80084f2:	f102 0b02 	add.w	fp, r2, #2
 80084f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80084fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80084fe:	9302      	str	r3, [sp, #8]
 8008500:	32fe      	adds	r2, #254	; 0xfe
 8008502:	eb02 030b 	add.w	r3, r2, fp
 8008506:	46d8      	mov	r8, fp
 8008508:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	2830      	cmp	r0, #48	; 0x30
 8008510:	d0f7      	beq.n	8008502 <__gethex+0x1e>
 8008512:	f7ff ffd2 	bl	80084ba <__hexdig_fun>
 8008516:	4604      	mov	r4, r0
 8008518:	2800      	cmp	r0, #0
 800851a:	d138      	bne.n	800858e <__gethex+0xaa>
 800851c:	2201      	movs	r2, #1
 800851e:	4640      	mov	r0, r8
 8008520:	49a7      	ldr	r1, [pc, #668]	; (80087c0 <__gethex+0x2dc>)
 8008522:	f7ff ff0f 	bl	8008344 <strncmp>
 8008526:	4606      	mov	r6, r0
 8008528:	2800      	cmp	r0, #0
 800852a:	d169      	bne.n	8008600 <__gethex+0x11c>
 800852c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008530:	465d      	mov	r5, fp
 8008532:	f7ff ffc2 	bl	80084ba <__hexdig_fun>
 8008536:	2800      	cmp	r0, #0
 8008538:	d064      	beq.n	8008604 <__gethex+0x120>
 800853a:	465a      	mov	r2, fp
 800853c:	7810      	ldrb	r0, [r2, #0]
 800853e:	4690      	mov	r8, r2
 8008540:	2830      	cmp	r0, #48	; 0x30
 8008542:	f102 0201 	add.w	r2, r2, #1
 8008546:	d0f9      	beq.n	800853c <__gethex+0x58>
 8008548:	f7ff ffb7 	bl	80084ba <__hexdig_fun>
 800854c:	2301      	movs	r3, #1
 800854e:	fab0 f480 	clz	r4, r0
 8008552:	465e      	mov	r6, fp
 8008554:	0964      	lsrs	r4, r4, #5
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	4642      	mov	r2, r8
 800855a:	4615      	mov	r5, r2
 800855c:	7828      	ldrb	r0, [r5, #0]
 800855e:	3201      	adds	r2, #1
 8008560:	f7ff ffab 	bl	80084ba <__hexdig_fun>
 8008564:	2800      	cmp	r0, #0
 8008566:	d1f8      	bne.n	800855a <__gethex+0x76>
 8008568:	2201      	movs	r2, #1
 800856a:	4628      	mov	r0, r5
 800856c:	4994      	ldr	r1, [pc, #592]	; (80087c0 <__gethex+0x2dc>)
 800856e:	f7ff fee9 	bl	8008344 <strncmp>
 8008572:	b978      	cbnz	r0, 8008594 <__gethex+0xb0>
 8008574:	b946      	cbnz	r6, 8008588 <__gethex+0xa4>
 8008576:	1c6e      	adds	r6, r5, #1
 8008578:	4632      	mov	r2, r6
 800857a:	4615      	mov	r5, r2
 800857c:	7828      	ldrb	r0, [r5, #0]
 800857e:	3201      	adds	r2, #1
 8008580:	f7ff ff9b 	bl	80084ba <__hexdig_fun>
 8008584:	2800      	cmp	r0, #0
 8008586:	d1f8      	bne.n	800857a <__gethex+0x96>
 8008588:	1b73      	subs	r3, r6, r5
 800858a:	009e      	lsls	r6, r3, #2
 800858c:	e004      	b.n	8008598 <__gethex+0xb4>
 800858e:	2400      	movs	r4, #0
 8008590:	4626      	mov	r6, r4
 8008592:	e7e1      	b.n	8008558 <__gethex+0x74>
 8008594:	2e00      	cmp	r6, #0
 8008596:	d1f7      	bne.n	8008588 <__gethex+0xa4>
 8008598:	782b      	ldrb	r3, [r5, #0]
 800859a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800859e:	2b50      	cmp	r3, #80	; 0x50
 80085a0:	d13d      	bne.n	800861e <__gethex+0x13a>
 80085a2:	786b      	ldrb	r3, [r5, #1]
 80085a4:	2b2b      	cmp	r3, #43	; 0x2b
 80085a6:	d02f      	beq.n	8008608 <__gethex+0x124>
 80085a8:	2b2d      	cmp	r3, #45	; 0x2d
 80085aa:	d031      	beq.n	8008610 <__gethex+0x12c>
 80085ac:	f04f 0b00 	mov.w	fp, #0
 80085b0:	1c69      	adds	r1, r5, #1
 80085b2:	7808      	ldrb	r0, [r1, #0]
 80085b4:	f7ff ff81 	bl	80084ba <__hexdig_fun>
 80085b8:	1e42      	subs	r2, r0, #1
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	2a18      	cmp	r2, #24
 80085be:	d82e      	bhi.n	800861e <__gethex+0x13a>
 80085c0:	f1a0 0210 	sub.w	r2, r0, #16
 80085c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085c8:	f7ff ff77 	bl	80084ba <__hexdig_fun>
 80085cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80085d0:	fa5f fc8c 	uxtb.w	ip, ip
 80085d4:	f1bc 0f18 	cmp.w	ip, #24
 80085d8:	d91d      	bls.n	8008616 <__gethex+0x132>
 80085da:	f1bb 0f00 	cmp.w	fp, #0
 80085de:	d000      	beq.n	80085e2 <__gethex+0xfe>
 80085e0:	4252      	negs	r2, r2
 80085e2:	4416      	add	r6, r2
 80085e4:	f8ca 1000 	str.w	r1, [sl]
 80085e8:	b1dc      	cbz	r4, 8008622 <__gethex+0x13e>
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bf14      	ite	ne
 80085f0:	f04f 0800 	movne.w	r8, #0
 80085f4:	f04f 0806 	moveq.w	r8, #6
 80085f8:	4640      	mov	r0, r8
 80085fa:	b005      	add	sp, #20
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008600:	4645      	mov	r5, r8
 8008602:	4626      	mov	r6, r4
 8008604:	2401      	movs	r4, #1
 8008606:	e7c7      	b.n	8008598 <__gethex+0xb4>
 8008608:	f04f 0b00 	mov.w	fp, #0
 800860c:	1ca9      	adds	r1, r5, #2
 800860e:	e7d0      	b.n	80085b2 <__gethex+0xce>
 8008610:	f04f 0b01 	mov.w	fp, #1
 8008614:	e7fa      	b.n	800860c <__gethex+0x128>
 8008616:	230a      	movs	r3, #10
 8008618:	fb03 0002 	mla	r0, r3, r2, r0
 800861c:	e7d0      	b.n	80085c0 <__gethex+0xdc>
 800861e:	4629      	mov	r1, r5
 8008620:	e7e0      	b.n	80085e4 <__gethex+0x100>
 8008622:	4621      	mov	r1, r4
 8008624:	eba5 0308 	sub.w	r3, r5, r8
 8008628:	3b01      	subs	r3, #1
 800862a:	2b07      	cmp	r3, #7
 800862c:	dc0a      	bgt.n	8008644 <__gethex+0x160>
 800862e:	4648      	mov	r0, r9
 8008630:	f7fe f932 	bl	8006898 <_Balloc>
 8008634:	4604      	mov	r4, r0
 8008636:	b940      	cbnz	r0, 800864a <__gethex+0x166>
 8008638:	4602      	mov	r2, r0
 800863a:	21e4      	movs	r1, #228	; 0xe4
 800863c:	4b61      	ldr	r3, [pc, #388]	; (80087c4 <__gethex+0x2e0>)
 800863e:	4862      	ldr	r0, [pc, #392]	; (80087c8 <__gethex+0x2e4>)
 8008640:	f7ff feb6 	bl	80083b0 <__assert_func>
 8008644:	3101      	adds	r1, #1
 8008646:	105b      	asrs	r3, r3, #1
 8008648:	e7ef      	b.n	800862a <__gethex+0x146>
 800864a:	2300      	movs	r3, #0
 800864c:	469b      	mov	fp, r3
 800864e:	f100 0a14 	add.w	sl, r0, #20
 8008652:	f8cd a004 	str.w	sl, [sp, #4]
 8008656:	45a8      	cmp	r8, r5
 8008658:	d344      	bcc.n	80086e4 <__gethex+0x200>
 800865a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800865e:	4658      	mov	r0, fp
 8008660:	f848 bb04 	str.w	fp, [r8], #4
 8008664:	eba8 080a 	sub.w	r8, r8, sl
 8008668:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800866c:	6122      	str	r2, [r4, #16]
 800866e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008672:	f7fe fa03 	bl	8006a7c <__hi0bits>
 8008676:	683d      	ldr	r5, [r7, #0]
 8008678:	eba8 0800 	sub.w	r8, r8, r0
 800867c:	45a8      	cmp	r8, r5
 800867e:	dd59      	ble.n	8008734 <__gethex+0x250>
 8008680:	eba8 0805 	sub.w	r8, r8, r5
 8008684:	4641      	mov	r1, r8
 8008686:	4620      	mov	r0, r4
 8008688:	f7fe fd81 	bl	800718e <__any_on>
 800868c:	4683      	mov	fp, r0
 800868e:	b1b8      	cbz	r0, 80086c0 <__gethex+0x1dc>
 8008690:	f04f 0b01 	mov.w	fp, #1
 8008694:	f108 33ff 	add.w	r3, r8, #4294967295
 8008698:	1159      	asrs	r1, r3, #5
 800869a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800869e:	f003 021f 	and.w	r2, r3, #31
 80086a2:	fa0b f202 	lsl.w	r2, fp, r2
 80086a6:	420a      	tst	r2, r1
 80086a8:	d00a      	beq.n	80086c0 <__gethex+0x1dc>
 80086aa:	455b      	cmp	r3, fp
 80086ac:	dd06      	ble.n	80086bc <__gethex+0x1d8>
 80086ae:	4620      	mov	r0, r4
 80086b0:	f1a8 0102 	sub.w	r1, r8, #2
 80086b4:	f7fe fd6b 	bl	800718e <__any_on>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d138      	bne.n	800872e <__gethex+0x24a>
 80086bc:	f04f 0b02 	mov.w	fp, #2
 80086c0:	4641      	mov	r1, r8
 80086c2:	4620      	mov	r0, r4
 80086c4:	f7ff fea6 	bl	8008414 <rshift>
 80086c8:	4446      	add	r6, r8
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	42b3      	cmp	r3, r6
 80086ce:	da41      	bge.n	8008754 <__gethex+0x270>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4648      	mov	r0, r9
 80086d4:	f7fe f920 	bl	8006918 <_Bfree>
 80086d8:	2300      	movs	r3, #0
 80086da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	e789      	b.n	80085f8 <__gethex+0x114>
 80086e4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80086e8:	2a2e      	cmp	r2, #46	; 0x2e
 80086ea:	d014      	beq.n	8008716 <__gethex+0x232>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d106      	bne.n	80086fe <__gethex+0x21a>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	f843 bb04 	str.w	fp, [r3], #4
 80086f6:	f04f 0b00 	mov.w	fp, #0
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	465b      	mov	r3, fp
 80086fe:	7828      	ldrb	r0, [r5, #0]
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	f7ff feda 	bl	80084ba <__hexdig_fun>
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	f000 000f 	and.w	r0, r0, #15
 800870c:	4098      	lsls	r0, r3
 800870e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008712:	3304      	adds	r3, #4
 8008714:	e79f      	b.n	8008656 <__gethex+0x172>
 8008716:	45a8      	cmp	r8, r5
 8008718:	d8e8      	bhi.n	80086ec <__gethex+0x208>
 800871a:	2201      	movs	r2, #1
 800871c:	4628      	mov	r0, r5
 800871e:	4928      	ldr	r1, [pc, #160]	; (80087c0 <__gethex+0x2dc>)
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	f7ff fe0f 	bl	8008344 <strncmp>
 8008726:	9b03      	ldr	r3, [sp, #12]
 8008728:	2800      	cmp	r0, #0
 800872a:	d1df      	bne.n	80086ec <__gethex+0x208>
 800872c:	e793      	b.n	8008656 <__gethex+0x172>
 800872e:	f04f 0b03 	mov.w	fp, #3
 8008732:	e7c5      	b.n	80086c0 <__gethex+0x1dc>
 8008734:	da0b      	bge.n	800874e <__gethex+0x26a>
 8008736:	eba5 0808 	sub.w	r8, r5, r8
 800873a:	4621      	mov	r1, r4
 800873c:	4642      	mov	r2, r8
 800873e:	4648      	mov	r0, r9
 8008740:	f7fe fb02 	bl	8006d48 <__lshift>
 8008744:	4604      	mov	r4, r0
 8008746:	eba6 0608 	sub.w	r6, r6, r8
 800874a:	f100 0a14 	add.w	sl, r0, #20
 800874e:	f04f 0b00 	mov.w	fp, #0
 8008752:	e7ba      	b.n	80086ca <__gethex+0x1e6>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	42b3      	cmp	r3, r6
 8008758:	dd74      	ble.n	8008844 <__gethex+0x360>
 800875a:	1b9e      	subs	r6, r3, r6
 800875c:	42b5      	cmp	r5, r6
 800875e:	dc35      	bgt.n	80087cc <__gethex+0x2e8>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d023      	beq.n	80087ae <__gethex+0x2ca>
 8008766:	2b03      	cmp	r3, #3
 8008768:	d025      	beq.n	80087b6 <__gethex+0x2d2>
 800876a:	2b01      	cmp	r3, #1
 800876c:	d115      	bne.n	800879a <__gethex+0x2b6>
 800876e:	42b5      	cmp	r5, r6
 8008770:	d113      	bne.n	800879a <__gethex+0x2b6>
 8008772:	2d01      	cmp	r5, #1
 8008774:	d10b      	bne.n	800878e <__gethex+0x2aa>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	9a02      	ldr	r2, [sp, #8]
 800877a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	2301      	movs	r3, #1
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	f8ca 3000 	str.w	r3, [sl]
 8008788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800878a:	601c      	str	r4, [r3, #0]
 800878c:	e734      	b.n	80085f8 <__gethex+0x114>
 800878e:	4620      	mov	r0, r4
 8008790:	1e69      	subs	r1, r5, #1
 8008792:	f7fe fcfc 	bl	800718e <__any_on>
 8008796:	2800      	cmp	r0, #0
 8008798:	d1ed      	bne.n	8008776 <__gethex+0x292>
 800879a:	4621      	mov	r1, r4
 800879c:	4648      	mov	r0, r9
 800879e:	f7fe f8bb 	bl	8006918 <_Bfree>
 80087a2:	2300      	movs	r3, #0
 80087a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	e724      	b.n	80085f8 <__gethex+0x114>
 80087ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f2      	bne.n	800879a <__gethex+0x2b6>
 80087b4:	e7df      	b.n	8008776 <__gethex+0x292>
 80087b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1dc      	bne.n	8008776 <__gethex+0x292>
 80087bc:	e7ed      	b.n	800879a <__gethex+0x2b6>
 80087be:	bf00      	nop
 80087c0:	0800934c 	.word	0x0800934c
 80087c4:	080091df 	.word	0x080091df
 80087c8:	080094f6 	.word	0x080094f6
 80087cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80087d0:	f1bb 0f00 	cmp.w	fp, #0
 80087d4:	d133      	bne.n	800883e <__gethex+0x35a>
 80087d6:	f1b8 0f00 	cmp.w	r8, #0
 80087da:	d004      	beq.n	80087e6 <__gethex+0x302>
 80087dc:	4641      	mov	r1, r8
 80087de:	4620      	mov	r0, r4
 80087e0:	f7fe fcd5 	bl	800718e <__any_on>
 80087e4:	4683      	mov	fp, r0
 80087e6:	2301      	movs	r3, #1
 80087e8:	ea4f 1268 	mov.w	r2, r8, asr #5
 80087ec:	f008 081f 	and.w	r8, r8, #31
 80087f0:	fa03 f308 	lsl.w	r3, r3, r8
 80087f4:	f04f 0802 	mov.w	r8, #2
 80087f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80087fc:	4631      	mov	r1, r6
 80087fe:	4213      	tst	r3, r2
 8008800:	4620      	mov	r0, r4
 8008802:	bf18      	it	ne
 8008804:	f04b 0b02 	orrne.w	fp, fp, #2
 8008808:	1bad      	subs	r5, r5, r6
 800880a:	f7ff fe03 	bl	8008414 <rshift>
 800880e:	687e      	ldr	r6, [r7, #4]
 8008810:	f1bb 0f00 	cmp.w	fp, #0
 8008814:	d04a      	beq.n	80088ac <__gethex+0x3c8>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d016      	beq.n	800884a <__gethex+0x366>
 800881c:	2b03      	cmp	r3, #3
 800881e:	d018      	beq.n	8008852 <__gethex+0x36e>
 8008820:	2b01      	cmp	r3, #1
 8008822:	d109      	bne.n	8008838 <__gethex+0x354>
 8008824:	f01b 0f02 	tst.w	fp, #2
 8008828:	d006      	beq.n	8008838 <__gethex+0x354>
 800882a:	f8da 3000 	ldr.w	r3, [sl]
 800882e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008832:	f01b 0f01 	tst.w	fp, #1
 8008836:	d10f      	bne.n	8008858 <__gethex+0x374>
 8008838:	f048 0810 	orr.w	r8, r8, #16
 800883c:	e036      	b.n	80088ac <__gethex+0x3c8>
 800883e:	f04f 0b01 	mov.w	fp, #1
 8008842:	e7d0      	b.n	80087e6 <__gethex+0x302>
 8008844:	f04f 0801 	mov.w	r8, #1
 8008848:	e7e2      	b.n	8008810 <__gethex+0x32c>
 800884a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800884c:	f1c3 0301 	rsb	r3, r3, #1
 8008850:	930f      	str	r3, [sp, #60]	; 0x3c
 8008852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0ef      	beq.n	8008838 <__gethex+0x354>
 8008858:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800885c:	f104 0214 	add.w	r2, r4, #20
 8008860:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	2300      	movs	r3, #0
 8008868:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800886c:	4694      	mov	ip, r2
 800886e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008872:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008876:	d01e      	beq.n	80088b6 <__gethex+0x3d2>
 8008878:	3101      	adds	r1, #1
 800887a:	f8cc 1000 	str.w	r1, [ip]
 800887e:	f1b8 0f02 	cmp.w	r8, #2
 8008882:	f104 0214 	add.w	r2, r4, #20
 8008886:	d13d      	bne.n	8008904 <__gethex+0x420>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	3b01      	subs	r3, #1
 800888c:	42ab      	cmp	r3, r5
 800888e:	d10b      	bne.n	80088a8 <__gethex+0x3c4>
 8008890:	2301      	movs	r3, #1
 8008892:	1169      	asrs	r1, r5, #5
 8008894:	f005 051f 	and.w	r5, r5, #31
 8008898:	fa03 f505 	lsl.w	r5, r3, r5
 800889c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088a0:	421d      	tst	r5, r3
 80088a2:	bf18      	it	ne
 80088a4:	f04f 0801 	movne.w	r8, #1
 80088a8:	f048 0820 	orr.w	r8, r8, #32
 80088ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ae:	601c      	str	r4, [r3, #0]
 80088b0:	9b02      	ldr	r3, [sp, #8]
 80088b2:	601e      	str	r6, [r3, #0]
 80088b4:	e6a0      	b.n	80085f8 <__gethex+0x114>
 80088b6:	4290      	cmp	r0, r2
 80088b8:	f842 3c04 	str.w	r3, [r2, #-4]
 80088bc:	d8d6      	bhi.n	800886c <__gethex+0x388>
 80088be:	68a2      	ldr	r2, [r4, #8]
 80088c0:	4593      	cmp	fp, r2
 80088c2:	db17      	blt.n	80088f4 <__gethex+0x410>
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	4648      	mov	r0, r9
 80088c8:	3101      	adds	r1, #1
 80088ca:	f7fd ffe5 	bl	8006898 <_Balloc>
 80088ce:	4682      	mov	sl, r0
 80088d0:	b918      	cbnz	r0, 80088da <__gethex+0x3f6>
 80088d2:	4602      	mov	r2, r0
 80088d4:	2184      	movs	r1, #132	; 0x84
 80088d6:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <__gethex+0x45c>)
 80088d8:	e6b1      	b.n	800863e <__gethex+0x15a>
 80088da:	6922      	ldr	r2, [r4, #16]
 80088dc:	f104 010c 	add.w	r1, r4, #12
 80088e0:	3202      	adds	r2, #2
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	300c      	adds	r0, #12
 80088e6:	f7ff fd4f 	bl	8008388 <memcpy>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4648      	mov	r0, r9
 80088ee:	f7fe f813 	bl	8006918 <_Bfree>
 80088f2:	4654      	mov	r4, sl
 80088f4:	6922      	ldr	r2, [r4, #16]
 80088f6:	1c51      	adds	r1, r2, #1
 80088f8:	6121      	str	r1, [r4, #16]
 80088fa:	2101      	movs	r1, #1
 80088fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008900:	6151      	str	r1, [r2, #20]
 8008902:	e7bc      	b.n	800887e <__gethex+0x39a>
 8008904:	6921      	ldr	r1, [r4, #16]
 8008906:	4559      	cmp	r1, fp
 8008908:	dd0b      	ble.n	8008922 <__gethex+0x43e>
 800890a:	2101      	movs	r1, #1
 800890c:	4620      	mov	r0, r4
 800890e:	f7ff fd81 	bl	8008414 <rshift>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	3601      	adds	r6, #1
 8008916:	42b3      	cmp	r3, r6
 8008918:	f6ff aeda 	blt.w	80086d0 <__gethex+0x1ec>
 800891c:	f04f 0801 	mov.w	r8, #1
 8008920:	e7c2      	b.n	80088a8 <__gethex+0x3c4>
 8008922:	f015 051f 	ands.w	r5, r5, #31
 8008926:	d0f9      	beq.n	800891c <__gethex+0x438>
 8008928:	9b01      	ldr	r3, [sp, #4]
 800892a:	f1c5 0520 	rsb	r5, r5, #32
 800892e:	441a      	add	r2, r3
 8008930:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008934:	f7fe f8a2 	bl	8006a7c <__hi0bits>
 8008938:	42a8      	cmp	r0, r5
 800893a:	dbe6      	blt.n	800890a <__gethex+0x426>
 800893c:	e7ee      	b.n	800891c <__gethex+0x438>
 800893e:	bf00      	nop
 8008940:	080091df 	.word	0x080091df

08008944 <L_shift>:
 8008944:	f1c2 0208 	rsb	r2, r2, #8
 8008948:	0092      	lsls	r2, r2, #2
 800894a:	b570      	push	{r4, r5, r6, lr}
 800894c:	f1c2 0620 	rsb	r6, r2, #32
 8008950:	6843      	ldr	r3, [r0, #4]
 8008952:	6804      	ldr	r4, [r0, #0]
 8008954:	fa03 f506 	lsl.w	r5, r3, r6
 8008958:	432c      	orrs	r4, r5
 800895a:	40d3      	lsrs	r3, r2
 800895c:	6004      	str	r4, [r0, #0]
 800895e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008962:	4288      	cmp	r0, r1
 8008964:	d3f4      	bcc.n	8008950 <L_shift+0xc>
 8008966:	bd70      	pop	{r4, r5, r6, pc}

08008968 <__match>:
 8008968:	b530      	push	{r4, r5, lr}
 800896a:	6803      	ldr	r3, [r0, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008972:	b914      	cbnz	r4, 800897a <__match+0x12>
 8008974:	6003      	str	r3, [r0, #0]
 8008976:	2001      	movs	r0, #1
 8008978:	bd30      	pop	{r4, r5, pc}
 800897a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008982:	2d19      	cmp	r5, #25
 8008984:	bf98      	it	ls
 8008986:	3220      	addls	r2, #32
 8008988:	42a2      	cmp	r2, r4
 800898a:	d0f0      	beq.n	800896e <__match+0x6>
 800898c:	2000      	movs	r0, #0
 800898e:	e7f3      	b.n	8008978 <__match+0x10>

08008990 <__hexnan>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	2500      	movs	r5, #0
 8008996:	680b      	ldr	r3, [r1, #0]
 8008998:	4682      	mov	sl, r0
 800899a:	115e      	asrs	r6, r3, #5
 800899c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089a0:	f013 031f 	ands.w	r3, r3, #31
 80089a4:	bf18      	it	ne
 80089a6:	3604      	addne	r6, #4
 80089a8:	1f37      	subs	r7, r6, #4
 80089aa:	4690      	mov	r8, r2
 80089ac:	46b9      	mov	r9, r7
 80089ae:	463c      	mov	r4, r7
 80089b0:	46ab      	mov	fp, r5
 80089b2:	b087      	sub	sp, #28
 80089b4:	6801      	ldr	r1, [r0, #0]
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80089bc:	9502      	str	r5, [sp, #8]
 80089be:	784a      	ldrb	r2, [r1, #1]
 80089c0:	1c4b      	adds	r3, r1, #1
 80089c2:	9303      	str	r3, [sp, #12]
 80089c4:	b342      	cbz	r2, 8008a18 <__hexnan+0x88>
 80089c6:	4610      	mov	r0, r2
 80089c8:	9105      	str	r1, [sp, #20]
 80089ca:	9204      	str	r2, [sp, #16]
 80089cc:	f7ff fd75 	bl	80084ba <__hexdig_fun>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d14f      	bne.n	8008a74 <__hexnan+0xe4>
 80089d4:	9a04      	ldr	r2, [sp, #16]
 80089d6:	9905      	ldr	r1, [sp, #20]
 80089d8:	2a20      	cmp	r2, #32
 80089da:	d818      	bhi.n	8008a0e <__hexnan+0x7e>
 80089dc:	9b02      	ldr	r3, [sp, #8]
 80089de:	459b      	cmp	fp, r3
 80089e0:	dd13      	ble.n	8008a0a <__hexnan+0x7a>
 80089e2:	454c      	cmp	r4, r9
 80089e4:	d206      	bcs.n	80089f4 <__hexnan+0x64>
 80089e6:	2d07      	cmp	r5, #7
 80089e8:	dc04      	bgt.n	80089f4 <__hexnan+0x64>
 80089ea:	462a      	mov	r2, r5
 80089ec:	4649      	mov	r1, r9
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff ffa8 	bl	8008944 <L_shift>
 80089f4:	4544      	cmp	r4, r8
 80089f6:	d950      	bls.n	8008a9a <__hexnan+0x10a>
 80089f8:	2300      	movs	r3, #0
 80089fa:	f1a4 0904 	sub.w	r9, r4, #4
 80089fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a02:	461d      	mov	r5, r3
 8008a04:	464c      	mov	r4, r9
 8008a06:	f8cd b008 	str.w	fp, [sp, #8]
 8008a0a:	9903      	ldr	r1, [sp, #12]
 8008a0c:	e7d7      	b.n	80089be <__hexnan+0x2e>
 8008a0e:	2a29      	cmp	r2, #41	; 0x29
 8008a10:	d155      	bne.n	8008abe <__hexnan+0x12e>
 8008a12:	3102      	adds	r1, #2
 8008a14:	f8ca 1000 	str.w	r1, [sl]
 8008a18:	f1bb 0f00 	cmp.w	fp, #0
 8008a1c:	d04f      	beq.n	8008abe <__hexnan+0x12e>
 8008a1e:	454c      	cmp	r4, r9
 8008a20:	d206      	bcs.n	8008a30 <__hexnan+0xa0>
 8008a22:	2d07      	cmp	r5, #7
 8008a24:	dc04      	bgt.n	8008a30 <__hexnan+0xa0>
 8008a26:	462a      	mov	r2, r5
 8008a28:	4649      	mov	r1, r9
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7ff ff8a 	bl	8008944 <L_shift>
 8008a30:	4544      	cmp	r4, r8
 8008a32:	d934      	bls.n	8008a9e <__hexnan+0x10e>
 8008a34:	4623      	mov	r3, r4
 8008a36:	f1a8 0204 	sub.w	r2, r8, #4
 8008a3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a3e:	429f      	cmp	r7, r3
 8008a40:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a44:	d2f9      	bcs.n	8008a3a <__hexnan+0xaa>
 8008a46:	1b3b      	subs	r3, r7, r4
 8008a48:	f023 0303 	bic.w	r3, r3, #3
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	3e03      	subs	r6, #3
 8008a50:	3401      	adds	r4, #1
 8008a52:	42a6      	cmp	r6, r4
 8008a54:	bf38      	it	cc
 8008a56:	2304      	movcc	r3, #4
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4443      	add	r3, r8
 8008a5c:	f843 2b04 	str.w	r2, [r3], #4
 8008a60:	429f      	cmp	r7, r3
 8008a62:	d2fb      	bcs.n	8008a5c <__hexnan+0xcc>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	b91b      	cbnz	r3, 8008a70 <__hexnan+0xe0>
 8008a68:	4547      	cmp	r7, r8
 8008a6a:	d126      	bne.n	8008aba <__hexnan+0x12a>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	2005      	movs	r0, #5
 8008a72:	e025      	b.n	8008ac0 <__hexnan+0x130>
 8008a74:	3501      	adds	r5, #1
 8008a76:	2d08      	cmp	r5, #8
 8008a78:	f10b 0b01 	add.w	fp, fp, #1
 8008a7c:	dd06      	ble.n	8008a8c <__hexnan+0xfc>
 8008a7e:	4544      	cmp	r4, r8
 8008a80:	d9c3      	bls.n	8008a0a <__hexnan+0x7a>
 8008a82:	2300      	movs	r3, #0
 8008a84:	2501      	movs	r5, #1
 8008a86:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a8a:	3c04      	subs	r4, #4
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	f000 000f 	and.w	r0, r0, #15
 8008a92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	e7b7      	b.n	8008a0a <__hexnan+0x7a>
 8008a9a:	2508      	movs	r5, #8
 8008a9c:	e7b5      	b.n	8008a0a <__hexnan+0x7a>
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0df      	beq.n	8008a64 <__hexnan+0xd4>
 8008aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa8:	f1c3 0320 	rsb	r3, r3, #32
 8008aac:	40da      	lsrs	r2, r3
 8008aae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ab8:	e7d4      	b.n	8008a64 <__hexnan+0xd4>
 8008aba:	3f04      	subs	r7, #4
 8008abc:	e7d2      	b.n	8008a64 <__hexnan+0xd4>
 8008abe:	2004      	movs	r0, #4
 8008ac0:	b007      	add	sp, #28
 8008ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ac6 <__ascii_mbtowc>:
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	b901      	cbnz	r1, 8008acc <__ascii_mbtowc+0x6>
 8008aca:	a901      	add	r1, sp, #4
 8008acc:	b142      	cbz	r2, 8008ae0 <__ascii_mbtowc+0x1a>
 8008ace:	b14b      	cbz	r3, 8008ae4 <__ascii_mbtowc+0x1e>
 8008ad0:	7813      	ldrb	r3, [r2, #0]
 8008ad2:	600b      	str	r3, [r1, #0]
 8008ad4:	7812      	ldrb	r2, [r2, #0]
 8008ad6:	1e10      	subs	r0, r2, #0
 8008ad8:	bf18      	it	ne
 8008ada:	2001      	movne	r0, #1
 8008adc:	b002      	add	sp, #8
 8008ade:	4770      	bx	lr
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	e7fb      	b.n	8008adc <__ascii_mbtowc+0x16>
 8008ae4:	f06f 0001 	mvn.w	r0, #1
 8008ae8:	e7f8      	b.n	8008adc <__ascii_mbtowc+0x16>

08008aea <_realloc_r>:
 8008aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aee:	4680      	mov	r8, r0
 8008af0:	4614      	mov	r4, r2
 8008af2:	460e      	mov	r6, r1
 8008af4:	b921      	cbnz	r1, 8008b00 <_realloc_r+0x16>
 8008af6:	4611      	mov	r1, r2
 8008af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	f7fd be40 	b.w	8006780 <_malloc_r>
 8008b00:	b92a      	cbnz	r2, 8008b0e <_realloc_r+0x24>
 8008b02:	f7fd fdcd 	bl	80066a0 <_free_r>
 8008b06:	4625      	mov	r5, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b0e:	f000 f842 	bl	8008b96 <_malloc_usable_size_r>
 8008b12:	4284      	cmp	r4, r0
 8008b14:	4607      	mov	r7, r0
 8008b16:	d802      	bhi.n	8008b1e <_realloc_r+0x34>
 8008b18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b1c:	d812      	bhi.n	8008b44 <_realloc_r+0x5a>
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4640      	mov	r0, r8
 8008b22:	f7fd fe2d 	bl	8006780 <_malloc_r>
 8008b26:	4605      	mov	r5, r0
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d0ed      	beq.n	8008b08 <_realloc_r+0x1e>
 8008b2c:	42bc      	cmp	r4, r7
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4631      	mov	r1, r6
 8008b32:	bf28      	it	cs
 8008b34:	463a      	movcs	r2, r7
 8008b36:	f7ff fc27 	bl	8008388 <memcpy>
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	f7fd fdaf 	bl	80066a0 <_free_r>
 8008b42:	e7e1      	b.n	8008b08 <_realloc_r+0x1e>
 8008b44:	4635      	mov	r5, r6
 8008b46:	e7df      	b.n	8008b08 <_realloc_r+0x1e>

08008b48 <__ascii_wctomb>:
 8008b48:	4603      	mov	r3, r0
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	b141      	cbz	r1, 8008b60 <__ascii_wctomb+0x18>
 8008b4e:	2aff      	cmp	r2, #255	; 0xff
 8008b50:	d904      	bls.n	8008b5c <__ascii_wctomb+0x14>
 8008b52:	228a      	movs	r2, #138	; 0x8a
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	4770      	bx	lr
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	700a      	strb	r2, [r1, #0]
 8008b60:	4770      	bx	lr
	...

08008b64 <fiprintf>:
 8008b64:	b40e      	push	{r1, r2, r3}
 8008b66:	b503      	push	{r0, r1, lr}
 8008b68:	4601      	mov	r1, r0
 8008b6a:	ab03      	add	r3, sp, #12
 8008b6c:	4805      	ldr	r0, [pc, #20]	; (8008b84 <fiprintf+0x20>)
 8008b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b72:	6800      	ldr	r0, [r0, #0]
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	f000 f83d 	bl	8008bf4 <_vfiprintf_r>
 8008b7a:	b002      	add	sp, #8
 8008b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b80:	b003      	add	sp, #12
 8008b82:	4770      	bx	lr
 8008b84:	20000068 	.word	0x20000068

08008b88 <abort>:
 8008b88:	2006      	movs	r0, #6
 8008b8a:	b508      	push	{r3, lr}
 8008b8c:	f000 fa0a 	bl	8008fa4 <raise>
 8008b90:	2001      	movs	r0, #1
 8008b92:	f7f8 ff66 	bl	8001a62 <_exit>

08008b96 <_malloc_usable_size_r>:
 8008b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9a:	1f18      	subs	r0, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bfbc      	itt	lt
 8008ba0:	580b      	ldrlt	r3, [r1, r0]
 8008ba2:	18c0      	addlt	r0, r0, r3
 8008ba4:	4770      	bx	lr

08008ba6 <__sfputc_r>:
 8008ba6:	6893      	ldr	r3, [r2, #8]
 8008ba8:	b410      	push	{r4}
 8008baa:	3b01      	subs	r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	6093      	str	r3, [r2, #8]
 8008bb0:	da07      	bge.n	8008bc2 <__sfputc_r+0x1c>
 8008bb2:	6994      	ldr	r4, [r2, #24]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	db01      	blt.n	8008bbc <__sfputc_r+0x16>
 8008bb8:	290a      	cmp	r1, #10
 8008bba:	d102      	bne.n	8008bc2 <__sfputc_r+0x1c>
 8008bbc:	bc10      	pop	{r4}
 8008bbe:	f000 b933 	b.w	8008e28 <__swbuf_r>
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	1c58      	adds	r0, r3, #1
 8008bc6:	6010      	str	r0, [r2, #0]
 8008bc8:	7019      	strb	r1, [r3, #0]
 8008bca:	4608      	mov	r0, r1
 8008bcc:	bc10      	pop	{r4}
 8008bce:	4770      	bx	lr

08008bd0 <__sfputs_r>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	18d5      	adds	r5, r2, r3
 8008bda:	42ac      	cmp	r4, r5
 8008bdc:	d101      	bne.n	8008be2 <__sfputs_r+0x12>
 8008bde:	2000      	movs	r0, #0
 8008be0:	e007      	b.n	8008bf2 <__sfputs_r+0x22>
 8008be2:	463a      	mov	r2, r7
 8008be4:	4630      	mov	r0, r6
 8008be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bea:	f7ff ffdc 	bl	8008ba6 <__sfputc_r>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	d1f3      	bne.n	8008bda <__sfputs_r+0xa>
 8008bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bf4 <_vfiprintf_r>:
 8008bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	4698      	mov	r8, r3
 8008bfe:	4606      	mov	r6, r0
 8008c00:	b09d      	sub	sp, #116	; 0x74
 8008c02:	b118      	cbz	r0, 8008c0c <_vfiprintf_r+0x18>
 8008c04:	6a03      	ldr	r3, [r0, #32]
 8008c06:	b90b      	cbnz	r3, 8008c0c <_vfiprintf_r+0x18>
 8008c08:	f7fc fdae 	bl	8005768 <__sinit>
 8008c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c0e:	07d9      	lsls	r1, r3, #31
 8008c10:	d405      	bmi.n	8008c1e <_vfiprintf_r+0x2a>
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	059a      	lsls	r2, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_vfiprintf_r+0x2a>
 8008c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c1a:	f7fc febc 	bl	8005996 <__retarget_lock_acquire_recursive>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	071b      	lsls	r3, r3, #28
 8008c22:	d501      	bpl.n	8008c28 <_vfiprintf_r+0x34>
 8008c24:	692b      	ldr	r3, [r5, #16]
 8008c26:	b99b      	cbnz	r3, 8008c50 <_vfiprintf_r+0x5c>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f000 f93a 	bl	8008ea4 <__swsetup_r>
 8008c30:	b170      	cbz	r0, 8008c50 <_vfiprintf_r+0x5c>
 8008c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c34:	07dc      	lsls	r4, r3, #31
 8008c36:	d504      	bpl.n	8008c42 <_vfiprintf_r+0x4e>
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3c:	b01d      	add	sp, #116	; 0x74
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	89ab      	ldrh	r3, [r5, #12]
 8008c44:	0598      	lsls	r0, r3, #22
 8008c46:	d4f7      	bmi.n	8008c38 <_vfiprintf_r+0x44>
 8008c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c4a:	f7fc fea5 	bl	8005998 <__retarget_lock_release_recursive>
 8008c4e:	e7f3      	b.n	8008c38 <_vfiprintf_r+0x44>
 8008c50:	2300      	movs	r3, #0
 8008c52:	9309      	str	r3, [sp, #36]	; 0x24
 8008c54:	2320      	movs	r3, #32
 8008c56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c5a:	2330      	movs	r3, #48	; 0x30
 8008c5c:	f04f 0901 	mov.w	r9, #1
 8008c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c64:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008e14 <_vfiprintf_r+0x220>
 8008c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	469a      	mov	sl, r3
 8008c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c74:	b10a      	cbz	r2, 8008c7a <_vfiprintf_r+0x86>
 8008c76:	2a25      	cmp	r2, #37	; 0x25
 8008c78:	d1f9      	bne.n	8008c6e <_vfiprintf_r+0x7a>
 8008c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c7e:	d00b      	beq.n	8008c98 <_vfiprintf_r+0xa4>
 8008c80:	465b      	mov	r3, fp
 8008c82:	4622      	mov	r2, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff ffa2 	bl	8008bd0 <__sfputs_r>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	f000 80a9 	beq.w	8008de4 <_vfiprintf_r+0x1f0>
 8008c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c94:	445a      	add	r2, fp
 8008c96:	9209      	str	r2, [sp, #36]	; 0x24
 8008c98:	f89a 3000 	ldrb.w	r3, [sl]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80a1 	beq.w	8008de4 <_vfiprintf_r+0x1f0>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cac:	f10a 0a01 	add.w	sl, sl, #1
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	9307      	str	r3, [sp, #28]
 8008cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8008cba:	4654      	mov	r4, sl
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc2:	4854      	ldr	r0, [pc, #336]	; (8008e14 <_vfiprintf_r+0x220>)
 8008cc4:	f7fc fe69 	bl	800599a <memchr>
 8008cc8:	9a04      	ldr	r2, [sp, #16]
 8008cca:	b9d8      	cbnz	r0, 8008d04 <_vfiprintf_r+0x110>
 8008ccc:	06d1      	lsls	r1, r2, #27
 8008cce:	bf44      	itt	mi
 8008cd0:	2320      	movmi	r3, #32
 8008cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cd6:	0713      	lsls	r3, r2, #28
 8008cd8:	bf44      	itt	mi
 8008cda:	232b      	movmi	r3, #43	; 0x2b
 8008cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce6:	d015      	beq.n	8008d14 <_vfiprintf_r+0x120>
 8008ce8:	4654      	mov	r4, sl
 8008cea:	2000      	movs	r0, #0
 8008cec:	f04f 0c0a 	mov.w	ip, #10
 8008cf0:	9a07      	ldr	r2, [sp, #28]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cf8:	3b30      	subs	r3, #48	; 0x30
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	d94d      	bls.n	8008d9a <_vfiprintf_r+0x1a6>
 8008cfe:	b1b0      	cbz	r0, 8008d2e <_vfiprintf_r+0x13a>
 8008d00:	9207      	str	r2, [sp, #28]
 8008d02:	e014      	b.n	8008d2e <_vfiprintf_r+0x13a>
 8008d04:	eba0 0308 	sub.w	r3, r0, r8
 8008d08:	fa09 f303 	lsl.w	r3, r9, r3
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	46a2      	mov	sl, r4
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	e7d2      	b.n	8008cba <_vfiprintf_r+0xc6>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	1d19      	adds	r1, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	9103      	str	r1, [sp, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bfbb      	ittet	lt
 8008d20:	425b      	neglt	r3, r3
 8008d22:	f042 0202 	orrlt.w	r2, r2, #2
 8008d26:	9307      	strge	r3, [sp, #28]
 8008d28:	9307      	strlt	r3, [sp, #28]
 8008d2a:	bfb8      	it	lt
 8008d2c:	9204      	strlt	r2, [sp, #16]
 8008d2e:	7823      	ldrb	r3, [r4, #0]
 8008d30:	2b2e      	cmp	r3, #46	; 0x2e
 8008d32:	d10c      	bne.n	8008d4e <_vfiprintf_r+0x15a>
 8008d34:	7863      	ldrb	r3, [r4, #1]
 8008d36:	2b2a      	cmp	r3, #42	; 0x2a
 8008d38:	d134      	bne.n	8008da4 <_vfiprintf_r+0x1b0>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	3402      	adds	r4, #2
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	9203      	str	r2, [sp, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfb8      	it	lt
 8008d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e18 <_vfiprintf_r+0x224>
 8008d52:	2203      	movs	r2, #3
 8008d54:	4650      	mov	r0, sl
 8008d56:	7821      	ldrb	r1, [r4, #0]
 8008d58:	f7fc fe1f 	bl	800599a <memchr>
 8008d5c:	b138      	cbz	r0, 8008d6e <_vfiprintf_r+0x17a>
 8008d5e:	2240      	movs	r2, #64	; 0x40
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	eba0 000a 	sub.w	r0, r0, sl
 8008d66:	4082      	lsls	r2, r0
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	3401      	adds	r4, #1
 8008d6c:	9304      	str	r3, [sp, #16]
 8008d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d72:	2206      	movs	r2, #6
 8008d74:	4829      	ldr	r0, [pc, #164]	; (8008e1c <_vfiprintf_r+0x228>)
 8008d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d7a:	f7fc fe0e 	bl	800599a <memchr>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d03f      	beq.n	8008e02 <_vfiprintf_r+0x20e>
 8008d82:	4b27      	ldr	r3, [pc, #156]	; (8008e20 <_vfiprintf_r+0x22c>)
 8008d84:	bb1b      	cbnz	r3, 8008dce <_vfiprintf_r+0x1da>
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	3307      	adds	r3, #7
 8008d8a:	f023 0307 	bic.w	r3, r3, #7
 8008d8e:	3308      	adds	r3, #8
 8008d90:	9303      	str	r3, [sp, #12]
 8008d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d94:	443b      	add	r3, r7
 8008d96:	9309      	str	r3, [sp, #36]	; 0x24
 8008d98:	e768      	b.n	8008c6c <_vfiprintf_r+0x78>
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da2:	e7a6      	b.n	8008cf2 <_vfiprintf_r+0xfe>
 8008da4:	2300      	movs	r3, #0
 8008da6:	f04f 0c0a 	mov.w	ip, #10
 8008daa:	4619      	mov	r1, r3
 8008dac:	3401      	adds	r4, #1
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	4620      	mov	r0, r4
 8008db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db6:	3a30      	subs	r2, #48	; 0x30
 8008db8:	2a09      	cmp	r2, #9
 8008dba:	d903      	bls.n	8008dc4 <_vfiprintf_r+0x1d0>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0c6      	beq.n	8008d4e <_vfiprintf_r+0x15a>
 8008dc0:	9105      	str	r1, [sp, #20]
 8008dc2:	e7c4      	b.n	8008d4e <_vfiprintf_r+0x15a>
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dcc:	e7f0      	b.n	8008db0 <_vfiprintf_r+0x1bc>
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <_vfiprintf_r+0x230>)
 8008dd8:	a904      	add	r1, sp, #16
 8008dda:	f7fb fe69 	bl	8004ab0 <_printf_float>
 8008dde:	4607      	mov	r7, r0
 8008de0:	1c78      	adds	r0, r7, #1
 8008de2:	d1d6      	bne.n	8008d92 <_vfiprintf_r+0x19e>
 8008de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de6:	07d9      	lsls	r1, r3, #31
 8008de8:	d405      	bmi.n	8008df6 <_vfiprintf_r+0x202>
 8008dea:	89ab      	ldrh	r3, [r5, #12]
 8008dec:	059a      	lsls	r2, r3, #22
 8008dee:	d402      	bmi.n	8008df6 <_vfiprintf_r+0x202>
 8008df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008df2:	f7fc fdd1 	bl	8005998 <__retarget_lock_release_recursive>
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	065b      	lsls	r3, r3, #25
 8008dfa:	f53f af1d 	bmi.w	8008c38 <_vfiprintf_r+0x44>
 8008dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e00:	e71c      	b.n	8008c3c <_vfiprintf_r+0x48>
 8008e02:	ab03      	add	r3, sp, #12
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	462a      	mov	r2, r5
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <_vfiprintf_r+0x230>)
 8008e0c:	a904      	add	r1, sp, #16
 8008e0e:	f7fc f8ef 	bl	8004ff0 <_printf_i>
 8008e12:	e7e4      	b.n	8008dde <_vfiprintf_r+0x1ea>
 8008e14:	080094a1 	.word	0x080094a1
 8008e18:	080094a7 	.word	0x080094a7
 8008e1c:	080094ab 	.word	0x080094ab
 8008e20:	08004ab1 	.word	0x08004ab1
 8008e24:	08008bd1 	.word	0x08008bd1

08008e28 <__swbuf_r>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	460e      	mov	r6, r1
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b118      	cbz	r0, 8008e3a <__swbuf_r+0x12>
 8008e32:	6a03      	ldr	r3, [r0, #32]
 8008e34:	b90b      	cbnz	r3, 8008e3a <__swbuf_r+0x12>
 8008e36:	f7fc fc97 	bl	8005768 <__sinit>
 8008e3a:	69a3      	ldr	r3, [r4, #24]
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	071a      	lsls	r2, r3, #28
 8008e42:	d525      	bpl.n	8008e90 <__swbuf_r+0x68>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	b31b      	cbz	r3, 8008e90 <__swbuf_r+0x68>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	6922      	ldr	r2, [r4, #16]
 8008e4c:	b2f6      	uxtb	r6, r6
 8008e4e:	1a98      	subs	r0, r3, r2
 8008e50:	6963      	ldr	r3, [r4, #20]
 8008e52:	4637      	mov	r7, r6
 8008e54:	4283      	cmp	r3, r0
 8008e56:	dc04      	bgt.n	8008e62 <__swbuf_r+0x3a>
 8008e58:	4621      	mov	r1, r4
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f7ff fa30 	bl	80082c0 <_fflush_r>
 8008e60:	b9e0      	cbnz	r0, 8008e9c <__swbuf_r+0x74>
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	6022      	str	r2, [r4, #0]
 8008e6e:	701e      	strb	r6, [r3, #0]
 8008e70:	6962      	ldr	r2, [r4, #20]
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d004      	beq.n	8008e82 <__swbuf_r+0x5a>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	07db      	lsls	r3, r3, #31
 8008e7c:	d506      	bpl.n	8008e8c <__swbuf_r+0x64>
 8008e7e:	2e0a      	cmp	r6, #10
 8008e80:	d104      	bne.n	8008e8c <__swbuf_r+0x64>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4628      	mov	r0, r5
 8008e86:	f7ff fa1b 	bl	80082c0 <_fflush_r>
 8008e8a:	b938      	cbnz	r0, 8008e9c <__swbuf_r+0x74>
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e90:	4621      	mov	r1, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f806 	bl	8008ea4 <__swsetup_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d0d5      	beq.n	8008e48 <__swbuf_r+0x20>
 8008e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008ea0:	e7f4      	b.n	8008e8c <__swbuf_r+0x64>
	...

08008ea4 <__swsetup_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4b2a      	ldr	r3, [pc, #168]	; (8008f50 <__swsetup_r+0xac>)
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	460c      	mov	r4, r1
 8008eae:	b118      	cbz	r0, 8008eb8 <__swsetup_r+0x14>
 8008eb0:	6a03      	ldr	r3, [r0, #32]
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <__swsetup_r+0x14>
 8008eb4:	f7fc fc58 	bl	8005768 <__sinit>
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ebe:	0718      	lsls	r0, r3, #28
 8008ec0:	d422      	bmi.n	8008f08 <__swsetup_r+0x64>
 8008ec2:	06d9      	lsls	r1, r3, #27
 8008ec4:	d407      	bmi.n	8008ed6 <__swsetup_r+0x32>
 8008ec6:	2309      	movs	r3, #9
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	e034      	b.n	8008f40 <__swsetup_r+0x9c>
 8008ed6:	0758      	lsls	r0, r3, #29
 8008ed8:	d512      	bpl.n	8008f00 <__swsetup_r+0x5c>
 8008eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008edc:	b141      	cbz	r1, 8008ef0 <__swsetup_r+0x4c>
 8008ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee2:	4299      	cmp	r1, r3
 8008ee4:	d002      	beq.n	8008eec <__swsetup_r+0x48>
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f7fd fbda 	bl	80066a0 <_free_r>
 8008eec:	2300      	movs	r3, #0
 8008eee:	6363      	str	r3, [r4, #52]	; 0x34
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	f043 0308 	orr.w	r3, r3, #8
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	b94b      	cbnz	r3, 8008f20 <__swsetup_r+0x7c>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f16:	d003      	beq.n	8008f20 <__swsetup_r+0x7c>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f000 f883 	bl	8009026 <__smakebuf_r>
 8008f20:	89a0      	ldrh	r0, [r4, #12]
 8008f22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f26:	f010 0301 	ands.w	r3, r0, #1
 8008f2a:	d00a      	beq.n	8008f42 <__swsetup_r+0x9e>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60a3      	str	r3, [r4, #8]
 8008f30:	6963      	ldr	r3, [r4, #20]
 8008f32:	425b      	negs	r3, r3
 8008f34:	61a3      	str	r3, [r4, #24]
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	b943      	cbnz	r3, 8008f4c <__swsetup_r+0xa8>
 8008f3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f3e:	d1c4      	bne.n	8008eca <__swsetup_r+0x26>
 8008f40:	bd38      	pop	{r3, r4, r5, pc}
 8008f42:	0781      	lsls	r1, r0, #30
 8008f44:	bf58      	it	pl
 8008f46:	6963      	ldrpl	r3, [r4, #20]
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	e7f4      	b.n	8008f36 <__swsetup_r+0x92>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e7f7      	b.n	8008f40 <__swsetup_r+0x9c>
 8008f50:	20000068 	.word	0x20000068

08008f54 <_raise_r>:
 8008f54:	291f      	cmp	r1, #31
 8008f56:	b538      	push	{r3, r4, r5, lr}
 8008f58:	4604      	mov	r4, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	d904      	bls.n	8008f68 <_raise_r+0x14>
 8008f5e:	2316      	movs	r3, #22
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f6a:	b112      	cbz	r2, 8008f72 <_raise_r+0x1e>
 8008f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f70:	b94b      	cbnz	r3, 8008f86 <_raise_r+0x32>
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f830 	bl	8008fd8 <_getpid_r>
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f82:	f000 b817 	b.w	8008fb4 <_kill_r>
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d00a      	beq.n	8008fa0 <_raise_r+0x4c>
 8008f8a:	1c59      	adds	r1, r3, #1
 8008f8c:	d103      	bne.n	8008f96 <_raise_r+0x42>
 8008f8e:	2316      	movs	r3, #22
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	2001      	movs	r0, #1
 8008f94:	e7e7      	b.n	8008f66 <_raise_r+0x12>
 8008f96:	2400      	movs	r4, #0
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f9e:	4798      	blx	r3
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7e0      	b.n	8008f66 <_raise_r+0x12>

08008fa4 <raise>:
 8008fa4:	4b02      	ldr	r3, [pc, #8]	; (8008fb0 <raise+0xc>)
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f7ff bfd3 	b.w	8008f54 <_raise_r>
 8008fae:	bf00      	nop
 8008fb0:	20000068 	.word	0x20000068

08008fb4 <_kill_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4d06      	ldr	r5, [pc, #24]	; (8008fd4 <_kill_r+0x20>)
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	f7f8 fd3e 	bl	8001a42 <_kill>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d102      	bne.n	8008fd0 <_kill_r+0x1c>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	b103      	cbz	r3, 8008fd0 <_kill_r+0x1c>
 8008fce:	6023      	str	r3, [r4, #0]
 8008fd0:	bd38      	pop	{r3, r4, r5, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000590 	.word	0x20000590

08008fd8 <_getpid_r>:
 8008fd8:	f7f8 bd2c 	b.w	8001a34 <_getpid>

08008fdc <__swhatbuf_r>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	460c      	mov	r4, r1
 8008fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	461e      	mov	r6, r3
 8008fea:	b096      	sub	sp, #88	; 0x58
 8008fec:	da0c      	bge.n	8009008 <__swhatbuf_r+0x2c>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ff6:	bf0c      	ite	eq
 8008ff8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ffc:	2340      	movne	r3, #64	; 0x40
 8008ffe:	2000      	movs	r0, #0
 8009000:	6031      	str	r1, [r6, #0]
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	b016      	add	sp, #88	; 0x58
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	466a      	mov	r2, sp
 800900a:	f000 f849 	bl	80090a0 <_fstat_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	dbed      	blt.n	8008fee <__swhatbuf_r+0x12>
 8009012:	9901      	ldr	r1, [sp, #4]
 8009014:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009018:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800901c:	4259      	negs	r1, r3
 800901e:	4159      	adcs	r1, r3
 8009020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009024:	e7eb      	b.n	8008ffe <__swhatbuf_r+0x22>

08009026 <__smakebuf_r>:
 8009026:	898b      	ldrh	r3, [r1, #12]
 8009028:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800902a:	079d      	lsls	r5, r3, #30
 800902c:	4606      	mov	r6, r0
 800902e:	460c      	mov	r4, r1
 8009030:	d507      	bpl.n	8009042 <__smakebuf_r+0x1c>
 8009032:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	6123      	str	r3, [r4, #16]
 800903a:	2301      	movs	r3, #1
 800903c:	6163      	str	r3, [r4, #20]
 800903e:	b002      	add	sp, #8
 8009040:	bd70      	pop	{r4, r5, r6, pc}
 8009042:	466a      	mov	r2, sp
 8009044:	ab01      	add	r3, sp, #4
 8009046:	f7ff ffc9 	bl	8008fdc <__swhatbuf_r>
 800904a:	9900      	ldr	r1, [sp, #0]
 800904c:	4605      	mov	r5, r0
 800904e:	4630      	mov	r0, r6
 8009050:	f7fd fb96 	bl	8006780 <_malloc_r>
 8009054:	b948      	cbnz	r0, 800906a <__smakebuf_r+0x44>
 8009056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905a:	059a      	lsls	r2, r3, #22
 800905c:	d4ef      	bmi.n	800903e <__smakebuf_r+0x18>
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	f043 0302 	orr.w	r3, r3, #2
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	e7e3      	b.n	8009032 <__smakebuf_r+0xc>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	6020      	str	r0, [r4, #0]
 800906e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	6120      	str	r0, [r4, #16]
 8009078:	6163      	str	r3, [r4, #20]
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	b15b      	cbz	r3, 8009096 <__smakebuf_r+0x70>
 800907e:	4630      	mov	r0, r6
 8009080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009084:	f000 f81e 	bl	80090c4 <_isatty_r>
 8009088:	b128      	cbz	r0, 8009096 <__smakebuf_r+0x70>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	f023 0303 	bic.w	r3, r3, #3
 8009090:	f043 0301 	orr.w	r3, r3, #1
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	431d      	orrs	r5, r3
 800909a:	81a5      	strh	r5, [r4, #12]
 800909c:	e7cf      	b.n	800903e <__smakebuf_r+0x18>
	...

080090a0 <_fstat_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	2300      	movs	r3, #0
 80090a4:	4d06      	ldr	r5, [pc, #24]	; (80090c0 <_fstat_r+0x20>)
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	4611      	mov	r1, r2
 80090ac:	602b      	str	r3, [r5, #0]
 80090ae:	f7f8 fd26 	bl	8001afe <_fstat>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d102      	bne.n	80090bc <_fstat_r+0x1c>
 80090b6:	682b      	ldr	r3, [r5, #0]
 80090b8:	b103      	cbz	r3, 80090bc <_fstat_r+0x1c>
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	bd38      	pop	{r3, r4, r5, pc}
 80090be:	bf00      	nop
 80090c0:	20000590 	.word	0x20000590

080090c4 <_isatty_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	2300      	movs	r3, #0
 80090c8:	4d05      	ldr	r5, [pc, #20]	; (80090e0 <_isatty_r+0x1c>)
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	f7f8 fd24 	bl	8001b1c <_isatty>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_isatty_r+0x1a>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_isatty_r+0x1a>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	20000590 	.word	0x20000590

080090e4 <_init>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr

080090f0 <_fini>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	bf00      	nop
 80090f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f6:	bc08      	pop	{r3}
 80090f8:	469e      	mov	lr, r3
 80090fa:	4770      	bx	lr
