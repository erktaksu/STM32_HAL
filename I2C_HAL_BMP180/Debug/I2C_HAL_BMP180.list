
I2C_HAL_BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008970  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  08008b70  08008b70  00018b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d20  08009d20  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d28  08009d28  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d28  08009d28  00019d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d2c  08009d2c  00019d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200001dc  08009f0c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08009f0c  000208b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c005  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218f  00000000  00000000  0002c252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000978  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028006  00000000  00000000  0002f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e509  00000000  00000000  00057806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efa33  00000000  00000000  00065d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ca8  00000000  00000000  00155744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08008b58 	.word	0x08008b58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08008b58 	.word	0x08008b58

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <BMP180_Init>:
long UT;
long UP;

float preassureATM=0;

void BMP180_Init() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 100000) != HAL_OK)
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <BMP180_Init+0x2c>)
 80009da:	2201      	movs	r2, #1
 80009dc:	21ee      	movs	r1, #238	; 0xee
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <BMP180_Init+0x30>)
 80009e0:	f002 f8a4 	bl	8002b2c <HAL_I2C_IsDeviceReady>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d005      	beq.n	80009f6 <BMP180_Init+0x22>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <BMP180_Init+0x34>)
 80009f2:	f001 fccf 	bl	8002394 <HAL_GPIO_WritePin>

    BMP180_GetCalibration_Value();
 80009f6:	f000 f809 	bl	8000a0c <BMP180_GetCalibration_Value>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	000186a0 	.word	0x000186a0
 8000a04:	20000244 	.word	0x20000244
 8000a08:	40020400 	.word	0x40020400

08000a0c <BMP180_GetCalibration_Value>:

void BMP180_GetCalibration_Value() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af04      	add	r7, sp, #16
    uint8_t CalibBuff[BMP180_CALIBRATION_VALUE_LENGTH];
    HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_CALIBRATION_START_ADRESS, 1, CalibBuff, BMP180_CALIBRATION_VALUE_LENGTH, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2316      	movs	r3, #22
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	22aa      	movs	r2, #170	; 0xaa
 8000a22:	21ef      	movs	r1, #239	; 0xef
 8000a24:	4836      	ldr	r0, [pc, #216]	; (8000b00 <BMP180_GetCalibration_Value+0xf4>)
 8000a26:	f001 ff67 	bl	80028f8 <HAL_I2C_Mem_Read>

    AC1 = ((CalibBuff[0] << 8) | CalibBuff[1]);
 8000a2a:	783b      	ldrb	r3, [r7, #0]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	787b      	ldrb	r3, [r7, #1]
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	b21a      	sxth	r2, r3
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <BMP180_GetCalibration_Value+0xf8>)
 8000a3a:	801a      	strh	r2, [r3, #0]
    AC2 = ((CalibBuff[2] << 8) | CalibBuff[3]);
 8000a3c:	78bb      	ldrb	r3, [r7, #2]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	78fb      	ldrb	r3, [r7, #3]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <BMP180_GetCalibration_Value+0xfc>)
 8000a4c:	801a      	strh	r2, [r3, #0]
    AC3 = ((CalibBuff[4] << 8) | CalibBuff[5]);
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	797b      	ldrb	r3, [r7, #5]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <BMP180_GetCalibration_Value+0x100>)
 8000a5e:	801a      	strh	r2, [r3, #0]
    AC4 = ((CalibBuff[6] << 8) | CalibBuff[7]);
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <BMP180_GetCalibration_Value+0x104>)
 8000a72:	801a      	strh	r2, [r3, #0]
    AC5 = ((CalibBuff[8] << 8) | CalibBuff[9]);
 8000a74:	7a3b      	ldrb	r3, [r7, #8]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	7a7b      	ldrb	r3, [r7, #9]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <BMP180_GetCalibration_Value+0x108>)
 8000a86:	801a      	strh	r2, [r3, #0]
    AC6 = ((CalibBuff[10] << 8) | CalibBuff[11]);
 8000a88:	7abb      	ldrb	r3, [r7, #10]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	7afb      	ldrb	r3, [r7, #11]
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <BMP180_GetCalibration_Value+0x10c>)
 8000a9a:	801a      	strh	r2, [r3, #0]
    B1 = ((CalibBuff[12] << 8) | CalibBuff[13]);
 8000a9c:	7b3b      	ldrb	r3, [r7, #12]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	7b7b      	ldrb	r3, [r7, #13]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <BMP180_GetCalibration_Value+0x110>)
 8000aac:	801a      	strh	r2, [r3, #0]
    B2 = ((CalibBuff[14] << 8) | CalibBuff[15]);
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <BMP180_GetCalibration_Value+0x114>)
 8000abe:	801a      	strh	r2, [r3, #0]
    MB = ((CalibBuff[16] << 8) | CalibBuff[17]);
 8000ac0:	7c3b      	ldrb	r3, [r7, #16]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	7c7b      	ldrb	r3, [r7, #17]
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b21a      	sxth	r2, r3
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <BMP180_GetCalibration_Value+0x118>)
 8000ad0:	801a      	strh	r2, [r3, #0]
    MC = ((CalibBuff[18] << 8) | CalibBuff[19]);
 8000ad2:	7cbb      	ldrb	r3, [r7, #18]
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	7cfb      	ldrb	r3, [r7, #19]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <BMP180_GetCalibration_Value+0x11c>)
 8000ae2:	801a      	strh	r2, [r3, #0]
    MD = ((CalibBuff[20] << 8) | CalibBuff[21]);
 8000ae4:	7d3b      	ldrb	r3, [r7, #20]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	7d7b      	ldrb	r3, [r7, #21]
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <BMP180_GetCalibration_Value+0x120>)
 8000af4:	801a      	strh	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000244 	.word	0x20000244
 8000b04:	200001f8 	.word	0x200001f8
 8000b08:	200001fa 	.word	0x200001fa
 8000b0c:	200001fc 	.word	0x200001fc
 8000b10:	200001fe 	.word	0x200001fe
 8000b14:	20000200 	.word	0x20000200
 8000b18:	20000202 	.word	0x20000202
 8000b1c:	20000204 	.word	0x20000204
 8000b20:	20000206 	.word	0x20000206
 8000b24:	20000208 	.word	0x20000208
 8000b28:	2000020a 	.word	0x2000020a
 8000b2c:	2000020c 	.word	0x2000020c

08000b30 <BMP180_Get_Temperature>:

float BMP180_Get_Temperature(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    UT=BMP180_Get_Uncompensated_Temperature();
 8000b34:	f000 f86a 	bl	8000c0c <BMP180_Get_Uncompensated_Temperature>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	; (8000be8 <BMP180_Get_Temperature+0xb8>)
 8000b3c:	6013      	str	r3, [r2, #0]
    X1 = ((UT - AC6) * AC5) / pow(2,15);
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <BMP180_Get_Temperature+0xb8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2a      	ldr	r2, [pc, #168]	; (8000bec <BMP180_Get_Temperature+0xbc>)
 8000b44:	8812      	ldrh	r2, [r2, #0]
 8000b46:	1a9b      	subs	r3, r3, r2
 8000b48:	4a29      	ldr	r2, [pc, #164]	; (8000bf0 <BMP180_Get_Temperature+0xc0>)
 8000b4a:	8812      	ldrh	r2, [r2, #0]
 8000b4c:	fb02 f303 	mul.w	r3, r2, r3
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b58:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000bd8 <BMP180_Get_Temperature+0xa8>
 8000b5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b60:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b64:	ee17 2a90 	vmov	r2, s15
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <BMP180_Get_Temperature+0xc4>)
 8000b6a:	601a      	str	r2, [r3, #0]
     X2 = (MC * 2048) / (X1 + MD);
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <BMP180_Get_Temperature+0xc8>)
 8000b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b72:	02da      	lsls	r2, r3, #11
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <BMP180_Get_Temperature+0xcc>)
 8000b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <BMP180_Get_Temperature+0xc4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	440b      	add	r3, r1
 8000b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <BMP180_Get_Temperature+0xd0>)
 8000b88:	6013      	str	r3, [r2, #0]
    B5 = X1 + X2;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <BMP180_Get_Temperature+0xc4>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <BMP180_Get_Temperature+0xd0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <BMP180_Get_Temperature+0xd4>)
 8000b96:	6013      	str	r3, [r2, #0]
    temperature = ((float)(B5 + 8) / pow(2,4)) * 0.1;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <BMP180_Get_Temperature+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000baa:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000bae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bb2:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000be0 <BMP180_Get_Temperature+0xb0>
 8000bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <BMP180_Get_Temperature+0xd8>)
 8000bc0:	edc3 7a00 	vstr	s15, [r3]
return temperature;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <BMP180_Get_Temperature+0xd8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	ee07 3a90 	vmov	s15, r3
}
 8000bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40e00000 	.word	0x40e00000
 8000be0:	9999999a 	.word	0x9999999a
 8000be4:	3fb99999 	.word	0x3fb99999
 8000be8:	20000238 	.word	0x20000238
 8000bec:	20000202 	.word	0x20000202
 8000bf0:	20000200 	.word	0x20000200
 8000bf4:	20000210 	.word	0x20000210
 8000bf8:	2000020a 	.word	0x2000020a
 8000bfc:	2000020c 	.word	0x2000020c
 8000c00:	20000214 	.word	0x20000214
 8000c04:	20000218 	.word	0x20000218
 8000c08:	2000021c 	.word	0x2000021c

08000c0c <BMP180_Get_Uncompensated_Temperature>:

long BMP180_Get_Uncompensated_Temperature(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
    uint8_t rData[2];
    uint8_t wData[1] = {0x2E};
 8000c12:	232e      	movs	r3, #46	; 0x2e
 8000c14:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 1000);
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	463b      	mov	r3, r7
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	22f4      	movs	r2, #244	; 0xf4
 8000c28:	21ee      	movs	r1, #238	; 0xee
 8000c2a:	480f      	ldr	r0, [pc, #60]	; (8000c68 <BMP180_Get_Uncompensated_Temperature+0x5c>)
 8000c2c:	f001 fd50 	bl	80026d0 <HAL_I2C_Mem_Write>
    HAL_Delay(5);
 8000c30:	2005      	movs	r0, #5
 8000c32:	f001 f8f9 	bl	8001e28 <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 2, 1000);
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2301      	movs	r3, #1
 8000c46:	22f6      	movs	r2, #246	; 0xf6
 8000c48:	21ef      	movs	r1, #239	; 0xef
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <BMP180_Get_Uncompensated_Temperature+0x5c>)
 8000c4c:	f001 fe54 	bl	80028f8 <HAL_I2C_Mem_Read>
    return( (int16_t)((rData[0] << 8) | rData[1]));
 8000c50:	793b      	ldrb	r3, [r7, #4]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	797b      	ldrb	r3, [r7, #5]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3

}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000244 	.word	0x20000244
 8000c6c:	00000000 	.word	0x00000000

08000c70 <BMP180_Get_Pressure>:

float BMP180_Get_Pressure(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    UP=BMP180_Get_Uncompensated_Pressure();
 8000c74:	f000 f998 	bl	8000fa8 <BMP180_Get_Uncompensated_Pressure>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4ab9      	ldr	r2, [pc, #740]	; (8000f60 <BMP180_Get_Pressure+0x2f0>)
 8000c7c:	6013      	str	r3, [r2, #0]
    B6=B5-4000;
 8000c7e:	4bb9      	ldr	r3, [pc, #740]	; (8000f64 <BMP180_Get_Pressure+0x2f4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000c86:	4ab8      	ldr	r2, [pc, #736]	; (8000f68 <BMP180_Get_Pressure+0x2f8>)
 8000c88:	6013      	str	r3, [r2, #0]
    X1=(B2*(B6*B6/pow(2,12)))/pow(2,11);
 8000c8a:	4bb8      	ldr	r3, [pc, #736]	; (8000f6c <BMP180_Get_Pressure+0x2fc>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c98:	4bb3      	ldr	r3, [pc, #716]	; (8000f68 <BMP180_Get_Pressure+0x2f8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4ab2      	ldr	r2, [pc, #712]	; (8000f68 <BMP180_Get_Pressure+0x2f8>)
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000cac:	ed9f 4b9e 	vldr	d4, [pc, #632]	; 8000f28 <BMP180_Get_Pressure+0x2b8>
 8000cb0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cb8:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8000f30 <BMP180_Get_Pressure+0x2c0>
 8000cbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cc0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cc4:	ee17 2a90 	vmov	r2, s15
 8000cc8:	4ba9      	ldr	r3, [pc, #676]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000cca:	601a      	str	r2, [r3, #0]
    X2=AC2*B6/pow(2,11);
 8000ccc:	4ba9      	ldr	r3, [pc, #676]	; (8000f74 <BMP180_Get_Pressure+0x304>)
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4ba4      	ldr	r3, [pc, #656]	; (8000f68 <BMP180_Get_Pressure+0x2f8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ce4:	ed9f 5b92 	vldr	d5, [pc, #584]	; 8000f30 <BMP180_Get_Pressure+0x2c0>
 8000ce8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cf0:	ee17 2a90 	vmov	r2, s15
 8000cf4:	4ba0      	ldr	r3, [pc, #640]	; (8000f78 <BMP180_Get_Pressure+0x308>)
 8000cf6:	601a      	str	r2, [r3, #0]
    X3=X1+X2;
 8000cf8:	4b9d      	ldr	r3, [pc, #628]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <BMP180_Get_Pressure+0x308>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a9e      	ldr	r2, [pc, #632]	; (8000f7c <BMP180_Get_Pressure+0x30c>)
 8000d04:	6013      	str	r3, [r2, #0]
    B3=(((AC1*4+X3)<<3)+2)/4;
 8000d06:	4b9e      	ldr	r3, [pc, #632]	; (8000f80 <BMP180_Get_Pressure+0x310>)
 8000d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0c:	009a      	lsls	r2, r3, #2
 8000d0e:	4b9b      	ldr	r3, [pc, #620]	; (8000f7c <BMP180_Get_Pressure+0x30c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	3302      	adds	r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	da00      	bge.n	8000d1e <BMP180_Get_Pressure+0xae>
 8000d1c:	3303      	adds	r3, #3
 8000d1e:	109b      	asrs	r3, r3, #2
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b98      	ldr	r3, [pc, #608]	; (8000f84 <BMP180_Get_Pressure+0x314>)
 8000d24:	601a      	str	r2, [r3, #0]
    X1=AC3*B6/pow(2,13);
 8000d26:	4b98      	ldr	r3, [pc, #608]	; (8000f88 <BMP180_Get_Pressure+0x318>)
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b8e      	ldr	r3, [pc, #568]	; (8000f68 <BMP180_Get_Pressure+0x2f8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	ee07 3a90 	vmov	s15, r3
 8000d3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d3e:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8000f38 <BMP180_Get_Pressure+0x2c8>
 8000d42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d46:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d4a:	ee17 2a90 	vmov	r2, s15
 8000d4e:	4b88      	ldr	r3, [pc, #544]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000d50:	601a      	str	r2, [r3, #0]
    X2=(B1*(B6*B6/pow(2,12)))/pow(2,16);
 8000d52:	4b8e      	ldr	r3, [pc, #568]	; (8000f8c <BMP180_Get_Pressure+0x31c>)
 8000d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d60:	4b81      	ldr	r3, [pc, #516]	; (8000f68 <BMP180_Get_Pressure+0x2f8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a80      	ldr	r2, [pc, #512]	; (8000f68 <BMP180_Get_Pressure+0x2f8>)
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	fb02 f303 	mul.w	r3, r2, r3
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d74:	ed9f 4b6c 	vldr	d4, [pc, #432]	; 8000f28 <BMP180_Get_Pressure+0x2b8>
 8000d78:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d7c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d80:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8000f40 <BMP180_Get_Pressure+0x2d0>
 8000d84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d8c:	ee17 2a90 	vmov	r2, s15
 8000d90:	4b79      	ldr	r3, [pc, #484]	; (8000f78 <BMP180_Get_Pressure+0x308>)
 8000d92:	601a      	str	r2, [r3, #0]
    X3=((X1+X2)+2)/pow(2,2);
 8000d94:	4b76      	ldr	r3, [pc, #472]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b77      	ldr	r3, [pc, #476]	; (8000f78 <BMP180_Get_Pressure+0x308>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000da8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000db0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000db4:	ee17 2a90 	vmov	r2, s15
 8000db8:	4b70      	ldr	r3, [pc, #448]	; (8000f7c <BMP180_Get_Pressure+0x30c>)
 8000dba:	601a      	str	r2, [r3, #0]
    B4=AC4*(unsigned long)(X3+32768)/pow(2,15);
 8000dbc:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <BMP180_Get_Pressure+0x320>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	; (8000f7c <BMP180_Get_Pressure+0x30c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000dd6:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8000f48 <BMP180_Get_Pressure+0x2d8>
 8000dda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000de2:	ee17 2a90 	vmov	r2, s15
 8000de6:	4b6b      	ldr	r3, [pc, #428]	; (8000f94 <BMP180_Get_Pressure+0x324>)
 8000de8:	601a      	str	r2, [r3, #0]
    B7=((unsigned long)UP-B3)*(50000>>3);
 8000dea:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <BMP180_Get_Pressure+0x2f0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b64      	ldr	r3, [pc, #400]	; (8000f84 <BMP180_Get_Pressure+0x314>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f641 026a 	movw	r2, #6250	; 0x186a
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	4a66      	ldr	r2, [pc, #408]	; (8000f98 <BMP180_Get_Pressure+0x328>)
 8000e00:	6013      	str	r3, [r2, #0]

    if(B7<0x80000000)
 8000e02:	4b65      	ldr	r3, [pc, #404]	; (8000f98 <BMP180_Get_Pressure+0x328>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0a      	blt.n	8000e20 <BMP180_Get_Pressure+0x1b0>
    {
    	preassure=(B7*2)/B4;
 8000e0a:	4b63      	ldr	r3, [pc, #396]	; (8000f98 <BMP180_Get_Pressure+0x328>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	005a      	lsls	r2, r3, #1
 8000e10:	4b60      	ldr	r3, [pc, #384]	; (8000f94 <BMP180_Get_Pressure+0x324>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b60      	ldr	r3, [pc, #384]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e009      	b.n	8000e34 <BMP180_Get_Pressure+0x1c4>
    }
    else
    {
    	preassure=(B7/B4)*2;
 8000e20:	4b5d      	ldr	r3, [pc, #372]	; (8000f98 <BMP180_Get_Pressure+0x328>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <BMP180_Get_Pressure+0x324>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000e32:	601a      	str	r2, [r3, #0]
    }


    X1=(preassure/pow(2,8))*(preassure/pow(2,8));
 8000e34:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e40:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000f50 <BMP180_Get_Pressure+0x2e0>
 8000e44:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000e48:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e54:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 8000f50 <BMP180_Get_Pressure+0x2e0>
 8000e58:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e60:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e64:	ee17 2a90 	vmov	r2, s15
 8000e68:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000e6a:	601a      	str	r2, [r3, #0]
    X1=(X1*3038)/pow(2,16);
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f640 32de 	movw	r2, #3038	; 0xbde
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	ee07 3a90 	vmov	s15, r3
 8000e7c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e80:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8000f40 <BMP180_Get_Pressure+0x2d0>
 8000e84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e8c:	ee17 2a90 	vmov	r2, s15
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000e92:	601a      	str	r2, [r3, #0]
    X2=(-7357*preassure)/pow(2,16);
 8000e94:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a41      	ldr	r2, [pc, #260]	; (8000fa0 <BMP180_Get_Pressure+0x330>)
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ea6:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000f40 <BMP180_Get_Pressure+0x2d0>
 8000eaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eb2:	ee17 2a90 	vmov	r2, s15
 8000eb6:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <BMP180_Get_Pressure+0x308>)
 8000eb8:	601a      	str	r2, [r3, #0]
    preassure=preassure+(X1+X2+3791)/pow(2,4);
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <BMP180_Get_Pressure+0x300>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <BMP180_Get_Pressure+0x308>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000edc:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
 8000ee0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000ee4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ee8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eec:	ee17 2a90 	vmov	r2, s15
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000ef2:	601a      	str	r2, [r3, #0]

    preassureATM= (float)preassure*0.00000987;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <BMP180_Get_Pressure+0x32c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f04:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000f58 <BMP180_Get_Pressure+0x2e8>
 8000f08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <BMP180_Get_Pressure+0x334>)
 8000f12:	edc3 7a00 	vstr	s15, [r3]
return     preassureATM;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <BMP180_Get_Pressure+0x334>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	ee07 3a90 	vmov	s15, r3
}
 8000f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	f3af 8000 	nop.w
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40b00000 	.word	0x40b00000
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40a00000 	.word	0x40a00000
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	40c00000 	.word	0x40c00000
 8000f40:	00000000 	.word	0x00000000
 8000f44:	40f00000 	.word	0x40f00000
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40e00000 	.word	0x40e00000
 8000f50:	00000000 	.word	0x00000000
 8000f54:	40700000 	.word	0x40700000
 8000f58:	78844b29 	.word	0x78844b29
 8000f5c:	3ee4b2ea 	.word	0x3ee4b2ea
 8000f60:	2000023c 	.word	0x2000023c
 8000f64:	20000218 	.word	0x20000218
 8000f68:	20000220 	.word	0x20000220
 8000f6c:	20000206 	.word	0x20000206
 8000f70:	20000210 	.word	0x20000210
 8000f74:	200001fa 	.word	0x200001fa
 8000f78:	20000214 	.word	0x20000214
 8000f7c:	20000224 	.word	0x20000224
 8000f80:	200001f8 	.word	0x200001f8
 8000f84:	20000228 	.word	0x20000228
 8000f88:	200001fc 	.word	0x200001fc
 8000f8c:	20000204 	.word	0x20000204
 8000f90:	200001fe 	.word	0x200001fe
 8000f94:	2000022c 	.word	0x2000022c
 8000f98:	20000230 	.word	0x20000230
 8000f9c:	20000234 	.word	0x20000234
 8000fa0:	ffffe343 	.word	0xffffe343
 8000fa4:	20000240 	.word	0x20000240

08000fa8 <BMP180_Get_Uncompensated_Pressure>:

long BMP180_Get_Uncompensated_Pressure(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af04      	add	r7, sp, #16
    uint8_t wData1[1] = {0};
 8000fae:	2300      	movs	r3, #0
 8000fb0:	713b      	strb	r3, [r7, #4]
    uint8_t rData1[3]={0};
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <BMP180_Get_Uncompensated_Pressure+0x6c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	803b      	strh	r3, [r7, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	70bb      	strb	r3, [r7, #2]
    wData1[0]= 0x34 | (3 << 6);
 8000fbc:	23f4      	movs	r3, #244	; 0xf4
 8000fbe:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData1, 1, 1000);
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	22f4      	movs	r2, #244	; 0xf4
 8000fd2:	21ee      	movs	r1, #238	; 0xee
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <BMP180_Get_Uncompensated_Pressure+0x70>)
 8000fd6:	f001 fb7b 	bl	80026d0 <HAL_I2C_Mem_Write>
    HAL_Delay(26);
 8000fda:	201a      	movs	r0, #26
 8000fdc:	f000 ff24 	bl	8001e28 <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData1, 3, 1000);
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	463b      	mov	r3, r7
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	22f6      	movs	r2, #246	; 0xf6
 8000ff2:	21ef      	movs	r1, #239	; 0xef
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <BMP180_Get_Uncompensated_Pressure+0x70>)
 8000ff6:	f001 fc7f 	bl	80028f8 <HAL_I2C_Mem_Read>
    return((((rData1[0] << 16) + (rData1[1] << 8) + rData1[2]) >> (8 - 3)));
 8000ffa:	783b      	ldrb	r3, [r7, #0]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	787b      	ldrb	r3, [r7, #1]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	4413      	add	r3, r2
 8001004:	78ba      	ldrb	r2, [r7, #2]
 8001006:	4413      	add	r3, r2
 8001008:	115b      	asrs	r3, r3, #5

}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	08008b70 	.word	0x08008b70
 8001018:	20000244 	.word	0x20000244

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fea5 	bl	8001d6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f860 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 f952 	bl	80012d0 <MX_GPIO_Init>
  MX_I2C3_Init();
 800102c:	f000 f90e 	bl	800124c <MX_I2C3_Init>
  MX_I2C1_Init();
 8001030:	f000 f8ca 	bl	80011c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 BMP180_Init();
 8001034:	f7ff fcce 	bl	80009d4 <BMP180_Init>
  SSD1306_Init();
 8001038:	f000 f9be 	bl	80013b8 <SSD1306_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 tempature1= BMP180_Get_Temperature();
 800103c:	f7ff fd78 	bl	8000b30 <BMP180_Get_Temperature>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <main+0xac>)
 8001046:	edc3 7a00 	vstr	s15, [r3]
	 pressure1 = BMP180_Get_Pressure();
 800104a:	f7ff fe11 	bl	8000c70 <BMP180_Get_Pressure>
 800104e:	eef0 7a40 	vmov.f32	s15, s0
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <main+0xb0>)
 8001054:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(sıcaklık,"%.5f",tempature1);
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <main+0xac>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001062:	ec53 2b17 	vmov	r2, r3, d7
 8001066:	491a      	ldr	r1, [pc, #104]	; (80010d0 <main+0xb4>)
 8001068:	481a      	ldr	r0, [pc, #104]	; (80010d4 <main+0xb8>)
 800106a:	f004 f9a1 	bl	80053b0 <siprintf>
	  sprintf(basınc,"%.5f",pressure1);
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <main+0xb0>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001078:	ec53 2b17 	vmov	r2, r3, d7
 800107c:	4914      	ldr	r1, [pc, #80]	; (80010d0 <main+0xb4>)
 800107e:	4816      	ldr	r0, [pc, #88]	; (80010d8 <main+0xbc>)
 8001080:	f004 f996 	bl	80053b0 <siprintf>

	  SSD1306_GotoXY (0,0);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f000 fb00 	bl	800168c <SSD1306_GotoXY>
	 SSD1306_Puts ("T : ", &Font_11x18, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	4913      	ldr	r1, [pc, #76]	; (80010dc <main+0xc0>)
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <main+0xc4>)
 8001092:	f000 fb91 	bl	80017b8 <SSD1306_Puts>
	  SSD1306_Puts (sıcaklık, &Font_11x18, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	4910      	ldr	r1, [pc, #64]	; (80010dc <main+0xc0>)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <main+0xb8>)
 800109c:	f000 fb8c 	bl	80017b8 <SSD1306_Puts>
	 	 SSD1306_GotoXY (0,30);
 80010a0:	211e      	movs	r1, #30
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 faf2 	bl	800168c <SSD1306_GotoXY>
		 SSD1306_Puts ("P : ", &Font_11x18, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	490c      	ldr	r1, [pc, #48]	; (80010dc <main+0xc0>)
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <main+0xc8>)
 80010ae:	f000 fb83 	bl	80017b8 <SSD1306_Puts>
		  SSD1306_Puts (basınc, &Font_11x18, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	4909      	ldr	r1, [pc, #36]	; (80010dc <main+0xc0>)
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <main+0xbc>)
 80010b8:	f000 fb7e 	bl	80017b8 <SSD1306_Puts>

	 	  SSD1306_UpdateScreen();
 80010bc:	f000 fa40 	bl	8001540 <SSD1306_UpdateScreen>
	 	 HAL_Delay(200);
 80010c0:	20c8      	movs	r0, #200	; 0xc8
 80010c2:	f000 feb1 	bl	8001e28 <HAL_Delay>
  {
 80010c6:	e7b9      	b.n	800103c <main+0x20>
 80010c8:	200002ec 	.word	0x200002ec
 80010cc:	200002f0 	.word	0x200002f0
 80010d0:	08008b74 	.word	0x08008b74
 80010d4:	200002f4 	.word	0x200002f4
 80010d8:	20000328 	.word	0x20000328
 80010dc:	20000000 	.word	0x20000000
 80010e0:	08008b7c 	.word	0x08008b7c
 80010e4:	08008b84 	.word	0x08008b84

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2234      	movs	r2, #52	; 0x34
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 f9bd 	bl	8005476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800110c:	f002 f968 	bl	80033e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <SystemClock_Config+0xd8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <SystemClock_Config+0xd8>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <SystemClock_Config+0xd8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <SystemClock_Config+0xdc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <SystemClock_Config+0xdc>)
 800112e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <SystemClock_Config+0xdc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001154:	2308      	movs	r3, #8
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001158:	23d8      	movs	r3, #216	; 0xd8
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4618      	mov	r0, r3
 800116e:	f002 f997 	bl	80034a0 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001178:	f000 f918 	bl	80013ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800117c:	f002 f940 	bl	8003400 <HAL_PWREx_EnableOverDrive>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001186:	f000 f911 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2302      	movs	r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001196:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2107      	movs	r1, #7
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fc27 	bl	80039fc <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011b4:	f000 f8fa 	bl	80013ac <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_I2C1_Init+0x78>)
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <MX_I2C1_Init+0x7c>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200922;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x78>)
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_I2C1_Init+0x80>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_I2C1_Init+0x78>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x78>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_I2C1_Init+0x78>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x78>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_I2C1_Init+0x78>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x78>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_I2C1_Init+0x78>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001202:	480f      	ldr	r0, [pc, #60]	; (8001240 <MX_I2C1_Init+0x78>)
 8001204:	f001 f8e0 	bl	80023c8 <HAL_I2C_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800120e:	f000 f8cd 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001212:	2100      	movs	r1, #0
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <MX_I2C1_Init+0x78>)
 8001216:	f002 f82b 	bl	8003270 <HAL_I2CEx_ConfigAnalogFilter>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001220:	f000 f8c4 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_I2C1_Init+0x78>)
 8001228:	f002 f86d 	bl	8003306 <HAL_I2CEx_ConfigDigitalFilter>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001232:	f000 f8bb 	bl	80013ac <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001236:	2001      	movs	r0, #1
 8001238:	f002 f8b2 	bl	80033a0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000244 	.word	0x20000244
 8001244:	40005400 	.word	0x40005400
 8001248:	00200922 	.word	0x00200922

0800124c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001252:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <MX_I2C3_Init+0x7c>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00200922;
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <MX_I2C3_Init+0x80>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_I2C3_Init+0x78>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001264:	2201      	movs	r2, #1
 8001266:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_I2C3_Init+0x78>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C3_Init+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001286:	480f      	ldr	r0, [pc, #60]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001288:	f001 f89e 	bl	80023c8 <HAL_I2C_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001292:	f000 f88b 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <MX_I2C3_Init+0x78>)
 800129a:	f001 ffe9 	bl	8003270 <HAL_I2CEx_ConfigAnalogFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012a4:	f000 f882 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_I2C3_Init+0x78>)
 80012ac:	f002 f82b 	bl	8003306 <HAL_I2CEx_ConfigDigitalFilter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80012b6:	f000 f879 	bl	80013ac <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80012ba:	2004      	movs	r0, #4
 80012bc:	f002 f870 	bl	80033a0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000298 	.word	0x20000298
 80012c8:	40005c00 	.word	0x40005c00
 80012cc:	00200922 	.word	0x00200922

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <MX_GPIO_Init+0xd0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <MX_GPIO_Init+0xd0>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MX_GPIO_Init+0xd0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_GPIO_Init+0xd0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <MX_GPIO_Init+0xd0>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <MX_GPIO_Init+0xd0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_GPIO_Init+0xd0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_GPIO_Init+0xd0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <MX_GPIO_Init+0xd0>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2120      	movs	r1, #32
 800134a:	4816      	ldr	r0, [pc, #88]	; (80013a4 <MX_GPIO_Init+0xd4>)
 800134c:	f001 f822 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <MX_GPIO_Init+0xd8>)
 8001358:	f001 f81c 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800135c:	2320      	movs	r3, #32
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_GPIO_Init+0xd4>)
 8001374:	f000 fe62 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001386:	2302      	movs	r3, #2
 8001388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_GPIO_Init+0xd8>)
 8001392:	f000 fe53 	bl	800203c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80013be:	f000 fa21 	bl	8001804 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013c2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013c6:	2201      	movs	r2, #1
 80013c8:	2178      	movs	r1, #120	; 0x78
 80013ca:	485b      	ldr	r0, [pc, #364]	; (8001538 <SSD1306_Init+0x180>)
 80013cc:	f001 fbae 	bl	8002b2c <HAL_I2C_IsDeviceReady>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e0a9      	b.n	800152e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80013da:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013e0:	e002      	b.n	80013e8 <SSD1306_Init+0x30>
		p--;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80013ee:	22ae      	movs	r2, #174	; 0xae
 80013f0:	2100      	movs	r1, #0
 80013f2:	2078      	movs	r0, #120	; 0x78
 80013f4:	f000 fa82 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80013f8:	2220      	movs	r2, #32
 80013fa:	2100      	movs	r1, #0
 80013fc:	2078      	movs	r0, #120	; 0x78
 80013fe:	f000 fa7d 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001402:	2210      	movs	r2, #16
 8001404:	2100      	movs	r1, #0
 8001406:	2078      	movs	r0, #120	; 0x78
 8001408:	f000 fa78 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800140c:	22b0      	movs	r2, #176	; 0xb0
 800140e:	2100      	movs	r1, #0
 8001410:	2078      	movs	r0, #120	; 0x78
 8001412:	f000 fa73 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001416:	22c8      	movs	r2, #200	; 0xc8
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	; 0x78
 800141c:	f000 fa6e 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2078      	movs	r0, #120	; 0x78
 8001426:	f000 fa69 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800142a:	2210      	movs	r2, #16
 800142c:	2100      	movs	r1, #0
 800142e:	2078      	movs	r0, #120	; 0x78
 8001430:	f000 fa64 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001434:	2240      	movs	r2, #64	; 0x40
 8001436:	2100      	movs	r1, #0
 8001438:	2078      	movs	r0, #120	; 0x78
 800143a:	f000 fa5f 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800143e:	2281      	movs	r2, #129	; 0x81
 8001440:	2100      	movs	r1, #0
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f000 fa5a 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001448:	22ff      	movs	r2, #255	; 0xff
 800144a:	2100      	movs	r1, #0
 800144c:	2078      	movs	r0, #120	; 0x78
 800144e:	f000 fa55 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001452:	22a1      	movs	r2, #161	; 0xa1
 8001454:	2100      	movs	r1, #0
 8001456:	2078      	movs	r0, #120	; 0x78
 8001458:	f000 fa50 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800145c:	22a6      	movs	r2, #166	; 0xa6
 800145e:	2100      	movs	r1, #0
 8001460:	2078      	movs	r0, #120	; 0x78
 8001462:	f000 fa4b 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001466:	22a8      	movs	r2, #168	; 0xa8
 8001468:	2100      	movs	r1, #0
 800146a:	2078      	movs	r0, #120	; 0x78
 800146c:	f000 fa46 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001470:	223f      	movs	r2, #63	; 0x3f
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 fa41 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800147a:	22a4      	movs	r2, #164	; 0xa4
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 fa3c 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001484:	22d3      	movs	r2, #211	; 0xd3
 8001486:	2100      	movs	r1, #0
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f000 fa37 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f000 fa32 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001498:	22d5      	movs	r2, #213	; 0xd5
 800149a:	2100      	movs	r1, #0
 800149c:	2078      	movs	r0, #120	; 0x78
 800149e:	f000 fa2d 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014a2:	22f0      	movs	r2, #240	; 0xf0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f000 fa28 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014ac:	22d9      	movs	r2, #217	; 0xd9
 80014ae:	2100      	movs	r1, #0
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f000 fa23 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80014b6:	2222      	movs	r2, #34	; 0x22
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 fa1e 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80014c0:	22da      	movs	r2, #218	; 0xda
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f000 fa19 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014ca:	2212      	movs	r2, #18
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fa14 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014d4:	22db      	movs	r2, #219	; 0xdb
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f000 fa0f 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80014de:	2220      	movs	r2, #32
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 fa0a 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80014e8:	228d      	movs	r2, #141	; 0x8d
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	; 0x78
 80014ee:	f000 fa05 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80014f2:	2214      	movs	r2, #20
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 fa00 	bl	80018fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80014fc:	22af      	movs	r2, #175	; 0xaf
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 f9fb 	bl	80018fc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001506:	222e      	movs	r2, #46	; 0x2e
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	; 0x78
 800150c:	f000 f9f6 	bl	80018fc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f843 	bl	800159c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001516:	f000 f813 	bl	8001540 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <SSD1306_Init+0x184>)
 800151c:	2200      	movs	r2, #0
 800151e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SSD1306_Init+0x184>)
 8001522:	2200      	movs	r2, #0
 8001524:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <SSD1306_Init+0x184>)
 8001528:	2201      	movs	r2, #1
 800152a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000298 	.word	0x20000298
 800153c:	2000075c 	.word	0x2000075c

08001540 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	e01d      	b.n	8001588 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3b50      	subs	r3, #80	; 0x50
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f000 f9d0 	bl	80018fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2078      	movs	r0, #120	; 0x78
 8001562:	f000 f9cb 	bl	80018fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001566:	2210      	movs	r2, #16
 8001568:	2100      	movs	r1, #0
 800156a:	2078      	movs	r0, #120	; 0x78
 800156c:	f000 f9c6 	bl	80018fc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	01db      	lsls	r3, r3, #7
 8001574:	4a08      	ldr	r2, [pc, #32]	; (8001598 <SSD1306_UpdateScreen+0x58>)
 8001576:	441a      	add	r2, r3
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f000 f957 	bl	8001830 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	3301      	adds	r3, #1
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b07      	cmp	r3, #7
 800158c:	d9de      	bls.n	800154c <SSD1306_UpdateScreen+0xc>
	}
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000035c 	.word	0x2000035c

0800159c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <SSD1306_Fill+0x14>
 80015ac:	2300      	movs	r3, #0
 80015ae:	e000      	b.n	80015b2 <SSD1306_Fill+0x16>
 80015b0:	23ff      	movs	r3, #255	; 0xff
 80015b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b6:	4619      	mov	r1, r3
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <SSD1306_Fill+0x2c>)
 80015ba:	f003 ff5c 	bl	8005476 <memset>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000035c 	.word	0x2000035c

080015cc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	70fb      	strb	r3, [r7, #3]
	if (
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	2b7f      	cmp	r3, #127	; 0x7f
 80015e2:	d848      	bhi.n	8001676 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	2b3f      	cmp	r3, #63	; 0x3f
 80015e8:	d845      	bhi.n	8001676 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <SSD1306_DrawPixel+0xb8>)
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d11a      	bne.n	800163c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001606:	88fa      	ldrh	r2, [r7, #6]
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	b298      	uxth	r0, r3
 800160e:	4603      	mov	r3, r0
 8001610:	01db      	lsls	r3, r3, #7
 8001612:	4413      	add	r3, r2
 8001614:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <SSD1306_DrawPixel+0xbc>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	b25a      	sxtb	r2, r3
 800161a:	88bb      	ldrh	r3, [r7, #4]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b259      	sxtb	r1, r3
 800162c:	88fa      	ldrh	r2, [r7, #6]
 800162e:	4603      	mov	r3, r0
 8001630:	01db      	lsls	r3, r3, #7
 8001632:	4413      	add	r3, r2
 8001634:	b2c9      	uxtb	r1, r1
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <SSD1306_DrawPixel+0xbc>)
 8001638:	54d1      	strb	r1, [r2, r3]
 800163a:	e01d      	b.n	8001678 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800163c:	88fa      	ldrh	r2, [r7, #6]
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	b298      	uxth	r0, r3
 8001644:	4603      	mov	r3, r0
 8001646:	01db      	lsls	r3, r3, #7
 8001648:	4413      	add	r3, r2
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <SSD1306_DrawPixel+0xbc>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	b25a      	sxtb	r2, r3
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	b25b      	sxtb	r3, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	b25b      	sxtb	r3, r3
 8001662:	4013      	ands	r3, r2
 8001664:	b259      	sxtb	r1, r3
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	4603      	mov	r3, r0
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4413      	add	r3, r2
 800166e:	b2c9      	uxtb	r1, r1
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SSD1306_DrawPixel+0xbc>)
 8001672:	54d1      	strb	r1, [r2, r3]
 8001674:	e000      	b.n	8001678 <SSD1306_DrawPixel+0xac>
		return;
 8001676:	bf00      	nop
	}
}
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000075c 	.word	0x2000075c
 8001688:	2000035c 	.word	0x2000035c

0800168c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	460a      	mov	r2, r1
 8001696:	80fb      	strh	r3, [r7, #6]
 8001698:	4613      	mov	r3, r2
 800169a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SSD1306_GotoXY+0x28>)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <SSD1306_GotoXY+0x28>)
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	8053      	strh	r3, [r2, #2]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	2000075c 	.word	0x2000075c

080016b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <SSD1306_Putc+0xfc>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
	if (
 80016d4:	2b7f      	cmp	r3, #127	; 0x7f
 80016d6:	dc07      	bgt.n	80016e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <SSD1306_Putc+0xfc>)
 80016da:	885b      	ldrh	r3, [r3, #2]
 80016dc:	461a      	mov	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016e4:	2b3f      	cmp	r3, #63	; 0x3f
 80016e6:	dd01      	ble.n	80016ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	e05e      	b.n	80017aa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e04b      	b.n	800178a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	3b20      	subs	r3, #32
 80016fa:	6839      	ldr	r1, [r7, #0]
 80016fc:	7849      	ldrb	r1, [r1, #1]
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4619      	mov	r1, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	e030      	b.n	8001778 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d010      	beq.n	8001748 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <SSD1306_Putc+0xfc>)
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	b298      	uxth	r0, r3
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <SSD1306_Putc+0xfc>)
 8001734:	885a      	ldrh	r2, [r3, #2]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	79ba      	ldrb	r2, [r7, #6]
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff ff43 	bl	80015cc <SSD1306_DrawPixel>
 8001746:	e014      	b.n	8001772 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <SSD1306_Putc+0xfc>)
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	b298      	uxth	r0, r3
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <SSD1306_Putc+0xfc>)
 8001756:	885a      	ldrh	r2, [r3, #2]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	b299      	uxth	r1, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf0c      	ite	eq
 8001766:	2301      	moveq	r3, #1
 8001768:	2300      	movne	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	f7ff ff2d 	bl	80015cc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	3301      	adds	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4293      	cmp	r3, r2
 8001782:	d3c8      	bcc.n	8001716 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	461a      	mov	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	4293      	cmp	r3, r2
 8001794:	d3ad      	bcc.n	80016f2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <SSD1306_Putc+0xfc>)
 8001798:	881a      	ldrh	r2, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <SSD1306_Putc+0xfc>)
 80017a6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000075c 	.word	0x2000075c

080017b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	4613      	mov	r3, r2
 80017c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80017c6:	e012      	b.n	80017ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff71 	bl	80016b8 <SSD1306_Putc>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d002      	beq.n	80017e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	e008      	b.n	80017fa <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1e8      	bne.n	80017c8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	781b      	ldrb	r3, [r3, #0]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <ssd1306_I2C_Init+0x28>)
 800180c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800180e:	e002      	b.n	8001816 <ssd1306_I2C_Init+0x12>
		p--;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	0003d090 	.word	0x0003d090

08001830 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b0c7      	sub	sp, #284	; 0x11c
 8001834:	af02      	add	r7, sp, #8
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800183e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001842:	600a      	str	r2, [r1, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800184a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800184e:	4622      	mov	r2, r4
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001856:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800185a:	4602      	mov	r2, r0
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001862:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001866:	460a      	mov	r2, r1
 8001868:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800186a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800186e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001872:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001876:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001884:	e015      	b.n	80018b2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001886:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800188a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800188e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	441a      	add	r2, r3
 8001896:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800189a:	3301      	adds	r3, #1
 800189c:	7811      	ldrb	r1, [r2, #0]
 800189e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018a2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80018a6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018ac:	3301      	adds	r3, #1
 80018ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018bc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80018c0:	8812      	ldrh	r2, [r2, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d8df      	bhi.n	8001886 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 80018c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b299      	uxth	r1, r3
 80018d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f107 020c 	add.w	r2, r7, #12
 80018e4:	200a      	movs	r0, #10
 80018e6:	9000      	str	r0, [sp, #0]
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <ssd1306_I2C_WriteMulti+0xc8>)
 80018ea:	f000 fdfd 	bl	80024e8 <HAL_I2C_Master_Transmit>
}
 80018ee:	bf00      	nop
 80018f0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	20000298 	.word	0x20000298

080018fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	460b      	mov	r3, r1
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001912:	797b      	ldrb	r3, [r7, #5]
 8001914:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b299      	uxth	r1, r3
 800191a:	f107 020c 	add.w	r2, r7, #12
 800191e:	230a      	movs	r3, #10
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2302      	movs	r3, #2
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <ssd1306_I2C_Write+0x38>)
 8001926:	f000 fddf 	bl	80024e8 <HAL_I2C_Master_Transmit>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000298 	.word	0x20000298

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x44>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_MspInit+0x44>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_MspInit+0x44>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_MspInit+0x44>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x44>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x44>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0b0      	sub	sp, #192	; 0xc0
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	2290      	movs	r2, #144	; 0x90
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fd68 	bl	8005476 <memset>
  if(hi2c->Instance==I2C1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a55      	ldr	r2, [pc, #340]	; (8001b00 <HAL_I2C_MspInit+0x180>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d13d      	bne.n	8001a2c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 f9cd 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80019cc:	f7ff fcee 	bl	80013ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	6313      	str	r3, [r2, #48]	; 0x30
 80019dc:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e8:	23c0      	movs	r3, #192	; 0xc0
 80019ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a00:	2304      	movs	r3, #4
 8001a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	483e      	ldr	r0, [pc, #248]	; (8001b08 <HAL_I2C_MspInit+0x188>)
 8001a0e:	f000 fb15 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a12:	4b3c      	ldr	r3, [pc, #240]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a2a:	e064      	b.n	8001af6 <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <HAL_I2C_MspInit+0x18c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d15f      	bne.n	8001af6 <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 f98a 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001a52:	f7ff fcab 	bl	80013ac <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a24      	ldr	r2, [pc, #144]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8e:	2312      	movs	r3, #18
 8001a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4818      	ldr	r0, [pc, #96]	; (8001b10 <HAL_I2C_MspInit+0x190>)
 8001aae:	f000 fac5 	bl	800203c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aba:	2312      	movs	r3, #18
 8001abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001acc:	2304      	movs	r3, #4
 8001ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480e      	ldr	r0, [pc, #56]	; (8001b14 <HAL_I2C_MspInit+0x194>)
 8001ada:	f000 faaf 	bl	800203c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001ae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_I2C_MspInit+0x184>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
}
 8001af6:	bf00      	nop
 8001af8:	37c0      	adds	r7, #192	; 0xc0
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40005400 	.word	0x40005400
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40005c00 	.word	0x40005c00
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40020000 	.word	0x40020000

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b64:	f000 f940 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b86:	f003 fcc9 	bl	800551c <__errno>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_exit>:

void _exit (int status)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ffe7 	bl	8001b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bae:	e7fe      	b.n	8001bae <_exit+0x12>

08001bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e00a      	b.n	8001bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <_read+0x12>
  }

  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e009      	b.n	8001c10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf1      	blt.n	8001bfc <_write+0x12>
  }
  return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_close>:

int _close(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_isatty>:

int _isatty(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f003 fc2e 	bl	800551c <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20080000 	.word	0x20080000
 8001cec:	00000400 	.word	0x00000400
 8001cf0:	20000764 	.word	0x20000764
 8001cf4:	200008b8 	.word	0x200008b8

08001cf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemInit+0x20>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <SystemInit+0x20>)
 8001d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d54 <LoopFillZerobss+0x12>


/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d20:	480d      	ldr	r0, [pc, #52]	; (8001d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d22:	490e      	ldr	r1, [pc, #56]	; (8001d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d24:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d38:	4c0b      	ldr	r4, [pc, #44]	; (8001d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d46:	f7ff ffd7 	bl	8001cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f003 fbed 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4e:	f7ff f965 	bl	800101c <main>
  bx  lr    
 8001d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d60:	08009d30 	.word	0x08009d30
  ldr r2, =_sbss
 8001d64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d68:	200008b8 	.word	0x200008b8

08001d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC_IRQHandler>

08001d6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d72:	2003      	movs	r0, #3
 8001d74:	f000 f92e 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f000 f805 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7e:	f7ff fddb 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x54>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x58>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f93b 	bl	8002022 <HAL_SYSTICK_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00e      	b.n	8001dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d80a      	bhi.n	8001dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 f911 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <HAL_InitTick+0x5c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000010 	.word	0x20000010
 8001de4:	2000000c 	.word	0x2000000c

08001de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x20>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_IncTick+0x24>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_IncTick+0x24>)
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	20000768 	.word	0x20000768

08001e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_GetTick+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000768 	.word	0x20000768

08001e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff ffee 	bl	8001e10 <HAL_GetTick>
 8001e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d005      	beq.n	8001e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_Delay+0x44>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4e:	bf00      	nop
 8001e50:	f7ff ffde 	bl	8001e10 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d8f7      	bhi.n	8001e50 <HAL_Delay+0x28>
  {
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000010 	.word	0x20000010

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	05fa0000 	.word	0x05fa0000

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff8e 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff47 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff5c 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff8e 	bl	8001f28 <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5d 	bl	8001ed4 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffb0 	bl	8001f90 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e175      	b.n	8002348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 8164 	bne.w	8002342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x56>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80be 	beq.w	8002342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_GPIO_Init+0x324>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a65      	ldr	r2, [pc, #404]	; (8002360 <HAL_GPIO_Init+0x324>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_GPIO_Init+0x324>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021de:	4a61      	ldr	r2, [pc, #388]	; (8002364 <HAL_GPIO_Init+0x328>)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_GPIO_Init+0x32c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d037      	beq.n	800227a <HAL_GPIO_Init+0x23e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_GPIO_Init+0x330>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_GPIO_Init+0x23a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a56      	ldr	r2, [pc, #344]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02b      	beq.n	8002272 <HAL_GPIO_Init+0x236>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a55      	ldr	r2, [pc, #340]	; (8002374 <HAL_GPIO_Init+0x338>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d025      	beq.n	800226e <HAL_GPIO_Init+0x232>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a54      	ldr	r2, [pc, #336]	; (8002378 <HAL_GPIO_Init+0x33c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <HAL_GPIO_Init+0x22e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a53      	ldr	r2, [pc, #332]	; (800237c <HAL_GPIO_Init+0x340>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x22a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_GPIO_Init+0x344>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x226>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a51      	ldr	r2, [pc, #324]	; (8002384 <HAL_GPIO_Init+0x348>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x222>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a50      	ldr	r2, [pc, #320]	; (8002388 <HAL_GPIO_Init+0x34c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x21e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_GPIO_Init+0x350>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x21a>
 8002252:	2309      	movs	r3, #9
 8002254:	e012      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002256:	230a      	movs	r3, #10
 8002258:	e010      	b.n	800227c <HAL_GPIO_Init+0x240>
 800225a:	2308      	movs	r3, #8
 800225c:	e00e      	b.n	800227c <HAL_GPIO_Init+0x240>
 800225e:	2307      	movs	r3, #7
 8002260:	e00c      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002262:	2306      	movs	r3, #6
 8002264:	e00a      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002266:	2305      	movs	r3, #5
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x240>
 800226a:	2304      	movs	r3, #4
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x240>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x240>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	; (8002364 <HAL_GPIO_Init+0x328>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_GPIO_Init+0x354>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a34      	ldr	r2, [pc, #208]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_GPIO_Init+0x354>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_GPIO_Init+0x354>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_GPIO_Init+0x354>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f ae86 	bls.w	800205c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40021400 	.word	0x40021400
 8002380:	40021800 	.word	0x40021800
 8002384:	40021c00 	.word	0x40021c00
 8002388:	40022000 	.word	0x40022000
 800238c:	40022400 	.word	0x40022400
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fac6 	bl	8001980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e006      	b.n	8002450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800244e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d104      	bne.n	8002462 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_I2C_Init+0x11c>)
 800246e:	430b      	orrs	r3, r1
 8002470:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002480:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69d9      	ldr	r1, [r3, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	02008000 	.word	0x02008000

080024e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
 80024f8:	4613      	mov	r3, r2
 80024fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b20      	cmp	r3, #32
 8002506:	f040 80da 	bne.w	80026be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x30>
 8002514:	2302      	movs	r3, #2
 8002516:	e0d3      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x1d8>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002520:	f7ff fc76 	bl	8001e10 <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2319      	movs	r3, #25
 800252c:	2201      	movs	r2, #1
 800252e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fcce 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0be      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2210      	movs	r2, #16
 800254e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2bff      	cmp	r3, #255	; 0xff
 8002572:	d90e      	bls.n	8002592 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	22ff      	movs	r2, #255	; 0xff
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	b2da      	uxtb	r2, r3
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fe3e 	bl	800320c <I2C_TransferConfig>
 8002590:	e06c      	b.n	800266c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	8979      	ldrh	r1, [r7, #10]
 80025a4:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fe2d 	bl	800320c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025b2:	e05b      	b.n	800266c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6a39      	ldr	r1, [r7, #32]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fccb 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e07b      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d034      	beq.n	800266c <HAL_I2C_Master_Transmit+0x184>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fc5d 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04d      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d90e      	bls.n	800264c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fde1 	bl	800320c <I2C_TransferConfig>
 800264a:	e00f      	b.n	800266c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fdd0 	bl	800320c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d19e      	bne.n	80025b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fcaa 	bl	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e01a      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_I2C_Master_Transmit+0x1e4>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	80002000 	.word	0x80002000
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	f040 80f9 	bne.w	80028ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_I2C_Mem_Write+0x34>
 80026fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0ed      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_I2C_Mem_Write+0x4e>
 800271a:	2302      	movs	r3, #2
 800271c:	e0e6      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002726:	f7ff fb73 	bl	8001e10 <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2319      	movs	r3, #25
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fbcb 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0d1      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2221      	movs	r2, #33	; 0x21
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2240      	movs	r2, #64	; 0x40
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002770:	88f8      	ldrh	r0, [r7, #6]
 8002772:	893a      	ldrh	r2, [r7, #8]
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4603      	mov	r3, r0
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fadb 	bl	8002d3c <I2C_RequestMemoryWrite>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0a9      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2bff      	cmp	r3, #255	; 0xff
 80027a0:	d90e      	bls.n	80027c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	22ff      	movs	r2, #255	; 0xff
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	8979      	ldrh	r1, [r7, #10]
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fd27 	bl	800320c <I2C_TransferConfig>
 80027be:	e00f      	b.n	80027e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	8979      	ldrh	r1, [r7, #10]
 80027d2:	2300      	movs	r3, #0
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fd16 	bl	800320c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fbb5 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e07b      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d034      	beq.n	8002898 <HAL_I2C_Mem_Write+0x1c8>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d130      	bne.n	8002898 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	2200      	movs	r2, #0
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fb47 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e04d      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2bff      	cmp	r3, #255	; 0xff
 8002858:	d90e      	bls.n	8002878 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	22ff      	movs	r2, #255	; 0xff
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	b2da      	uxtb	r2, r3
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	2300      	movs	r3, #0
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fccb 	bl	800320c <I2C_TransferConfig>
 8002876:	e00f      	b.n	8002898 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	b2da      	uxtb	r2, r3
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fcba 	bl	800320c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d19e      	bne.n	80027e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fb94 	bl	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e01a      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2220      	movs	r2, #32
 80028bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_I2C_Mem_Write+0x224>)
 80028ca:	400b      	ands	r3, r1
 80028cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	fe00e800 	.word	0xfe00e800

080028f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b20      	cmp	r3, #32
 800291c:	f040 80fd 	bne.w	8002b1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_I2C_Mem_Read+0x34>
 8002926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0f1      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_I2C_Mem_Read+0x4e>
 8002942:	2302      	movs	r3, #2
 8002944:	e0ea      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800294e:	f7ff fa5f 	bl	8001e10 <HAL_GetTick>
 8002952:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2319      	movs	r3, #25
 800295a:	2201      	movs	r2, #1
 800295c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fab7 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0d5      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2222      	movs	r2, #34	; 0x22
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002998:	88f8      	ldrh	r0, [r7, #6]
 800299a:	893a      	ldrh	r2, [r7, #8]
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4603      	mov	r3, r0
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fa1b 	bl	8002de4 <I2C_RequestMemoryRead>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0ad      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2bff      	cmp	r3, #255	; 0xff
 80029c8:	d90e      	bls.n	80029e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	22ff      	movs	r2, #255	; 0xff
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	8979      	ldrh	r1, [r7, #10]
 80029d8:	4b52      	ldr	r3, [pc, #328]	; (8002b24 <HAL_I2C_Mem_Read+0x22c>)
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fc13 	bl	800320c <I2C_TransferConfig>
 80029e6:	e00f      	b.n	8002a08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	8979      	ldrh	r1, [r7, #10]
 80029fa:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <HAL_I2C_Mem_Read+0x22c>)
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fc02 	bl	800320c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2104      	movs	r1, #4
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa5e 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07c      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d034      	beq.n	8002ac8 <HAL_I2C_Mem_Read+0x1d0>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d130      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fa2f 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e04d      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2bff      	cmp	r3, #255	; 0xff
 8002a88:	d90e      	bls.n	8002aa8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fbb3 	bl	800320c <I2C_TransferConfig>
 8002aa6:	e00f      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fba2 	bl	800320c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d19a      	bne.n	8002a08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa7c 	bl	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e01a      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2220      	movs	r2, #32
 8002aec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_I2C_Mem_Read+0x230>)
 8002afa:	400b      	ands	r3, r1
 8002afc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	80002400 	.word	0x80002400
 8002b28:	fe00e800 	.word	0xfe00e800

08002b2c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	f040 80ef 	bne.w	8002d2c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5c:	d101      	bne.n	8002b62 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e0e5      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_I2C_IsDeviceReady+0x44>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0de      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <HAL_I2C_IsDeviceReady+0x6e>
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_I2C_IsDeviceReady+0x20c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	e004      	b.n	8002ba4 <HAL_I2C_IsDeviceReady+0x78>
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002baa:	f7ff f931 	bl	8001e10 <HAL_GetTick>
 8002bae:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bdc:	e034      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d01a      	beq.n	8002c1c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7ff f913 	bl	8001e10 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <HAL_I2C_IsDeviceReady+0xd0>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e088      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c48:	7ffb      	ldrb	r3, [r7, #31]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_I2C_IsDeviceReady+0x128>
 8002c4e:	7fbb      	ldrb	r3, [r7, #30]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0c4      	beq.n	8002bde <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d01a      	beq.n	8002c98 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f931 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e058      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2220      	movs	r2, #32
 8002c82:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e04a      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f916 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e03d      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d118      	bne.n	8002cfc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f8f5 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e01c      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	f63f af3d 	bhi.w	8002b86 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	02002000 	.word	0x02002000

08002d3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	817b      	strh	r3, [r7, #10]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	813b      	strh	r3, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	8979      	ldrh	r1, [r7, #10]
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <I2C_RequestMemoryWrite+0xa4>)
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa51 	bl	800320c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	69b9      	ldr	r1, [r7, #24]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8f0 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e02c      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d84:	893b      	ldrh	r3, [r7, #8]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8e:	e015      	b.n	8002dbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	69b9      	ldr	r1, [r7, #24]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f8d6 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e012      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002db2:	893b      	ldrh	r3, [r7, #8]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f884 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	80002000 	.word	0x80002000

08002de4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <I2C_RequestMemoryRead+0xa4>)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f9fe 	bl	800320c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f89d 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02c      	b.n	8002e7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
 8002e34:	e015      	b.n	8002e62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f883 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e012      	b.n	8002e7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f831 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	80002000 	.word	0x80002000

08002e8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d103      	bne.n	8002eaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d007      	beq.n	8002ec8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	619a      	str	r2, [r3, #24]
  }
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee4:	e022      	b.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d01e      	beq.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7fe ff8f 	bl	8001e10 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d113      	bne.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e00f      	b.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d0cd      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f60:	e02c      	b.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f870 	bl	800304c <I2C_IsErrorOccurred>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e02a      	b.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d01e      	beq.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe ff47 	bl	8001e10 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e007      	b.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d1cb      	bne.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe0:	e028      	b.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f830 	bl	800304c <I2C_IsErrorOccurred>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e026      	b.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe ff0b 	bl	8001e10 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d113      	bne.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b20      	cmp	r3, #32
 8003040:	d1cf      	bne.n	8002fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d068      	beq.n	800314a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2210      	movs	r2, #16
 800307e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003080:	e049      	b.n	8003116 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d045      	beq.n	8003116 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fe fec1 	bl	8001e10 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_IsErrorOccurred+0x54>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d13a      	bne.n	8003116 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c2:	d121      	bne.n	8003108 <I2C_IsErrorOccurred+0xbc>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ca:	d01d      	beq.n	8003108 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d01a      	beq.n	8003108 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030e2:	f7fe fe95 	bl	8001e10 <HAL_GetTick>
 80030e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e8:	e00e      	b.n	8003108 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030ea:	f7fe fe91 	bl	8001e10 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b19      	cmp	r3, #25
 80030f6:	d907      	bls.n	8003108 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f043 0320 	orr.w	r3, r3, #32
 80030fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003106:	e006      	b.n	8003116 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b20      	cmp	r3, #32
 8003114:	d1e9      	bne.n	80030ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d003      	beq.n	800312c <I2C_IsErrorOccurred+0xe0>
 8003124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0aa      	beq.n	8003082 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800312c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003130:	2b00      	cmp	r3, #0
 8003132:	d103      	bne.n	800313c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2220      	movs	r2, #32
 800313a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800316c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f043 0302 	orr.w	r3, r3, #2
 80031a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01c      	beq.n	80031fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff fe63 	bl	8002e8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <I2C_IsErrorOccurred+0x1bc>)
 80031d2:	400b      	ands	r3, r1
 80031d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	fe00e800 	.word	0xfe00e800

0800320c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	817b      	strh	r3, [r7, #10]
 800321a:	4613      	mov	r3, r2
 800321c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003224:	7a7b      	ldrb	r3, [r7, #9]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	4313      	orrs	r3, r2
 8003236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800323a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	0d5b      	lsrs	r3, r3, #21
 8003246:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <I2C_TransferConfig+0x60>)
 800324c:	430b      	orrs	r3, r1
 800324e:	43db      	mvns	r3, r3
 8003250:	ea02 0103 	and.w	r1, r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	03ff63ff 	.word	0x03ff63ff

08003270 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	d138      	bne.n	80032f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003290:	2302      	movs	r3, #2
 8003292:	e032      	b.n	80032fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6819      	ldr	r1, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e000      	b.n	80032fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b20      	cmp	r3, #32
 800331a:	d139      	bne.n	8003390 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003326:	2302      	movs	r3, #2
 8003328:	e033      	b.n	8003392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2224      	movs	r2, #36	; 0x24
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003358:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80033ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b2:	6453      	str	r3, [r2, #68]	; 0x44
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4905      	ldr	r1, [pc, #20]	; (80033dc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800

080033e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40007000 	.word	0x40007000

08003400 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_PWREx_EnableOverDrive+0x98>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_PWREx_EnableOverDrive+0x98>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_PWREx_EnableOverDrive+0x98>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800342e:	f7fe fcef 	bl	8001e10 <HAL_GetTick>
 8003432:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003434:	e009      	b.n	800344a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003436:	f7fe fceb 	bl	8001e10 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003444:	d901      	bls.n	800344a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e022      	b.n	8003490 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_PWREx_EnableOverDrive+0x9c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003456:	d1ee      	bne.n	8003436 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_PWREx_EnableOverDrive+0x9c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0f      	ldr	r2, [pc, #60]	; (800349c <HAL_PWREx_EnableOverDrive+0x9c>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003462:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003464:	f7fe fcd4 	bl	8001e10 <HAL_GetTick>
 8003468:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800346a:	e009      	b.n	8003480 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800346c:	f7fe fcd0 	bl	8001e10 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347a:	d901      	bls.n	8003480 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e007      	b.n	8003490 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800348c:	d1ee      	bne.n	800346c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000

080034a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e29b      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8087 	beq.w	80035d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c4:	4b96      	ldr	r3, [pc, #600]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d00c      	beq.n	80034ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d0:	4b93      	ldr	r3, [pc, #588]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d112      	bne.n	8003502 <HAL_RCC_OscConfig+0x62>
 80034dc:	4b90      	ldr	r3, [pc, #576]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e8:	d10b      	bne.n	8003502 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	4b8d      	ldr	r3, [pc, #564]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d06c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x130>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d168      	bne.n	80035d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e275      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x7a>
 800350c:	4b84      	ldr	r3, [pc, #528]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a83      	ldr	r2, [pc, #524]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	e02e      	b.n	8003578 <HAL_RCC_OscConfig+0xd8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x9c>
 8003522:	4b7f      	ldr	r3, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7e      	ldr	r2, [pc, #504]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7b      	ldr	r2, [pc, #492]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xd8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0xc0>
 8003546:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a75      	ldr	r2, [pc, #468]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b73      	ldr	r3, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a72      	ldr	r2, [pc, #456]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xd8>
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6b      	ldr	r2, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fc46 	bl	8001e10 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fc42 	bl	8001e10 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e229      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xe8>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fc32 	bl	8001e10 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fc2e 	bl	8001e10 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e215      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	4b57      	ldr	r3, [pc, #348]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x110>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d069      	beq.n	80036b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035de:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ea:	4b4d      	ldr	r3, [pc, #308]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11c      	bne.n	8003630 <HAL_RCC_OscConfig+0x190>
 80035f6:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_RCC_OscConfig+0x17a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1e9      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	493d      	ldr	r1, [pc, #244]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	e040      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d023      	beq.n	8003680 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	4b39      	ldr	r3, [pc, #228]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a38      	ldr	r2, [pc, #224]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe fbe4 	bl	8001e10 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364c:	f7fe fbe0 	bl	8001e10 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e1c7      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4929      	ldr	r1, [pc, #164]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
 800367e:	e018      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003680:	4b27      	ldr	r3, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fbc0 	bl	8001e10 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe fbbc 	bl	8001e10 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e1a3      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d038      	beq.n	8003730 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d019      	beq.n	80036fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fe fb9d 	bl	8001e10 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036da:	f7fe fb99 	bl	8001e10 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e180      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80036ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x23a>
 80036f8:	e01a      	b.n	8003730 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 80036fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <HAL_RCC_OscConfig+0x280>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe fb83 	bl	8001e10 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370e:	f7fe fb7f 	bl	8001e10 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d903      	bls.n	8003724 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e166      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
 8003720:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b92      	ldr	r3, [pc, #584]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ee      	bne.n	800370e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a4 	beq.w	8003886 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b8c      	ldr	r3, [pc, #560]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b89      	ldr	r3, [pc, #548]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a88      	ldr	r2, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	4b86      	ldr	r3, [pc, #536]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003766:	4b83      	ldr	r3, [pc, #524]	; (8003974 <HAL_RCC_OscConfig+0x4d4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d118      	bne.n	80037a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003772:	4b80      	ldr	r3, [pc, #512]	; (8003974 <HAL_RCC_OscConfig+0x4d4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7f      	ldr	r2, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x4d4>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377e:	f7fe fb47 	bl	8001e10 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fe fb43 	bl	8001e10 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b64      	cmp	r3, #100	; 0x64
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e12a      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003798:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_OscConfig+0x4d4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x31a>
 80037ac:	4b70      	ldr	r3, [pc, #448]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	4a6f      	ldr	r2, [pc, #444]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6713      	str	r3, [r2, #112]	; 0x70
 80037b8:	e02d      	b.n	8003816 <HAL_RCC_OscConfig+0x376>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x33c>
 80037c2:	4b6b      	ldr	r3, [pc, #428]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a6a      	ldr	r2, [pc, #424]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
 80037ce:	4b68      	ldr	r3, [pc, #416]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a67      	ldr	r2, [pc, #412]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	e01c      	b.n	8003816 <HAL_RCC_OscConfig+0x376>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d10c      	bne.n	80037fe <HAL_RCC_OscConfig+0x35e>
 80037e4:	4b62      	ldr	r3, [pc, #392]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a61      	ldr	r2, [pc, #388]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	f043 0304 	orr.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	4b5f      	ldr	r3, [pc, #380]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a5e      	ldr	r2, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
 80037fc:	e00b      	b.n	8003816 <HAL_RCC_OscConfig+0x376>
 80037fe:	4b5c      	ldr	r3, [pc, #368]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a5b      	ldr	r2, [pc, #364]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d015      	beq.n	800384a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fe faf7 	bl	8001e10 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe faf3 	bl	8001e10 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e0d8      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ee      	beq.n	8003826 <HAL_RCC_OscConfig+0x386>
 8003848:	e014      	b.n	8003874 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fe fae1 	bl	8001e10 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fadd 	bl	8001e10 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0c2      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003868:	4b41      	ldr	r3, [pc, #260]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ee      	bne.n	8003852 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80ae 	beq.w	80039ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003890:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d06d      	beq.n	8003978 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d14b      	bne.n	800393c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a31      	ldr	r2, [pc, #196]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80038aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe faae 	bl	8001e10 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe faaa 	bl	8001e10 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e091      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	071b      	lsls	r3, r3, #28
 8003902:	491b      	ldr	r1, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe fa7c 	bl	8001e10 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fa78 	bl	8001e10 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e05f      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x47c>
 800393a:	e057      	b.n	80039ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fe fa62 	bl	8001e10 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe fa5e 	bl	8001e10 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e045      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_OscConfig+0x4d0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x4b0>
 800396e:	e03d      	b.n	80039ec <HAL_RCC_OscConfig+0x54c>
 8003970:	40023800 	.word	0x40023800
 8003974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x558>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d030      	beq.n	80039e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d129      	bne.n	80039e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d122      	bne.n	80039e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d119      	bne.n	80039e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d10f      	bne.n	80039e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0d0      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d910      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 020f 	bic.w	r2, r3, #15
 8003a2a:	4965      	ldr	r1, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d040      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d115      	bne.n	8003ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e073      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	4b3d      	ldr	r3, [pc, #244]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06b      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4936      	ldr	r1, [pc, #216]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af0:	f7fe f98e 	bl	8001e10 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fe f98a 	bl	8001e10 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e053      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d210      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 020f 	bic.w	r2, r3, #15
 8003b36:	4922      	ldr	r1, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1d0>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1d4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe f8ea 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	080098e8 	.word	0x080098e8
 8003bcc:	20000008 	.word	0x20000008
 8003bd0:	2000000c 	.word	0x2000000c

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b090      	sub	sp, #64	; 0x40
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be4:	2300      	movs	r3, #0
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d00d      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	f200 80a1 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c06:	e09b      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c0c:	e09b      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0e:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c12:	e098      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d028      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	2200      	movs	r2, #0
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	627a      	str	r2, [r7, #36]	; 0x24
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c40:	fb03 f201 	mul.w	r2, r3, r1
 8003c44:	2300      	movs	r3, #0
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c54:	460a      	mov	r2, r1
 8003c56:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5a:	4413      	add	r3, r2
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	2200      	movs	r2, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c6e:	f7fc fcfb 	bl	8000668 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4613      	mov	r3, r2
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7a:	e053      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	2200      	movs	r2, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	617a      	str	r2, [r7, #20]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c8e:	f04f 0b00 	mov.w	fp, #0
 8003c92:	4652      	mov	r2, sl
 8003c94:	465b      	mov	r3, fp
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	ebb2 080a 	subs.w	r8, r2, sl
 8003cae:	eb63 090b 	sbc.w	r9, r3, fp
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cca:	eb63 0509 	sbc.w	r5, r3, r9
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	00eb      	lsls	r3, r5, #3
 8003cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cdc:	00e2      	lsls	r2, r4, #3
 8003cde:	4614      	mov	r4, r2
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	eb14 030a 	adds.w	r3, r4, sl
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	eb45 030b 	adc.w	r3, r5, fp
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	60fa      	str	r2, [r7, #12]
 8003d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d18:	f7fc fca6 	bl	8000668 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3740      	adds	r7, #64	; 0x40
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	017d7840 	.word	0x017d7840

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d88:	4b69      	ldr	r3, [pc, #420]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d92:	6093      	str	r3, [r2, #8]
 8003d94:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	4964      	ldr	r1, [pc, #400]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d017      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dba:	4b5d      	ldr	r3, [pc, #372]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	4959      	ldr	r1, [pc, #356]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d017      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	494a      	ldr	r1, [pc, #296]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e14:	d101      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 808b 	beq.w	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a39      	ldr	r2, [pc, #228]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd ffd2 	bl	8001e10 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e70:	f7fd ffce 	bl	8001e10 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e38f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e82:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e8e:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d035      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d02e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d114      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd ff96 	bl	8001e10 <HAL_GetTick>
 8003ee4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd ff92 	bl	8001e10 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e351      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ee      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f16:	d111      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f26:	400b      	ands	r3, r1
 8003f28:	4901      	ldr	r1, [pc, #4]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000
 8003f38:	0ffffcff 	.word	0x0ffffcff
 8003f3c:	4bac      	ldr	r3, [pc, #688]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4aab      	ldr	r2, [pc, #684]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f46:	6093      	str	r3, [r2, #8]
 8003f48:	4ba9      	ldr	r3, [pc, #676]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	49a6      	ldr	r1, [pc, #664]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f66:	4ba2      	ldr	r3, [pc, #648]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	4aa0      	ldr	r2, [pc, #640]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f76:	4b9e      	ldr	r3, [pc, #632]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	499b      	ldr	r1, [pc, #620]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f94:	4b96      	ldr	r3, [pc, #600]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa2:	4993      	ldr	r1, [pc, #588]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fb6:	4b8e      	ldr	r3, [pc, #568]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	498a      	ldr	r1, [pc, #552]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fd8:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe6:	4982      	ldr	r1, [pc, #520]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4979      	ldr	r1, [pc, #484]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401c:	4b74      	ldr	r3, [pc, #464]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	4971      	ldr	r1, [pc, #452]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403e:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f023 020c 	bic.w	r2, r3, #12
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404c:	4968      	ldr	r1, [pc, #416]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004060:	4b63      	ldr	r3, [pc, #396]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	4960      	ldr	r1, [pc, #384]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004082:	4b5b      	ldr	r3, [pc, #364]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	4957      	ldr	r1, [pc, #348]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a4:	4b52      	ldr	r3, [pc, #328]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	494f      	ldr	r1, [pc, #316]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040c6:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	4946      	ldr	r1, [pc, #280]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040e8:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	493e      	ldr	r1, [pc, #248]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004118:	4935      	ldr	r1, [pc, #212]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800412c:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413a:	492d      	ldr	r1, [pc, #180]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d011      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800414e:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415c:	4924      	ldr	r1, [pc, #144]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416c:	d101      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	4914      	ldr	r1, [pc, #80]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00b      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e4:	4902      	ldr	r1, [pc, #8]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041ec:	e002      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004200:	4b8a      	ldr	r3, [pc, #552]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004206:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	4986      	ldr	r1, [pc, #536]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004224:	4b81      	ldr	r3, [pc, #516]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800422a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004234:	497d      	ldr	r1, [pc, #500]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d006      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80d6 	beq.w	80043fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004250:	4b76      	ldr	r3, [pc, #472]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a75      	ldr	r2, [pc, #468]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800425a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425c:	f7fd fdd8 	bl	8001e10 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004264:	f7fd fdd4 	bl	8001e10 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b64      	cmp	r3, #100	; 0x64
 8004270:	d901      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e195      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004276:	4b6d      	ldr	r3, [pc, #436]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d021      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11d      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004296:	4b65      	ldr	r3, [pc, #404]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042a4:	4b61      	ldr	r3, [pc, #388]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042aa:	0e1b      	lsrs	r3, r3, #24
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	019a      	lsls	r2, r3, #6
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	4958      	ldr	r1, [pc, #352]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fc:	d129      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042fe:	4b4b      	ldr	r3, [pc, #300]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800430c:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004312:	0f1b      	lsrs	r3, r3, #28
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	019a      	lsls	r2, r3, #6
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	071b      	lsls	r3, r3, #28
 8004332:	493e      	ldr	r1, [pc, #248]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800433a:	4b3c      	ldr	r3, [pc, #240]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004340:	f023 021f 	bic.w	r2, r3, #31
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	3b01      	subs	r3, #1
 800434a:	4938      	ldr	r1, [pc, #224]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01d      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800435e:	4b33      	ldr	r3, [pc, #204]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004364:	0e1b      	lsrs	r3, r3, #24
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800436c:	4b2f      	ldr	r3, [pc, #188]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004372:	0f1b      	lsrs	r3, r3, #28
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	019a      	lsls	r2, r3, #6
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	431a      	orrs	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	4926      	ldr	r1, [pc, #152]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d011      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	019a      	lsls	r2, r3, #6
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	071b      	lsls	r3, r3, #28
 80043c2:	491a      	ldr	r1, [pc, #104]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043ca:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d6:	f7fd fd1b 	bl	8001e10 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043de:	f7fd fd17 	bl	8001e10 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b64      	cmp	r3, #100	; 0x64
 80043ea:	d901      	bls.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0d8      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	f040 80ce 	bne.w	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fd fcfe 	bl	8001e10 <HAL_GetTick>
 8004414:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004416:	e00b      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004418:	f7fd fcfa 	bl	8001e10 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d904      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0bb      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004430:	4b5e      	ldr	r3, [pc, #376]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443c:	d0ec      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800445a:	2b00      	cmp	r3, #0
 800445c:	d02e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d12a      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004466:	4b51      	ldr	r3, [pc, #324]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004474:	4b4d      	ldr	r3, [pc, #308]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	0f1b      	lsrs	r3, r3, #28
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	071b      	lsls	r3, r3, #28
 800449a:	4944      	ldr	r1, [pc, #272]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044a2:	4b42      	ldr	r3, [pc, #264]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	493d      	ldr	r1, [pc, #244]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d022      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d0:	d11d      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044d2:	4b36      	ldr	r3, [pc, #216]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	0f1b      	lsrs	r3, r3, #28
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	019a      	lsls	r2, r3, #6
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	431a      	orrs	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	071b      	lsls	r3, r3, #28
 8004506:	4929      	ldr	r1, [pc, #164]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d028      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004520:	0e1b      	lsrs	r3, r3, #24
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004528:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	019a      	lsls	r2, r3, #6
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	431a      	orrs	r2, r3
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	071b      	lsls	r3, r3, #28
 800454e:	4917      	ldr	r1, [pc, #92]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004556:	4b15      	ldr	r3, [pc, #84]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4911      	ldr	r1, [pc, #68]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800456c:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fd fc4a 	bl	8001e10 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004580:	f7fd fc46 	bl	8001e10 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e007      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800459a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459e:	d1ef      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800

080045b0 <__cvt>:
 80045b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b2:	ed2d 8b02 	vpush	{d8}
 80045b6:	eeb0 8b40 	vmov.f64	d8, d0
 80045ba:	b085      	sub	sp, #20
 80045bc:	4617      	mov	r7, r2
 80045be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80045c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80045c2:	ee18 2a90 	vmov	r2, s17
 80045c6:	f025 0520 	bic.w	r5, r5, #32
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	bfb6      	itet	lt
 80045ce:	222d      	movlt	r2, #45	; 0x2d
 80045d0:	2200      	movge	r2, #0
 80045d2:	eeb1 8b40 	vneglt.f64	d8, d0
 80045d6:	2d46      	cmp	r5, #70	; 0x46
 80045d8:	460c      	mov	r4, r1
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	d004      	beq.n	80045e8 <__cvt+0x38>
 80045de:	2d45      	cmp	r5, #69	; 0x45
 80045e0:	d100      	bne.n	80045e4 <__cvt+0x34>
 80045e2:	3401      	adds	r4, #1
 80045e4:	2102      	movs	r1, #2
 80045e6:	e000      	b.n	80045ea <__cvt+0x3a>
 80045e8:	2103      	movs	r1, #3
 80045ea:	ab03      	add	r3, sp, #12
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	ab02      	add	r3, sp, #8
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4622      	mov	r2, r4
 80045f4:	4633      	mov	r3, r6
 80045f6:	eeb0 0b48 	vmov.f64	d0, d8
 80045fa:	f001 f84d 	bl	8005698 <_dtoa_r>
 80045fe:	2d47      	cmp	r5, #71	; 0x47
 8004600:	d101      	bne.n	8004606 <__cvt+0x56>
 8004602:	07fb      	lsls	r3, r7, #31
 8004604:	d51a      	bpl.n	800463c <__cvt+0x8c>
 8004606:	2d46      	cmp	r5, #70	; 0x46
 8004608:	eb00 0204 	add.w	r2, r0, r4
 800460c:	d10c      	bne.n	8004628 <__cvt+0x78>
 800460e:	7803      	ldrb	r3, [r0, #0]
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d107      	bne.n	8004624 <__cvt+0x74>
 8004614:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	bf1c      	itt	ne
 800461e:	f1c4 0401 	rsbne	r4, r4, #1
 8004622:	6034      	strne	r4, [r6, #0]
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	441a      	add	r2, r3
 8004628:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	bf08      	it	eq
 8004632:	9203      	streq	r2, [sp, #12]
 8004634:	2130      	movs	r1, #48	; 0x30
 8004636:	9b03      	ldr	r3, [sp, #12]
 8004638:	4293      	cmp	r3, r2
 800463a:	d307      	bcc.n	800464c <__cvt+0x9c>
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004640:	1a1b      	subs	r3, r3, r0
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	b005      	add	sp, #20
 8004646:	ecbd 8b02 	vpop	{d8}
 800464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464c:	1c5c      	adds	r4, r3, #1
 800464e:	9403      	str	r4, [sp, #12]
 8004650:	7019      	strb	r1, [r3, #0]
 8004652:	e7f0      	b.n	8004636 <__cvt+0x86>

08004654 <__exponent>:
 8004654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004656:	4603      	mov	r3, r0
 8004658:	2900      	cmp	r1, #0
 800465a:	bfb8      	it	lt
 800465c:	4249      	neglt	r1, r1
 800465e:	f803 2b02 	strb.w	r2, [r3], #2
 8004662:	bfb4      	ite	lt
 8004664:	222d      	movlt	r2, #45	; 0x2d
 8004666:	222b      	movge	r2, #43	; 0x2b
 8004668:	2909      	cmp	r1, #9
 800466a:	7042      	strb	r2, [r0, #1]
 800466c:	dd2a      	ble.n	80046c4 <__exponent+0x70>
 800466e:	f10d 0207 	add.w	r2, sp, #7
 8004672:	4617      	mov	r7, r2
 8004674:	260a      	movs	r6, #10
 8004676:	4694      	mov	ip, r2
 8004678:	fb91 f5f6 	sdiv	r5, r1, r6
 800467c:	fb06 1415 	mls	r4, r6, r5, r1
 8004680:	3430      	adds	r4, #48	; 0x30
 8004682:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004686:	460c      	mov	r4, r1
 8004688:	2c63      	cmp	r4, #99	; 0x63
 800468a:	f102 32ff 	add.w	r2, r2, #4294967295
 800468e:	4629      	mov	r1, r5
 8004690:	dcf1      	bgt.n	8004676 <__exponent+0x22>
 8004692:	3130      	adds	r1, #48	; 0x30
 8004694:	f1ac 0402 	sub.w	r4, ip, #2
 8004698:	f802 1c01 	strb.w	r1, [r2, #-1]
 800469c:	1c41      	adds	r1, r0, #1
 800469e:	4622      	mov	r2, r4
 80046a0:	42ba      	cmp	r2, r7
 80046a2:	d30a      	bcc.n	80046ba <__exponent+0x66>
 80046a4:	f10d 0209 	add.w	r2, sp, #9
 80046a8:	eba2 020c 	sub.w	r2, r2, ip
 80046ac:	42bc      	cmp	r4, r7
 80046ae:	bf88      	it	hi
 80046b0:	2200      	movhi	r2, #0
 80046b2:	4413      	add	r3, r2
 80046b4:	1a18      	subs	r0, r3, r0
 80046b6:	b003      	add	sp, #12
 80046b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80046be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80046c2:	e7ed      	b.n	80046a0 <__exponent+0x4c>
 80046c4:	2330      	movs	r3, #48	; 0x30
 80046c6:	3130      	adds	r1, #48	; 0x30
 80046c8:	7083      	strb	r3, [r0, #2]
 80046ca:	70c1      	strb	r1, [r0, #3]
 80046cc:	1d03      	adds	r3, r0, #4
 80046ce:	e7f1      	b.n	80046b4 <__exponent+0x60>

080046d0 <_printf_float>:
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	b08b      	sub	sp, #44	; 0x2c
 80046d6:	460c      	mov	r4, r1
 80046d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80046dc:	4616      	mov	r6, r2
 80046de:	461f      	mov	r7, r3
 80046e0:	4605      	mov	r5, r0
 80046e2:	f000 fed1 	bl	8005488 <_localeconv_r>
 80046e6:	f8d0 b000 	ldr.w	fp, [r0]
 80046ea:	4658      	mov	r0, fp
 80046ec:	f7fb fdf8 	bl	80002e0 <strlen>
 80046f0:	2300      	movs	r3, #0
 80046f2:	9308      	str	r3, [sp, #32]
 80046f4:	f8d8 3000 	ldr.w	r3, [r8]
 80046f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	3307      	adds	r3, #7
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	f103 0108 	add.w	r1, r3, #8
 8004708:	f8c8 1000 	str.w	r1, [r8]
 800470c:	ed93 0b00 	vldr	d0, [r3]
 8004710:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004970 <_printf_float+0x2a0>
 8004714:	eeb0 7bc0 	vabs.f64	d7, d0
 8004718:	eeb4 7b46 	vcmp.f64	d7, d6
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004724:	4682      	mov	sl, r0
 8004726:	dd24      	ble.n	8004772 <_printf_float+0xa2>
 8004728:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004730:	d502      	bpl.n	8004738 <_printf_float+0x68>
 8004732:	232d      	movs	r3, #45	; 0x2d
 8004734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004738:	498f      	ldr	r1, [pc, #572]	; (8004978 <_printf_float+0x2a8>)
 800473a:	4b90      	ldr	r3, [pc, #576]	; (800497c <_printf_float+0x2ac>)
 800473c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004740:	bf94      	ite	ls
 8004742:	4688      	movls	r8, r1
 8004744:	4698      	movhi	r8, r3
 8004746:	2303      	movs	r3, #3
 8004748:	6123      	str	r3, [r4, #16]
 800474a:	f022 0204 	bic.w	r2, r2, #4
 800474e:	2300      	movs	r3, #0
 8004750:	6022      	str	r2, [r4, #0]
 8004752:	9304      	str	r3, [sp, #16]
 8004754:	9700      	str	r7, [sp, #0]
 8004756:	4633      	mov	r3, r6
 8004758:	aa09      	add	r2, sp, #36	; 0x24
 800475a:	4621      	mov	r1, r4
 800475c:	4628      	mov	r0, r5
 800475e:	f000 f9d1 	bl	8004b04 <_printf_common>
 8004762:	3001      	adds	r0, #1
 8004764:	f040 808a 	bne.w	800487c <_printf_float+0x1ac>
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	b00b      	add	sp, #44	; 0x2c
 800476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004772:	eeb4 0b40 	vcmp.f64	d0, d0
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d709      	bvc.n	8004790 <_printf_float+0xc0>
 800477c:	ee10 3a90 	vmov	r3, s1
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfbc      	itt	lt
 8004784:	232d      	movlt	r3, #45	; 0x2d
 8004786:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800478a:	497d      	ldr	r1, [pc, #500]	; (8004980 <_printf_float+0x2b0>)
 800478c:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <_printf_float+0x2b4>)
 800478e:	e7d5      	b.n	800473c <_printf_float+0x6c>
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004796:	9104      	str	r1, [sp, #16]
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	d13c      	bne.n	8004816 <_printf_float+0x146>
 800479c:	2306      	movs	r3, #6
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	2300      	movs	r3, #0
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	ab08      	add	r3, sp, #32
 80047a6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80047aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ae:	ab07      	add	r3, sp, #28
 80047b0:	6861      	ldr	r1, [r4, #4]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	6022      	str	r2, [r4, #0]
 80047b6:	f10d 031b 	add.w	r3, sp, #27
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7ff fef8 	bl	80045b0 <__cvt>
 80047c0:	9b04      	ldr	r3, [sp, #16]
 80047c2:	9907      	ldr	r1, [sp, #28]
 80047c4:	2b47      	cmp	r3, #71	; 0x47
 80047c6:	4680      	mov	r8, r0
 80047c8:	d108      	bne.n	80047dc <_printf_float+0x10c>
 80047ca:	1cc8      	adds	r0, r1, #3
 80047cc:	db02      	blt.n	80047d4 <_printf_float+0x104>
 80047ce:	6863      	ldr	r3, [r4, #4]
 80047d0:	4299      	cmp	r1, r3
 80047d2:	dd41      	ble.n	8004858 <_printf_float+0x188>
 80047d4:	f1a9 0902 	sub.w	r9, r9, #2
 80047d8:	fa5f f989 	uxtb.w	r9, r9
 80047dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047e0:	d820      	bhi.n	8004824 <_printf_float+0x154>
 80047e2:	3901      	subs	r1, #1
 80047e4:	464a      	mov	r2, r9
 80047e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047ea:	9107      	str	r1, [sp, #28]
 80047ec:	f7ff ff32 	bl	8004654 <__exponent>
 80047f0:	9a08      	ldr	r2, [sp, #32]
 80047f2:	9004      	str	r0, [sp, #16]
 80047f4:	1813      	adds	r3, r2, r0
 80047f6:	2a01      	cmp	r2, #1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	dc02      	bgt.n	8004802 <_printf_float+0x132>
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	07d2      	lsls	r2, r2, #31
 8004800:	d501      	bpl.n	8004806 <_printf_float+0x136>
 8004802:	3301      	adds	r3, #1
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0a2      	beq.n	8004754 <_printf_float+0x84>
 800480e:	232d      	movs	r3, #45	; 0x2d
 8004810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004814:	e79e      	b.n	8004754 <_printf_float+0x84>
 8004816:	9904      	ldr	r1, [sp, #16]
 8004818:	2947      	cmp	r1, #71	; 0x47
 800481a:	d1c1      	bne.n	80047a0 <_printf_float+0xd0>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1bf      	bne.n	80047a0 <_printf_float+0xd0>
 8004820:	2301      	movs	r3, #1
 8004822:	e7bc      	b.n	800479e <_printf_float+0xce>
 8004824:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004828:	d118      	bne.n	800485c <_printf_float+0x18c>
 800482a:	2900      	cmp	r1, #0
 800482c:	6863      	ldr	r3, [r4, #4]
 800482e:	dd0b      	ble.n	8004848 <_printf_float+0x178>
 8004830:	6121      	str	r1, [r4, #16]
 8004832:	b913      	cbnz	r3, 800483a <_printf_float+0x16a>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	07d0      	lsls	r0, r2, #31
 8004838:	d502      	bpl.n	8004840 <_printf_float+0x170>
 800483a:	3301      	adds	r3, #1
 800483c:	440b      	add	r3, r1
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	2300      	movs	r3, #0
 8004842:	65a1      	str	r1, [r4, #88]	; 0x58
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	e7de      	b.n	8004806 <_printf_float+0x136>
 8004848:	b913      	cbnz	r3, 8004850 <_printf_float+0x180>
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	07d2      	lsls	r2, r2, #31
 800484e:	d501      	bpl.n	8004854 <_printf_float+0x184>
 8004850:	3302      	adds	r3, #2
 8004852:	e7f4      	b.n	800483e <_printf_float+0x16e>
 8004854:	2301      	movs	r3, #1
 8004856:	e7f2      	b.n	800483e <_printf_float+0x16e>
 8004858:	f04f 0967 	mov.w	r9, #103	; 0x67
 800485c:	9b08      	ldr	r3, [sp, #32]
 800485e:	4299      	cmp	r1, r3
 8004860:	db05      	blt.n	800486e <_printf_float+0x19e>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	6121      	str	r1, [r4, #16]
 8004866:	07d8      	lsls	r0, r3, #31
 8004868:	d5ea      	bpl.n	8004840 <_printf_float+0x170>
 800486a:	1c4b      	adds	r3, r1, #1
 800486c:	e7e7      	b.n	800483e <_printf_float+0x16e>
 800486e:	2900      	cmp	r1, #0
 8004870:	bfd4      	ite	le
 8004872:	f1c1 0202 	rsble	r2, r1, #2
 8004876:	2201      	movgt	r2, #1
 8004878:	4413      	add	r3, r2
 800487a:	e7e0      	b.n	800483e <_printf_float+0x16e>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	055a      	lsls	r2, r3, #21
 8004880:	d407      	bmi.n	8004892 <_printf_float+0x1c2>
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	4642      	mov	r2, r8
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	d12a      	bne.n	80048e6 <_printf_float+0x216>
 8004890:	e76a      	b.n	8004768 <_printf_float+0x98>
 8004892:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004896:	f240 80e0 	bls.w	8004a5a <_printf_float+0x38a>
 800489a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800489e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	d133      	bne.n	8004910 <_printf_float+0x240>
 80048a8:	4a37      	ldr	r2, [pc, #220]	; (8004988 <_printf_float+0x2b8>)
 80048aa:	2301      	movs	r3, #1
 80048ac:	4631      	mov	r1, r6
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b8      	blx	r7
 80048b2:	3001      	adds	r0, #1
 80048b4:	f43f af58 	beq.w	8004768 <_printf_float+0x98>
 80048b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80048bc:	429a      	cmp	r2, r3
 80048be:	db02      	blt.n	80048c6 <_printf_float+0x1f6>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	07d8      	lsls	r0, r3, #31
 80048c4:	d50f      	bpl.n	80048e6 <_printf_float+0x216>
 80048c6:	4653      	mov	r3, sl
 80048c8:	465a      	mov	r2, fp
 80048ca:	4631      	mov	r1, r6
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b8      	blx	r7
 80048d0:	3001      	adds	r0, #1
 80048d2:	f43f af49 	beq.w	8004768 <_printf_float+0x98>
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	f104 091a 	add.w	r9, r4, #26
 80048de:	9b08      	ldr	r3, [sp, #32]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	4543      	cmp	r3, r8
 80048e4:	dc09      	bgt.n	80048fa <_printf_float+0x22a>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	079b      	lsls	r3, r3, #30
 80048ea:	f100 8106 	bmi.w	8004afa <_printf_float+0x42a>
 80048ee:	68e0      	ldr	r0, [r4, #12]
 80048f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f2:	4298      	cmp	r0, r3
 80048f4:	bfb8      	it	lt
 80048f6:	4618      	movlt	r0, r3
 80048f8:	e738      	b.n	800476c <_printf_float+0x9c>
 80048fa:	2301      	movs	r3, #1
 80048fc:	464a      	mov	r2, r9
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	f43f af2f 	beq.w	8004768 <_printf_float+0x98>
 800490a:	f108 0801 	add.w	r8, r8, #1
 800490e:	e7e6      	b.n	80048de <_printf_float+0x20e>
 8004910:	9b07      	ldr	r3, [sp, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	dc3a      	bgt.n	800498c <_printf_float+0x2bc>
 8004916:	4a1c      	ldr	r2, [pc, #112]	; (8004988 <_printf_float+0x2b8>)
 8004918:	2301      	movs	r3, #1
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f af21 	beq.w	8004768 <_printf_float+0x98>
 8004926:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800492a:	4313      	orrs	r3, r2
 800492c:	d102      	bne.n	8004934 <_printf_float+0x264>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	07d9      	lsls	r1, r3, #31
 8004932:	d5d8      	bpl.n	80048e6 <_printf_float+0x216>
 8004934:	4653      	mov	r3, sl
 8004936:	465a      	mov	r2, fp
 8004938:	4631      	mov	r1, r6
 800493a:	4628      	mov	r0, r5
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	f43f af12 	beq.w	8004768 <_printf_float+0x98>
 8004944:	f04f 0900 	mov.w	r9, #0
 8004948:	f104 0a1a 	add.w	sl, r4, #26
 800494c:	9b07      	ldr	r3, [sp, #28]
 800494e:	425b      	negs	r3, r3
 8004950:	454b      	cmp	r3, r9
 8004952:	dc01      	bgt.n	8004958 <_printf_float+0x288>
 8004954:	9b08      	ldr	r3, [sp, #32]
 8004956:	e795      	b.n	8004884 <_printf_float+0x1b4>
 8004958:	2301      	movs	r3, #1
 800495a:	4652      	mov	r2, sl
 800495c:	4631      	mov	r1, r6
 800495e:	4628      	mov	r0, r5
 8004960:	47b8      	blx	r7
 8004962:	3001      	adds	r0, #1
 8004964:	f43f af00 	beq.w	8004768 <_printf_float+0x98>
 8004968:	f109 0901 	add.w	r9, r9, #1
 800496c:	e7ee      	b.n	800494c <_printf_float+0x27c>
 800496e:	bf00      	nop
 8004970:	ffffffff 	.word	0xffffffff
 8004974:	7fefffff 	.word	0x7fefffff
 8004978:	080098f8 	.word	0x080098f8
 800497c:	080098fc 	.word	0x080098fc
 8004980:	08009900 	.word	0x08009900
 8004984:	08009904 	.word	0x08009904
 8004988:	08009908 	.word	0x08009908
 800498c:	9a08      	ldr	r2, [sp, #32]
 800498e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004990:	429a      	cmp	r2, r3
 8004992:	bfa8      	it	ge
 8004994:	461a      	movge	r2, r3
 8004996:	2a00      	cmp	r2, #0
 8004998:	4691      	mov	r9, r2
 800499a:	dc38      	bgt.n	8004a0e <_printf_float+0x33e>
 800499c:	2300      	movs	r3, #0
 800499e:	9305      	str	r3, [sp, #20]
 80049a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049a4:	f104 021a 	add.w	r2, r4, #26
 80049a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049aa:	9905      	ldr	r1, [sp, #20]
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	eba3 0309 	sub.w	r3, r3, r9
 80049b2:	428b      	cmp	r3, r1
 80049b4:	dc33      	bgt.n	8004a1e <_printf_float+0x34e>
 80049b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	db3c      	blt.n	8004a38 <_printf_float+0x368>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07da      	lsls	r2, r3, #31
 80049c2:	d439      	bmi.n	8004a38 <_printf_float+0x368>
 80049c4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80049c8:	eba2 0903 	sub.w	r9, r2, r3
 80049cc:	9b04      	ldr	r3, [sp, #16]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	4591      	cmp	r9, r2
 80049d2:	bfa8      	it	ge
 80049d4:	4691      	movge	r9, r2
 80049d6:	f1b9 0f00 	cmp.w	r9, #0
 80049da:	dc35      	bgt.n	8004a48 <_printf_float+0x378>
 80049dc:	f04f 0800 	mov.w	r8, #0
 80049e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049e4:	f104 0a1a 	add.w	sl, r4, #26
 80049e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	eba3 0309 	sub.w	r3, r3, r9
 80049f2:	4543      	cmp	r3, r8
 80049f4:	f77f af77 	ble.w	80048e6 <_printf_float+0x216>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4652      	mov	r2, sl
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
 8004a00:	47b8      	blx	r7
 8004a02:	3001      	adds	r0, #1
 8004a04:	f43f aeb0 	beq.w	8004768 <_printf_float+0x98>
 8004a08:	f108 0801 	add.w	r8, r8, #1
 8004a0c:	e7ec      	b.n	80049e8 <_printf_float+0x318>
 8004a0e:	4613      	mov	r3, r2
 8004a10:	4631      	mov	r1, r6
 8004a12:	4642      	mov	r2, r8
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d1bf      	bne.n	800499c <_printf_float+0x2cc>
 8004a1c:	e6a4      	b.n	8004768 <_printf_float+0x98>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4631      	mov	r1, r6
 8004a22:	4628      	mov	r0, r5
 8004a24:	9204      	str	r2, [sp, #16]
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f ae9d 	beq.w	8004768 <_printf_float+0x98>
 8004a2e:	9b05      	ldr	r3, [sp, #20]
 8004a30:	9a04      	ldr	r2, [sp, #16]
 8004a32:	3301      	adds	r3, #1
 8004a34:	9305      	str	r3, [sp, #20]
 8004a36:	e7b7      	b.n	80049a8 <_printf_float+0x2d8>
 8004a38:	4653      	mov	r3, sl
 8004a3a:	465a      	mov	r2, fp
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	d1be      	bne.n	80049c4 <_printf_float+0x2f4>
 8004a46:	e68f      	b.n	8004768 <_printf_float+0x98>
 8004a48:	9a04      	ldr	r2, [sp, #16]
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	4442      	add	r2, r8
 8004a4e:	4631      	mov	r1, r6
 8004a50:	4628      	mov	r0, r5
 8004a52:	47b8      	blx	r7
 8004a54:	3001      	adds	r0, #1
 8004a56:	d1c1      	bne.n	80049dc <_printf_float+0x30c>
 8004a58:	e686      	b.n	8004768 <_printf_float+0x98>
 8004a5a:	9a08      	ldr	r2, [sp, #32]
 8004a5c:	2a01      	cmp	r2, #1
 8004a5e:	dc01      	bgt.n	8004a64 <_printf_float+0x394>
 8004a60:	07db      	lsls	r3, r3, #31
 8004a62:	d537      	bpl.n	8004ad4 <_printf_float+0x404>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4642      	mov	r2, r8
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f ae7a 	beq.w	8004768 <_printf_float+0x98>
 8004a74:	4653      	mov	r3, sl
 8004a76:	465a      	mov	r2, fp
 8004a78:	4631      	mov	r1, r6
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	47b8      	blx	r7
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f43f ae72 	beq.w	8004768 <_printf_float+0x98>
 8004a84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004a88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	9b08      	ldr	r3, [sp, #32]
 8004a92:	d01a      	beq.n	8004aca <_printf_float+0x3fa>
 8004a94:	3b01      	subs	r3, #1
 8004a96:	f108 0201 	add.w	r2, r8, #1
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d10e      	bne.n	8004ac2 <_printf_float+0x3f2>
 8004aa4:	e660      	b.n	8004768 <_printf_float+0x98>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	464a      	mov	r2, r9
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b8      	blx	r7
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	f43f ae59 	beq.w	8004768 <_printf_float+0x98>
 8004ab6:	f108 0801 	add.w	r8, r8, #1
 8004aba:	9b08      	ldr	r3, [sp, #32]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4543      	cmp	r3, r8
 8004ac0:	dcf1      	bgt.n	8004aa6 <_printf_float+0x3d6>
 8004ac2:	9b04      	ldr	r3, [sp, #16]
 8004ac4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ac8:	e6dd      	b.n	8004886 <_printf_float+0x1b6>
 8004aca:	f04f 0800 	mov.w	r8, #0
 8004ace:	f104 091a 	add.w	r9, r4, #26
 8004ad2:	e7f2      	b.n	8004aba <_printf_float+0x3ea>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	e7df      	b.n	8004a9a <_printf_float+0x3ca>
 8004ada:	2301      	movs	r3, #1
 8004adc:	464a      	mov	r2, r9
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f43f ae3f 	beq.w	8004768 <_printf_float+0x98>
 8004aea:	f108 0801 	add.w	r8, r8, #1
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004af2:	1a5b      	subs	r3, r3, r1
 8004af4:	4543      	cmp	r3, r8
 8004af6:	dcf0      	bgt.n	8004ada <_printf_float+0x40a>
 8004af8:	e6f9      	b.n	80048ee <_printf_float+0x21e>
 8004afa:	f04f 0800 	mov.w	r8, #0
 8004afe:	f104 0919 	add.w	r9, r4, #25
 8004b02:	e7f4      	b.n	8004aee <_printf_float+0x41e>

08004b04 <_printf_common>:
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4616      	mov	r6, r2
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	688a      	ldr	r2, [r1, #8]
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfb8      	it	lt
 8004b18:	4613      	movlt	r3, r2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b10a      	cbz	r2, 8004b2a <_printf_common+0x26>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0699      	lsls	r1, r3, #26
 8004b2e:	bf42      	ittt	mi
 8004b30:	6833      	ldrmi	r3, [r6, #0]
 8004b32:	3302      	addmi	r3, #2
 8004b34:	6033      	strmi	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	f015 0506 	ands.w	r5, r5, #6
 8004b3c:	d106      	bne.n	8004b4c <_printf_common+0x48>
 8004b3e:	f104 0a19 	add.w	sl, r4, #25
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dc26      	bgt.n	8004b9a <_printf_common+0x96>
 8004b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b50:	1e13      	subs	r3, r2, #0
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d42b      	bmi.n	8004bb4 <_printf_common+0xb0>
 8004b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d01e      	beq.n	8004ba8 <_printf_common+0xa4>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	6922      	ldr	r2, [r4, #16]
 8004b6e:	f003 0306 	and.w	r3, r3, #6
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	bf02      	ittt	eq
 8004b76:	68e5      	ldreq	r5, [r4, #12]
 8004b78:	6833      	ldreq	r3, [r6, #0]
 8004b7a:	1aed      	subeq	r5, r5, r3
 8004b7c:	68a3      	ldr	r3, [r4, #8]
 8004b7e:	bf0c      	ite	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	2500      	movne	r5, #0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfc4      	itt	gt
 8004b8a:	1a9b      	subgt	r3, r3, r2
 8004b8c:	18ed      	addgt	r5, r5, r3
 8004b8e:	2600      	movs	r6, #0
 8004b90:	341a      	adds	r4, #26
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d11a      	bne.n	8004bcc <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e008      	b.n	8004bac <_printf_common+0xa8>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0xac>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7c6      	b.n	8004b42 <_printf_common+0x3e>
 8004bb4:	18e1      	adds	r1, r4, r3
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	2030      	movs	r0, #48	; 0x30
 8004bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bbe:	4422      	add	r2, r4
 8004bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc8:	3302      	adds	r3, #2
 8004bca:	e7c7      	b.n	8004b5c <_printf_common+0x58>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0e6      	beq.n	8004ba8 <_printf_common+0xa4>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7d9      	b.n	8004b92 <_printf_common+0x8e>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	7e0f      	ldrb	r7, [r1, #24]
 8004be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004be8:	2f78      	cmp	r7, #120	; 0x78
 8004bea:	4691      	mov	r9, r2
 8004bec:	4680      	mov	r8, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bf6:	d807      	bhi.n	8004c08 <_printf_i+0x28>
 8004bf8:	2f62      	cmp	r7, #98	; 0x62
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x32>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	f000 80d4 	beq.w	8004daa <_printf_i+0x1ca>
 8004c02:	2f58      	cmp	r7, #88	; 0x58
 8004c04:	f000 80c0 	beq.w	8004d88 <_printf_i+0x1a8>
 8004c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c10:	e03a      	b.n	8004c88 <_printf_i+0xa8>
 8004c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c16:	2b15      	cmp	r3, #21
 8004c18:	d8f6      	bhi.n	8004c08 <_printf_i+0x28>
 8004c1a:	a101      	add	r1, pc, #4	; (adr r1, 8004c20 <_printf_i+0x40>)
 8004c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c09 	.word	0x08004c09
 8004c2c:	08004c09 	.word	0x08004c09
 8004c30:	08004c09 	.word	0x08004c09
 8004c34:	08004c09 	.word	0x08004c09
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c09 	.word	0x08004c09
 8004c40:	08004c09 	.word	0x08004c09
 8004c44:	08004c09 	.word	0x08004c09
 8004c48:	08004c09 	.word	0x08004c09
 8004c4c:	08004d91 	.word	0x08004d91
 8004c50:	08004cb9 	.word	0x08004cb9
 8004c54:	08004d4b 	.word	0x08004d4b
 8004c58:	08004c09 	.word	0x08004c09
 8004c5c:	08004c09 	.word	0x08004c09
 8004c60:	08004db3 	.word	0x08004db3
 8004c64:	08004c09 	.word	0x08004c09
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004c09 	.word	0x08004c09
 8004c70:	08004c09 	.word	0x08004c09
 8004c74:	08004d53 	.word	0x08004d53
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	602a      	str	r2, [r5, #0]
 8004c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e09f      	b.n	8004dcc <_printf_i+0x1ec>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	0607      	lsls	r7, r0, #24
 8004c92:	f103 0104 	add.w	r1, r3, #4
 8004c96:	6029      	str	r1, [r5, #0]
 8004c98:	d501      	bpl.n	8004c9e <_printf_i+0xbe>
 8004c9a:	681e      	ldr	r6, [r3, #0]
 8004c9c:	e003      	b.n	8004ca6 <_printf_i+0xc6>
 8004c9e:	0646      	lsls	r6, r0, #25
 8004ca0:	d5fb      	bpl.n	8004c9a <_printf_i+0xba>
 8004ca2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	da03      	bge.n	8004cb2 <_printf_i+0xd2>
 8004caa:	232d      	movs	r3, #45	; 0x2d
 8004cac:	4276      	negs	r6, r6
 8004cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb2:	485a      	ldr	r0, [pc, #360]	; (8004e1c <_printf_i+0x23c>)
 8004cb4:	230a      	movs	r3, #10
 8004cb6:	e012      	b.n	8004cde <_printf_i+0xfe>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	1d19      	adds	r1, r3, #4
 8004cbe:	6029      	str	r1, [r5, #0]
 8004cc0:	0605      	lsls	r5, r0, #24
 8004cc2:	d501      	bpl.n	8004cc8 <_printf_i+0xe8>
 8004cc4:	681e      	ldr	r6, [r3, #0]
 8004cc6:	e002      	b.n	8004cce <_printf_i+0xee>
 8004cc8:	0641      	lsls	r1, r0, #25
 8004cca:	d5fb      	bpl.n	8004cc4 <_printf_i+0xe4>
 8004ccc:	881e      	ldrh	r6, [r3, #0]
 8004cce:	4853      	ldr	r0, [pc, #332]	; (8004e1c <_printf_i+0x23c>)
 8004cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2308      	moveq	r3, #8
 8004cd6:	230a      	movne	r3, #10
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cde:	6865      	ldr	r5, [r4, #4]
 8004ce0:	60a5      	str	r5, [r4, #8]
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	bfa2      	ittt	ge
 8004ce6:	6821      	ldrge	r1, [r4, #0]
 8004ce8:	f021 0104 	bicge.w	r1, r1, #4
 8004cec:	6021      	strge	r1, [r4, #0]
 8004cee:	b90e      	cbnz	r6, 8004cf4 <_printf_i+0x114>
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	d04b      	beq.n	8004d8c <_printf_i+0x1ac>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cfa:	fb03 6711 	mls	r7, r3, r1, r6
 8004cfe:	5dc7      	ldrb	r7, [r0, r7]
 8004d00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d04:	4637      	mov	r7, r6
 8004d06:	42bb      	cmp	r3, r7
 8004d08:	460e      	mov	r6, r1
 8004d0a:	d9f4      	bls.n	8004cf6 <_printf_i+0x116>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d10b      	bne.n	8004d28 <_printf_i+0x148>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	07de      	lsls	r6, r3, #31
 8004d14:	d508      	bpl.n	8004d28 <_printf_i+0x148>
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	6861      	ldr	r1, [r4, #4]
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	bfde      	ittt	le
 8004d1e:	2330      	movle	r3, #48	; 0x30
 8004d20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d28:	1b52      	subs	r2, r2, r5
 8004d2a:	6122      	str	r2, [r4, #16]
 8004d2c:	f8cd a000 	str.w	sl, [sp]
 8004d30:	464b      	mov	r3, r9
 8004d32:	aa03      	add	r2, sp, #12
 8004d34:	4621      	mov	r1, r4
 8004d36:	4640      	mov	r0, r8
 8004d38:	f7ff fee4 	bl	8004b04 <_printf_common>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d14a      	bne.n	8004dd6 <_printf_i+0x1f6>
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	b004      	add	sp, #16
 8004d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	f043 0320 	orr.w	r3, r3, #32
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	4833      	ldr	r0, [pc, #204]	; (8004e20 <_printf_i+0x240>)
 8004d54:	2778      	movs	r7, #120	; 0x78
 8004d56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	6829      	ldr	r1, [r5, #0]
 8004d5e:	061f      	lsls	r7, r3, #24
 8004d60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d64:	d402      	bmi.n	8004d6c <_printf_i+0x18c>
 8004d66:	065f      	lsls	r7, r3, #25
 8004d68:	bf48      	it	mi
 8004d6a:	b2b6      	uxthmi	r6, r6
 8004d6c:	07df      	lsls	r7, r3, #31
 8004d6e:	bf48      	it	mi
 8004d70:	f043 0320 	orrmi.w	r3, r3, #32
 8004d74:	6029      	str	r1, [r5, #0]
 8004d76:	bf48      	it	mi
 8004d78:	6023      	strmi	r3, [r4, #0]
 8004d7a:	b91e      	cbnz	r6, 8004d84 <_printf_i+0x1a4>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	f023 0320 	bic.w	r3, r3, #32
 8004d82:	6023      	str	r3, [r4, #0]
 8004d84:	2310      	movs	r3, #16
 8004d86:	e7a7      	b.n	8004cd8 <_printf_i+0xf8>
 8004d88:	4824      	ldr	r0, [pc, #144]	; (8004e1c <_printf_i+0x23c>)
 8004d8a:	e7e4      	b.n	8004d56 <_printf_i+0x176>
 8004d8c:	4615      	mov	r5, r2
 8004d8e:	e7bd      	b.n	8004d0c <_printf_i+0x12c>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	6826      	ldr	r6, [r4, #0]
 8004d94:	6961      	ldr	r1, [r4, #20]
 8004d96:	1d18      	adds	r0, r3, #4
 8004d98:	6028      	str	r0, [r5, #0]
 8004d9a:	0635      	lsls	r5, r6, #24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	d501      	bpl.n	8004da4 <_printf_i+0x1c4>
 8004da0:	6019      	str	r1, [r3, #0]
 8004da2:	e002      	b.n	8004daa <_printf_i+0x1ca>
 8004da4:	0670      	lsls	r0, r6, #25
 8004da6:	d5fb      	bpl.n	8004da0 <_printf_i+0x1c0>
 8004da8:	8019      	strh	r1, [r3, #0]
 8004daa:	2300      	movs	r3, #0
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	4615      	mov	r5, r2
 8004db0:	e7bc      	b.n	8004d2c <_printf_i+0x14c>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	1d1a      	adds	r2, r3, #4
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	681d      	ldr	r5, [r3, #0]
 8004dba:	6862      	ldr	r2, [r4, #4]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f7fb fa3e 	bl	8000240 <memchr>
 8004dc4:	b108      	cbz	r0, 8004dca <_printf_i+0x1ea>
 8004dc6:	1b40      	subs	r0, r0, r5
 8004dc8:	6060      	str	r0, [r4, #4]
 8004dca:	6863      	ldr	r3, [r4, #4]
 8004dcc:	6123      	str	r3, [r4, #16]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd4:	e7aa      	b.n	8004d2c <_printf_i+0x14c>
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	462a      	mov	r2, r5
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	47d0      	blx	sl
 8004de0:	3001      	adds	r0, #1
 8004de2:	d0ad      	beq.n	8004d40 <_printf_i+0x160>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	079b      	lsls	r3, r3, #30
 8004de8:	d413      	bmi.n	8004e12 <_printf_i+0x232>
 8004dea:	68e0      	ldr	r0, [r4, #12]
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	4298      	cmp	r0, r3
 8004df0:	bfb8      	it	lt
 8004df2:	4618      	movlt	r0, r3
 8004df4:	e7a6      	b.n	8004d44 <_printf_i+0x164>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	47d0      	blx	sl
 8004e00:	3001      	adds	r0, #1
 8004e02:	d09d      	beq.n	8004d40 <_printf_i+0x160>
 8004e04:	3501      	adds	r5, #1
 8004e06:	68e3      	ldr	r3, [r4, #12]
 8004e08:	9903      	ldr	r1, [sp, #12]
 8004e0a:	1a5b      	subs	r3, r3, r1
 8004e0c:	42ab      	cmp	r3, r5
 8004e0e:	dcf2      	bgt.n	8004df6 <_printf_i+0x216>
 8004e10:	e7eb      	b.n	8004dea <_printf_i+0x20a>
 8004e12:	2500      	movs	r5, #0
 8004e14:	f104 0619 	add.w	r6, r4, #25
 8004e18:	e7f5      	b.n	8004e06 <_printf_i+0x226>
 8004e1a:	bf00      	nop
 8004e1c:	0800990a 	.word	0x0800990a
 8004e20:	0800991b 	.word	0x0800991b

08004e24 <_scanf_float>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	4617      	mov	r7, r2
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	688b      	ldr	r3, [r1, #8]
 8004e30:	1e5a      	subs	r2, r3, #1
 8004e32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e36:	bf83      	ittte	hi
 8004e38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e3c:	195b      	addhi	r3, r3, r5
 8004e3e:	9302      	strhi	r3, [sp, #8]
 8004e40:	2300      	movls	r3, #0
 8004e42:	bf86      	itte	hi
 8004e44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e48:	608b      	strhi	r3, [r1, #8]
 8004e4a:	9302      	strls	r3, [sp, #8]
 8004e4c:	680b      	ldr	r3, [r1, #0]
 8004e4e:	468b      	mov	fp, r1
 8004e50:	2500      	movs	r5, #0
 8004e52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e56:	f84b 3b1c 	str.w	r3, [fp], #28
 8004e5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e5e:	4680      	mov	r8, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	465e      	mov	r6, fp
 8004e64:	46aa      	mov	sl, r5
 8004e66:	46a9      	mov	r9, r5
 8004e68:	9501      	str	r5, [sp, #4]
 8004e6a:	68a2      	ldr	r2, [r4, #8]
 8004e6c:	b152      	cbz	r2, 8004e84 <_scanf_float+0x60>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b4e      	cmp	r3, #78	; 0x4e
 8004e74:	d864      	bhi.n	8004f40 <_scanf_float+0x11c>
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d83c      	bhi.n	8004ef4 <_scanf_float+0xd0>
 8004e7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004e7e:	b2c8      	uxtb	r0, r1
 8004e80:	280e      	cmp	r0, #14
 8004e82:	d93a      	bls.n	8004efa <_scanf_float+0xd6>
 8004e84:	f1b9 0f00 	cmp.w	r9, #0
 8004e88:	d003      	beq.n	8004e92 <_scanf_float+0x6e>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e96:	f1ba 0f01 	cmp.w	sl, #1
 8004e9a:	f200 8113 	bhi.w	80050c4 <_scanf_float+0x2a0>
 8004e9e:	455e      	cmp	r6, fp
 8004ea0:	f200 8105 	bhi.w	80050ae <_scanf_float+0x28a>
 8004ea4:	2501      	movs	r5, #1
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	b007      	add	sp, #28
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004eb2:	2a0d      	cmp	r2, #13
 8004eb4:	d8e6      	bhi.n	8004e84 <_scanf_float+0x60>
 8004eb6:	a101      	add	r1, pc, #4	; (adr r1, 8004ebc <_scanf_float+0x98>)
 8004eb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ebc:	08004ffb 	.word	0x08004ffb
 8004ec0:	08004e85 	.word	0x08004e85
 8004ec4:	08004e85 	.word	0x08004e85
 8004ec8:	08004e85 	.word	0x08004e85
 8004ecc:	0800505b 	.word	0x0800505b
 8004ed0:	08005033 	.word	0x08005033
 8004ed4:	08004e85 	.word	0x08004e85
 8004ed8:	08004e85 	.word	0x08004e85
 8004edc:	08005009 	.word	0x08005009
 8004ee0:	08004e85 	.word	0x08004e85
 8004ee4:	08004e85 	.word	0x08004e85
 8004ee8:	08004e85 	.word	0x08004e85
 8004eec:	08004e85 	.word	0x08004e85
 8004ef0:	08004fc1 	.word	0x08004fc1
 8004ef4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004ef8:	e7db      	b.n	8004eb2 <_scanf_float+0x8e>
 8004efa:	290e      	cmp	r1, #14
 8004efc:	d8c2      	bhi.n	8004e84 <_scanf_float+0x60>
 8004efe:	a001      	add	r0, pc, #4	; (adr r0, 8004f04 <_scanf_float+0xe0>)
 8004f00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f04:	08004fb3 	.word	0x08004fb3
 8004f08:	08004e85 	.word	0x08004e85
 8004f0c:	08004fb3 	.word	0x08004fb3
 8004f10:	08005047 	.word	0x08005047
 8004f14:	08004e85 	.word	0x08004e85
 8004f18:	08004f61 	.word	0x08004f61
 8004f1c:	08004f9d 	.word	0x08004f9d
 8004f20:	08004f9d 	.word	0x08004f9d
 8004f24:	08004f9d 	.word	0x08004f9d
 8004f28:	08004f9d 	.word	0x08004f9d
 8004f2c:	08004f9d 	.word	0x08004f9d
 8004f30:	08004f9d 	.word	0x08004f9d
 8004f34:	08004f9d 	.word	0x08004f9d
 8004f38:	08004f9d 	.word	0x08004f9d
 8004f3c:	08004f9d 	.word	0x08004f9d
 8004f40:	2b6e      	cmp	r3, #110	; 0x6e
 8004f42:	d809      	bhi.n	8004f58 <_scanf_float+0x134>
 8004f44:	2b60      	cmp	r3, #96	; 0x60
 8004f46:	d8b2      	bhi.n	8004eae <_scanf_float+0x8a>
 8004f48:	2b54      	cmp	r3, #84	; 0x54
 8004f4a:	d077      	beq.n	800503c <_scanf_float+0x218>
 8004f4c:	2b59      	cmp	r3, #89	; 0x59
 8004f4e:	d199      	bne.n	8004e84 <_scanf_float+0x60>
 8004f50:	2d07      	cmp	r5, #7
 8004f52:	d197      	bne.n	8004e84 <_scanf_float+0x60>
 8004f54:	2508      	movs	r5, #8
 8004f56:	e029      	b.n	8004fac <_scanf_float+0x188>
 8004f58:	2b74      	cmp	r3, #116	; 0x74
 8004f5a:	d06f      	beq.n	800503c <_scanf_float+0x218>
 8004f5c:	2b79      	cmp	r3, #121	; 0x79
 8004f5e:	e7f6      	b.n	8004f4e <_scanf_float+0x12a>
 8004f60:	6821      	ldr	r1, [r4, #0]
 8004f62:	05c8      	lsls	r0, r1, #23
 8004f64:	d51a      	bpl.n	8004f9c <_scanf_float+0x178>
 8004f66:	9b02      	ldr	r3, [sp, #8]
 8004f68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f6c:	6021      	str	r1, [r4, #0]
 8004f6e:	f109 0901 	add.w	r9, r9, #1
 8004f72:	b11b      	cbz	r3, 8004f7c <_scanf_float+0x158>
 8004f74:	3b01      	subs	r3, #1
 8004f76:	3201      	adds	r2, #1
 8004f78:	9302      	str	r3, [sp, #8]
 8004f7a:	60a2      	str	r2, [r4, #8]
 8004f7c:	68a3      	ldr	r3, [r4, #8]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	6123      	str	r3, [r4, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	f340 8084 	ble.w	800509c <_scanf_float+0x278>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	3301      	adds	r3, #1
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	e766      	b.n	8004e6a <_scanf_float+0x46>
 8004f9c:	eb1a 0f05 	cmn.w	sl, r5
 8004fa0:	f47f af70 	bne.w	8004e84 <_scanf_float+0x60>
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004faa:	6022      	str	r2, [r4, #0]
 8004fac:	f806 3b01 	strb.w	r3, [r6], #1
 8004fb0:	e7e4      	b.n	8004f7c <_scanf_float+0x158>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	0610      	lsls	r0, r2, #24
 8004fb6:	f57f af65 	bpl.w	8004e84 <_scanf_float+0x60>
 8004fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fbe:	e7f4      	b.n	8004faa <_scanf_float+0x186>
 8004fc0:	f1ba 0f00 	cmp.w	sl, #0
 8004fc4:	d10e      	bne.n	8004fe4 <_scanf_float+0x1c0>
 8004fc6:	f1b9 0f00 	cmp.w	r9, #0
 8004fca:	d10e      	bne.n	8004fea <_scanf_float+0x1c6>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004fd2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004fd6:	d108      	bne.n	8004fea <_scanf_float+0x1c6>
 8004fd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fdc:	6022      	str	r2, [r4, #0]
 8004fde:	f04f 0a01 	mov.w	sl, #1
 8004fe2:	e7e3      	b.n	8004fac <_scanf_float+0x188>
 8004fe4:	f1ba 0f02 	cmp.w	sl, #2
 8004fe8:	d055      	beq.n	8005096 <_scanf_float+0x272>
 8004fea:	2d01      	cmp	r5, #1
 8004fec:	d002      	beq.n	8004ff4 <_scanf_float+0x1d0>
 8004fee:	2d04      	cmp	r5, #4
 8004ff0:	f47f af48 	bne.w	8004e84 <_scanf_float+0x60>
 8004ff4:	3501      	adds	r5, #1
 8004ff6:	b2ed      	uxtb	r5, r5
 8004ff8:	e7d8      	b.n	8004fac <_scanf_float+0x188>
 8004ffa:	f1ba 0f01 	cmp.w	sl, #1
 8004ffe:	f47f af41 	bne.w	8004e84 <_scanf_float+0x60>
 8005002:	f04f 0a02 	mov.w	sl, #2
 8005006:	e7d1      	b.n	8004fac <_scanf_float+0x188>
 8005008:	b97d      	cbnz	r5, 800502a <_scanf_float+0x206>
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	f47f af3c 	bne.w	8004e8a <_scanf_float+0x66>
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005018:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800501c:	f47f af39 	bne.w	8004e92 <_scanf_float+0x6e>
 8005020:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	2501      	movs	r5, #1
 8005028:	e7c0      	b.n	8004fac <_scanf_float+0x188>
 800502a:	2d03      	cmp	r5, #3
 800502c:	d0e2      	beq.n	8004ff4 <_scanf_float+0x1d0>
 800502e:	2d05      	cmp	r5, #5
 8005030:	e7de      	b.n	8004ff0 <_scanf_float+0x1cc>
 8005032:	2d02      	cmp	r5, #2
 8005034:	f47f af26 	bne.w	8004e84 <_scanf_float+0x60>
 8005038:	2503      	movs	r5, #3
 800503a:	e7b7      	b.n	8004fac <_scanf_float+0x188>
 800503c:	2d06      	cmp	r5, #6
 800503e:	f47f af21 	bne.w	8004e84 <_scanf_float+0x60>
 8005042:	2507      	movs	r5, #7
 8005044:	e7b2      	b.n	8004fac <_scanf_float+0x188>
 8005046:	6822      	ldr	r2, [r4, #0]
 8005048:	0591      	lsls	r1, r2, #22
 800504a:	f57f af1b 	bpl.w	8004e84 <_scanf_float+0x60>
 800504e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005052:	6022      	str	r2, [r4, #0]
 8005054:	f8cd 9004 	str.w	r9, [sp, #4]
 8005058:	e7a8      	b.n	8004fac <_scanf_float+0x188>
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005060:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005064:	d006      	beq.n	8005074 <_scanf_float+0x250>
 8005066:	0550      	lsls	r0, r2, #21
 8005068:	f57f af0c 	bpl.w	8004e84 <_scanf_float+0x60>
 800506c:	f1b9 0f00 	cmp.w	r9, #0
 8005070:	f43f af0f 	beq.w	8004e92 <_scanf_float+0x6e>
 8005074:	0591      	lsls	r1, r2, #22
 8005076:	bf58      	it	pl
 8005078:	9901      	ldrpl	r1, [sp, #4]
 800507a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800507e:	bf58      	it	pl
 8005080:	eba9 0101 	subpl.w	r1, r9, r1
 8005084:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005088:	bf58      	it	pl
 800508a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	f04f 0900 	mov.w	r9, #0
 8005094:	e78a      	b.n	8004fac <_scanf_float+0x188>
 8005096:	f04f 0a03 	mov.w	sl, #3
 800509a:	e787      	b.n	8004fac <_scanf_float+0x188>
 800509c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050a0:	4639      	mov	r1, r7
 80050a2:	4640      	mov	r0, r8
 80050a4:	4798      	blx	r3
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f43f aedf 	beq.w	8004e6a <_scanf_float+0x46>
 80050ac:	e6ea      	b.n	8004e84 <_scanf_float+0x60>
 80050ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050b6:	463a      	mov	r2, r7
 80050b8:	4640      	mov	r0, r8
 80050ba:	4798      	blx	r3
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	3b01      	subs	r3, #1
 80050c0:	6123      	str	r3, [r4, #16]
 80050c2:	e6ec      	b.n	8004e9e <_scanf_float+0x7a>
 80050c4:	1e6b      	subs	r3, r5, #1
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d825      	bhi.n	8005116 <_scanf_float+0x2f2>
 80050ca:	2d02      	cmp	r5, #2
 80050cc:	d836      	bhi.n	800513c <_scanf_float+0x318>
 80050ce:	455e      	cmp	r6, fp
 80050d0:	f67f aee8 	bls.w	8004ea4 <_scanf_float+0x80>
 80050d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050dc:	463a      	mov	r2, r7
 80050de:	4640      	mov	r0, r8
 80050e0:	4798      	blx	r3
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	e7f1      	b.n	80050ce <_scanf_float+0x2aa>
 80050ea:	9802      	ldr	r0, [sp, #8]
 80050ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80050f4:	9002      	str	r0, [sp, #8]
 80050f6:	463a      	mov	r2, r7
 80050f8:	4640      	mov	r0, r8
 80050fa:	4798      	blx	r3
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	3b01      	subs	r3, #1
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005106:	fa5f fa8a 	uxtb.w	sl, sl
 800510a:	f1ba 0f02 	cmp.w	sl, #2
 800510e:	d1ec      	bne.n	80050ea <_scanf_float+0x2c6>
 8005110:	3d03      	subs	r5, #3
 8005112:	b2ed      	uxtb	r5, r5
 8005114:	1b76      	subs	r6, r6, r5
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	05da      	lsls	r2, r3, #23
 800511a:	d52f      	bpl.n	800517c <_scanf_float+0x358>
 800511c:	055b      	lsls	r3, r3, #21
 800511e:	d510      	bpl.n	8005142 <_scanf_float+0x31e>
 8005120:	455e      	cmp	r6, fp
 8005122:	f67f aebf 	bls.w	8004ea4 <_scanf_float+0x80>
 8005126:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800512a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800512e:	463a      	mov	r2, r7
 8005130:	4640      	mov	r0, r8
 8005132:	4798      	blx	r3
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	3b01      	subs	r3, #1
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	e7f1      	b.n	8005120 <_scanf_float+0x2fc>
 800513c:	46aa      	mov	sl, r5
 800513e:	9602      	str	r6, [sp, #8]
 8005140:	e7df      	b.n	8005102 <_scanf_float+0x2de>
 8005142:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	2965      	cmp	r1, #101	; 0x65
 800514a:	f103 33ff 	add.w	r3, r3, #4294967295
 800514e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	d00c      	beq.n	8005170 <_scanf_float+0x34c>
 8005156:	2945      	cmp	r1, #69	; 0x45
 8005158:	d00a      	beq.n	8005170 <_scanf_float+0x34c>
 800515a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800515e:	463a      	mov	r2, r7
 8005160:	4640      	mov	r0, r8
 8005162:	4798      	blx	r3
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800516a:	3b01      	subs	r3, #1
 800516c:	1eb5      	subs	r5, r6, #2
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005174:	463a      	mov	r2, r7
 8005176:	4640      	mov	r0, r8
 8005178:	4798      	blx	r3
 800517a:	462e      	mov	r6, r5
 800517c:	6825      	ldr	r5, [r4, #0]
 800517e:	f015 0510 	ands.w	r5, r5, #16
 8005182:	d14d      	bne.n	8005220 <_scanf_float+0x3fc>
 8005184:	7035      	strb	r5, [r6, #0]
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005190:	d11a      	bne.n	80051c8 <_scanf_float+0x3a4>
 8005192:	9b01      	ldr	r3, [sp, #4]
 8005194:	454b      	cmp	r3, r9
 8005196:	eba3 0209 	sub.w	r2, r3, r9
 800519a:	d122      	bne.n	80051e2 <_scanf_float+0x3be>
 800519c:	2200      	movs	r2, #0
 800519e:	4659      	mov	r1, fp
 80051a0:	4640      	mov	r0, r8
 80051a2:	f002 fb5b 	bl	800785c <_strtod_r>
 80051a6:	9b03      	ldr	r3, [sp, #12]
 80051a8:	6821      	ldr	r1, [r4, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f011 0f02 	tst.w	r1, #2
 80051b0:	f103 0204 	add.w	r2, r3, #4
 80051b4:	d020      	beq.n	80051f8 <_scanf_float+0x3d4>
 80051b6:	9903      	ldr	r1, [sp, #12]
 80051b8:	600a      	str	r2, [r1, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	ed83 0b00 	vstr	d0, [r3]
 80051c0:	68e3      	ldr	r3, [r4, #12]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60e3      	str	r3, [r4, #12]
 80051c6:	e66e      	b.n	8004ea6 <_scanf_float+0x82>
 80051c8:	9b04      	ldr	r3, [sp, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0e6      	beq.n	800519c <_scanf_float+0x378>
 80051ce:	9905      	ldr	r1, [sp, #20]
 80051d0:	230a      	movs	r3, #10
 80051d2:	462a      	mov	r2, r5
 80051d4:	3101      	adds	r1, #1
 80051d6:	4640      	mov	r0, r8
 80051d8:	f002 fbc8 	bl	800796c <_strtol_r>
 80051dc:	9b04      	ldr	r3, [sp, #16]
 80051de:	9e05      	ldr	r6, [sp, #20]
 80051e0:	1ac2      	subs	r2, r0, r3
 80051e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80051e6:	429e      	cmp	r6, r3
 80051e8:	bf28      	it	cs
 80051ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80051ee:	490d      	ldr	r1, [pc, #52]	; (8005224 <_scanf_float+0x400>)
 80051f0:	4630      	mov	r0, r6
 80051f2:	f000 f8dd 	bl	80053b0 <siprintf>
 80051f6:	e7d1      	b.n	800519c <_scanf_float+0x378>
 80051f8:	f011 0f04 	tst.w	r1, #4
 80051fc:	9903      	ldr	r1, [sp, #12]
 80051fe:	600a      	str	r2, [r1, #0]
 8005200:	d1db      	bne.n	80051ba <_scanf_float+0x396>
 8005202:	eeb4 0b40 	vcmp.f64	d0, d0
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	681e      	ldr	r6, [r3, #0]
 800520c:	d705      	bvc.n	800521a <_scanf_float+0x3f6>
 800520e:	4806      	ldr	r0, [pc, #24]	; (8005228 <_scanf_float+0x404>)
 8005210:	f000 f9b2 	bl	8005578 <nanf>
 8005214:	ed86 0a00 	vstr	s0, [r6]
 8005218:	e7d2      	b.n	80051c0 <_scanf_float+0x39c>
 800521a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800521e:	e7f9      	b.n	8005214 <_scanf_float+0x3f0>
 8005220:	2500      	movs	r5, #0
 8005222:	e640      	b.n	8004ea6 <_scanf_float+0x82>
 8005224:	0800992c 	.word	0x0800992c
 8005228:	08009cbd 	.word	0x08009cbd

0800522c <std>:
 800522c:	2300      	movs	r3, #0
 800522e:	b510      	push	{r4, lr}
 8005230:	4604      	mov	r4, r0
 8005232:	e9c0 3300 	strd	r3, r3, [r0]
 8005236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800523a:	6083      	str	r3, [r0, #8]
 800523c:	8181      	strh	r1, [r0, #12]
 800523e:	6643      	str	r3, [r0, #100]	; 0x64
 8005240:	81c2      	strh	r2, [r0, #14]
 8005242:	6183      	str	r3, [r0, #24]
 8005244:	4619      	mov	r1, r3
 8005246:	2208      	movs	r2, #8
 8005248:	305c      	adds	r0, #92	; 0x5c
 800524a:	f000 f914 	bl	8005476 <memset>
 800524e:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <std+0x58>)
 8005250:	6263      	str	r3, [r4, #36]	; 0x24
 8005252:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <std+0x5c>)
 8005254:	62a3      	str	r3, [r4, #40]	; 0x28
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <std+0x60>)
 8005258:	62e3      	str	r3, [r4, #44]	; 0x2c
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <std+0x64>)
 800525c:	6323      	str	r3, [r4, #48]	; 0x30
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <std+0x68>)
 8005260:	6224      	str	r4, [r4, #32]
 8005262:	429c      	cmp	r4, r3
 8005264:	d006      	beq.n	8005274 <std+0x48>
 8005266:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800526a:	4294      	cmp	r4, r2
 800526c:	d002      	beq.n	8005274 <std+0x48>
 800526e:	33d0      	adds	r3, #208	; 0xd0
 8005270:	429c      	cmp	r4, r3
 8005272:	d105      	bne.n	8005280 <std+0x54>
 8005274:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800527c:	f000 b978 	b.w	8005570 <__retarget_lock_init_recursive>
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop
 8005284:	080053f1 	.word	0x080053f1
 8005288:	08005413 	.word	0x08005413
 800528c:	0800544b 	.word	0x0800544b
 8005290:	0800546f 	.word	0x0800546f
 8005294:	2000076c 	.word	0x2000076c

08005298 <stdio_exit_handler>:
 8005298:	4a02      	ldr	r2, [pc, #8]	; (80052a4 <stdio_exit_handler+0xc>)
 800529a:	4903      	ldr	r1, [pc, #12]	; (80052a8 <stdio_exit_handler+0x10>)
 800529c:	4803      	ldr	r0, [pc, #12]	; (80052ac <stdio_exit_handler+0x14>)
 800529e:	f000 b869 	b.w	8005374 <_fwalk_sglue>
 80052a2:	bf00      	nop
 80052a4:	20000014 	.word	0x20000014
 80052a8:	08007d2d 	.word	0x08007d2d
 80052ac:	20000020 	.word	0x20000020

080052b0 <cleanup_stdio>:
 80052b0:	6841      	ldr	r1, [r0, #4]
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <cleanup_stdio+0x34>)
 80052b4:	4299      	cmp	r1, r3
 80052b6:	b510      	push	{r4, lr}
 80052b8:	4604      	mov	r4, r0
 80052ba:	d001      	beq.n	80052c0 <cleanup_stdio+0x10>
 80052bc:	f002 fd36 	bl	8007d2c <_fflush_r>
 80052c0:	68a1      	ldr	r1, [r4, #8]
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <cleanup_stdio+0x38>)
 80052c4:	4299      	cmp	r1, r3
 80052c6:	d002      	beq.n	80052ce <cleanup_stdio+0x1e>
 80052c8:	4620      	mov	r0, r4
 80052ca:	f002 fd2f 	bl	8007d2c <_fflush_r>
 80052ce:	68e1      	ldr	r1, [r4, #12]
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <cleanup_stdio+0x3c>)
 80052d2:	4299      	cmp	r1, r3
 80052d4:	d004      	beq.n	80052e0 <cleanup_stdio+0x30>
 80052d6:	4620      	mov	r0, r4
 80052d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052dc:	f002 bd26 	b.w	8007d2c <_fflush_r>
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	bf00      	nop
 80052e4:	2000076c 	.word	0x2000076c
 80052e8:	200007d4 	.word	0x200007d4
 80052ec:	2000083c 	.word	0x2000083c

080052f0 <global_stdio_init.part.0>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <global_stdio_init.part.0+0x30>)
 80052f4:	4c0b      	ldr	r4, [pc, #44]	; (8005324 <global_stdio_init.part.0+0x34>)
 80052f6:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <global_stdio_init.part.0+0x38>)
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	4620      	mov	r0, r4
 80052fc:	2200      	movs	r2, #0
 80052fe:	2104      	movs	r1, #4
 8005300:	f7ff ff94 	bl	800522c <std>
 8005304:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005308:	2201      	movs	r2, #1
 800530a:	2109      	movs	r1, #9
 800530c:	f7ff ff8e 	bl	800522c <std>
 8005310:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005314:	2202      	movs	r2, #2
 8005316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531a:	2112      	movs	r1, #18
 800531c:	f7ff bf86 	b.w	800522c <std>
 8005320:	200008a4 	.word	0x200008a4
 8005324:	2000076c 	.word	0x2000076c
 8005328:	08005299 	.word	0x08005299

0800532c <__sfp_lock_acquire>:
 800532c:	4801      	ldr	r0, [pc, #4]	; (8005334 <__sfp_lock_acquire+0x8>)
 800532e:	f000 b920 	b.w	8005572 <__retarget_lock_acquire_recursive>
 8005332:	bf00      	nop
 8005334:	200008ad 	.word	0x200008ad

08005338 <__sfp_lock_release>:
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <__sfp_lock_release+0x8>)
 800533a:	f000 b91b 	b.w	8005574 <__retarget_lock_release_recursive>
 800533e:	bf00      	nop
 8005340:	200008ad 	.word	0x200008ad

08005344 <__sinit>:
 8005344:	b510      	push	{r4, lr}
 8005346:	4604      	mov	r4, r0
 8005348:	f7ff fff0 	bl	800532c <__sfp_lock_acquire>
 800534c:	6a23      	ldr	r3, [r4, #32]
 800534e:	b11b      	cbz	r3, 8005358 <__sinit+0x14>
 8005350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005354:	f7ff bff0 	b.w	8005338 <__sfp_lock_release>
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <__sinit+0x28>)
 800535a:	6223      	str	r3, [r4, #32]
 800535c:	4b04      	ldr	r3, [pc, #16]	; (8005370 <__sinit+0x2c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f5      	bne.n	8005350 <__sinit+0xc>
 8005364:	f7ff ffc4 	bl	80052f0 <global_stdio_init.part.0>
 8005368:	e7f2      	b.n	8005350 <__sinit+0xc>
 800536a:	bf00      	nop
 800536c:	080052b1 	.word	0x080052b1
 8005370:	200008a4 	.word	0x200008a4

08005374 <_fwalk_sglue>:
 8005374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005378:	4607      	mov	r7, r0
 800537a:	4688      	mov	r8, r1
 800537c:	4614      	mov	r4, r2
 800537e:	2600      	movs	r6, #0
 8005380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005384:	f1b9 0901 	subs.w	r9, r9, #1
 8005388:	d505      	bpl.n	8005396 <_fwalk_sglue+0x22>
 800538a:	6824      	ldr	r4, [r4, #0]
 800538c:	2c00      	cmp	r4, #0
 800538e:	d1f7      	bne.n	8005380 <_fwalk_sglue+0xc>
 8005390:	4630      	mov	r0, r6
 8005392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d907      	bls.n	80053ac <_fwalk_sglue+0x38>
 800539c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053a0:	3301      	adds	r3, #1
 80053a2:	d003      	beq.n	80053ac <_fwalk_sglue+0x38>
 80053a4:	4629      	mov	r1, r5
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c0      	blx	r8
 80053aa:	4306      	orrs	r6, r0
 80053ac:	3568      	adds	r5, #104	; 0x68
 80053ae:	e7e9      	b.n	8005384 <_fwalk_sglue+0x10>

080053b0 <siprintf>:
 80053b0:	b40e      	push	{r1, r2, r3}
 80053b2:	b500      	push	{lr}
 80053b4:	b09c      	sub	sp, #112	; 0x70
 80053b6:	ab1d      	add	r3, sp, #116	; 0x74
 80053b8:	9002      	str	r0, [sp, #8]
 80053ba:	9006      	str	r0, [sp, #24]
 80053bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053c0:	4809      	ldr	r0, [pc, #36]	; (80053e8 <siprintf+0x38>)
 80053c2:	9107      	str	r1, [sp, #28]
 80053c4:	9104      	str	r1, [sp, #16]
 80053c6:	4909      	ldr	r1, [pc, #36]	; (80053ec <siprintf+0x3c>)
 80053c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053cc:	9105      	str	r1, [sp, #20]
 80053ce:	6800      	ldr	r0, [r0, #0]
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	a902      	add	r1, sp, #8
 80053d4:	f002 fb26 	bl	8007a24 <_svfiprintf_r>
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	b01c      	add	sp, #112	; 0x70
 80053e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e4:	b003      	add	sp, #12
 80053e6:	4770      	bx	lr
 80053e8:	2000006c 	.word	0x2000006c
 80053ec:	ffff0208 	.word	0xffff0208

080053f0 <__sread>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	460c      	mov	r4, r1
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	f000 f86c 	bl	80054d4 <_read_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	bfab      	itete	ge
 8005400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005402:	89a3      	ldrhlt	r3, [r4, #12]
 8005404:	181b      	addge	r3, r3, r0
 8005406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800540a:	bfac      	ite	ge
 800540c:	6563      	strge	r3, [r4, #84]	; 0x54
 800540e:	81a3      	strhlt	r3, [r4, #12]
 8005410:	bd10      	pop	{r4, pc}

08005412 <__swrite>:
 8005412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	461f      	mov	r7, r3
 8005418:	898b      	ldrh	r3, [r1, #12]
 800541a:	05db      	lsls	r3, r3, #23
 800541c:	4605      	mov	r5, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4616      	mov	r6, r2
 8005422:	d505      	bpl.n	8005430 <__swrite+0x1e>
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	2302      	movs	r3, #2
 800542a:	2200      	movs	r2, #0
 800542c:	f000 f840 	bl	80054b0 <_lseek_r>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	4628      	mov	r0, r5
 8005442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	f000 b857 	b.w	80054f8 <_write_r>

0800544a <__sseek>:
 800544a:	b510      	push	{r4, lr}
 800544c:	460c      	mov	r4, r1
 800544e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005452:	f000 f82d 	bl	80054b0 <_lseek_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	bf15      	itete	ne
 800545c:	6560      	strne	r0, [r4, #84]	; 0x54
 800545e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005466:	81a3      	strheq	r3, [r4, #12]
 8005468:	bf18      	it	ne
 800546a:	81a3      	strhne	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__sclose>:
 800546e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005472:	f000 b80d 	b.w	8005490 <_close_r>

08005476 <memset>:
 8005476:	4402      	add	r2, r0
 8005478:	4603      	mov	r3, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	d100      	bne.n	8005480 <memset+0xa>
 800547e:	4770      	bx	lr
 8005480:	f803 1b01 	strb.w	r1, [r3], #1
 8005484:	e7f9      	b.n	800547a <memset+0x4>
	...

08005488 <_localeconv_r>:
 8005488:	4800      	ldr	r0, [pc, #0]	; (800548c <_localeconv_r+0x4>)
 800548a:	4770      	bx	lr
 800548c:	20000160 	.word	0x20000160

08005490 <_close_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	; (80054ac <_close_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fc fbc1 	bl	8001c22 <_close>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_close_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_close_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	200008a8 	.word	0x200008a8

080054b0 <_lseek_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	; (80054d0 <_lseek_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fc fbd6 	bl	8001c70 <_lseek>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_lseek_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_lseek_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	200008a8 	.word	0x200008a8

080054d4 <_read_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	; (80054f4 <_read_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fc fb64 	bl	8001bb0 <_read>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_read_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_read_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	200008a8 	.word	0x200008a8

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	; (8005518 <_write_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc fb6f 	bl	8001bea <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	200008a8 	.word	0x200008a8

0800551c <__errno>:
 800551c:	4b01      	ldr	r3, [pc, #4]	; (8005524 <__errno+0x8>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	2000006c 	.word	0x2000006c

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	; (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	; (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	; (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	; (800556c <__libc_init_array+0x44>)
 800553c:	f003 fb0c 	bl	8008b58 <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	08009d28 	.word	0x08009d28
 8005564:	08009d28 	.word	0x08009d28
 8005568:	08009d28 	.word	0x08009d28
 800556c:	08009d2c 	.word	0x08009d2c

08005570 <__retarget_lock_init_recursive>:
 8005570:	4770      	bx	lr

08005572 <__retarget_lock_acquire_recursive>:
 8005572:	4770      	bx	lr

08005574 <__retarget_lock_release_recursive>:
 8005574:	4770      	bx	lr
	...

08005578 <nanf>:
 8005578:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005580 <nanf+0x8>
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	7fc00000 	.word	0x7fc00000

08005584 <quorem>:
 8005584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	6903      	ldr	r3, [r0, #16]
 800558a:	690c      	ldr	r4, [r1, #16]
 800558c:	42a3      	cmp	r3, r4
 800558e:	4607      	mov	r7, r0
 8005590:	db7e      	blt.n	8005690 <quorem+0x10c>
 8005592:	3c01      	subs	r4, #1
 8005594:	f101 0814 	add.w	r8, r1, #20
 8005598:	f100 0514 	add.w	r5, r0, #20
 800559c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055aa:	3301      	adds	r3, #1
 80055ac:	429a      	cmp	r2, r3
 80055ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ba:	d331      	bcc.n	8005620 <quorem+0x9c>
 80055bc:	f04f 0e00 	mov.w	lr, #0
 80055c0:	4640      	mov	r0, r8
 80055c2:	46ac      	mov	ip, r5
 80055c4:	46f2      	mov	sl, lr
 80055c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80055ca:	b293      	uxth	r3, r2
 80055cc:	fb06 e303 	mla	r3, r6, r3, lr
 80055d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055d4:	0c1a      	lsrs	r2, r3, #16
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ebaa 0303 	sub.w	r3, sl, r3
 80055dc:	f8dc a000 	ldr.w	sl, [ip]
 80055e0:	fa13 f38a 	uxtah	r3, r3, sl
 80055e4:	fb06 220e 	mla	r2, r6, lr, r2
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	9b00      	ldr	r3, [sp, #0]
 80055ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055f0:	b292      	uxth	r2, r2
 80055f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80055fe:	4581      	cmp	r9, r0
 8005600:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005604:	f84c 3b04 	str.w	r3, [ip], #4
 8005608:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800560c:	d2db      	bcs.n	80055c6 <quorem+0x42>
 800560e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005612:	b92b      	cbnz	r3, 8005620 <quorem+0x9c>
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	3b04      	subs	r3, #4
 8005618:	429d      	cmp	r5, r3
 800561a:	461a      	mov	r2, r3
 800561c:	d32c      	bcc.n	8005678 <quorem+0xf4>
 800561e:	613c      	str	r4, [r7, #16]
 8005620:	4638      	mov	r0, r7
 8005622:	f001 f96b 	bl	80068fc <__mcmp>
 8005626:	2800      	cmp	r0, #0
 8005628:	db22      	blt.n	8005670 <quorem+0xec>
 800562a:	3601      	adds	r6, #1
 800562c:	4629      	mov	r1, r5
 800562e:	2000      	movs	r0, #0
 8005630:	f858 2b04 	ldr.w	r2, [r8], #4
 8005634:	f8d1 c000 	ldr.w	ip, [r1]
 8005638:	b293      	uxth	r3, r2
 800563a:	1ac3      	subs	r3, r0, r3
 800563c:	0c12      	lsrs	r2, r2, #16
 800563e:	fa13 f38c 	uxtah	r3, r3, ip
 8005642:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005646:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800564a:	b29b      	uxth	r3, r3
 800564c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005650:	45c1      	cmp	r9, r8
 8005652:	f841 3b04 	str.w	r3, [r1], #4
 8005656:	ea4f 4022 	mov.w	r0, r2, asr #16
 800565a:	d2e9      	bcs.n	8005630 <quorem+0xac>
 800565c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005664:	b922      	cbnz	r2, 8005670 <quorem+0xec>
 8005666:	3b04      	subs	r3, #4
 8005668:	429d      	cmp	r5, r3
 800566a:	461a      	mov	r2, r3
 800566c:	d30a      	bcc.n	8005684 <quorem+0x100>
 800566e:	613c      	str	r4, [r7, #16]
 8005670:	4630      	mov	r0, r6
 8005672:	b003      	add	sp, #12
 8005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	3b04      	subs	r3, #4
 800567c:	2a00      	cmp	r2, #0
 800567e:	d1ce      	bne.n	800561e <quorem+0x9a>
 8005680:	3c01      	subs	r4, #1
 8005682:	e7c9      	b.n	8005618 <quorem+0x94>
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	3b04      	subs	r3, #4
 8005688:	2a00      	cmp	r2, #0
 800568a:	d1f0      	bne.n	800566e <quorem+0xea>
 800568c:	3c01      	subs	r4, #1
 800568e:	e7eb      	b.n	8005668 <quorem+0xe4>
 8005690:	2000      	movs	r0, #0
 8005692:	e7ee      	b.n	8005672 <quorem+0xee>
 8005694:	0000      	movs	r0, r0
	...

08005698 <_dtoa_r>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	ed2d 8b02 	vpush	{d8}
 80056a0:	69c5      	ldr	r5, [r0, #28]
 80056a2:	b091      	sub	sp, #68	; 0x44
 80056a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056a8:	ec59 8b10 	vmov	r8, r9, d0
 80056ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80056ae:	9106      	str	r1, [sp, #24]
 80056b0:	4606      	mov	r6, r0
 80056b2:	9208      	str	r2, [sp, #32]
 80056b4:	930c      	str	r3, [sp, #48]	; 0x30
 80056b6:	b975      	cbnz	r5, 80056d6 <_dtoa_r+0x3e>
 80056b8:	2010      	movs	r0, #16
 80056ba:	f000 fda5 	bl	8006208 <malloc>
 80056be:	4602      	mov	r2, r0
 80056c0:	61f0      	str	r0, [r6, #28]
 80056c2:	b920      	cbnz	r0, 80056ce <_dtoa_r+0x36>
 80056c4:	4ba6      	ldr	r3, [pc, #664]	; (8005960 <_dtoa_r+0x2c8>)
 80056c6:	21ef      	movs	r1, #239	; 0xef
 80056c8:	48a6      	ldr	r0, [pc, #664]	; (8005964 <_dtoa_r+0x2cc>)
 80056ca:	f002 fba9 	bl	8007e20 <__assert_func>
 80056ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056d2:	6005      	str	r5, [r0, #0]
 80056d4:	60c5      	str	r5, [r0, #12]
 80056d6:	69f3      	ldr	r3, [r6, #28]
 80056d8:	6819      	ldr	r1, [r3, #0]
 80056da:	b151      	cbz	r1, 80056f2 <_dtoa_r+0x5a>
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	604a      	str	r2, [r1, #4]
 80056e0:	2301      	movs	r3, #1
 80056e2:	4093      	lsls	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 fe82 	bl	80063f0 <_Bfree>
 80056ec:	69f3      	ldr	r3, [r6, #28]
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	f1b9 0300 	subs.w	r3, r9, #0
 80056f6:	bfbb      	ittet	lt
 80056f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056fc:	9303      	strlt	r3, [sp, #12]
 80056fe:	2300      	movge	r3, #0
 8005700:	2201      	movlt	r2, #1
 8005702:	bfac      	ite	ge
 8005704:	6023      	strge	r3, [r4, #0]
 8005706:	6022      	strlt	r2, [r4, #0]
 8005708:	4b97      	ldr	r3, [pc, #604]	; (8005968 <_dtoa_r+0x2d0>)
 800570a:	9c03      	ldr	r4, [sp, #12]
 800570c:	43a3      	bics	r3, r4
 800570e:	d11c      	bne.n	800574a <_dtoa_r+0xb2>
 8005710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005712:	f242 730f 	movw	r3, #9999	; 0x270f
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800571c:	ea53 0308 	orrs.w	r3, r3, r8
 8005720:	f000 84fb 	beq.w	800611a <_dtoa_r+0xa82>
 8005724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005726:	b963      	cbnz	r3, 8005742 <_dtoa_r+0xaa>
 8005728:	4b90      	ldr	r3, [pc, #576]	; (800596c <_dtoa_r+0x2d4>)
 800572a:	e020      	b.n	800576e <_dtoa_r+0xd6>
 800572c:	4b90      	ldr	r3, [pc, #576]	; (8005970 <_dtoa_r+0x2d8>)
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	3308      	adds	r3, #8
 8005732:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	9801      	ldr	r0, [sp, #4]
 8005738:	b011      	add	sp, #68	; 0x44
 800573a:	ecbd 8b02 	vpop	{d8}
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	4b8a      	ldr	r3, [pc, #552]	; (800596c <_dtoa_r+0x2d4>)
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	3303      	adds	r3, #3
 8005748:	e7f3      	b.n	8005732 <_dtoa_r+0x9a>
 800574a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800574e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005756:	d10c      	bne.n	8005772 <_dtoa_r+0xda>
 8005758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800575a:	2301      	movs	r3, #1
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 84d7 	beq.w	8006114 <_dtoa_r+0xa7c>
 8005766:	4b83      	ldr	r3, [pc, #524]	; (8005974 <_dtoa_r+0x2dc>)
 8005768:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	e7e1      	b.n	8005736 <_dtoa_r+0x9e>
 8005772:	aa0e      	add	r2, sp, #56	; 0x38
 8005774:	a90f      	add	r1, sp, #60	; 0x3c
 8005776:	4630      	mov	r0, r6
 8005778:	eeb0 0b48 	vmov.f64	d0, d8
 800577c:	f001 f9d4 	bl	8006b28 <__d2b>
 8005780:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005786:	4605      	mov	r5, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d046      	beq.n	800581a <_dtoa_r+0x182>
 800578c:	eeb0 7b48 	vmov.f64	d7, d8
 8005790:	ee18 1a90 	vmov	r1, s17
 8005794:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005798:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800579c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80057a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80057a4:	2000      	movs	r0, #0
 80057a6:	ee07 1a90 	vmov	s15, r1
 80057aa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80057ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005948 <_dtoa_r+0x2b0>
 80057b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005950 <_dtoa_r+0x2b8>
 80057ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80057be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005958 <_dtoa_r+0x2c0>
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80057ca:	eeb0 7b46 	vmov.f64	d7, d6
 80057ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80057d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80057d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80057da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057de:	ee16 ba90 	vmov	fp, s13
 80057e2:	9009      	str	r0, [sp, #36]	; 0x24
 80057e4:	d508      	bpl.n	80057f8 <_dtoa_r+0x160>
 80057e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80057ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80057ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f2:	bf18      	it	ne
 80057f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80057f8:	f1bb 0f16 	cmp.w	fp, #22
 80057fc:	d82b      	bhi.n	8005856 <_dtoa_r+0x1be>
 80057fe:	495e      	ldr	r1, [pc, #376]	; (8005978 <_dtoa_r+0x2e0>)
 8005800:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005804:	ed91 7b00 	vldr	d7, [r1]
 8005808:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005810:	d501      	bpl.n	8005816 <_dtoa_r+0x17e>
 8005812:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005816:	2100      	movs	r1, #0
 8005818:	e01e      	b.n	8005858 <_dtoa_r+0x1c0>
 800581a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800581c:	4413      	add	r3, r2
 800581e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005822:	2920      	cmp	r1, #32
 8005824:	bfc1      	itttt	gt
 8005826:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800582a:	408c      	lslgt	r4, r1
 800582c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005830:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005834:	bfd6      	itet	le
 8005836:	f1c1 0120 	rsble	r1, r1, #32
 800583a:	4321      	orrgt	r1, r4
 800583c:	fa08 f101 	lslle.w	r1, r8, r1
 8005840:	ee07 1a90 	vmov	s15, r1
 8005844:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005848:	3b01      	subs	r3, #1
 800584a:	ee17 1a90 	vmov	r1, s15
 800584e:	2001      	movs	r0, #1
 8005850:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005854:	e7a7      	b.n	80057a6 <_dtoa_r+0x10e>
 8005856:	2101      	movs	r1, #1
 8005858:	1ad2      	subs	r2, r2, r3
 800585a:	1e53      	subs	r3, r2, #1
 800585c:	9305      	str	r3, [sp, #20]
 800585e:	bf45      	ittet	mi
 8005860:	f1c2 0301 	rsbmi	r3, r2, #1
 8005864:	9304      	strmi	r3, [sp, #16]
 8005866:	2300      	movpl	r3, #0
 8005868:	2300      	movmi	r3, #0
 800586a:	bf4c      	ite	mi
 800586c:	9305      	strmi	r3, [sp, #20]
 800586e:	9304      	strpl	r3, [sp, #16]
 8005870:	f1bb 0f00 	cmp.w	fp, #0
 8005874:	910b      	str	r1, [sp, #44]	; 0x2c
 8005876:	db18      	blt.n	80058aa <_dtoa_r+0x212>
 8005878:	9b05      	ldr	r3, [sp, #20]
 800587a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800587e:	445b      	add	r3, fp
 8005880:	9305      	str	r3, [sp, #20]
 8005882:	2300      	movs	r3, #0
 8005884:	9a06      	ldr	r2, [sp, #24]
 8005886:	2a09      	cmp	r2, #9
 8005888:	d848      	bhi.n	800591c <_dtoa_r+0x284>
 800588a:	2a05      	cmp	r2, #5
 800588c:	bfc4      	itt	gt
 800588e:	3a04      	subgt	r2, #4
 8005890:	9206      	strgt	r2, [sp, #24]
 8005892:	9a06      	ldr	r2, [sp, #24]
 8005894:	f1a2 0202 	sub.w	r2, r2, #2
 8005898:	bfcc      	ite	gt
 800589a:	2400      	movgt	r4, #0
 800589c:	2401      	movle	r4, #1
 800589e:	2a03      	cmp	r2, #3
 80058a0:	d847      	bhi.n	8005932 <_dtoa_r+0x29a>
 80058a2:	e8df f002 	tbb	[pc, r2]
 80058a6:	2d0b      	.short	0x2d0b
 80058a8:	392b      	.short	0x392b
 80058aa:	9b04      	ldr	r3, [sp, #16]
 80058ac:	2200      	movs	r2, #0
 80058ae:	eba3 030b 	sub.w	r3, r3, fp
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	920a      	str	r2, [sp, #40]	; 0x28
 80058b6:	f1cb 0300 	rsb	r3, fp, #0
 80058ba:	e7e3      	b.n	8005884 <_dtoa_r+0x1ec>
 80058bc:	2200      	movs	r2, #0
 80058be:	9207      	str	r2, [sp, #28]
 80058c0:	9a08      	ldr	r2, [sp, #32]
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	dc38      	bgt.n	8005938 <_dtoa_r+0x2a0>
 80058c6:	f04f 0a01 	mov.w	sl, #1
 80058ca:	46d1      	mov	r9, sl
 80058cc:	4652      	mov	r2, sl
 80058ce:	f8cd a020 	str.w	sl, [sp, #32]
 80058d2:	69f7      	ldr	r7, [r6, #28]
 80058d4:	2100      	movs	r1, #0
 80058d6:	2004      	movs	r0, #4
 80058d8:	f100 0c14 	add.w	ip, r0, #20
 80058dc:	4594      	cmp	ip, r2
 80058de:	d930      	bls.n	8005942 <_dtoa_r+0x2aa>
 80058e0:	6079      	str	r1, [r7, #4]
 80058e2:	4630      	mov	r0, r6
 80058e4:	930d      	str	r3, [sp, #52]	; 0x34
 80058e6:	f000 fd43 	bl	8006370 <_Balloc>
 80058ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ec:	9001      	str	r0, [sp, #4]
 80058ee:	4602      	mov	r2, r0
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d145      	bne.n	8005980 <_dtoa_r+0x2e8>
 80058f4:	4b21      	ldr	r3, [pc, #132]	; (800597c <_dtoa_r+0x2e4>)
 80058f6:	f240 11af 	movw	r1, #431	; 0x1af
 80058fa:	e6e5      	b.n	80056c8 <_dtoa_r+0x30>
 80058fc:	2201      	movs	r2, #1
 80058fe:	e7de      	b.n	80058be <_dtoa_r+0x226>
 8005900:	2200      	movs	r2, #0
 8005902:	9207      	str	r2, [sp, #28]
 8005904:	9a08      	ldr	r2, [sp, #32]
 8005906:	eb0b 0a02 	add.w	sl, fp, r2
 800590a:	f10a 0901 	add.w	r9, sl, #1
 800590e:	464a      	mov	r2, r9
 8005910:	2a01      	cmp	r2, #1
 8005912:	bfb8      	it	lt
 8005914:	2201      	movlt	r2, #1
 8005916:	e7dc      	b.n	80058d2 <_dtoa_r+0x23a>
 8005918:	2201      	movs	r2, #1
 800591a:	e7f2      	b.n	8005902 <_dtoa_r+0x26a>
 800591c:	2401      	movs	r4, #1
 800591e:	2200      	movs	r2, #0
 8005920:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005924:	f04f 3aff 	mov.w	sl, #4294967295
 8005928:	2100      	movs	r1, #0
 800592a:	46d1      	mov	r9, sl
 800592c:	2212      	movs	r2, #18
 800592e:	9108      	str	r1, [sp, #32]
 8005930:	e7cf      	b.n	80058d2 <_dtoa_r+0x23a>
 8005932:	2201      	movs	r2, #1
 8005934:	9207      	str	r2, [sp, #28]
 8005936:	e7f5      	b.n	8005924 <_dtoa_r+0x28c>
 8005938:	f8dd a020 	ldr.w	sl, [sp, #32]
 800593c:	46d1      	mov	r9, sl
 800593e:	4652      	mov	r2, sl
 8005940:	e7c7      	b.n	80058d2 <_dtoa_r+0x23a>
 8005942:	3101      	adds	r1, #1
 8005944:	0040      	lsls	r0, r0, #1
 8005946:	e7c7      	b.n	80058d8 <_dtoa_r+0x240>
 8005948:	636f4361 	.word	0x636f4361
 800594c:	3fd287a7 	.word	0x3fd287a7
 8005950:	8b60c8b3 	.word	0x8b60c8b3
 8005954:	3fc68a28 	.word	0x3fc68a28
 8005958:	509f79fb 	.word	0x509f79fb
 800595c:	3fd34413 	.word	0x3fd34413
 8005960:	0800993e 	.word	0x0800993e
 8005964:	08009955 	.word	0x08009955
 8005968:	7ff00000 	.word	0x7ff00000
 800596c:	0800993a 	.word	0x0800993a
 8005970:	08009931 	.word	0x08009931
 8005974:	08009909 	.word	0x08009909
 8005978:	08009a40 	.word	0x08009a40
 800597c:	080099ad 	.word	0x080099ad
 8005980:	69f2      	ldr	r2, [r6, #28]
 8005982:	9901      	ldr	r1, [sp, #4]
 8005984:	6011      	str	r1, [r2, #0]
 8005986:	f1b9 0f0e 	cmp.w	r9, #14
 800598a:	d86c      	bhi.n	8005a66 <_dtoa_r+0x3ce>
 800598c:	2c00      	cmp	r4, #0
 800598e:	d06a      	beq.n	8005a66 <_dtoa_r+0x3ce>
 8005990:	f1bb 0f00 	cmp.w	fp, #0
 8005994:	f340 80a0 	ble.w	8005ad8 <_dtoa_r+0x440>
 8005998:	4ac1      	ldr	r2, [pc, #772]	; (8005ca0 <_dtoa_r+0x608>)
 800599a:	f00b 010f 	and.w	r1, fp, #15
 800599e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80059a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059a6:	ed92 7b00 	vldr	d7, [r2]
 80059aa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80059ae:	f000 8087 	beq.w	8005ac0 <_dtoa_r+0x428>
 80059b2:	49bc      	ldr	r1, [pc, #752]	; (8005ca4 <_dtoa_r+0x60c>)
 80059b4:	ed91 6b08 	vldr	d6, [r1, #32]
 80059b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80059bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80059c0:	f002 020f 	and.w	r2, r2, #15
 80059c4:	2103      	movs	r1, #3
 80059c6:	48b7      	ldr	r0, [pc, #732]	; (8005ca4 <_dtoa_r+0x60c>)
 80059c8:	2a00      	cmp	r2, #0
 80059ca:	d17b      	bne.n	8005ac4 <_dtoa_r+0x42c>
 80059cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80059d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80059d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059de:	2a00      	cmp	r2, #0
 80059e0:	f000 80a0 	beq.w	8005b24 <_dtoa_r+0x48c>
 80059e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80059e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	f140 8098 	bpl.w	8005b24 <_dtoa_r+0x48c>
 80059f4:	f1b9 0f00 	cmp.w	r9, #0
 80059f8:	f000 8094 	beq.w	8005b24 <_dtoa_r+0x48c>
 80059fc:	f1ba 0f00 	cmp.w	sl, #0
 8005a00:	dd2f      	ble.n	8005a62 <_dtoa_r+0x3ca>
 8005a02:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005a06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a0a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a0e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005a12:	3101      	adds	r1, #1
 8005a14:	4654      	mov	r4, sl
 8005a16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005a1a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005a1e:	ee07 1a90 	vmov	s15, r1
 8005a22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005a26:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005a2a:	ee15 7a90 	vmov	r7, s11
 8005a2e:	ec51 0b15 	vmov	r0, r1, d5
 8005a32:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005a36:	2c00      	cmp	r4, #0
 8005a38:	d177      	bne.n	8005b2a <_dtoa_r+0x492>
 8005a3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005a3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a42:	ec41 0b17 	vmov	d7, r0, r1
 8005a46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4e:	f300 826a 	bgt.w	8005f26 <_dtoa_r+0x88e>
 8005a52:	eeb1 7b47 	vneg.f64	d7, d7
 8005a56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	f100 8260 	bmi.w	8005f22 <_dtoa_r+0x88a>
 8005a62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	f2c0 811d 	blt.w	8005ca8 <_dtoa_r+0x610>
 8005a6e:	f1bb 0f0e 	cmp.w	fp, #14
 8005a72:	f300 8119 	bgt.w	8005ca8 <_dtoa_r+0x610>
 8005a76:	4b8a      	ldr	r3, [pc, #552]	; (8005ca0 <_dtoa_r+0x608>)
 8005a78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a7c:	ed93 6b00 	vldr	d6, [r3]
 8005a80:	9b08      	ldr	r3, [sp, #32]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f280 80b7 	bge.w	8005bf6 <_dtoa_r+0x55e>
 8005a88:	f1b9 0f00 	cmp.w	r9, #0
 8005a8c:	f300 80b3 	bgt.w	8005bf6 <_dtoa_r+0x55e>
 8005a90:	f040 8246 	bne.w	8005f20 <_dtoa_r+0x888>
 8005a94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005a98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005aa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa8:	464c      	mov	r4, r9
 8005aaa:	464f      	mov	r7, r9
 8005aac:	f280 821c 	bge.w	8005ee8 <_dtoa_r+0x850>
 8005ab0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ab4:	2331      	movs	r3, #49	; 0x31
 8005ab6:	f808 3b01 	strb.w	r3, [r8], #1
 8005aba:	f10b 0b01 	add.w	fp, fp, #1
 8005abe:	e218      	b.n	8005ef2 <_dtoa_r+0x85a>
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	e780      	b.n	80059c6 <_dtoa_r+0x32e>
 8005ac4:	07d4      	lsls	r4, r2, #31
 8005ac6:	d504      	bpl.n	8005ad2 <_dtoa_r+0x43a>
 8005ac8:	ed90 6b00 	vldr	d6, [r0]
 8005acc:	3101      	adds	r1, #1
 8005ace:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ad2:	1052      	asrs	r2, r2, #1
 8005ad4:	3008      	adds	r0, #8
 8005ad6:	e777      	b.n	80059c8 <_dtoa_r+0x330>
 8005ad8:	d022      	beq.n	8005b20 <_dtoa_r+0x488>
 8005ada:	f1cb 0200 	rsb	r2, fp, #0
 8005ade:	4970      	ldr	r1, [pc, #448]	; (8005ca0 <_dtoa_r+0x608>)
 8005ae0:	f002 000f 	and.w	r0, r2, #15
 8005ae4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005ae8:	ed91 7b00 	vldr	d7, [r1]
 8005aec:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005af0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005af4:	486b      	ldr	r0, [pc, #428]	; (8005ca4 <_dtoa_r+0x60c>)
 8005af6:	1112      	asrs	r2, r2, #4
 8005af8:	2400      	movs	r4, #0
 8005afa:	2102      	movs	r1, #2
 8005afc:	b92a      	cbnz	r2, 8005b0a <_dtoa_r+0x472>
 8005afe:	2c00      	cmp	r4, #0
 8005b00:	f43f af6a 	beq.w	80059d8 <_dtoa_r+0x340>
 8005b04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b08:	e766      	b.n	80059d8 <_dtoa_r+0x340>
 8005b0a:	07d7      	lsls	r7, r2, #31
 8005b0c:	d505      	bpl.n	8005b1a <_dtoa_r+0x482>
 8005b0e:	ed90 6b00 	vldr	d6, [r0]
 8005b12:	3101      	adds	r1, #1
 8005b14:	2401      	movs	r4, #1
 8005b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b1a:	1052      	asrs	r2, r2, #1
 8005b1c:	3008      	adds	r0, #8
 8005b1e:	e7ed      	b.n	8005afc <_dtoa_r+0x464>
 8005b20:	2102      	movs	r1, #2
 8005b22:	e759      	b.n	80059d8 <_dtoa_r+0x340>
 8005b24:	465a      	mov	r2, fp
 8005b26:	464c      	mov	r4, r9
 8005b28:	e775      	b.n	8005a16 <_dtoa_r+0x37e>
 8005b2a:	ec41 0b17 	vmov	d7, r0, r1
 8005b2e:	495c      	ldr	r1, [pc, #368]	; (8005ca0 <_dtoa_r+0x608>)
 8005b30:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005b34:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005b38:	9901      	ldr	r1, [sp, #4]
 8005b3a:	440c      	add	r4, r1
 8005b3c:	9907      	ldr	r1, [sp, #28]
 8005b3e:	b351      	cbz	r1, 8005b96 <_dtoa_r+0x4fe>
 8005b40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005b44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005b48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b4c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005b50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005b54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005b58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005b5c:	ee14 1a90 	vmov	r1, s9
 8005b60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005b64:	3130      	adds	r1, #48	; 0x30
 8005b66:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005b6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	f808 1b01 	strb.w	r1, [r8], #1
 8005b76:	d439      	bmi.n	8005bec <_dtoa_r+0x554>
 8005b78:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005b7c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	d472      	bmi.n	8005c6c <_dtoa_r+0x5d4>
 8005b86:	45a0      	cmp	r8, r4
 8005b88:	f43f af6b 	beq.w	8005a62 <_dtoa_r+0x3ca>
 8005b8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005b90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005b94:	e7e0      	b.n	8005b58 <_dtoa_r+0x4c0>
 8005b96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005ba4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005ba8:	ee14 1a90 	vmov	r1, s9
 8005bac:	3130      	adds	r1, #48	; 0x30
 8005bae:	f808 1b01 	strb.w	r1, [r8], #1
 8005bb2:	45a0      	cmp	r8, r4
 8005bb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005bb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005bbc:	d118      	bne.n	8005bf0 <_dtoa_r+0x558>
 8005bbe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005bc2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005bc6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	dc4d      	bgt.n	8005c6c <_dtoa_r+0x5d4>
 8005bd0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005bd4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bdc:	f57f af41 	bpl.w	8005a62 <_dtoa_r+0x3ca>
 8005be0:	4680      	mov	r8, r0
 8005be2:	3801      	subs	r0, #1
 8005be4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005be8:	2b30      	cmp	r3, #48	; 0x30
 8005bea:	d0f9      	beq.n	8005be0 <_dtoa_r+0x548>
 8005bec:	4693      	mov	fp, r2
 8005bee:	e02a      	b.n	8005c46 <_dtoa_r+0x5ae>
 8005bf0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005bf4:	e7d6      	b.n	8005ba4 <_dtoa_r+0x50c>
 8005bf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bfa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005bfe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005c06:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005c0a:	ee15 3a10 	vmov	r3, s10
 8005c0e:	3330      	adds	r3, #48	; 0x30
 8005c10:	f808 3b01 	strb.w	r3, [r8], #1
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	eba8 0303 	sub.w	r3, r8, r3
 8005c1a:	4599      	cmp	r9, r3
 8005c1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005c20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005c24:	d133      	bne.n	8005c8e <_dtoa_r+0x5f6>
 8005c26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	dc1a      	bgt.n	8005c6a <_dtoa_r+0x5d2>
 8005c34:	eeb4 7b46 	vcmp.f64	d7, d6
 8005c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3c:	d103      	bne.n	8005c46 <_dtoa_r+0x5ae>
 8005c3e:	ee15 3a10 	vmov	r3, s10
 8005c42:	07d9      	lsls	r1, r3, #31
 8005c44:	d411      	bmi.n	8005c6a <_dtoa_r+0x5d2>
 8005c46:	4629      	mov	r1, r5
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 fbd1 	bl	80063f0 <_Bfree>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c52:	f888 3000 	strb.w	r3, [r8]
 8005c56:	f10b 0301 	add.w	r3, fp, #1
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f43f ad69 	beq.w	8005736 <_dtoa_r+0x9e>
 8005c64:	f8c3 8000 	str.w	r8, [r3]
 8005c68:	e565      	b.n	8005736 <_dtoa_r+0x9e>
 8005c6a:	465a      	mov	r2, fp
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	4698      	mov	r8, r3
 8005c70:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8005c74:	2939      	cmp	r1, #57	; 0x39
 8005c76:	d106      	bne.n	8005c86 <_dtoa_r+0x5ee>
 8005c78:	9901      	ldr	r1, [sp, #4]
 8005c7a:	4299      	cmp	r1, r3
 8005c7c:	d1f7      	bne.n	8005c6e <_dtoa_r+0x5d6>
 8005c7e:	9801      	ldr	r0, [sp, #4]
 8005c80:	2130      	movs	r1, #48	; 0x30
 8005c82:	3201      	adds	r2, #1
 8005c84:	7001      	strb	r1, [r0, #0]
 8005c86:	7819      	ldrb	r1, [r3, #0]
 8005c88:	3101      	adds	r1, #1
 8005c8a:	7019      	strb	r1, [r3, #0]
 8005c8c:	e7ae      	b.n	8005bec <_dtoa_r+0x554>
 8005c8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005c92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9a:	d1b2      	bne.n	8005c02 <_dtoa_r+0x56a>
 8005c9c:	e7d3      	b.n	8005c46 <_dtoa_r+0x5ae>
 8005c9e:	bf00      	nop
 8005ca0:	08009a40 	.word	0x08009a40
 8005ca4:	08009a18 	.word	0x08009a18
 8005ca8:	9907      	ldr	r1, [sp, #28]
 8005caa:	2900      	cmp	r1, #0
 8005cac:	f000 80d0 	beq.w	8005e50 <_dtoa_r+0x7b8>
 8005cb0:	9906      	ldr	r1, [sp, #24]
 8005cb2:	2901      	cmp	r1, #1
 8005cb4:	f300 80b4 	bgt.w	8005e20 <_dtoa_r+0x788>
 8005cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	f000 80ac 	beq.w	8005e18 <_dtoa_r+0x780>
 8005cc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005cc4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005cc8:	461c      	mov	r4, r3
 8005cca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ccc:	9b04      	ldr	r3, [sp, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	9b05      	ldr	r3, [sp, #20]
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	4630      	mov	r0, r6
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	f000 fc88 	bl	80065f0 <__i2b>
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	f1b8 0f00 	cmp.w	r8, #0
 8005ce8:	d00d      	beq.n	8005d06 <_dtoa_r+0x66e>
 8005cea:	9a05      	ldr	r2, [sp, #20]
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	dd0a      	ble.n	8005d06 <_dtoa_r+0x66e>
 8005cf0:	4542      	cmp	r2, r8
 8005cf2:	9904      	ldr	r1, [sp, #16]
 8005cf4:	bfa8      	it	ge
 8005cf6:	4642      	movge	r2, r8
 8005cf8:	1a89      	subs	r1, r1, r2
 8005cfa:	9104      	str	r1, [sp, #16]
 8005cfc:	9905      	ldr	r1, [sp, #20]
 8005cfe:	eba8 0802 	sub.w	r8, r8, r2
 8005d02:	1a8a      	subs	r2, r1, r2
 8005d04:	9205      	str	r2, [sp, #20]
 8005d06:	b303      	cbz	r3, 8005d4a <_dtoa_r+0x6b2>
 8005d08:	9a07      	ldr	r2, [sp, #28]
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	f000 80a5 	beq.w	8005e5a <_dtoa_r+0x7c2>
 8005d10:	2c00      	cmp	r4, #0
 8005d12:	dd13      	ble.n	8005d3c <_dtoa_r+0x6a4>
 8005d14:	4639      	mov	r1, r7
 8005d16:	4622      	mov	r2, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8005d1c:	f000 fd28 	bl	8006770 <__pow5mult>
 8005d20:	462a      	mov	r2, r5
 8005d22:	4601      	mov	r1, r0
 8005d24:	4607      	mov	r7, r0
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 fc78 	bl	800661c <__multiply>
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	9009      	str	r0, [sp, #36]	; 0x24
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 fb5d 	bl	80063f0 <_Bfree>
 8005d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d3a:	4615      	mov	r5, r2
 8005d3c:	1b1a      	subs	r2, r3, r4
 8005d3e:	d004      	beq.n	8005d4a <_dtoa_r+0x6b2>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4630      	mov	r0, r6
 8005d44:	f000 fd14 	bl	8006770 <__pow5mult>
 8005d48:	4605      	mov	r5, r0
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f000 fc4f 	bl	80065f0 <__i2b>
 8005d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	f340 8081 	ble.w	8005e5e <_dtoa_r+0x7c6>
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4601      	mov	r1, r0
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 fd05 	bl	8006770 <__pow5mult>
 8005d66:	9b06      	ldr	r3, [sp, #24]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	dd7a      	ble.n	8005e64 <_dtoa_r+0x7cc>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9309      	str	r3, [sp, #36]	; 0x24
 8005d72:	6922      	ldr	r2, [r4, #16]
 8005d74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005d78:	6910      	ldr	r0, [r2, #16]
 8005d7a:	f000 fbeb 	bl	8006554 <__hi0bits>
 8005d7e:	f1c0 0020 	rsb	r0, r0, #32
 8005d82:	9b05      	ldr	r3, [sp, #20]
 8005d84:	4418      	add	r0, r3
 8005d86:	f010 001f 	ands.w	r0, r0, #31
 8005d8a:	f000 8093 	beq.w	8005eb4 <_dtoa_r+0x81c>
 8005d8e:	f1c0 0220 	rsb	r2, r0, #32
 8005d92:	2a04      	cmp	r2, #4
 8005d94:	f340 8085 	ble.w	8005ea2 <_dtoa_r+0x80a>
 8005d98:	9b04      	ldr	r3, [sp, #16]
 8005d9a:	f1c0 001c 	rsb	r0, r0, #28
 8005d9e:	4403      	add	r3, r0
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	9b05      	ldr	r3, [sp, #20]
 8005da4:	4480      	add	r8, r0
 8005da6:	4403      	add	r3, r0
 8005da8:	9305      	str	r3, [sp, #20]
 8005daa:	9b04      	ldr	r3, [sp, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dd05      	ble.n	8005dbc <_dtoa_r+0x724>
 8005db0:	4629      	mov	r1, r5
 8005db2:	461a      	mov	r2, r3
 8005db4:	4630      	mov	r0, r6
 8005db6:	f000 fd35 	bl	8006824 <__lshift>
 8005dba:	4605      	mov	r5, r0
 8005dbc:	9b05      	ldr	r3, [sp, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dd05      	ble.n	8005dce <_dtoa_r+0x736>
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 fd2c 	bl	8006824 <__lshift>
 8005dcc:	4604      	mov	r4, r0
 8005dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d071      	beq.n	8005eb8 <_dtoa_r+0x820>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 fd90 	bl	80068fc <__mcmp>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	da6b      	bge.n	8005eb8 <_dtoa_r+0x820>
 8005de0:	2300      	movs	r3, #0
 8005de2:	4629      	mov	r1, r5
 8005de4:	220a      	movs	r2, #10
 8005de6:	4630      	mov	r0, r6
 8005de8:	f000 fb24 	bl	8006434 <__multadd>
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005df2:	4605      	mov	r5, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8197 	beq.w	8006128 <_dtoa_r+0xa90>
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	220a      	movs	r2, #10
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 fb17 	bl	8006434 <__multadd>
 8005e06:	f1ba 0f00 	cmp.w	sl, #0
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	f300 8093 	bgt.w	8005f36 <_dtoa_r+0x89e>
 8005e10:	9b06      	ldr	r3, [sp, #24]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	dc57      	bgt.n	8005ec6 <_dtoa_r+0x82e>
 8005e16:	e08e      	b.n	8005f36 <_dtoa_r+0x89e>
 8005e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005e1e:	e751      	b.n	8005cc4 <_dtoa_r+0x62c>
 8005e20:	f109 34ff 	add.w	r4, r9, #4294967295
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bfbf      	itttt	lt
 8005e28:	1ae2      	sublt	r2, r4, r3
 8005e2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e2c:	189b      	addlt	r3, r3, r2
 8005e2e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005e30:	bfae      	itee	ge
 8005e32:	1b1c      	subge	r4, r3, r4
 8005e34:	4623      	movlt	r3, r4
 8005e36:	2400      	movlt	r4, #0
 8005e38:	f1b9 0f00 	cmp.w	r9, #0
 8005e3c:	bfb5      	itete	lt
 8005e3e:	9a04      	ldrlt	r2, [sp, #16]
 8005e40:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005e44:	eba2 0809 	sublt.w	r8, r2, r9
 8005e48:	464a      	movge	r2, r9
 8005e4a:	bfb8      	it	lt
 8005e4c:	2200      	movlt	r2, #0
 8005e4e:	e73c      	b.n	8005cca <_dtoa_r+0x632>
 8005e50:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005e54:	9f07      	ldr	r7, [sp, #28]
 8005e56:	461c      	mov	r4, r3
 8005e58:	e744      	b.n	8005ce4 <_dtoa_r+0x64c>
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	e770      	b.n	8005d40 <_dtoa_r+0x6a8>
 8005e5e:	9b06      	ldr	r3, [sp, #24]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	dc18      	bgt.n	8005e96 <_dtoa_r+0x7fe>
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	b9b3      	cbnz	r3, 8005e96 <_dtoa_r+0x7fe>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005e6e:	b9a2      	cbnz	r2, 8005e9a <_dtoa_r+0x802>
 8005e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e74:	0d12      	lsrs	r2, r2, #20
 8005e76:	0512      	lsls	r2, r2, #20
 8005e78:	b18a      	cbz	r2, 8005e9e <_dtoa_r+0x806>
 8005e7a:	9b04      	ldr	r3, [sp, #16]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	9304      	str	r3, [sp, #16]
 8005e80:	9b05      	ldr	r3, [sp, #20]
 8005e82:	3301      	adds	r3, #1
 8005e84:	9305      	str	r3, [sp, #20]
 8005e86:	2301      	movs	r3, #1
 8005e88:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f47f af70 	bne.w	8005d72 <_dtoa_r+0x6da>
 8005e92:	2001      	movs	r0, #1
 8005e94:	e775      	b.n	8005d82 <_dtoa_r+0x6ea>
 8005e96:	2300      	movs	r3, #0
 8005e98:	e7f6      	b.n	8005e88 <_dtoa_r+0x7f0>
 8005e9a:	9b02      	ldr	r3, [sp, #8]
 8005e9c:	e7f4      	b.n	8005e88 <_dtoa_r+0x7f0>
 8005e9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea0:	e7f3      	b.n	8005e8a <_dtoa_r+0x7f2>
 8005ea2:	d082      	beq.n	8005daa <_dtoa_r+0x712>
 8005ea4:	9b04      	ldr	r3, [sp, #16]
 8005ea6:	321c      	adds	r2, #28
 8005ea8:	4413      	add	r3, r2
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	9b05      	ldr	r3, [sp, #20]
 8005eae:	4490      	add	r8, r2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	e779      	b.n	8005da8 <_dtoa_r+0x710>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	e7f5      	b.n	8005ea4 <_dtoa_r+0x80c>
 8005eb8:	f1b9 0f00 	cmp.w	r9, #0
 8005ebc:	dc36      	bgt.n	8005f2c <_dtoa_r+0x894>
 8005ebe:	9b06      	ldr	r3, [sp, #24]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	dd33      	ble.n	8005f2c <_dtoa_r+0x894>
 8005ec4:	46ca      	mov	sl, r9
 8005ec6:	f1ba 0f00 	cmp.w	sl, #0
 8005eca:	d10d      	bne.n	8005ee8 <_dtoa_r+0x850>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4653      	mov	r3, sl
 8005ed0:	2205      	movs	r2, #5
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f000 faae 	bl	8006434 <__multadd>
 8005ed8:	4601      	mov	r1, r0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4628      	mov	r0, r5
 8005ede:	f000 fd0d 	bl	80068fc <__mcmp>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	f73f ade4 	bgt.w	8005ab0 <_dtoa_r+0x418>
 8005ee8:	9b08      	ldr	r3, [sp, #32]
 8005eea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005eee:	ea6f 0b03 	mvn.w	fp, r3
 8005ef2:	f04f 0900 	mov.w	r9, #0
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f000 fa79 	bl	80063f0 <_Bfree>
 8005efe:	2f00      	cmp	r7, #0
 8005f00:	f43f aea1 	beq.w	8005c46 <_dtoa_r+0x5ae>
 8005f04:	f1b9 0f00 	cmp.w	r9, #0
 8005f08:	d005      	beq.n	8005f16 <_dtoa_r+0x87e>
 8005f0a:	45b9      	cmp	r9, r7
 8005f0c:	d003      	beq.n	8005f16 <_dtoa_r+0x87e>
 8005f0e:	4649      	mov	r1, r9
 8005f10:	4630      	mov	r0, r6
 8005f12:	f000 fa6d 	bl	80063f0 <_Bfree>
 8005f16:	4639      	mov	r1, r7
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 fa69 	bl	80063f0 <_Bfree>
 8005f1e:	e692      	b.n	8005c46 <_dtoa_r+0x5ae>
 8005f20:	2400      	movs	r4, #0
 8005f22:	4627      	mov	r7, r4
 8005f24:	e7e0      	b.n	8005ee8 <_dtoa_r+0x850>
 8005f26:	4693      	mov	fp, r2
 8005f28:	4627      	mov	r7, r4
 8005f2a:	e5c1      	b.n	8005ab0 <_dtoa_r+0x418>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	46ca      	mov	sl, r9
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8100 	beq.w	8006136 <_dtoa_r+0xa9e>
 8005f36:	f1b8 0f00 	cmp.w	r8, #0
 8005f3a:	dd05      	ble.n	8005f48 <_dtoa_r+0x8b0>
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	4642      	mov	r2, r8
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 fc6f 	bl	8006824 <__lshift>
 8005f46:	4607      	mov	r7, r0
 8005f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d05d      	beq.n	800600a <_dtoa_r+0x972>
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 fa0d 	bl	8006370 <_Balloc>
 8005f56:	4680      	mov	r8, r0
 8005f58:	b928      	cbnz	r0, 8005f66 <_dtoa_r+0x8ce>
 8005f5a:	4b82      	ldr	r3, [pc, #520]	; (8006164 <_dtoa_r+0xacc>)
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005f62:	f7ff bbb1 	b.w	80056c8 <_dtoa_r+0x30>
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	3202      	adds	r2, #2
 8005f6a:	0092      	lsls	r2, r2, #2
 8005f6c:	f107 010c 	add.w	r1, r7, #12
 8005f70:	300c      	adds	r0, #12
 8005f72:	f001 ff3f 	bl	8007df4 <memcpy>
 8005f76:	2201      	movs	r2, #1
 8005f78:	4641      	mov	r1, r8
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f000 fc52 	bl	8006824 <__lshift>
 8005f80:	9b01      	ldr	r3, [sp, #4]
 8005f82:	3301      	adds	r3, #1
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	4453      	add	r3, sl
 8005f8a:	9308      	str	r3, [sp, #32]
 8005f8c:	9b02      	ldr	r3, [sp, #8]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	46b9      	mov	r9, r7
 8005f94:	9307      	str	r3, [sp, #28]
 8005f96:	4607      	mov	r7, r0
 8005f98:	9b04      	ldr	r3, [sp, #16]
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	9302      	str	r3, [sp, #8]
 8005fa2:	f7ff faef 	bl	8005584 <quorem>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	3330      	adds	r3, #48	; 0x30
 8005faa:	9005      	str	r0, [sp, #20]
 8005fac:	4649      	mov	r1, r9
 8005fae:	4628      	mov	r0, r5
 8005fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb2:	f000 fca3 	bl	80068fc <__mcmp>
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	4682      	mov	sl, r0
 8005fba:	4621      	mov	r1, r4
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f000 fcb9 	bl	8006934 <__mdiff>
 8005fc2:	68c2      	ldr	r2, [r0, #12]
 8005fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc6:	4680      	mov	r8, r0
 8005fc8:	bb0a      	cbnz	r2, 800600e <_dtoa_r+0x976>
 8005fca:	4601      	mov	r1, r0
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 fc95 	bl	80068fc <__mcmp>
 8005fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	4630      	mov	r0, r6
 8005fda:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005fde:	f000 fa07 	bl	80063f0 <_Bfree>
 8005fe2:	9b06      	ldr	r3, [sp, #24]
 8005fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fe6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005fea:	ea43 0102 	orr.w	r1, r3, r2
 8005fee:	9b07      	ldr	r3, [sp, #28]
 8005ff0:	4319      	orrs	r1, r3
 8005ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff4:	d10d      	bne.n	8006012 <_dtoa_r+0x97a>
 8005ff6:	2b39      	cmp	r3, #57	; 0x39
 8005ff8:	d029      	beq.n	800604e <_dtoa_r+0x9b6>
 8005ffa:	f1ba 0f00 	cmp.w	sl, #0
 8005ffe:	dd01      	ble.n	8006004 <_dtoa_r+0x96c>
 8006000:	9b05      	ldr	r3, [sp, #20]
 8006002:	3331      	adds	r3, #49	; 0x31
 8006004:	9a02      	ldr	r2, [sp, #8]
 8006006:	7013      	strb	r3, [r2, #0]
 8006008:	e775      	b.n	8005ef6 <_dtoa_r+0x85e>
 800600a:	4638      	mov	r0, r7
 800600c:	e7b8      	b.n	8005f80 <_dtoa_r+0x8e8>
 800600e:	2201      	movs	r2, #1
 8006010:	e7e1      	b.n	8005fd6 <_dtoa_r+0x93e>
 8006012:	f1ba 0f00 	cmp.w	sl, #0
 8006016:	db06      	blt.n	8006026 <_dtoa_r+0x98e>
 8006018:	9906      	ldr	r1, [sp, #24]
 800601a:	ea41 0a0a 	orr.w	sl, r1, sl
 800601e:	9907      	ldr	r1, [sp, #28]
 8006020:	ea5a 0a01 	orrs.w	sl, sl, r1
 8006024:	d120      	bne.n	8006068 <_dtoa_r+0x9d0>
 8006026:	2a00      	cmp	r2, #0
 8006028:	ddec      	ble.n	8006004 <_dtoa_r+0x96c>
 800602a:	4629      	mov	r1, r5
 800602c:	2201      	movs	r2, #1
 800602e:	4630      	mov	r0, r6
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	f000 fbf7 	bl	8006824 <__lshift>
 8006036:	4621      	mov	r1, r4
 8006038:	4605      	mov	r5, r0
 800603a:	f000 fc5f 	bl	80068fc <__mcmp>
 800603e:	2800      	cmp	r0, #0
 8006040:	9b04      	ldr	r3, [sp, #16]
 8006042:	dc02      	bgt.n	800604a <_dtoa_r+0x9b2>
 8006044:	d1de      	bne.n	8006004 <_dtoa_r+0x96c>
 8006046:	07da      	lsls	r2, r3, #31
 8006048:	d5dc      	bpl.n	8006004 <_dtoa_r+0x96c>
 800604a:	2b39      	cmp	r3, #57	; 0x39
 800604c:	d1d8      	bne.n	8006000 <_dtoa_r+0x968>
 800604e:	9a02      	ldr	r2, [sp, #8]
 8006050:	2339      	movs	r3, #57	; 0x39
 8006052:	7013      	strb	r3, [r2, #0]
 8006054:	4643      	mov	r3, r8
 8006056:	4698      	mov	r8, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800605e:	2a39      	cmp	r2, #57	; 0x39
 8006060:	d051      	beq.n	8006106 <_dtoa_r+0xa6e>
 8006062:	3201      	adds	r2, #1
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	e746      	b.n	8005ef6 <_dtoa_r+0x85e>
 8006068:	2a00      	cmp	r2, #0
 800606a:	dd03      	ble.n	8006074 <_dtoa_r+0x9dc>
 800606c:	2b39      	cmp	r3, #57	; 0x39
 800606e:	d0ee      	beq.n	800604e <_dtoa_r+0x9b6>
 8006070:	3301      	adds	r3, #1
 8006072:	e7c7      	b.n	8006004 <_dtoa_r+0x96c>
 8006074:	9a04      	ldr	r2, [sp, #16]
 8006076:	9908      	ldr	r1, [sp, #32]
 8006078:	f802 3c01 	strb.w	r3, [r2, #-1]
 800607c:	428a      	cmp	r2, r1
 800607e:	d02b      	beq.n	80060d8 <_dtoa_r+0xa40>
 8006080:	4629      	mov	r1, r5
 8006082:	2300      	movs	r3, #0
 8006084:	220a      	movs	r2, #10
 8006086:	4630      	mov	r0, r6
 8006088:	f000 f9d4 	bl	8006434 <__multadd>
 800608c:	45b9      	cmp	r9, r7
 800608e:	4605      	mov	r5, r0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	f04f 020a 	mov.w	r2, #10
 8006098:	4649      	mov	r1, r9
 800609a:	4630      	mov	r0, r6
 800609c:	d107      	bne.n	80060ae <_dtoa_r+0xa16>
 800609e:	f000 f9c9 	bl	8006434 <__multadd>
 80060a2:	4681      	mov	r9, r0
 80060a4:	4607      	mov	r7, r0
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	3301      	adds	r3, #1
 80060aa:	9304      	str	r3, [sp, #16]
 80060ac:	e774      	b.n	8005f98 <_dtoa_r+0x900>
 80060ae:	f000 f9c1 	bl	8006434 <__multadd>
 80060b2:	4639      	mov	r1, r7
 80060b4:	4681      	mov	r9, r0
 80060b6:	2300      	movs	r3, #0
 80060b8:	220a      	movs	r2, #10
 80060ba:	4630      	mov	r0, r6
 80060bc:	f000 f9ba 	bl	8006434 <__multadd>
 80060c0:	4607      	mov	r7, r0
 80060c2:	e7f0      	b.n	80060a6 <_dtoa_r+0xa0e>
 80060c4:	f1ba 0f00 	cmp.w	sl, #0
 80060c8:	9a01      	ldr	r2, [sp, #4]
 80060ca:	bfcc      	ite	gt
 80060cc:	46d0      	movgt	r8, sl
 80060ce:	f04f 0801 	movle.w	r8, #1
 80060d2:	4490      	add	r8, r2
 80060d4:	f04f 0900 	mov.w	r9, #0
 80060d8:	4629      	mov	r1, r5
 80060da:	2201      	movs	r2, #1
 80060dc:	4630      	mov	r0, r6
 80060de:	9302      	str	r3, [sp, #8]
 80060e0:	f000 fba0 	bl	8006824 <__lshift>
 80060e4:	4621      	mov	r1, r4
 80060e6:	4605      	mov	r5, r0
 80060e8:	f000 fc08 	bl	80068fc <__mcmp>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	dcb1      	bgt.n	8006054 <_dtoa_r+0x9bc>
 80060f0:	d102      	bne.n	80060f8 <_dtoa_r+0xa60>
 80060f2:	9b02      	ldr	r3, [sp, #8]
 80060f4:	07db      	lsls	r3, r3, #31
 80060f6:	d4ad      	bmi.n	8006054 <_dtoa_r+0x9bc>
 80060f8:	4643      	mov	r3, r8
 80060fa:	4698      	mov	r8, r3
 80060fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006100:	2a30      	cmp	r2, #48	; 0x30
 8006102:	d0fa      	beq.n	80060fa <_dtoa_r+0xa62>
 8006104:	e6f7      	b.n	8005ef6 <_dtoa_r+0x85e>
 8006106:	9a01      	ldr	r2, [sp, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d1a4      	bne.n	8006056 <_dtoa_r+0x9be>
 800610c:	f10b 0b01 	add.w	fp, fp, #1
 8006110:	2331      	movs	r3, #49	; 0x31
 8006112:	e778      	b.n	8006006 <_dtoa_r+0x96e>
 8006114:	4b14      	ldr	r3, [pc, #80]	; (8006168 <_dtoa_r+0xad0>)
 8006116:	f7ff bb2a 	b.w	800576e <_dtoa_r+0xd6>
 800611a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800611c:	2b00      	cmp	r3, #0
 800611e:	f47f ab05 	bne.w	800572c <_dtoa_r+0x94>
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <_dtoa_r+0xad4>)
 8006124:	f7ff bb23 	b.w	800576e <_dtoa_r+0xd6>
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	dc03      	bgt.n	8006136 <_dtoa_r+0xa9e>
 800612e:	9b06      	ldr	r3, [sp, #24]
 8006130:	2b02      	cmp	r3, #2
 8006132:	f73f aec8 	bgt.w	8005ec6 <_dtoa_r+0x82e>
 8006136:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800613a:	4621      	mov	r1, r4
 800613c:	4628      	mov	r0, r5
 800613e:	f7ff fa21 	bl	8005584 <quorem>
 8006142:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006146:	f808 3b01 	strb.w	r3, [r8], #1
 800614a:	9a01      	ldr	r2, [sp, #4]
 800614c:	eba8 0202 	sub.w	r2, r8, r2
 8006150:	4592      	cmp	sl, r2
 8006152:	ddb7      	ble.n	80060c4 <_dtoa_r+0xa2c>
 8006154:	4629      	mov	r1, r5
 8006156:	2300      	movs	r3, #0
 8006158:	220a      	movs	r2, #10
 800615a:	4630      	mov	r0, r6
 800615c:	f000 f96a 	bl	8006434 <__multadd>
 8006160:	4605      	mov	r5, r0
 8006162:	e7ea      	b.n	800613a <_dtoa_r+0xaa2>
 8006164:	080099ad 	.word	0x080099ad
 8006168:	08009908 	.word	0x08009908
 800616c:	08009931 	.word	0x08009931

08006170 <_free_r>:
 8006170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006172:	2900      	cmp	r1, #0
 8006174:	d044      	beq.n	8006200 <_free_r+0x90>
 8006176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800617a:	9001      	str	r0, [sp, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f1a1 0404 	sub.w	r4, r1, #4
 8006182:	bfb8      	it	lt
 8006184:	18e4      	addlt	r4, r4, r3
 8006186:	f000 f8e7 	bl	8006358 <__malloc_lock>
 800618a:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <_free_r+0x94>)
 800618c:	9801      	ldr	r0, [sp, #4]
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	b933      	cbnz	r3, 80061a0 <_free_r+0x30>
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	6014      	str	r4, [r2, #0]
 8006196:	b003      	add	sp, #12
 8006198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800619c:	f000 b8e2 	b.w	8006364 <__malloc_unlock>
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d908      	bls.n	80061b6 <_free_r+0x46>
 80061a4:	6825      	ldr	r5, [r4, #0]
 80061a6:	1961      	adds	r1, r4, r5
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf01      	itttt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	1949      	addeq	r1, r1, r5
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	e7ed      	b.n	8006192 <_free_r+0x22>
 80061b6:	461a      	mov	r2, r3
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b10b      	cbz	r3, 80061c0 <_free_r+0x50>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d9fa      	bls.n	80061b6 <_free_r+0x46>
 80061c0:	6811      	ldr	r1, [r2, #0]
 80061c2:	1855      	adds	r5, r2, r1
 80061c4:	42a5      	cmp	r5, r4
 80061c6:	d10b      	bne.n	80061e0 <_free_r+0x70>
 80061c8:	6824      	ldr	r4, [r4, #0]
 80061ca:	4421      	add	r1, r4
 80061cc:	1854      	adds	r4, r2, r1
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	d1e0      	bne.n	8006196 <_free_r+0x26>
 80061d4:	681c      	ldr	r4, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	6053      	str	r3, [r2, #4]
 80061da:	440c      	add	r4, r1
 80061dc:	6014      	str	r4, [r2, #0]
 80061de:	e7da      	b.n	8006196 <_free_r+0x26>
 80061e0:	d902      	bls.n	80061e8 <_free_r+0x78>
 80061e2:	230c      	movs	r3, #12
 80061e4:	6003      	str	r3, [r0, #0]
 80061e6:	e7d6      	b.n	8006196 <_free_r+0x26>
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf04      	itt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	bf04      	itt	eq
 80061f8:	1949      	addeq	r1, r1, r5
 80061fa:	6021      	streq	r1, [r4, #0]
 80061fc:	6054      	str	r4, [r2, #4]
 80061fe:	e7ca      	b.n	8006196 <_free_r+0x26>
 8006200:	b003      	add	sp, #12
 8006202:	bd30      	pop	{r4, r5, pc}
 8006204:	200008b0 	.word	0x200008b0

08006208 <malloc>:
 8006208:	4b02      	ldr	r3, [pc, #8]	; (8006214 <malloc+0xc>)
 800620a:	4601      	mov	r1, r0
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	f000 b823 	b.w	8006258 <_malloc_r>
 8006212:	bf00      	nop
 8006214:	2000006c 	.word	0x2000006c

08006218 <sbrk_aligned>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4e0e      	ldr	r6, [pc, #56]	; (8006254 <sbrk_aligned+0x3c>)
 800621c:	460c      	mov	r4, r1
 800621e:	6831      	ldr	r1, [r6, #0]
 8006220:	4605      	mov	r5, r0
 8006222:	b911      	cbnz	r1, 800622a <sbrk_aligned+0x12>
 8006224:	f001 fdd6 	bl	8007dd4 <_sbrk_r>
 8006228:	6030      	str	r0, [r6, #0]
 800622a:	4621      	mov	r1, r4
 800622c:	4628      	mov	r0, r5
 800622e:	f001 fdd1 	bl	8007dd4 <_sbrk_r>
 8006232:	1c43      	adds	r3, r0, #1
 8006234:	d00a      	beq.n	800624c <sbrk_aligned+0x34>
 8006236:	1cc4      	adds	r4, r0, #3
 8006238:	f024 0403 	bic.w	r4, r4, #3
 800623c:	42a0      	cmp	r0, r4
 800623e:	d007      	beq.n	8006250 <sbrk_aligned+0x38>
 8006240:	1a21      	subs	r1, r4, r0
 8006242:	4628      	mov	r0, r5
 8006244:	f001 fdc6 	bl	8007dd4 <_sbrk_r>
 8006248:	3001      	adds	r0, #1
 800624a:	d101      	bne.n	8006250 <sbrk_aligned+0x38>
 800624c:	f04f 34ff 	mov.w	r4, #4294967295
 8006250:	4620      	mov	r0, r4
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	200008b4 	.word	0x200008b4

08006258 <_malloc_r>:
 8006258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800625c:	1ccd      	adds	r5, r1, #3
 800625e:	f025 0503 	bic.w	r5, r5, #3
 8006262:	3508      	adds	r5, #8
 8006264:	2d0c      	cmp	r5, #12
 8006266:	bf38      	it	cc
 8006268:	250c      	movcc	r5, #12
 800626a:	2d00      	cmp	r5, #0
 800626c:	4607      	mov	r7, r0
 800626e:	db01      	blt.n	8006274 <_malloc_r+0x1c>
 8006270:	42a9      	cmp	r1, r5
 8006272:	d905      	bls.n	8006280 <_malloc_r+0x28>
 8006274:	230c      	movs	r3, #12
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	2600      	movs	r6, #0
 800627a:	4630      	mov	r0, r6
 800627c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006280:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006354 <_malloc_r+0xfc>
 8006284:	f000 f868 	bl	8006358 <__malloc_lock>
 8006288:	f8d8 3000 	ldr.w	r3, [r8]
 800628c:	461c      	mov	r4, r3
 800628e:	bb5c      	cbnz	r4, 80062e8 <_malloc_r+0x90>
 8006290:	4629      	mov	r1, r5
 8006292:	4638      	mov	r0, r7
 8006294:	f7ff ffc0 	bl	8006218 <sbrk_aligned>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	4604      	mov	r4, r0
 800629c:	d155      	bne.n	800634a <_malloc_r+0xf2>
 800629e:	f8d8 4000 	ldr.w	r4, [r8]
 80062a2:	4626      	mov	r6, r4
 80062a4:	2e00      	cmp	r6, #0
 80062a6:	d145      	bne.n	8006334 <_malloc_r+0xdc>
 80062a8:	2c00      	cmp	r4, #0
 80062aa:	d048      	beq.n	800633e <_malloc_r+0xe6>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	4631      	mov	r1, r6
 80062b0:	4638      	mov	r0, r7
 80062b2:	eb04 0903 	add.w	r9, r4, r3
 80062b6:	f001 fd8d 	bl	8007dd4 <_sbrk_r>
 80062ba:	4581      	cmp	r9, r0
 80062bc:	d13f      	bne.n	800633e <_malloc_r+0xe6>
 80062be:	6821      	ldr	r1, [r4, #0]
 80062c0:	1a6d      	subs	r5, r5, r1
 80062c2:	4629      	mov	r1, r5
 80062c4:	4638      	mov	r0, r7
 80062c6:	f7ff ffa7 	bl	8006218 <sbrk_aligned>
 80062ca:	3001      	adds	r0, #1
 80062cc:	d037      	beq.n	800633e <_malloc_r+0xe6>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	442b      	add	r3, r5
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	f8d8 3000 	ldr.w	r3, [r8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d038      	beq.n	800634e <_malloc_r+0xf6>
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	42a2      	cmp	r2, r4
 80062e0:	d12b      	bne.n	800633a <_malloc_r+0xe2>
 80062e2:	2200      	movs	r2, #0
 80062e4:	605a      	str	r2, [r3, #4]
 80062e6:	e00f      	b.n	8006308 <_malloc_r+0xb0>
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	1b52      	subs	r2, r2, r5
 80062ec:	d41f      	bmi.n	800632e <_malloc_r+0xd6>
 80062ee:	2a0b      	cmp	r2, #11
 80062f0:	d917      	bls.n	8006322 <_malloc_r+0xca>
 80062f2:	1961      	adds	r1, r4, r5
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	6025      	str	r5, [r4, #0]
 80062f8:	bf18      	it	ne
 80062fa:	6059      	strne	r1, [r3, #4]
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	bf08      	it	eq
 8006300:	f8c8 1000 	streq.w	r1, [r8]
 8006304:	5162      	str	r2, [r4, r5]
 8006306:	604b      	str	r3, [r1, #4]
 8006308:	4638      	mov	r0, r7
 800630a:	f104 060b 	add.w	r6, r4, #11
 800630e:	f000 f829 	bl	8006364 <__malloc_unlock>
 8006312:	f026 0607 	bic.w	r6, r6, #7
 8006316:	1d23      	adds	r3, r4, #4
 8006318:	1af2      	subs	r2, r6, r3
 800631a:	d0ae      	beq.n	800627a <_malloc_r+0x22>
 800631c:	1b9b      	subs	r3, r3, r6
 800631e:	50a3      	str	r3, [r4, r2]
 8006320:	e7ab      	b.n	800627a <_malloc_r+0x22>
 8006322:	42a3      	cmp	r3, r4
 8006324:	6862      	ldr	r2, [r4, #4]
 8006326:	d1dd      	bne.n	80062e4 <_malloc_r+0x8c>
 8006328:	f8c8 2000 	str.w	r2, [r8]
 800632c:	e7ec      	b.n	8006308 <_malloc_r+0xb0>
 800632e:	4623      	mov	r3, r4
 8006330:	6864      	ldr	r4, [r4, #4]
 8006332:	e7ac      	b.n	800628e <_malloc_r+0x36>
 8006334:	4634      	mov	r4, r6
 8006336:	6876      	ldr	r6, [r6, #4]
 8006338:	e7b4      	b.n	80062a4 <_malloc_r+0x4c>
 800633a:	4613      	mov	r3, r2
 800633c:	e7cc      	b.n	80062d8 <_malloc_r+0x80>
 800633e:	230c      	movs	r3, #12
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	4638      	mov	r0, r7
 8006344:	f000 f80e 	bl	8006364 <__malloc_unlock>
 8006348:	e797      	b.n	800627a <_malloc_r+0x22>
 800634a:	6025      	str	r5, [r4, #0]
 800634c:	e7dc      	b.n	8006308 <_malloc_r+0xb0>
 800634e:	605b      	str	r3, [r3, #4]
 8006350:	deff      	udf	#255	; 0xff
 8006352:	bf00      	nop
 8006354:	200008b0 	.word	0x200008b0

08006358 <__malloc_lock>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__malloc_lock+0x8>)
 800635a:	f7ff b90a 	b.w	8005572 <__retarget_lock_acquire_recursive>
 800635e:	bf00      	nop
 8006360:	200008ac 	.word	0x200008ac

08006364 <__malloc_unlock>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__malloc_unlock+0x8>)
 8006366:	f7ff b905 	b.w	8005574 <__retarget_lock_release_recursive>
 800636a:	bf00      	nop
 800636c:	200008ac 	.word	0x200008ac

08006370 <_Balloc>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	69c6      	ldr	r6, [r0, #28]
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	b976      	cbnz	r6, 8006398 <_Balloc+0x28>
 800637a:	2010      	movs	r0, #16
 800637c:	f7ff ff44 	bl	8006208 <malloc>
 8006380:	4602      	mov	r2, r0
 8006382:	61e0      	str	r0, [r4, #28]
 8006384:	b920      	cbnz	r0, 8006390 <_Balloc+0x20>
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <_Balloc+0x78>)
 8006388:	4818      	ldr	r0, [pc, #96]	; (80063ec <_Balloc+0x7c>)
 800638a:	216b      	movs	r1, #107	; 0x6b
 800638c:	f001 fd48 	bl	8007e20 <__assert_func>
 8006390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006394:	6006      	str	r6, [r0, #0]
 8006396:	60c6      	str	r6, [r0, #12]
 8006398:	69e6      	ldr	r6, [r4, #28]
 800639a:	68f3      	ldr	r3, [r6, #12]
 800639c:	b183      	cbz	r3, 80063c0 <_Balloc+0x50>
 800639e:	69e3      	ldr	r3, [r4, #28]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063a6:	b9b8      	cbnz	r0, 80063d8 <_Balloc+0x68>
 80063a8:	2101      	movs	r1, #1
 80063aa:	fa01 f605 	lsl.w	r6, r1, r5
 80063ae:	1d72      	adds	r2, r6, #5
 80063b0:	0092      	lsls	r2, r2, #2
 80063b2:	4620      	mov	r0, r4
 80063b4:	f001 fd52 	bl	8007e5c <_calloc_r>
 80063b8:	b160      	cbz	r0, 80063d4 <_Balloc+0x64>
 80063ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063be:	e00e      	b.n	80063de <_Balloc+0x6e>
 80063c0:	2221      	movs	r2, #33	; 0x21
 80063c2:	2104      	movs	r1, #4
 80063c4:	4620      	mov	r0, r4
 80063c6:	f001 fd49 	bl	8007e5c <_calloc_r>
 80063ca:	69e3      	ldr	r3, [r4, #28]
 80063cc:	60f0      	str	r0, [r6, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e4      	bne.n	800639e <_Balloc+0x2e>
 80063d4:	2000      	movs	r0, #0
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	6802      	ldr	r2, [r0, #0]
 80063da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063de:	2300      	movs	r3, #0
 80063e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063e4:	e7f7      	b.n	80063d6 <_Balloc+0x66>
 80063e6:	bf00      	nop
 80063e8:	0800993e 	.word	0x0800993e
 80063ec:	080099be 	.word	0x080099be

080063f0 <_Bfree>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	69c6      	ldr	r6, [r0, #28]
 80063f4:	4605      	mov	r5, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	b976      	cbnz	r6, 8006418 <_Bfree+0x28>
 80063fa:	2010      	movs	r0, #16
 80063fc:	f7ff ff04 	bl	8006208 <malloc>
 8006400:	4602      	mov	r2, r0
 8006402:	61e8      	str	r0, [r5, #28]
 8006404:	b920      	cbnz	r0, 8006410 <_Bfree+0x20>
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <_Bfree+0x3c>)
 8006408:	4809      	ldr	r0, [pc, #36]	; (8006430 <_Bfree+0x40>)
 800640a:	218f      	movs	r1, #143	; 0x8f
 800640c:	f001 fd08 	bl	8007e20 <__assert_func>
 8006410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006414:	6006      	str	r6, [r0, #0]
 8006416:	60c6      	str	r6, [r0, #12]
 8006418:	b13c      	cbz	r4, 800642a <_Bfree+0x3a>
 800641a:	69eb      	ldr	r3, [r5, #28]
 800641c:	6862      	ldr	r2, [r4, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006424:	6021      	str	r1, [r4, #0]
 8006426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	0800993e 	.word	0x0800993e
 8006430:	080099be 	.word	0x080099be

08006434 <__multadd>:
 8006434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006438:	690d      	ldr	r5, [r1, #16]
 800643a:	4607      	mov	r7, r0
 800643c:	460c      	mov	r4, r1
 800643e:	461e      	mov	r6, r3
 8006440:	f101 0c14 	add.w	ip, r1, #20
 8006444:	2000      	movs	r0, #0
 8006446:	f8dc 3000 	ldr.w	r3, [ip]
 800644a:	b299      	uxth	r1, r3
 800644c:	fb02 6101 	mla	r1, r2, r1, r6
 8006450:	0c1e      	lsrs	r6, r3, #16
 8006452:	0c0b      	lsrs	r3, r1, #16
 8006454:	fb02 3306 	mla	r3, r2, r6, r3
 8006458:	b289      	uxth	r1, r1
 800645a:	3001      	adds	r0, #1
 800645c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006460:	4285      	cmp	r5, r0
 8006462:	f84c 1b04 	str.w	r1, [ip], #4
 8006466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800646a:	dcec      	bgt.n	8006446 <__multadd+0x12>
 800646c:	b30e      	cbz	r6, 80064b2 <__multadd+0x7e>
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	42ab      	cmp	r3, r5
 8006472:	dc19      	bgt.n	80064a8 <__multadd+0x74>
 8006474:	6861      	ldr	r1, [r4, #4]
 8006476:	4638      	mov	r0, r7
 8006478:	3101      	adds	r1, #1
 800647a:	f7ff ff79 	bl	8006370 <_Balloc>
 800647e:	4680      	mov	r8, r0
 8006480:	b928      	cbnz	r0, 800648e <__multadd+0x5a>
 8006482:	4602      	mov	r2, r0
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <__multadd+0x84>)
 8006486:	480d      	ldr	r0, [pc, #52]	; (80064bc <__multadd+0x88>)
 8006488:	21ba      	movs	r1, #186	; 0xba
 800648a:	f001 fcc9 	bl	8007e20 <__assert_func>
 800648e:	6922      	ldr	r2, [r4, #16]
 8006490:	3202      	adds	r2, #2
 8006492:	f104 010c 	add.w	r1, r4, #12
 8006496:	0092      	lsls	r2, r2, #2
 8006498:	300c      	adds	r0, #12
 800649a:	f001 fcab 	bl	8007df4 <memcpy>
 800649e:	4621      	mov	r1, r4
 80064a0:	4638      	mov	r0, r7
 80064a2:	f7ff ffa5 	bl	80063f0 <_Bfree>
 80064a6:	4644      	mov	r4, r8
 80064a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064ac:	3501      	adds	r5, #1
 80064ae:	615e      	str	r6, [r3, #20]
 80064b0:	6125      	str	r5, [r4, #16]
 80064b2:	4620      	mov	r0, r4
 80064b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b8:	080099ad 	.word	0x080099ad
 80064bc:	080099be 	.word	0x080099be

080064c0 <__s2b>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	460c      	mov	r4, r1
 80064c6:	4615      	mov	r5, r2
 80064c8:	461f      	mov	r7, r3
 80064ca:	2209      	movs	r2, #9
 80064cc:	3308      	adds	r3, #8
 80064ce:	4606      	mov	r6, r0
 80064d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064d4:	2100      	movs	r1, #0
 80064d6:	2201      	movs	r2, #1
 80064d8:	429a      	cmp	r2, r3
 80064da:	db09      	blt.n	80064f0 <__s2b+0x30>
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff ff47 	bl	8006370 <_Balloc>
 80064e2:	b940      	cbnz	r0, 80064f6 <__s2b+0x36>
 80064e4:	4602      	mov	r2, r0
 80064e6:	4b19      	ldr	r3, [pc, #100]	; (800654c <__s2b+0x8c>)
 80064e8:	4819      	ldr	r0, [pc, #100]	; (8006550 <__s2b+0x90>)
 80064ea:	21d3      	movs	r1, #211	; 0xd3
 80064ec:	f001 fc98 	bl	8007e20 <__assert_func>
 80064f0:	0052      	lsls	r2, r2, #1
 80064f2:	3101      	adds	r1, #1
 80064f4:	e7f0      	b.n	80064d8 <__s2b+0x18>
 80064f6:	9b08      	ldr	r3, [sp, #32]
 80064f8:	6143      	str	r3, [r0, #20]
 80064fa:	2d09      	cmp	r5, #9
 80064fc:	f04f 0301 	mov.w	r3, #1
 8006500:	6103      	str	r3, [r0, #16]
 8006502:	dd16      	ble.n	8006532 <__s2b+0x72>
 8006504:	f104 0909 	add.w	r9, r4, #9
 8006508:	46c8      	mov	r8, r9
 800650a:	442c      	add	r4, r5
 800650c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006510:	4601      	mov	r1, r0
 8006512:	3b30      	subs	r3, #48	; 0x30
 8006514:	220a      	movs	r2, #10
 8006516:	4630      	mov	r0, r6
 8006518:	f7ff ff8c 	bl	8006434 <__multadd>
 800651c:	45a0      	cmp	r8, r4
 800651e:	d1f5      	bne.n	800650c <__s2b+0x4c>
 8006520:	f1a5 0408 	sub.w	r4, r5, #8
 8006524:	444c      	add	r4, r9
 8006526:	1b2d      	subs	r5, r5, r4
 8006528:	1963      	adds	r3, r4, r5
 800652a:	42bb      	cmp	r3, r7
 800652c:	db04      	blt.n	8006538 <__s2b+0x78>
 800652e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006532:	340a      	adds	r4, #10
 8006534:	2509      	movs	r5, #9
 8006536:	e7f6      	b.n	8006526 <__s2b+0x66>
 8006538:	f814 3b01 	ldrb.w	r3, [r4], #1
 800653c:	4601      	mov	r1, r0
 800653e:	3b30      	subs	r3, #48	; 0x30
 8006540:	220a      	movs	r2, #10
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff ff76 	bl	8006434 <__multadd>
 8006548:	e7ee      	b.n	8006528 <__s2b+0x68>
 800654a:	bf00      	nop
 800654c:	080099ad 	.word	0x080099ad
 8006550:	080099be 	.word	0x080099be

08006554 <__hi0bits>:
 8006554:	0c03      	lsrs	r3, r0, #16
 8006556:	041b      	lsls	r3, r3, #16
 8006558:	b9d3      	cbnz	r3, 8006590 <__hi0bits+0x3c>
 800655a:	0400      	lsls	r0, r0, #16
 800655c:	2310      	movs	r3, #16
 800655e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006562:	bf04      	itt	eq
 8006564:	0200      	lsleq	r0, r0, #8
 8006566:	3308      	addeq	r3, #8
 8006568:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800656c:	bf04      	itt	eq
 800656e:	0100      	lsleq	r0, r0, #4
 8006570:	3304      	addeq	r3, #4
 8006572:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006576:	bf04      	itt	eq
 8006578:	0080      	lsleq	r0, r0, #2
 800657a:	3302      	addeq	r3, #2
 800657c:	2800      	cmp	r0, #0
 800657e:	db05      	blt.n	800658c <__hi0bits+0x38>
 8006580:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006584:	f103 0301 	add.w	r3, r3, #1
 8006588:	bf08      	it	eq
 800658a:	2320      	moveq	r3, #32
 800658c:	4618      	mov	r0, r3
 800658e:	4770      	bx	lr
 8006590:	2300      	movs	r3, #0
 8006592:	e7e4      	b.n	800655e <__hi0bits+0xa>

08006594 <__lo0bits>:
 8006594:	6803      	ldr	r3, [r0, #0]
 8006596:	f013 0207 	ands.w	r2, r3, #7
 800659a:	d00c      	beq.n	80065b6 <__lo0bits+0x22>
 800659c:	07d9      	lsls	r1, r3, #31
 800659e:	d422      	bmi.n	80065e6 <__lo0bits+0x52>
 80065a0:	079a      	lsls	r2, r3, #30
 80065a2:	bf49      	itett	mi
 80065a4:	085b      	lsrmi	r3, r3, #1
 80065a6:	089b      	lsrpl	r3, r3, #2
 80065a8:	6003      	strmi	r3, [r0, #0]
 80065aa:	2201      	movmi	r2, #1
 80065ac:	bf5c      	itt	pl
 80065ae:	6003      	strpl	r3, [r0, #0]
 80065b0:	2202      	movpl	r2, #2
 80065b2:	4610      	mov	r0, r2
 80065b4:	4770      	bx	lr
 80065b6:	b299      	uxth	r1, r3
 80065b8:	b909      	cbnz	r1, 80065be <__lo0bits+0x2a>
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	2210      	movs	r2, #16
 80065be:	b2d9      	uxtb	r1, r3
 80065c0:	b909      	cbnz	r1, 80065c6 <__lo0bits+0x32>
 80065c2:	3208      	adds	r2, #8
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	0719      	lsls	r1, r3, #28
 80065c8:	bf04      	itt	eq
 80065ca:	091b      	lsreq	r3, r3, #4
 80065cc:	3204      	addeq	r2, #4
 80065ce:	0799      	lsls	r1, r3, #30
 80065d0:	bf04      	itt	eq
 80065d2:	089b      	lsreq	r3, r3, #2
 80065d4:	3202      	addeq	r2, #2
 80065d6:	07d9      	lsls	r1, r3, #31
 80065d8:	d403      	bmi.n	80065e2 <__lo0bits+0x4e>
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	f102 0201 	add.w	r2, r2, #1
 80065e0:	d003      	beq.n	80065ea <__lo0bits+0x56>
 80065e2:	6003      	str	r3, [r0, #0]
 80065e4:	e7e5      	b.n	80065b2 <__lo0bits+0x1e>
 80065e6:	2200      	movs	r2, #0
 80065e8:	e7e3      	b.n	80065b2 <__lo0bits+0x1e>
 80065ea:	2220      	movs	r2, #32
 80065ec:	e7e1      	b.n	80065b2 <__lo0bits+0x1e>
	...

080065f0 <__i2b>:
 80065f0:	b510      	push	{r4, lr}
 80065f2:	460c      	mov	r4, r1
 80065f4:	2101      	movs	r1, #1
 80065f6:	f7ff febb 	bl	8006370 <_Balloc>
 80065fa:	4602      	mov	r2, r0
 80065fc:	b928      	cbnz	r0, 800660a <__i2b+0x1a>
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <__i2b+0x24>)
 8006600:	4805      	ldr	r0, [pc, #20]	; (8006618 <__i2b+0x28>)
 8006602:	f240 1145 	movw	r1, #325	; 0x145
 8006606:	f001 fc0b 	bl	8007e20 <__assert_func>
 800660a:	2301      	movs	r3, #1
 800660c:	6144      	str	r4, [r0, #20]
 800660e:	6103      	str	r3, [r0, #16]
 8006610:	bd10      	pop	{r4, pc}
 8006612:	bf00      	nop
 8006614:	080099ad 	.word	0x080099ad
 8006618:	080099be 	.word	0x080099be

0800661c <__multiply>:
 800661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	4691      	mov	r9, r2
 8006622:	690a      	ldr	r2, [r1, #16]
 8006624:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006628:	429a      	cmp	r2, r3
 800662a:	bfb8      	it	lt
 800662c:	460b      	movlt	r3, r1
 800662e:	460c      	mov	r4, r1
 8006630:	bfbc      	itt	lt
 8006632:	464c      	movlt	r4, r9
 8006634:	4699      	movlt	r9, r3
 8006636:	6927      	ldr	r7, [r4, #16]
 8006638:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	6861      	ldr	r1, [r4, #4]
 8006640:	eb07 060a 	add.w	r6, r7, sl
 8006644:	42b3      	cmp	r3, r6
 8006646:	b085      	sub	sp, #20
 8006648:	bfb8      	it	lt
 800664a:	3101      	addlt	r1, #1
 800664c:	f7ff fe90 	bl	8006370 <_Balloc>
 8006650:	b930      	cbnz	r0, 8006660 <__multiply+0x44>
 8006652:	4602      	mov	r2, r0
 8006654:	4b44      	ldr	r3, [pc, #272]	; (8006768 <__multiply+0x14c>)
 8006656:	4845      	ldr	r0, [pc, #276]	; (800676c <__multiply+0x150>)
 8006658:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800665c:	f001 fbe0 	bl	8007e20 <__assert_func>
 8006660:	f100 0514 	add.w	r5, r0, #20
 8006664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006668:	462b      	mov	r3, r5
 800666a:	2200      	movs	r2, #0
 800666c:	4543      	cmp	r3, r8
 800666e:	d321      	bcc.n	80066b4 <__multiply+0x98>
 8006670:	f104 0314 	add.w	r3, r4, #20
 8006674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006678:	f109 0314 	add.w	r3, r9, #20
 800667c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006680:	9202      	str	r2, [sp, #8]
 8006682:	1b3a      	subs	r2, r7, r4
 8006684:	3a15      	subs	r2, #21
 8006686:	f022 0203 	bic.w	r2, r2, #3
 800668a:	3204      	adds	r2, #4
 800668c:	f104 0115 	add.w	r1, r4, #21
 8006690:	428f      	cmp	r7, r1
 8006692:	bf38      	it	cc
 8006694:	2204      	movcc	r2, #4
 8006696:	9201      	str	r2, [sp, #4]
 8006698:	9a02      	ldr	r2, [sp, #8]
 800669a:	9303      	str	r3, [sp, #12]
 800669c:	429a      	cmp	r2, r3
 800669e:	d80c      	bhi.n	80066ba <__multiply+0x9e>
 80066a0:	2e00      	cmp	r6, #0
 80066a2:	dd03      	ble.n	80066ac <__multiply+0x90>
 80066a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05b      	beq.n	8006764 <__multiply+0x148>
 80066ac:	6106      	str	r6, [r0, #16]
 80066ae:	b005      	add	sp, #20
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b4:	f843 2b04 	str.w	r2, [r3], #4
 80066b8:	e7d8      	b.n	800666c <__multiply+0x50>
 80066ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80066be:	f1ba 0f00 	cmp.w	sl, #0
 80066c2:	d024      	beq.n	800670e <__multiply+0xf2>
 80066c4:	f104 0e14 	add.w	lr, r4, #20
 80066c8:	46a9      	mov	r9, r5
 80066ca:	f04f 0c00 	mov.w	ip, #0
 80066ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066d2:	f8d9 1000 	ldr.w	r1, [r9]
 80066d6:	fa1f fb82 	uxth.w	fp, r2
 80066da:	b289      	uxth	r1, r1
 80066dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80066e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80066e4:	f8d9 2000 	ldr.w	r2, [r9]
 80066e8:	4461      	add	r1, ip
 80066ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80066f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066f6:	b289      	uxth	r1, r1
 80066f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066fc:	4577      	cmp	r7, lr
 80066fe:	f849 1b04 	str.w	r1, [r9], #4
 8006702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006706:	d8e2      	bhi.n	80066ce <__multiply+0xb2>
 8006708:	9a01      	ldr	r2, [sp, #4]
 800670a:	f845 c002 	str.w	ip, [r5, r2]
 800670e:	9a03      	ldr	r2, [sp, #12]
 8006710:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006714:	3304      	adds	r3, #4
 8006716:	f1b9 0f00 	cmp.w	r9, #0
 800671a:	d021      	beq.n	8006760 <__multiply+0x144>
 800671c:	6829      	ldr	r1, [r5, #0]
 800671e:	f104 0c14 	add.w	ip, r4, #20
 8006722:	46ae      	mov	lr, r5
 8006724:	f04f 0a00 	mov.w	sl, #0
 8006728:	f8bc b000 	ldrh.w	fp, [ip]
 800672c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006730:	fb09 220b 	mla	r2, r9, fp, r2
 8006734:	4452      	add	r2, sl
 8006736:	b289      	uxth	r1, r1
 8006738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800673c:	f84e 1b04 	str.w	r1, [lr], #4
 8006740:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006744:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006748:	f8be 1000 	ldrh.w	r1, [lr]
 800674c:	fb09 110a 	mla	r1, r9, sl, r1
 8006750:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006754:	4567      	cmp	r7, ip
 8006756:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800675a:	d8e5      	bhi.n	8006728 <__multiply+0x10c>
 800675c:	9a01      	ldr	r2, [sp, #4]
 800675e:	50a9      	str	r1, [r5, r2]
 8006760:	3504      	adds	r5, #4
 8006762:	e799      	b.n	8006698 <__multiply+0x7c>
 8006764:	3e01      	subs	r6, #1
 8006766:	e79b      	b.n	80066a0 <__multiply+0x84>
 8006768:	080099ad 	.word	0x080099ad
 800676c:	080099be 	.word	0x080099be

08006770 <__pow5mult>:
 8006770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006774:	4615      	mov	r5, r2
 8006776:	f012 0203 	ands.w	r2, r2, #3
 800677a:	4606      	mov	r6, r0
 800677c:	460f      	mov	r7, r1
 800677e:	d007      	beq.n	8006790 <__pow5mult+0x20>
 8006780:	4c25      	ldr	r4, [pc, #148]	; (8006818 <__pow5mult+0xa8>)
 8006782:	3a01      	subs	r2, #1
 8006784:	2300      	movs	r3, #0
 8006786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800678a:	f7ff fe53 	bl	8006434 <__multadd>
 800678e:	4607      	mov	r7, r0
 8006790:	10ad      	asrs	r5, r5, #2
 8006792:	d03d      	beq.n	8006810 <__pow5mult+0xa0>
 8006794:	69f4      	ldr	r4, [r6, #28]
 8006796:	b97c      	cbnz	r4, 80067b8 <__pow5mult+0x48>
 8006798:	2010      	movs	r0, #16
 800679a:	f7ff fd35 	bl	8006208 <malloc>
 800679e:	4602      	mov	r2, r0
 80067a0:	61f0      	str	r0, [r6, #28]
 80067a2:	b928      	cbnz	r0, 80067b0 <__pow5mult+0x40>
 80067a4:	4b1d      	ldr	r3, [pc, #116]	; (800681c <__pow5mult+0xac>)
 80067a6:	481e      	ldr	r0, [pc, #120]	; (8006820 <__pow5mult+0xb0>)
 80067a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80067ac:	f001 fb38 	bl	8007e20 <__assert_func>
 80067b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067b4:	6004      	str	r4, [r0, #0]
 80067b6:	60c4      	str	r4, [r0, #12]
 80067b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80067bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067c0:	b94c      	cbnz	r4, 80067d6 <__pow5mult+0x66>
 80067c2:	f240 2171 	movw	r1, #625	; 0x271
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff ff12 	bl	80065f0 <__i2b>
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80067d2:	4604      	mov	r4, r0
 80067d4:	6003      	str	r3, [r0, #0]
 80067d6:	f04f 0900 	mov.w	r9, #0
 80067da:	07eb      	lsls	r3, r5, #31
 80067dc:	d50a      	bpl.n	80067f4 <__pow5mult+0x84>
 80067de:	4639      	mov	r1, r7
 80067e0:	4622      	mov	r2, r4
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ff1a 	bl	800661c <__multiply>
 80067e8:	4639      	mov	r1, r7
 80067ea:	4680      	mov	r8, r0
 80067ec:	4630      	mov	r0, r6
 80067ee:	f7ff fdff 	bl	80063f0 <_Bfree>
 80067f2:	4647      	mov	r7, r8
 80067f4:	106d      	asrs	r5, r5, #1
 80067f6:	d00b      	beq.n	8006810 <__pow5mult+0xa0>
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	b938      	cbnz	r0, 800680c <__pow5mult+0x9c>
 80067fc:	4622      	mov	r2, r4
 80067fe:	4621      	mov	r1, r4
 8006800:	4630      	mov	r0, r6
 8006802:	f7ff ff0b 	bl	800661c <__multiply>
 8006806:	6020      	str	r0, [r4, #0]
 8006808:	f8c0 9000 	str.w	r9, [r0]
 800680c:	4604      	mov	r4, r0
 800680e:	e7e4      	b.n	80067da <__pow5mult+0x6a>
 8006810:	4638      	mov	r0, r7
 8006812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006816:	bf00      	nop
 8006818:	08009b08 	.word	0x08009b08
 800681c:	0800993e 	.word	0x0800993e
 8006820:	080099be 	.word	0x080099be

08006824 <__lshift>:
 8006824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	460c      	mov	r4, r1
 800682a:	6849      	ldr	r1, [r1, #4]
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	4607      	mov	r7, r0
 8006836:	4691      	mov	r9, r2
 8006838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800683c:	f108 0601 	add.w	r6, r8, #1
 8006840:	42b3      	cmp	r3, r6
 8006842:	db0b      	blt.n	800685c <__lshift+0x38>
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff fd93 	bl	8006370 <_Balloc>
 800684a:	4605      	mov	r5, r0
 800684c:	b948      	cbnz	r0, 8006862 <__lshift+0x3e>
 800684e:	4602      	mov	r2, r0
 8006850:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <__lshift+0xd0>)
 8006852:	4829      	ldr	r0, [pc, #164]	; (80068f8 <__lshift+0xd4>)
 8006854:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006858:	f001 fae2 	bl	8007e20 <__assert_func>
 800685c:	3101      	adds	r1, #1
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	e7ee      	b.n	8006840 <__lshift+0x1c>
 8006862:	2300      	movs	r3, #0
 8006864:	f100 0114 	add.w	r1, r0, #20
 8006868:	f100 0210 	add.w	r2, r0, #16
 800686c:	4618      	mov	r0, r3
 800686e:	4553      	cmp	r3, sl
 8006870:	db33      	blt.n	80068da <__lshift+0xb6>
 8006872:	6920      	ldr	r0, [r4, #16]
 8006874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006878:	f104 0314 	add.w	r3, r4, #20
 800687c:	f019 091f 	ands.w	r9, r9, #31
 8006880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006888:	d02b      	beq.n	80068e2 <__lshift+0xbe>
 800688a:	f1c9 0e20 	rsb	lr, r9, #32
 800688e:	468a      	mov	sl, r1
 8006890:	2200      	movs	r2, #0
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	fa00 f009 	lsl.w	r0, r0, r9
 8006898:	4310      	orrs	r0, r2
 800689a:	f84a 0b04 	str.w	r0, [sl], #4
 800689e:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a2:	459c      	cmp	ip, r3
 80068a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068a8:	d8f3      	bhi.n	8006892 <__lshift+0x6e>
 80068aa:	ebac 0304 	sub.w	r3, ip, r4
 80068ae:	3b15      	subs	r3, #21
 80068b0:	f023 0303 	bic.w	r3, r3, #3
 80068b4:	3304      	adds	r3, #4
 80068b6:	f104 0015 	add.w	r0, r4, #21
 80068ba:	4584      	cmp	ip, r0
 80068bc:	bf38      	it	cc
 80068be:	2304      	movcc	r3, #4
 80068c0:	50ca      	str	r2, [r1, r3]
 80068c2:	b10a      	cbz	r2, 80068c8 <__lshift+0xa4>
 80068c4:	f108 0602 	add.w	r6, r8, #2
 80068c8:	3e01      	subs	r6, #1
 80068ca:	4638      	mov	r0, r7
 80068cc:	612e      	str	r6, [r5, #16]
 80068ce:	4621      	mov	r1, r4
 80068d0:	f7ff fd8e 	bl	80063f0 <_Bfree>
 80068d4:	4628      	mov	r0, r5
 80068d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068da:	f842 0f04 	str.w	r0, [r2, #4]!
 80068de:	3301      	adds	r3, #1
 80068e0:	e7c5      	b.n	800686e <__lshift+0x4a>
 80068e2:	3904      	subs	r1, #4
 80068e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80068ec:	459c      	cmp	ip, r3
 80068ee:	d8f9      	bhi.n	80068e4 <__lshift+0xc0>
 80068f0:	e7ea      	b.n	80068c8 <__lshift+0xa4>
 80068f2:	bf00      	nop
 80068f4:	080099ad 	.word	0x080099ad
 80068f8:	080099be 	.word	0x080099be

080068fc <__mcmp>:
 80068fc:	b530      	push	{r4, r5, lr}
 80068fe:	6902      	ldr	r2, [r0, #16]
 8006900:	690c      	ldr	r4, [r1, #16]
 8006902:	1b12      	subs	r2, r2, r4
 8006904:	d10e      	bne.n	8006924 <__mcmp+0x28>
 8006906:	f100 0314 	add.w	r3, r0, #20
 800690a:	3114      	adds	r1, #20
 800690c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006910:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006914:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006918:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800691c:	42a5      	cmp	r5, r4
 800691e:	d003      	beq.n	8006928 <__mcmp+0x2c>
 8006920:	d305      	bcc.n	800692e <__mcmp+0x32>
 8006922:	2201      	movs	r2, #1
 8006924:	4610      	mov	r0, r2
 8006926:	bd30      	pop	{r4, r5, pc}
 8006928:	4283      	cmp	r3, r0
 800692a:	d3f3      	bcc.n	8006914 <__mcmp+0x18>
 800692c:	e7fa      	b.n	8006924 <__mcmp+0x28>
 800692e:	f04f 32ff 	mov.w	r2, #4294967295
 8006932:	e7f7      	b.n	8006924 <__mcmp+0x28>

08006934 <__mdiff>:
 8006934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	460c      	mov	r4, r1
 800693a:	4606      	mov	r6, r0
 800693c:	4611      	mov	r1, r2
 800693e:	4620      	mov	r0, r4
 8006940:	4690      	mov	r8, r2
 8006942:	f7ff ffdb 	bl	80068fc <__mcmp>
 8006946:	1e05      	subs	r5, r0, #0
 8006948:	d110      	bne.n	800696c <__mdiff+0x38>
 800694a:	4629      	mov	r1, r5
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff fd0f 	bl	8006370 <_Balloc>
 8006952:	b930      	cbnz	r0, 8006962 <__mdiff+0x2e>
 8006954:	4b3a      	ldr	r3, [pc, #232]	; (8006a40 <__mdiff+0x10c>)
 8006956:	4602      	mov	r2, r0
 8006958:	f240 2137 	movw	r1, #567	; 0x237
 800695c:	4839      	ldr	r0, [pc, #228]	; (8006a44 <__mdiff+0x110>)
 800695e:	f001 fa5f 	bl	8007e20 <__assert_func>
 8006962:	2301      	movs	r3, #1
 8006964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	bfa4      	itt	ge
 800696e:	4643      	movge	r3, r8
 8006970:	46a0      	movge	r8, r4
 8006972:	4630      	mov	r0, r6
 8006974:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006978:	bfa6      	itte	ge
 800697a:	461c      	movge	r4, r3
 800697c:	2500      	movge	r5, #0
 800697e:	2501      	movlt	r5, #1
 8006980:	f7ff fcf6 	bl	8006370 <_Balloc>
 8006984:	b920      	cbnz	r0, 8006990 <__mdiff+0x5c>
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <__mdiff+0x10c>)
 8006988:	4602      	mov	r2, r0
 800698a:	f240 2145 	movw	r1, #581	; 0x245
 800698e:	e7e5      	b.n	800695c <__mdiff+0x28>
 8006990:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006994:	6926      	ldr	r6, [r4, #16]
 8006996:	60c5      	str	r5, [r0, #12]
 8006998:	f104 0914 	add.w	r9, r4, #20
 800699c:	f108 0514 	add.w	r5, r8, #20
 80069a0:	f100 0e14 	add.w	lr, r0, #20
 80069a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80069a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069ac:	f108 0210 	add.w	r2, r8, #16
 80069b0:	46f2      	mov	sl, lr
 80069b2:	2100      	movs	r1, #0
 80069b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80069b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069bc:	fa11 f88b 	uxtah	r8, r1, fp
 80069c0:	b299      	uxth	r1, r3
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	eba8 0801 	sub.w	r8, r8, r1
 80069c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069d0:	fa1f f888 	uxth.w	r8, r8
 80069d4:	1419      	asrs	r1, r3, #16
 80069d6:	454e      	cmp	r6, r9
 80069d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80069dc:	f84a 3b04 	str.w	r3, [sl], #4
 80069e0:	d8e8      	bhi.n	80069b4 <__mdiff+0x80>
 80069e2:	1b33      	subs	r3, r6, r4
 80069e4:	3b15      	subs	r3, #21
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	3304      	adds	r3, #4
 80069ec:	3415      	adds	r4, #21
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	bf38      	it	cc
 80069f2:	2304      	movcc	r3, #4
 80069f4:	441d      	add	r5, r3
 80069f6:	4473      	add	r3, lr
 80069f8:	469e      	mov	lr, r3
 80069fa:	462e      	mov	r6, r5
 80069fc:	4566      	cmp	r6, ip
 80069fe:	d30e      	bcc.n	8006a1e <__mdiff+0xea>
 8006a00:	f10c 0203 	add.w	r2, ip, #3
 8006a04:	1b52      	subs	r2, r2, r5
 8006a06:	f022 0203 	bic.w	r2, r2, #3
 8006a0a:	3d03      	subs	r5, #3
 8006a0c:	45ac      	cmp	ip, r5
 8006a0e:	bf38      	it	cc
 8006a10:	2200      	movcc	r2, #0
 8006a12:	4413      	add	r3, r2
 8006a14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a18:	b17a      	cbz	r2, 8006a3a <__mdiff+0x106>
 8006a1a:	6107      	str	r7, [r0, #16]
 8006a1c:	e7a4      	b.n	8006968 <__mdiff+0x34>
 8006a1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a22:	fa11 f288 	uxtah	r2, r1, r8
 8006a26:	1414      	asrs	r4, r2, #16
 8006a28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a2c:	b292      	uxth	r2, r2
 8006a2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a32:	f84e 2b04 	str.w	r2, [lr], #4
 8006a36:	1421      	asrs	r1, r4, #16
 8006a38:	e7e0      	b.n	80069fc <__mdiff+0xc8>
 8006a3a:	3f01      	subs	r7, #1
 8006a3c:	e7ea      	b.n	8006a14 <__mdiff+0xe0>
 8006a3e:	bf00      	nop
 8006a40:	080099ad 	.word	0x080099ad
 8006a44:	080099be 	.word	0x080099be

08006a48 <__ulp>:
 8006a48:	b082      	sub	sp, #8
 8006a4a:	ed8d 0b00 	vstr	d0, [sp]
 8006a4e:	9a01      	ldr	r2, [sp, #4]
 8006a50:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <__ulp+0x48>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dc08      	bgt.n	8006a6e <__ulp+0x26>
 8006a5c:	425b      	negs	r3, r3
 8006a5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006a62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006a66:	da04      	bge.n	8006a72 <__ulp+0x2a>
 8006a68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a6c:	4113      	asrs	r3, r2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	e008      	b.n	8006a84 <__ulp+0x3c>
 8006a72:	f1a2 0314 	sub.w	r3, r2, #20
 8006a76:	2b1e      	cmp	r3, #30
 8006a78:	bfda      	itte	le
 8006a7a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006a7e:	40da      	lsrle	r2, r3
 8006a80:	2201      	movgt	r2, #1
 8006a82:	2300      	movs	r3, #0
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	ec41 0b10 	vmov	d0, r0, r1
 8006a8c:	b002      	add	sp, #8
 8006a8e:	4770      	bx	lr
 8006a90:	7ff00000 	.word	0x7ff00000

08006a94 <__b2d>:
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	6906      	ldr	r6, [r0, #16]
 8006a9a:	f100 0814 	add.w	r8, r0, #20
 8006a9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006aa2:	1f37      	subs	r7, r6, #4
 8006aa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7ff fd53 	bl	8006554 <__hi0bits>
 8006aae:	f1c0 0320 	rsb	r3, r0, #32
 8006ab2:	280a      	cmp	r0, #10
 8006ab4:	600b      	str	r3, [r1, #0]
 8006ab6:	491b      	ldr	r1, [pc, #108]	; (8006b24 <__b2d+0x90>)
 8006ab8:	dc15      	bgt.n	8006ae6 <__b2d+0x52>
 8006aba:	f1c0 0c0b 	rsb	ip, r0, #11
 8006abe:	fa22 f30c 	lsr.w	r3, r2, ip
 8006ac2:	45b8      	cmp	r8, r7
 8006ac4:	ea43 0501 	orr.w	r5, r3, r1
 8006ac8:	bf34      	ite	cc
 8006aca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006ace:	2300      	movcs	r3, #0
 8006ad0:	3015      	adds	r0, #21
 8006ad2:	fa02 f000 	lsl.w	r0, r2, r0
 8006ad6:	fa23 f30c 	lsr.w	r3, r3, ip
 8006ada:	4303      	orrs	r3, r0
 8006adc:	461c      	mov	r4, r3
 8006ade:	ec45 4b10 	vmov	d0, r4, r5
 8006ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae6:	45b8      	cmp	r8, r7
 8006ae8:	bf3a      	itte	cc
 8006aea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006aee:	f1a6 0708 	subcc.w	r7, r6, #8
 8006af2:	2300      	movcs	r3, #0
 8006af4:	380b      	subs	r0, #11
 8006af6:	d012      	beq.n	8006b1e <__b2d+0x8a>
 8006af8:	f1c0 0120 	rsb	r1, r0, #32
 8006afc:	fa23 f401 	lsr.w	r4, r3, r1
 8006b00:	4082      	lsls	r2, r0
 8006b02:	4322      	orrs	r2, r4
 8006b04:	4547      	cmp	r7, r8
 8006b06:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006b0a:	bf8c      	ite	hi
 8006b0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006b10:	2200      	movls	r2, #0
 8006b12:	4083      	lsls	r3, r0
 8006b14:	40ca      	lsrs	r2, r1
 8006b16:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	e7de      	b.n	8006adc <__b2d+0x48>
 8006b1e:	ea42 0501 	orr.w	r5, r2, r1
 8006b22:	e7db      	b.n	8006adc <__b2d+0x48>
 8006b24:	3ff00000 	.word	0x3ff00000

08006b28 <__d2b>:
 8006b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	2101      	movs	r1, #1
 8006b30:	ec59 8b10 	vmov	r8, r9, d0
 8006b34:	4616      	mov	r6, r2
 8006b36:	f7ff fc1b 	bl	8006370 <_Balloc>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	b930      	cbnz	r0, 8006b4c <__d2b+0x24>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <__d2b+0xac>)
 8006b42:	4825      	ldr	r0, [pc, #148]	; (8006bd8 <__d2b+0xb0>)
 8006b44:	f240 310f 	movw	r1, #783	; 0x30f
 8006b48:	f001 f96a 	bl	8007e20 <__assert_func>
 8006b4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b54:	bb2d      	cbnz	r5, 8006ba2 <__d2b+0x7a>
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	f1b8 0300 	subs.w	r3, r8, #0
 8006b5c:	d026      	beq.n	8006bac <__d2b+0x84>
 8006b5e:	4668      	mov	r0, sp
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	f7ff fd17 	bl	8006594 <__lo0bits>
 8006b66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b6a:	b1e8      	cbz	r0, 8006ba8 <__d2b+0x80>
 8006b6c:	f1c0 0320 	rsb	r3, r0, #32
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	430b      	orrs	r3, r1
 8006b76:	40c2      	lsrs	r2, r0
 8006b78:	6163      	str	r3, [r4, #20]
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	9b01      	ldr	r3, [sp, #4]
 8006b7e:	61a3      	str	r3, [r4, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bf14      	ite	ne
 8006b84:	2202      	movne	r2, #2
 8006b86:	2201      	moveq	r2, #1
 8006b88:	6122      	str	r2, [r4, #16]
 8006b8a:	b1bd      	cbz	r5, 8006bbc <__d2b+0x94>
 8006b8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b90:	4405      	add	r5, r0
 8006b92:	603d      	str	r5, [r7, #0]
 8006b94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b98:	6030      	str	r0, [r6, #0]
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	b003      	add	sp, #12
 8006b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ba6:	e7d6      	b.n	8006b56 <__d2b+0x2e>
 8006ba8:	6161      	str	r1, [r4, #20]
 8006baa:	e7e7      	b.n	8006b7c <__d2b+0x54>
 8006bac:	a801      	add	r0, sp, #4
 8006bae:	f7ff fcf1 	bl	8006594 <__lo0bits>
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	6163      	str	r3, [r4, #20]
 8006bb6:	3020      	adds	r0, #32
 8006bb8:	2201      	movs	r2, #1
 8006bba:	e7e5      	b.n	8006b88 <__d2b+0x60>
 8006bbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bc4:	6038      	str	r0, [r7, #0]
 8006bc6:	6918      	ldr	r0, [r3, #16]
 8006bc8:	f7ff fcc4 	bl	8006554 <__hi0bits>
 8006bcc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bd0:	e7e2      	b.n	8006b98 <__d2b+0x70>
 8006bd2:	bf00      	nop
 8006bd4:	080099ad 	.word	0x080099ad
 8006bd8:	080099be 	.word	0x080099be

08006bdc <__ratio>:
 8006bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	4688      	mov	r8, r1
 8006be2:	4669      	mov	r1, sp
 8006be4:	4681      	mov	r9, r0
 8006be6:	f7ff ff55 	bl	8006a94 <__b2d>
 8006bea:	a901      	add	r1, sp, #4
 8006bec:	4640      	mov	r0, r8
 8006bee:	ec55 4b10 	vmov	r4, r5, d0
 8006bf2:	ee10 aa10 	vmov	sl, s0
 8006bf6:	f7ff ff4d 	bl	8006a94 <__b2d>
 8006bfa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006bfe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	e9dd 3100 	ldrd	r3, r1, [sp]
 8006c08:	1a5b      	subs	r3, r3, r1
 8006c0a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006c0e:	ec57 6b10 	vmov	r6, r7, d0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bfd6      	itet	le
 8006c16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c1a:	462a      	movgt	r2, r5
 8006c1c:	463a      	movle	r2, r7
 8006c1e:	46ab      	mov	fp, r5
 8006c20:	bfd6      	itet	le
 8006c22:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8006c26:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006c2a:	ee00 3a90 	vmovle	s1, r3
 8006c2e:	ec4b ab17 	vmov	d7, sl, fp
 8006c32:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8006c36:	b003      	add	sp, #12
 8006c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c3c <__copybits>:
 8006c3c:	3901      	subs	r1, #1
 8006c3e:	b570      	push	{r4, r5, r6, lr}
 8006c40:	1149      	asrs	r1, r1, #5
 8006c42:	6914      	ldr	r4, [r2, #16]
 8006c44:	3101      	adds	r1, #1
 8006c46:	f102 0314 	add.w	r3, r2, #20
 8006c4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c52:	1f05      	subs	r5, r0, #4
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	d30c      	bcc.n	8006c72 <__copybits+0x36>
 8006c58:	1aa3      	subs	r3, r4, r2
 8006c5a:	3b11      	subs	r3, #17
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	3211      	adds	r2, #17
 8006c62:	42a2      	cmp	r2, r4
 8006c64:	bf88      	it	hi
 8006c66:	2300      	movhi	r3, #0
 8006c68:	4418      	add	r0, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4288      	cmp	r0, r1
 8006c6e:	d305      	bcc.n	8006c7c <__copybits+0x40>
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
 8006c72:	f853 6b04 	ldr.w	r6, [r3], #4
 8006c76:	f845 6f04 	str.w	r6, [r5, #4]!
 8006c7a:	e7eb      	b.n	8006c54 <__copybits+0x18>
 8006c7c:	f840 3b04 	str.w	r3, [r0], #4
 8006c80:	e7f4      	b.n	8006c6c <__copybits+0x30>

08006c82 <__any_on>:
 8006c82:	f100 0214 	add.w	r2, r0, #20
 8006c86:	6900      	ldr	r0, [r0, #16]
 8006c88:	114b      	asrs	r3, r1, #5
 8006c8a:	4298      	cmp	r0, r3
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	db11      	blt.n	8006cb4 <__any_on+0x32>
 8006c90:	dd0a      	ble.n	8006ca8 <__any_on+0x26>
 8006c92:	f011 011f 	ands.w	r1, r1, #31
 8006c96:	d007      	beq.n	8006ca8 <__any_on+0x26>
 8006c98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c9c:	fa24 f001 	lsr.w	r0, r4, r1
 8006ca0:	fa00 f101 	lsl.w	r1, r0, r1
 8006ca4:	428c      	cmp	r4, r1
 8006ca6:	d10b      	bne.n	8006cc0 <__any_on+0x3e>
 8006ca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d803      	bhi.n	8006cb8 <__any_on+0x36>
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	bd10      	pop	{r4, pc}
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	e7f7      	b.n	8006ca8 <__any_on+0x26>
 8006cb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d0f5      	beq.n	8006cac <__any_on+0x2a>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e7f6      	b.n	8006cb2 <__any_on+0x30>

08006cc4 <sulp>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	4616      	mov	r6, r2
 8006ccc:	ec45 4b10 	vmov	d0, r4, r5
 8006cd0:	f7ff feba 	bl	8006a48 <__ulp>
 8006cd4:	b17e      	cbz	r6, 8006cf6 <sulp+0x32>
 8006cd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dd09      	ble.n	8006cf6 <sulp+0x32>
 8006ce2:	051b      	lsls	r3, r3, #20
 8006ce4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006cee:	ec41 0b17 	vmov	d7, r0, r1
 8006cf2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}

08006cf8 <_strtod_l>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b0e 	vpush	{d8-d14}
 8006d00:	b097      	sub	sp, #92	; 0x5c
 8006d02:	4604      	mov	r4, r0
 8006d04:	920d      	str	r2, [sp, #52]	; 0x34
 8006d06:	2200      	movs	r2, #0
 8006d08:	9212      	str	r2, [sp, #72]	; 0x48
 8006d0a:	468a      	mov	sl, r1
 8006d0c:	f04f 0800 	mov.w	r8, #0
 8006d10:	f04f 0900 	mov.w	r9, #0
 8006d14:	460a      	mov	r2, r1
 8006d16:	9211      	str	r2, [sp, #68]	; 0x44
 8006d18:	7811      	ldrb	r1, [r2, #0]
 8006d1a:	292b      	cmp	r1, #43	; 0x2b
 8006d1c:	d04c      	beq.n	8006db8 <_strtod_l+0xc0>
 8006d1e:	d839      	bhi.n	8006d94 <_strtod_l+0x9c>
 8006d20:	290d      	cmp	r1, #13
 8006d22:	d833      	bhi.n	8006d8c <_strtod_l+0x94>
 8006d24:	2908      	cmp	r1, #8
 8006d26:	d833      	bhi.n	8006d90 <_strtod_l+0x98>
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	d03c      	beq.n	8006da6 <_strtod_l+0xae>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	9208      	str	r2, [sp, #32]
 8006d30:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006d32:	7832      	ldrb	r2, [r6, #0]
 8006d34:	2a30      	cmp	r2, #48	; 0x30
 8006d36:	f040 80b8 	bne.w	8006eaa <_strtod_l+0x1b2>
 8006d3a:	7872      	ldrb	r2, [r6, #1]
 8006d3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006d40:	2a58      	cmp	r2, #88	; 0x58
 8006d42:	d170      	bne.n	8006e26 <_strtod_l+0x12e>
 8006d44:	9302      	str	r3, [sp, #8]
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	ab12      	add	r3, sp, #72	; 0x48
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4a91      	ldr	r2, [pc, #580]	; (8006f94 <_strtod_l+0x29c>)
 8006d50:	ab13      	add	r3, sp, #76	; 0x4c
 8006d52:	a911      	add	r1, sp, #68	; 0x44
 8006d54:	4620      	mov	r0, r4
 8006d56:	f001 f8ff 	bl	8007f58 <__gethex>
 8006d5a:	f010 070f 	ands.w	r7, r0, #15
 8006d5e:	4605      	mov	r5, r0
 8006d60:	d005      	beq.n	8006d6e <_strtod_l+0x76>
 8006d62:	2f06      	cmp	r7, #6
 8006d64:	d12a      	bne.n	8006dbc <_strtod_l+0xc4>
 8006d66:	3601      	adds	r6, #1
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9611      	str	r6, [sp, #68]	; 0x44
 8006d6c:	9308      	str	r3, [sp, #32]
 8006d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 8555 	bne.w	8007820 <_strtod_l+0xb28>
 8006d76:	9b08      	ldr	r3, [sp, #32]
 8006d78:	ec49 8b10 	vmov	d0, r8, r9
 8006d7c:	b1cb      	cbz	r3, 8006db2 <_strtod_l+0xba>
 8006d7e:	eeb1 0b40 	vneg.f64	d0, d0
 8006d82:	b017      	add	sp, #92	; 0x5c
 8006d84:	ecbd 8b0e 	vpop	{d8-d14}
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	2920      	cmp	r1, #32
 8006d8e:	d1cd      	bne.n	8006d2c <_strtod_l+0x34>
 8006d90:	3201      	adds	r2, #1
 8006d92:	e7c0      	b.n	8006d16 <_strtod_l+0x1e>
 8006d94:	292d      	cmp	r1, #45	; 0x2d
 8006d96:	d1c9      	bne.n	8006d2c <_strtod_l+0x34>
 8006d98:	2101      	movs	r1, #1
 8006d9a:	9108      	str	r1, [sp, #32]
 8006d9c:	1c51      	adds	r1, r2, #1
 8006d9e:	9111      	str	r1, [sp, #68]	; 0x44
 8006da0:	7852      	ldrb	r2, [r2, #1]
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	d1c4      	bne.n	8006d30 <_strtod_l+0x38>
 8006da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006da8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8535 	bne.w	800781c <_strtod_l+0xb24>
 8006db2:	ec49 8b10 	vmov	d0, r8, r9
 8006db6:	e7e4      	b.n	8006d82 <_strtod_l+0x8a>
 8006db8:	2100      	movs	r1, #0
 8006dba:	e7ee      	b.n	8006d9a <_strtod_l+0xa2>
 8006dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dbe:	b13a      	cbz	r2, 8006dd0 <_strtod_l+0xd8>
 8006dc0:	2135      	movs	r1, #53	; 0x35
 8006dc2:	a814      	add	r0, sp, #80	; 0x50
 8006dc4:	f7ff ff3a 	bl	8006c3c <__copybits>
 8006dc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff fb10 	bl	80063f0 <_Bfree>
 8006dd0:	1e7b      	subs	r3, r7, #1
 8006dd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d806      	bhi.n	8006de6 <_strtod_l+0xee>
 8006dd8:	e8df f003 	tbb	[pc, r3]
 8006ddc:	201d0314 	.word	0x201d0314
 8006de0:	14          	.byte	0x14
 8006de1:	00          	.byte	0x00
 8006de2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8006de6:	05eb      	lsls	r3, r5, #23
 8006de8:	bf48      	it	mi
 8006dea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006dee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006df2:	0d1b      	lsrs	r3, r3, #20
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1b9      	bne.n	8006d6e <_strtod_l+0x76>
 8006dfa:	f7fe fb8f 	bl	800551c <__errno>
 8006dfe:	2322      	movs	r3, #34	; 0x22
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	e7b4      	b.n	8006d6e <_strtod_l+0x76>
 8006e04:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8006e08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e14:	e7e7      	b.n	8006de6 <_strtod_l+0xee>
 8006e16:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006f9c <_strtod_l+0x2a4>
 8006e1a:	e7e4      	b.n	8006de6 <_strtod_l+0xee>
 8006e1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e20:	f04f 38ff 	mov.w	r8, #4294967295
 8006e24:	e7df      	b.n	8006de6 <_strtod_l+0xee>
 8006e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	9211      	str	r2, [sp, #68]	; 0x44
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b30      	cmp	r3, #48	; 0x30
 8006e30:	d0f9      	beq.n	8006e26 <_strtod_l+0x12e>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d09b      	beq.n	8006d6e <_strtod_l+0x76>
 8006e36:	2301      	movs	r3, #1
 8006e38:	9306      	str	r3, [sp, #24]
 8006e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	9307      	str	r3, [sp, #28]
 8006e44:	461e      	mov	r6, r3
 8006e46:	220a      	movs	r2, #10
 8006e48:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006e4a:	7805      	ldrb	r5, [r0, #0]
 8006e4c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006e50:	b2d9      	uxtb	r1, r3
 8006e52:	2909      	cmp	r1, #9
 8006e54:	d92b      	bls.n	8006eae <_strtod_l+0x1b6>
 8006e56:	4950      	ldr	r1, [pc, #320]	; (8006f98 <_strtod_l+0x2a0>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f000 ffa9 	bl	8007db0 <strncmp>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d035      	beq.n	8006ece <_strtod_l+0x1d6>
 8006e62:	2000      	movs	r0, #0
 8006e64:	462a      	mov	r2, r5
 8006e66:	4633      	mov	r3, r6
 8006e68:	4683      	mov	fp, r0
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	2a65      	cmp	r2, #101	; 0x65
 8006e6e:	d001      	beq.n	8006e74 <_strtod_l+0x17c>
 8006e70:	2a45      	cmp	r2, #69	; 0x45
 8006e72:	d118      	bne.n	8006ea6 <_strtod_l+0x1ae>
 8006e74:	b91b      	cbnz	r3, 8006e7e <_strtod_l+0x186>
 8006e76:	9b06      	ldr	r3, [sp, #24]
 8006e78:	4303      	orrs	r3, r0
 8006e7a:	d094      	beq.n	8006da6 <_strtod_l+0xae>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8006e82:	f10a 0201 	add.w	r2, sl, #1
 8006e86:	9211      	str	r2, [sp, #68]	; 0x44
 8006e88:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006e8c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e8e:	d075      	beq.n	8006f7c <_strtod_l+0x284>
 8006e90:	2a2d      	cmp	r2, #45	; 0x2d
 8006e92:	d07b      	beq.n	8006f8c <_strtod_l+0x294>
 8006e94:	f04f 0e00 	mov.w	lr, #0
 8006e98:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006e9c:	2d09      	cmp	r5, #9
 8006e9e:	f240 8083 	bls.w	8006fa8 <_strtod_l+0x2b0>
 8006ea2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	e09e      	b.n	8006fe8 <_strtod_l+0x2f0>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e7c4      	b.n	8006e38 <_strtod_l+0x140>
 8006eae:	2e08      	cmp	r6, #8
 8006eb0:	bfd5      	itete	le
 8006eb2:	9907      	ldrle	r1, [sp, #28]
 8006eb4:	9905      	ldrgt	r1, [sp, #20]
 8006eb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eba:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006ebe:	f100 0001 	add.w	r0, r0, #1
 8006ec2:	bfd4      	ite	le
 8006ec4:	9307      	strle	r3, [sp, #28]
 8006ec6:	9305      	strgt	r3, [sp, #20]
 8006ec8:	3601      	adds	r6, #1
 8006eca:	9011      	str	r0, [sp, #68]	; 0x44
 8006ecc:	e7bc      	b.n	8006e48 <_strtod_l+0x150>
 8006ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	9211      	str	r2, [sp, #68]	; 0x44
 8006ed4:	785a      	ldrb	r2, [r3, #1]
 8006ed6:	b3ae      	cbz	r6, 8006f44 <_strtod_l+0x24c>
 8006ed8:	4683      	mov	fp, r0
 8006eda:	4633      	mov	r3, r6
 8006edc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ee0:	2909      	cmp	r1, #9
 8006ee2:	d912      	bls.n	8006f0a <_strtod_l+0x212>
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	e7c1      	b.n	8006e6c <_strtod_l+0x174>
 8006ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	9211      	str	r2, [sp, #68]	; 0x44
 8006eee:	785a      	ldrb	r2, [r3, #1]
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	2a30      	cmp	r2, #48	; 0x30
 8006ef4:	d0f8      	beq.n	8006ee8 <_strtod_l+0x1f0>
 8006ef6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	f200 8495 	bhi.w	800782a <_strtod_l+0xb32>
 8006f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f02:	9309      	str	r3, [sp, #36]	; 0x24
 8006f04:	4683      	mov	fp, r0
 8006f06:	2000      	movs	r0, #0
 8006f08:	4603      	mov	r3, r0
 8006f0a:	3a30      	subs	r2, #48	; 0x30
 8006f0c:	f100 0101 	add.w	r1, r0, #1
 8006f10:	d012      	beq.n	8006f38 <_strtod_l+0x240>
 8006f12:	448b      	add	fp, r1
 8006f14:	eb00 0c03 	add.w	ip, r0, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	250a      	movs	r5, #10
 8006f1c:	4561      	cmp	r1, ip
 8006f1e:	d113      	bne.n	8006f48 <_strtod_l+0x250>
 8006f20:	1819      	adds	r1, r3, r0
 8006f22:	2908      	cmp	r1, #8
 8006f24:	f103 0301 	add.w	r3, r3, #1
 8006f28:	4403      	add	r3, r0
 8006f2a:	dc1b      	bgt.n	8006f64 <_strtod_l+0x26c>
 8006f2c:	9807      	ldr	r0, [sp, #28]
 8006f2e:	210a      	movs	r1, #10
 8006f30:	fb01 2200 	mla	r2, r1, r0, r2
 8006f34:	9207      	str	r2, [sp, #28]
 8006f36:	2100      	movs	r1, #0
 8006f38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f3a:	1c50      	adds	r0, r2, #1
 8006f3c:	9011      	str	r0, [sp, #68]	; 0x44
 8006f3e:	7852      	ldrb	r2, [r2, #1]
 8006f40:	4608      	mov	r0, r1
 8006f42:	e7cb      	b.n	8006edc <_strtod_l+0x1e4>
 8006f44:	4630      	mov	r0, r6
 8006f46:	e7d4      	b.n	8006ef2 <_strtod_l+0x1fa>
 8006f48:	2908      	cmp	r1, #8
 8006f4a:	f101 0101 	add.w	r1, r1, #1
 8006f4e:	dc03      	bgt.n	8006f58 <_strtod_l+0x260>
 8006f50:	9f07      	ldr	r7, [sp, #28]
 8006f52:	436f      	muls	r7, r5
 8006f54:	9707      	str	r7, [sp, #28]
 8006f56:	e7e1      	b.n	8006f1c <_strtod_l+0x224>
 8006f58:	2910      	cmp	r1, #16
 8006f5a:	bfde      	ittt	le
 8006f5c:	9f05      	ldrle	r7, [sp, #20]
 8006f5e:	436f      	mulle	r7, r5
 8006f60:	9705      	strle	r7, [sp, #20]
 8006f62:	e7db      	b.n	8006f1c <_strtod_l+0x224>
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	bfdf      	itttt	le
 8006f68:	9805      	ldrle	r0, [sp, #20]
 8006f6a:	210a      	movle	r1, #10
 8006f6c:	fb01 2200 	mlale	r2, r1, r0, r2
 8006f70:	9205      	strle	r2, [sp, #20]
 8006f72:	e7e0      	b.n	8006f36 <_strtod_l+0x23e>
 8006f74:	f04f 0b00 	mov.w	fp, #0
 8006f78:	2101      	movs	r1, #1
 8006f7a:	e77c      	b.n	8006e76 <_strtod_l+0x17e>
 8006f7c:	f04f 0e00 	mov.w	lr, #0
 8006f80:	f10a 0202 	add.w	r2, sl, #2
 8006f84:	9211      	str	r2, [sp, #68]	; 0x44
 8006f86:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006f8a:	e785      	b.n	8006e98 <_strtod_l+0x1a0>
 8006f8c:	f04f 0e01 	mov.w	lr, #1
 8006f90:	e7f6      	b.n	8006f80 <_strtod_l+0x288>
 8006f92:	bf00      	nop
 8006f94:	08009b18 	.word	0x08009b18
 8006f98:	08009b14 	.word	0x08009b14
 8006f9c:	7ff00000 	.word	0x7ff00000
 8006fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006fa2:	1c55      	adds	r5, r2, #1
 8006fa4:	9511      	str	r5, [sp, #68]	; 0x44
 8006fa6:	7852      	ldrb	r2, [r2, #1]
 8006fa8:	2a30      	cmp	r2, #48	; 0x30
 8006faa:	d0f9      	beq.n	8006fa0 <_strtod_l+0x2a8>
 8006fac:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006fb0:	2d08      	cmp	r5, #8
 8006fb2:	f63f af78 	bhi.w	8006ea6 <_strtod_l+0x1ae>
 8006fb6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006fba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8006fbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006fc0:	1c55      	adds	r5, r2, #1
 8006fc2:	9511      	str	r5, [sp, #68]	; 0x44
 8006fc4:	7852      	ldrb	r2, [r2, #1]
 8006fc6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006fca:	2f09      	cmp	r7, #9
 8006fcc:	d937      	bls.n	800703e <_strtod_l+0x346>
 8006fce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006fd0:	1bed      	subs	r5, r5, r7
 8006fd2:	2d08      	cmp	r5, #8
 8006fd4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006fd8:	dc02      	bgt.n	8006fe0 <_strtod_l+0x2e8>
 8006fda:	4565      	cmp	r5, ip
 8006fdc:	bfa8      	it	ge
 8006fde:	4665      	movge	r5, ip
 8006fe0:	f1be 0f00 	cmp.w	lr, #0
 8006fe4:	d000      	beq.n	8006fe8 <_strtod_l+0x2f0>
 8006fe6:	426d      	negs	r5, r5
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d14d      	bne.n	8007088 <_strtod_l+0x390>
 8006fec:	9b06      	ldr	r3, [sp, #24]
 8006fee:	4303      	orrs	r3, r0
 8006ff0:	f47f aebd 	bne.w	8006d6e <_strtod_l+0x76>
 8006ff4:	2900      	cmp	r1, #0
 8006ff6:	f47f aed6 	bne.w	8006da6 <_strtod_l+0xae>
 8006ffa:	2a69      	cmp	r2, #105	; 0x69
 8006ffc:	d027      	beq.n	800704e <_strtod_l+0x356>
 8006ffe:	dc24      	bgt.n	800704a <_strtod_l+0x352>
 8007000:	2a49      	cmp	r2, #73	; 0x49
 8007002:	d024      	beq.n	800704e <_strtod_l+0x356>
 8007004:	2a4e      	cmp	r2, #78	; 0x4e
 8007006:	f47f aece 	bne.w	8006da6 <_strtod_l+0xae>
 800700a:	4995      	ldr	r1, [pc, #596]	; (8007260 <_strtod_l+0x568>)
 800700c:	a811      	add	r0, sp, #68	; 0x44
 800700e:	f001 f9e3 	bl	80083d8 <__match>
 8007012:	2800      	cmp	r0, #0
 8007014:	f43f aec7 	beq.w	8006da6 <_strtod_l+0xae>
 8007018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b28      	cmp	r3, #40	; 0x28
 800701e:	d12d      	bne.n	800707c <_strtod_l+0x384>
 8007020:	4990      	ldr	r1, [pc, #576]	; (8007264 <_strtod_l+0x56c>)
 8007022:	aa14      	add	r2, sp, #80	; 0x50
 8007024:	a811      	add	r0, sp, #68	; 0x44
 8007026:	f001 f9eb 	bl	8008400 <__hexnan>
 800702a:	2805      	cmp	r0, #5
 800702c:	d126      	bne.n	800707c <_strtod_l+0x384>
 800702e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007030:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007034:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007038:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800703c:	e697      	b.n	8006d6e <_strtod_l+0x76>
 800703e:	250a      	movs	r5, #10
 8007040:	fb05 2c0c 	mla	ip, r5, ip, r2
 8007044:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007048:	e7b9      	b.n	8006fbe <_strtod_l+0x2c6>
 800704a:	2a6e      	cmp	r2, #110	; 0x6e
 800704c:	e7db      	b.n	8007006 <_strtod_l+0x30e>
 800704e:	4986      	ldr	r1, [pc, #536]	; (8007268 <_strtod_l+0x570>)
 8007050:	a811      	add	r0, sp, #68	; 0x44
 8007052:	f001 f9c1 	bl	80083d8 <__match>
 8007056:	2800      	cmp	r0, #0
 8007058:	f43f aea5 	beq.w	8006da6 <_strtod_l+0xae>
 800705c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800705e:	4983      	ldr	r1, [pc, #524]	; (800726c <_strtod_l+0x574>)
 8007060:	3b01      	subs	r3, #1
 8007062:	a811      	add	r0, sp, #68	; 0x44
 8007064:	9311      	str	r3, [sp, #68]	; 0x44
 8007066:	f001 f9b7 	bl	80083d8 <__match>
 800706a:	b910      	cbnz	r0, 8007072 <_strtod_l+0x37a>
 800706c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800706e:	3301      	adds	r3, #1
 8007070:	9311      	str	r3, [sp, #68]	; 0x44
 8007072:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8007280 <_strtod_l+0x588>
 8007076:	f04f 0800 	mov.w	r8, #0
 800707a:	e678      	b.n	8006d6e <_strtod_l+0x76>
 800707c:	487c      	ldr	r0, [pc, #496]	; (8007270 <_strtod_l+0x578>)
 800707e:	f000 fec7 	bl	8007e10 <nan>
 8007082:	ec59 8b10 	vmov	r8, r9, d0
 8007086:	e672      	b.n	8006d6e <_strtod_l+0x76>
 8007088:	eddd 7a07 	vldr	s15, [sp, #28]
 800708c:	eba5 020b 	sub.w	r2, r5, fp
 8007090:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007094:	2e00      	cmp	r6, #0
 8007096:	bf08      	it	eq
 8007098:	461e      	moveq	r6, r3
 800709a:	2b10      	cmp	r3, #16
 800709c:	9206      	str	r2, [sp, #24]
 800709e:	461a      	mov	r2, r3
 80070a0:	bfa8      	it	ge
 80070a2:	2210      	movge	r2, #16
 80070a4:	2b09      	cmp	r3, #9
 80070a6:	ec59 8b17 	vmov	r8, r9, d7
 80070aa:	dd0c      	ble.n	80070c6 <_strtod_l+0x3ce>
 80070ac:	4971      	ldr	r1, [pc, #452]	; (8007274 <_strtod_l+0x57c>)
 80070ae:	eddd 6a05 	vldr	s13, [sp, #20]
 80070b2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80070b6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80070ba:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80070be:	eea7 6b05 	vfma.f64	d6, d7, d5
 80070c2:	ec59 8b16 	vmov	r8, r9, d6
 80070c6:	2b0f      	cmp	r3, #15
 80070c8:	dc37      	bgt.n	800713a <_strtod_l+0x442>
 80070ca:	9906      	ldr	r1, [sp, #24]
 80070cc:	2900      	cmp	r1, #0
 80070ce:	f43f ae4e 	beq.w	8006d6e <_strtod_l+0x76>
 80070d2:	dd23      	ble.n	800711c <_strtod_l+0x424>
 80070d4:	2916      	cmp	r1, #22
 80070d6:	dc0b      	bgt.n	80070f0 <_strtod_l+0x3f8>
 80070d8:	4b66      	ldr	r3, [pc, #408]	; (8007274 <_strtod_l+0x57c>)
 80070da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80070de:	ed93 7b00 	vldr	d7, [r3]
 80070e2:	ec49 8b16 	vmov	d6, r8, r9
 80070e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070ea:	ec59 8b17 	vmov	r8, r9, d7
 80070ee:	e63e      	b.n	8006d6e <_strtod_l+0x76>
 80070f0:	9806      	ldr	r0, [sp, #24]
 80070f2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80070f6:	4281      	cmp	r1, r0
 80070f8:	db1f      	blt.n	800713a <_strtod_l+0x442>
 80070fa:	4a5e      	ldr	r2, [pc, #376]	; (8007274 <_strtod_l+0x57c>)
 80070fc:	f1c3 030f 	rsb	r3, r3, #15
 8007100:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007104:	ed91 7b00 	vldr	d7, [r1]
 8007108:	ec49 8b16 	vmov	d6, r8, r9
 800710c:	1ac3      	subs	r3, r0, r3
 800710e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007112:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007116:	ed92 6b00 	vldr	d6, [r2]
 800711a:	e7e4      	b.n	80070e6 <_strtod_l+0x3ee>
 800711c:	9906      	ldr	r1, [sp, #24]
 800711e:	3116      	adds	r1, #22
 8007120:	db0b      	blt.n	800713a <_strtod_l+0x442>
 8007122:	4b54      	ldr	r3, [pc, #336]	; (8007274 <_strtod_l+0x57c>)
 8007124:	ebab 0505 	sub.w	r5, fp, r5
 8007128:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800712c:	ed95 7b00 	vldr	d7, [r5]
 8007130:	ec49 8b16 	vmov	d6, r8, r9
 8007134:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007138:	e7d7      	b.n	80070ea <_strtod_l+0x3f2>
 800713a:	9906      	ldr	r1, [sp, #24]
 800713c:	1a9a      	subs	r2, r3, r2
 800713e:	440a      	add	r2, r1
 8007140:	2a00      	cmp	r2, #0
 8007142:	dd6e      	ble.n	8007222 <_strtod_l+0x52a>
 8007144:	f012 000f 	ands.w	r0, r2, #15
 8007148:	d00a      	beq.n	8007160 <_strtod_l+0x468>
 800714a:	494a      	ldr	r1, [pc, #296]	; (8007274 <_strtod_l+0x57c>)
 800714c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007150:	ed91 7b00 	vldr	d7, [r1]
 8007154:	ec49 8b16 	vmov	d6, r8, r9
 8007158:	ee27 7b06 	vmul.f64	d7, d7, d6
 800715c:	ec59 8b17 	vmov	r8, r9, d7
 8007160:	f032 020f 	bics.w	r2, r2, #15
 8007164:	d04e      	beq.n	8007204 <_strtod_l+0x50c>
 8007166:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800716a:	dd22      	ble.n	80071b2 <_strtod_l+0x4ba>
 800716c:	2500      	movs	r5, #0
 800716e:	462e      	mov	r6, r5
 8007170:	9507      	str	r5, [sp, #28]
 8007172:	462f      	mov	r7, r5
 8007174:	2322      	movs	r3, #34	; 0x22
 8007176:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007280 <_strtod_l+0x588>
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	f04f 0800 	mov.w	r8, #0
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f43f adf3 	beq.w	8006d6e <_strtod_l+0x76>
 8007188:	9912      	ldr	r1, [sp, #72]	; 0x48
 800718a:	4620      	mov	r0, r4
 800718c:	f7ff f930 	bl	80063f0 <_Bfree>
 8007190:	4639      	mov	r1, r7
 8007192:	4620      	mov	r0, r4
 8007194:	f7ff f92c 	bl	80063f0 <_Bfree>
 8007198:	4631      	mov	r1, r6
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff f928 	bl	80063f0 <_Bfree>
 80071a0:	9907      	ldr	r1, [sp, #28]
 80071a2:	4620      	mov	r0, r4
 80071a4:	f7ff f924 	bl	80063f0 <_Bfree>
 80071a8:	4629      	mov	r1, r5
 80071aa:	4620      	mov	r0, r4
 80071ac:	f7ff f920 	bl	80063f0 <_Bfree>
 80071b0:	e5dd      	b.n	8006d6e <_strtod_l+0x76>
 80071b2:	2000      	movs	r0, #0
 80071b4:	ec49 8b17 	vmov	d7, r8, r9
 80071b8:	4f2f      	ldr	r7, [pc, #188]	; (8007278 <_strtod_l+0x580>)
 80071ba:	1112      	asrs	r2, r2, #4
 80071bc:	4601      	mov	r1, r0
 80071be:	2a01      	cmp	r2, #1
 80071c0:	dc23      	bgt.n	800720a <_strtod_l+0x512>
 80071c2:	b108      	cbz	r0, 80071c8 <_strtod_l+0x4d0>
 80071c4:	ec59 8b17 	vmov	r8, r9, d7
 80071c8:	4a2b      	ldr	r2, [pc, #172]	; (8007278 <_strtod_l+0x580>)
 80071ca:	482c      	ldr	r0, [pc, #176]	; (800727c <_strtod_l+0x584>)
 80071cc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80071d0:	ed92 7b00 	vldr	d7, [r2]
 80071d4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80071d8:	ec49 8b16 	vmov	d6, r8, r9
 80071dc:	4a28      	ldr	r2, [pc, #160]	; (8007280 <_strtod_l+0x588>)
 80071de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071e2:	ee17 1a90 	vmov	r1, s15
 80071e6:	400a      	ands	r2, r1
 80071e8:	4282      	cmp	r2, r0
 80071ea:	ec59 8b17 	vmov	r8, r9, d7
 80071ee:	d8bd      	bhi.n	800716c <_strtod_l+0x474>
 80071f0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80071f4:	4282      	cmp	r2, r0
 80071f6:	bf86      	itte	hi
 80071f8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8007284 <_strtod_l+0x58c>
 80071fc:	f04f 38ff 	movhi.w	r8, #4294967295
 8007200:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007204:	2200      	movs	r2, #0
 8007206:	9205      	str	r2, [sp, #20]
 8007208:	e076      	b.n	80072f8 <_strtod_l+0x600>
 800720a:	f012 0f01 	tst.w	r2, #1
 800720e:	d004      	beq.n	800721a <_strtod_l+0x522>
 8007210:	ed97 6b00 	vldr	d6, [r7]
 8007214:	2001      	movs	r0, #1
 8007216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800721a:	3101      	adds	r1, #1
 800721c:	1052      	asrs	r2, r2, #1
 800721e:	3708      	adds	r7, #8
 8007220:	e7cd      	b.n	80071be <_strtod_l+0x4c6>
 8007222:	d0ef      	beq.n	8007204 <_strtod_l+0x50c>
 8007224:	4252      	negs	r2, r2
 8007226:	f012 000f 	ands.w	r0, r2, #15
 800722a:	d00a      	beq.n	8007242 <_strtod_l+0x54a>
 800722c:	4911      	ldr	r1, [pc, #68]	; (8007274 <_strtod_l+0x57c>)
 800722e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007232:	ed91 7b00 	vldr	d7, [r1]
 8007236:	ec49 8b16 	vmov	d6, r8, r9
 800723a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800723e:	ec59 8b17 	vmov	r8, r9, d7
 8007242:	1112      	asrs	r2, r2, #4
 8007244:	d0de      	beq.n	8007204 <_strtod_l+0x50c>
 8007246:	2a1f      	cmp	r2, #31
 8007248:	dd1e      	ble.n	8007288 <_strtod_l+0x590>
 800724a:	2500      	movs	r5, #0
 800724c:	462e      	mov	r6, r5
 800724e:	9507      	str	r5, [sp, #28]
 8007250:	462f      	mov	r7, r5
 8007252:	2322      	movs	r3, #34	; 0x22
 8007254:	f04f 0800 	mov.w	r8, #0
 8007258:	f04f 0900 	mov.w	r9, #0
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	e78f      	b.n	8007180 <_strtod_l+0x488>
 8007260:	08009905 	.word	0x08009905
 8007264:	08009b2c 	.word	0x08009b2c
 8007268:	080098fd 	.word	0x080098fd
 800726c:	08009934 	.word	0x08009934
 8007270:	08009cbd 	.word	0x08009cbd
 8007274:	08009a40 	.word	0x08009a40
 8007278:	08009a18 	.word	0x08009a18
 800727c:	7ca00000 	.word	0x7ca00000
 8007280:	7ff00000 	.word	0x7ff00000
 8007284:	7fefffff 	.word	0x7fefffff
 8007288:	f012 0110 	ands.w	r1, r2, #16
 800728c:	bf18      	it	ne
 800728e:	216a      	movne	r1, #106	; 0x6a
 8007290:	9105      	str	r1, [sp, #20]
 8007292:	ec49 8b17 	vmov	d7, r8, r9
 8007296:	49be      	ldr	r1, [pc, #760]	; (8007590 <_strtod_l+0x898>)
 8007298:	2000      	movs	r0, #0
 800729a:	07d7      	lsls	r7, r2, #31
 800729c:	d504      	bpl.n	80072a8 <_strtod_l+0x5b0>
 800729e:	ed91 6b00 	vldr	d6, [r1]
 80072a2:	2001      	movs	r0, #1
 80072a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072a8:	1052      	asrs	r2, r2, #1
 80072aa:	f101 0108 	add.w	r1, r1, #8
 80072ae:	d1f4      	bne.n	800729a <_strtod_l+0x5a2>
 80072b0:	b108      	cbz	r0, 80072b6 <_strtod_l+0x5be>
 80072b2:	ec59 8b17 	vmov	r8, r9, d7
 80072b6:	9a05      	ldr	r2, [sp, #20]
 80072b8:	b1ba      	cbz	r2, 80072ea <_strtod_l+0x5f2>
 80072ba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80072be:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	4648      	mov	r0, r9
 80072c6:	dd10      	ble.n	80072ea <_strtod_l+0x5f2>
 80072c8:	2a1f      	cmp	r2, #31
 80072ca:	f340 812c 	ble.w	8007526 <_strtod_l+0x82e>
 80072ce:	2a34      	cmp	r2, #52	; 0x34
 80072d0:	bfde      	ittt	le
 80072d2:	f04f 32ff 	movle.w	r2, #4294967295
 80072d6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80072da:	408a      	lslle	r2, r1
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	bfcc      	ite	gt
 80072e2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80072e6:	ea02 0900 	andle.w	r9, r2, r0
 80072ea:	ec49 8b17 	vmov	d7, r8, r9
 80072ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f6:	d0a8      	beq.n	800724a <_strtod_l+0x552>
 80072f8:	9a07      	ldr	r2, [sp, #28]
 80072fa:	9200      	str	r2, [sp, #0]
 80072fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072fe:	4632      	mov	r2, r6
 8007300:	4620      	mov	r0, r4
 8007302:	f7ff f8dd 	bl	80064c0 <__s2b>
 8007306:	9007      	str	r0, [sp, #28]
 8007308:	2800      	cmp	r0, #0
 800730a:	f43f af2f 	beq.w	800716c <_strtod_l+0x474>
 800730e:	9a06      	ldr	r2, [sp, #24]
 8007310:	2a00      	cmp	r2, #0
 8007312:	ebab 0305 	sub.w	r3, fp, r5
 8007316:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8007570 <_strtod_l+0x878>
 800731a:	bfa8      	it	ge
 800731c:	2300      	movge	r3, #0
 800731e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007578 <_strtod_l+0x880>
 8007322:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007580 <_strtod_l+0x888>
 8007326:	9309      	str	r3, [sp, #36]	; 0x24
 8007328:	2500      	movs	r5, #0
 800732a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800732e:	930c      	str	r3, [sp, #48]	; 0x30
 8007330:	462e      	mov	r6, r5
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	4620      	mov	r0, r4
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	f7ff f81a 	bl	8006370 <_Balloc>
 800733c:	4607      	mov	r7, r0
 800733e:	2800      	cmp	r0, #0
 8007340:	f43f af18 	beq.w	8007174 <_strtod_l+0x47c>
 8007344:	9b07      	ldr	r3, [sp, #28]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	3202      	adds	r2, #2
 800734a:	f103 010c 	add.w	r1, r3, #12
 800734e:	0092      	lsls	r2, r2, #2
 8007350:	300c      	adds	r0, #12
 8007352:	f000 fd4f 	bl	8007df4 <memcpy>
 8007356:	ec49 8b10 	vmov	d0, r8, r9
 800735a:	aa14      	add	r2, sp, #80	; 0x50
 800735c:	a913      	add	r1, sp, #76	; 0x4c
 800735e:	4620      	mov	r0, r4
 8007360:	f7ff fbe2 	bl	8006b28 <__d2b>
 8007364:	ec49 8b18 	vmov	d8, r8, r9
 8007368:	9012      	str	r0, [sp, #72]	; 0x48
 800736a:	2800      	cmp	r0, #0
 800736c:	f43f af02 	beq.w	8007174 <_strtod_l+0x47c>
 8007370:	2101      	movs	r1, #1
 8007372:	4620      	mov	r0, r4
 8007374:	f7ff f93c 	bl	80065f0 <__i2b>
 8007378:	4606      	mov	r6, r0
 800737a:	2800      	cmp	r0, #0
 800737c:	f43f aefa 	beq.w	8007174 <_strtod_l+0x47c>
 8007380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007382:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfab      	itete	ge
 8007388:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800738a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800738c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8007390:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8007394:	bfac      	ite	ge
 8007396:	eb03 0b02 	addge.w	fp, r3, r2
 800739a:	eba2 0a03 	sublt.w	sl, r2, r3
 800739e:	9a05      	ldr	r2, [sp, #20]
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	440b      	add	r3, r1
 80073a4:	4a7b      	ldr	r2, [pc, #492]	; (8007594 <_strtod_l+0x89c>)
 80073a6:	3b01      	subs	r3, #1
 80073a8:	4293      	cmp	r3, r2
 80073aa:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80073ae:	f280 80cd 	bge.w	800754c <_strtod_l+0x854>
 80073b2:	1ad2      	subs	r2, r2, r3
 80073b4:	2a1f      	cmp	r2, #31
 80073b6:	eba1 0102 	sub.w	r1, r1, r2
 80073ba:	f04f 0001 	mov.w	r0, #1
 80073be:	f300 80b9 	bgt.w	8007534 <_strtod_l+0x83c>
 80073c2:	fa00 f302 	lsl.w	r3, r0, r2
 80073c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c8:	2300      	movs	r3, #0
 80073ca:	930a      	str	r3, [sp, #40]	; 0x28
 80073cc:	eb0b 0301 	add.w	r3, fp, r1
 80073d0:	9a05      	ldr	r2, [sp, #20]
 80073d2:	459b      	cmp	fp, r3
 80073d4:	448a      	add	sl, r1
 80073d6:	4492      	add	sl, r2
 80073d8:	465a      	mov	r2, fp
 80073da:	bfa8      	it	ge
 80073dc:	461a      	movge	r2, r3
 80073de:	4552      	cmp	r2, sl
 80073e0:	bfa8      	it	ge
 80073e2:	4652      	movge	r2, sl
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	bfc2      	ittt	gt
 80073e8:	1a9b      	subgt	r3, r3, r2
 80073ea:	ebaa 0a02 	subgt.w	sl, sl, r2
 80073ee:	ebab 0b02 	subgt.w	fp, fp, r2
 80073f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	dd18      	ble.n	800742a <_strtod_l+0x732>
 80073f8:	4631      	mov	r1, r6
 80073fa:	4620      	mov	r0, r4
 80073fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80073fe:	f7ff f9b7 	bl	8006770 <__pow5mult>
 8007402:	4606      	mov	r6, r0
 8007404:	2800      	cmp	r0, #0
 8007406:	f43f aeb5 	beq.w	8007174 <_strtod_l+0x47c>
 800740a:	4601      	mov	r1, r0
 800740c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800740e:	4620      	mov	r0, r4
 8007410:	f7ff f904 	bl	800661c <__multiply>
 8007414:	900e      	str	r0, [sp, #56]	; 0x38
 8007416:	2800      	cmp	r0, #0
 8007418:	f43f aeac 	beq.w	8007174 <_strtod_l+0x47c>
 800741c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800741e:	4620      	mov	r0, r4
 8007420:	f7fe ffe6 	bl	80063f0 <_Bfree>
 8007424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007428:	9212      	str	r2, [sp, #72]	; 0x48
 800742a:	2b00      	cmp	r3, #0
 800742c:	f300 8093 	bgt.w	8007556 <_strtod_l+0x85e>
 8007430:	9b06      	ldr	r3, [sp, #24]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dd08      	ble.n	8007448 <_strtod_l+0x750>
 8007436:	4639      	mov	r1, r7
 8007438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800743a:	4620      	mov	r0, r4
 800743c:	f7ff f998 	bl	8006770 <__pow5mult>
 8007440:	4607      	mov	r7, r0
 8007442:	2800      	cmp	r0, #0
 8007444:	f43f ae96 	beq.w	8007174 <_strtod_l+0x47c>
 8007448:	f1ba 0f00 	cmp.w	sl, #0
 800744c:	dd08      	ble.n	8007460 <_strtod_l+0x768>
 800744e:	4639      	mov	r1, r7
 8007450:	4652      	mov	r2, sl
 8007452:	4620      	mov	r0, r4
 8007454:	f7ff f9e6 	bl	8006824 <__lshift>
 8007458:	4607      	mov	r7, r0
 800745a:	2800      	cmp	r0, #0
 800745c:	f43f ae8a 	beq.w	8007174 <_strtod_l+0x47c>
 8007460:	f1bb 0f00 	cmp.w	fp, #0
 8007464:	dd08      	ble.n	8007478 <_strtod_l+0x780>
 8007466:	4631      	mov	r1, r6
 8007468:	465a      	mov	r2, fp
 800746a:	4620      	mov	r0, r4
 800746c:	f7ff f9da 	bl	8006824 <__lshift>
 8007470:	4606      	mov	r6, r0
 8007472:	2800      	cmp	r0, #0
 8007474:	f43f ae7e 	beq.w	8007174 <_strtod_l+0x47c>
 8007478:	9912      	ldr	r1, [sp, #72]	; 0x48
 800747a:	463a      	mov	r2, r7
 800747c:	4620      	mov	r0, r4
 800747e:	f7ff fa59 	bl	8006934 <__mdiff>
 8007482:	4605      	mov	r5, r0
 8007484:	2800      	cmp	r0, #0
 8007486:	f43f ae75 	beq.w	8007174 <_strtod_l+0x47c>
 800748a:	2300      	movs	r3, #0
 800748c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007490:	60c3      	str	r3, [r0, #12]
 8007492:	4631      	mov	r1, r6
 8007494:	f7ff fa32 	bl	80068fc <__mcmp>
 8007498:	2800      	cmp	r0, #0
 800749a:	da7f      	bge.n	800759c <_strtod_l+0x8a4>
 800749c:	ea5a 0a08 	orrs.w	sl, sl, r8
 80074a0:	f040 80a5 	bne.w	80075ee <_strtod_l+0x8f6>
 80074a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f040 80a0 	bne.w	80075ee <_strtod_l+0x8f6>
 80074ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074b2:	0d1b      	lsrs	r3, r3, #20
 80074b4:	051b      	lsls	r3, r3, #20
 80074b6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074ba:	f240 8098 	bls.w	80075ee <_strtod_l+0x8f6>
 80074be:	696b      	ldr	r3, [r5, #20]
 80074c0:	b91b      	cbnz	r3, 80074ca <_strtod_l+0x7d2>
 80074c2:	692b      	ldr	r3, [r5, #16]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	f340 8092 	ble.w	80075ee <_strtod_l+0x8f6>
 80074ca:	4629      	mov	r1, r5
 80074cc:	2201      	movs	r2, #1
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7ff f9a8 	bl	8006824 <__lshift>
 80074d4:	4631      	mov	r1, r6
 80074d6:	4605      	mov	r5, r0
 80074d8:	f7ff fa10 	bl	80068fc <__mcmp>
 80074dc:	2800      	cmp	r0, #0
 80074de:	f340 8086 	ble.w	80075ee <_strtod_l+0x8f6>
 80074e2:	9905      	ldr	r1, [sp, #20]
 80074e4:	4a2c      	ldr	r2, [pc, #176]	; (8007598 <_strtod_l+0x8a0>)
 80074e6:	464b      	mov	r3, r9
 80074e8:	2900      	cmp	r1, #0
 80074ea:	f000 809f 	beq.w	800762c <_strtod_l+0x934>
 80074ee:	ea02 0109 	and.w	r1, r2, r9
 80074f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074f6:	f300 8099 	bgt.w	800762c <_strtod_l+0x934>
 80074fa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074fe:	f77f aea8 	ble.w	8007252 <_strtod_l+0x55a>
 8007502:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007588 <_strtod_l+0x890>
 8007506:	ec49 8b16 	vmov	d6, r8, r9
 800750a:	4b23      	ldr	r3, [pc, #140]	; (8007598 <_strtod_l+0x8a0>)
 800750c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007510:	ee17 2a90 	vmov	r2, s15
 8007514:	4013      	ands	r3, r2
 8007516:	ec59 8b17 	vmov	r8, r9, d7
 800751a:	2b00      	cmp	r3, #0
 800751c:	f47f ae34 	bne.w	8007188 <_strtod_l+0x490>
 8007520:	2322      	movs	r3, #34	; 0x22
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	e630      	b.n	8007188 <_strtod_l+0x490>
 8007526:	f04f 31ff 	mov.w	r1, #4294967295
 800752a:	fa01 f202 	lsl.w	r2, r1, r2
 800752e:	ea02 0808 	and.w	r8, r2, r8
 8007532:	e6da      	b.n	80072ea <_strtod_l+0x5f2>
 8007534:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007538:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800753c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007540:	33e2      	adds	r3, #226	; 0xe2
 8007542:	fa00 f303 	lsl.w	r3, r0, r3
 8007546:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800754a:	e73f      	b.n	80073cc <_strtod_l+0x6d4>
 800754c:	2200      	movs	r2, #0
 800754e:	2301      	movs	r3, #1
 8007550:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007554:	e73a      	b.n	80073cc <_strtod_l+0x6d4>
 8007556:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007558:	461a      	mov	r2, r3
 800755a:	4620      	mov	r0, r4
 800755c:	f7ff f962 	bl	8006824 <__lshift>
 8007560:	9012      	str	r0, [sp, #72]	; 0x48
 8007562:	2800      	cmp	r0, #0
 8007564:	f47f af64 	bne.w	8007430 <_strtod_l+0x738>
 8007568:	e604      	b.n	8007174 <_strtod_l+0x47c>
 800756a:	bf00      	nop
 800756c:	f3af 8000 	nop.w
 8007570:	94a03595 	.word	0x94a03595
 8007574:	3fcfffff 	.word	0x3fcfffff
 8007578:	94a03595 	.word	0x94a03595
 800757c:	3fdfffff 	.word	0x3fdfffff
 8007580:	35afe535 	.word	0x35afe535
 8007584:	3fe00000 	.word	0x3fe00000
 8007588:	00000000 	.word	0x00000000
 800758c:	39500000 	.word	0x39500000
 8007590:	08009b40 	.word	0x08009b40
 8007594:	fffffc02 	.word	0xfffffc02
 8007598:	7ff00000 	.word	0x7ff00000
 800759c:	46cb      	mov	fp, r9
 800759e:	d15f      	bne.n	8007660 <_strtod_l+0x968>
 80075a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075a4:	f1ba 0f00 	cmp.w	sl, #0
 80075a8:	d02a      	beq.n	8007600 <_strtod_l+0x908>
 80075aa:	4aa7      	ldr	r2, [pc, #668]	; (8007848 <_strtod_l+0xb50>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d12b      	bne.n	8007608 <_strtod_l+0x910>
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	4642      	mov	r2, r8
 80075b4:	b1fb      	cbz	r3, 80075f6 <_strtod_l+0x8fe>
 80075b6:	4ba5      	ldr	r3, [pc, #660]	; (800784c <_strtod_l+0xb54>)
 80075b8:	ea09 0303 	and.w	r3, r9, r3
 80075bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075c0:	f04f 31ff 	mov.w	r1, #4294967295
 80075c4:	d81a      	bhi.n	80075fc <_strtod_l+0x904>
 80075c6:	0d1b      	lsrs	r3, r3, #20
 80075c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075cc:	fa01 f303 	lsl.w	r3, r1, r3
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d119      	bne.n	8007608 <_strtod_l+0x910>
 80075d4:	4b9e      	ldr	r3, [pc, #632]	; (8007850 <_strtod_l+0xb58>)
 80075d6:	459b      	cmp	fp, r3
 80075d8:	d102      	bne.n	80075e0 <_strtod_l+0x8e8>
 80075da:	3201      	adds	r2, #1
 80075dc:	f43f adca 	beq.w	8007174 <_strtod_l+0x47c>
 80075e0:	4b9a      	ldr	r3, [pc, #616]	; (800784c <_strtod_l+0xb54>)
 80075e2:	ea0b 0303 	and.w	r3, fp, r3
 80075e6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	9b05      	ldr	r3, [sp, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d186      	bne.n	8007502 <_strtod_l+0x80a>
 80075f4:	e5c8      	b.n	8007188 <_strtod_l+0x490>
 80075f6:	f04f 33ff 	mov.w	r3, #4294967295
 80075fa:	e7e9      	b.n	80075d0 <_strtod_l+0x8d8>
 80075fc:	460b      	mov	r3, r1
 80075fe:	e7e7      	b.n	80075d0 <_strtod_l+0x8d8>
 8007600:	ea53 0308 	orrs.w	r3, r3, r8
 8007604:	f43f af6d 	beq.w	80074e2 <_strtod_l+0x7ea>
 8007608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760a:	b1cb      	cbz	r3, 8007640 <_strtod_l+0x948>
 800760c:	ea13 0f0b 	tst.w	r3, fp
 8007610:	d0ed      	beq.n	80075ee <_strtod_l+0x8f6>
 8007612:	9a05      	ldr	r2, [sp, #20]
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f1ba 0f00 	cmp.w	sl, #0
 800761c:	d014      	beq.n	8007648 <_strtod_l+0x950>
 800761e:	f7ff fb51 	bl	8006cc4 <sulp>
 8007622:	ee38 7b00 	vadd.f64	d7, d8, d0
 8007626:	ec59 8b17 	vmov	r8, r9, d7
 800762a:	e7e0      	b.n	80075ee <_strtod_l+0x8f6>
 800762c:	4013      	ands	r3, r2
 800762e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007632:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007636:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800763a:	f04f 38ff 	mov.w	r8, #4294967295
 800763e:	e7d6      	b.n	80075ee <_strtod_l+0x8f6>
 8007640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007642:	ea13 0f08 	tst.w	r3, r8
 8007646:	e7e3      	b.n	8007610 <_strtod_l+0x918>
 8007648:	f7ff fb3c 	bl	8006cc4 <sulp>
 800764c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007650:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	ec59 8b10 	vmov	r8, r9, d0
 800765c:	d1c7      	bne.n	80075ee <_strtod_l+0x8f6>
 800765e:	e5f8      	b.n	8007252 <_strtod_l+0x55a>
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	f7ff faba 	bl	8006bdc <__ratio>
 8007668:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800766c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007674:	d85f      	bhi.n	8007736 <_strtod_l+0xa3e>
 8007676:	f1ba 0f00 	cmp.w	sl, #0
 800767a:	d166      	bne.n	800774a <_strtod_l+0xa52>
 800767c:	f1b8 0f00 	cmp.w	r8, #0
 8007680:	d14d      	bne.n	800771e <_strtod_l+0xa26>
 8007682:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007686:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d162      	bne.n	8007754 <_strtod_l+0xa5c>
 800768e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8007692:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769a:	d401      	bmi.n	80076a0 <_strtod_l+0x9a8>
 800769c:	ee20 db0d 	vmul.f64	d13, d0, d13
 80076a0:	eeb1 cb4d 	vneg.f64	d12, d13
 80076a4:	4869      	ldr	r0, [pc, #420]	; (800784c <_strtod_l+0xb54>)
 80076a6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8007858 <_strtod_l+0xb60>
 80076aa:	ea0b 0100 	and.w	r1, fp, r0
 80076ae:	4561      	cmp	r1, ip
 80076b0:	ec53 2b1c 	vmov	r2, r3, d12
 80076b4:	d17a      	bne.n	80077ac <_strtod_l+0xab4>
 80076b6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80076ba:	ec49 8b10 	vmov	d0, r8, r9
 80076be:	910a      	str	r1, [sp, #40]	; 0x28
 80076c0:	f7ff f9c2 	bl	8006a48 <__ulp>
 80076c4:	ec49 8b1e 	vmov	d14, r8, r9
 80076c8:	4860      	ldr	r0, [pc, #384]	; (800784c <_strtod_l+0xb54>)
 80076ca:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80076ce:	ee1e 3a90 	vmov	r3, s29
 80076d2:	4a60      	ldr	r2, [pc, #384]	; (8007854 <_strtod_l+0xb5c>)
 80076d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076d6:	4018      	ands	r0, r3
 80076d8:	4290      	cmp	r0, r2
 80076da:	ec59 8b1e 	vmov	r8, r9, d14
 80076de:	d93c      	bls.n	800775a <_strtod_l+0xa62>
 80076e0:	ee18 2a90 	vmov	r2, s17
 80076e4:	4b5a      	ldr	r3, [pc, #360]	; (8007850 <_strtod_l+0xb58>)
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d104      	bne.n	80076f4 <_strtod_l+0x9fc>
 80076ea:	ee18 3a10 	vmov	r3, s16
 80076ee:	3301      	adds	r3, #1
 80076f0:	f43f ad40 	beq.w	8007174 <_strtod_l+0x47c>
 80076f4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007850 <_strtod_l+0xb58>
 80076f8:	f04f 38ff 	mov.w	r8, #4294967295
 80076fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80076fe:	4620      	mov	r0, r4
 8007700:	f7fe fe76 	bl	80063f0 <_Bfree>
 8007704:	4639      	mov	r1, r7
 8007706:	4620      	mov	r0, r4
 8007708:	f7fe fe72 	bl	80063f0 <_Bfree>
 800770c:	4631      	mov	r1, r6
 800770e:	4620      	mov	r0, r4
 8007710:	f7fe fe6e 	bl	80063f0 <_Bfree>
 8007714:	4629      	mov	r1, r5
 8007716:	4620      	mov	r0, r4
 8007718:	f7fe fe6a 	bl	80063f0 <_Bfree>
 800771c:	e609      	b.n	8007332 <_strtod_l+0x63a>
 800771e:	f1b8 0f01 	cmp.w	r8, #1
 8007722:	d103      	bne.n	800772c <_strtod_l+0xa34>
 8007724:	f1b9 0f00 	cmp.w	r9, #0
 8007728:	f43f ad93 	beq.w	8007252 <_strtod_l+0x55a>
 800772c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007730:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007734:	e7b6      	b.n	80076a4 <_strtod_l+0x9ac>
 8007736:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800773a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800773e:	f1ba 0f00 	cmp.w	sl, #0
 8007742:	d0ad      	beq.n	80076a0 <_strtod_l+0x9a8>
 8007744:	eeb0 cb4d 	vmov.f64	d12, d13
 8007748:	e7ac      	b.n	80076a4 <_strtod_l+0x9ac>
 800774a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800774e:	eeb0 db4c 	vmov.f64	d13, d12
 8007752:	e7a7      	b.n	80076a4 <_strtod_l+0x9ac>
 8007754:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007758:	e7a4      	b.n	80076a4 <_strtod_l+0x9ac>
 800775a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800775e:	9b05      	ldr	r3, [sp, #20]
 8007760:	46cb      	mov	fp, r9
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ca      	bne.n	80076fc <_strtod_l+0xa04>
 8007766:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800776a:	0d1b      	lsrs	r3, r3, #20
 800776c:	051b      	lsls	r3, r3, #20
 800776e:	4299      	cmp	r1, r3
 8007770:	d1c4      	bne.n	80076fc <_strtod_l+0xa04>
 8007772:	ec51 0b1d 	vmov	r0, r1, d13
 8007776:	f7f8 ff8f 	bl	8000698 <__aeabi_d2lz>
 800777a:	f7f8 ff47 	bl	800060c <__aeabi_l2d>
 800777e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8007782:	ec41 0b17 	vmov	d7, r0, r1
 8007786:	ea4b 0b08 	orr.w	fp, fp, r8
 800778a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800778e:	ee3d db47 	vsub.f64	d13, d13, d7
 8007792:	d03c      	beq.n	800780e <_strtod_l+0xb16>
 8007794:	eeb4 dbca 	vcmpe.f64	d13, d10
 8007798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779c:	f53f acf4 	bmi.w	8007188 <_strtod_l+0x490>
 80077a0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	dda8      	ble.n	80076fc <_strtod_l+0xa04>
 80077aa:	e4ed      	b.n	8007188 <_strtod_l+0x490>
 80077ac:	9805      	ldr	r0, [sp, #20]
 80077ae:	b1f0      	cbz	r0, 80077ee <_strtod_l+0xaf6>
 80077b0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80077b4:	d81b      	bhi.n	80077ee <_strtod_l+0xaf6>
 80077b6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007840 <_strtod_l+0xb48>
 80077ba:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80077be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c2:	d811      	bhi.n	80077e8 <_strtod_l+0xaf0>
 80077c4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80077c8:	ee1d 3a10 	vmov	r3, s26
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	bf38      	it	cc
 80077d0:	2301      	movcc	r3, #1
 80077d2:	ee0d 3a10 	vmov	s26, r3
 80077d6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80077da:	f1ba 0f00 	cmp.w	sl, #0
 80077de:	d113      	bne.n	8007808 <_strtod_l+0xb10>
 80077e0:	eeb1 7b4d 	vneg.f64	d7, d13
 80077e4:	ec53 2b17 	vmov	r2, r3, d7
 80077e8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80077ec:	1a43      	subs	r3, r0, r1
 80077ee:	eeb0 0b48 	vmov.f64	d0, d8
 80077f2:	ec43 2b1c 	vmov	d12, r2, r3
 80077f6:	910a      	str	r1, [sp, #40]	; 0x28
 80077f8:	f7ff f926 	bl	8006a48 <__ulp>
 80077fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077fe:	eeac 8b00 	vfma.f64	d8, d12, d0
 8007802:	ec59 8b18 	vmov	r8, r9, d8
 8007806:	e7aa      	b.n	800775e <_strtod_l+0xa66>
 8007808:	eeb0 7b4d 	vmov.f64	d7, d13
 800780c:	e7ea      	b.n	80077e4 <_strtod_l+0xaec>
 800780e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8007812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007816:	f57f af71 	bpl.w	80076fc <_strtod_l+0xa04>
 800781a:	e4b5      	b.n	8007188 <_strtod_l+0x490>
 800781c:	2300      	movs	r3, #0
 800781e:	9308      	str	r3, [sp, #32]
 8007820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	f7ff baa6 	b.w	8006d76 <_strtod_l+0x7e>
 800782a:	2a65      	cmp	r2, #101	; 0x65
 800782c:	f43f aba2 	beq.w	8006f74 <_strtod_l+0x27c>
 8007830:	2a45      	cmp	r2, #69	; 0x45
 8007832:	f43f ab9f 	beq.w	8006f74 <_strtod_l+0x27c>
 8007836:	2101      	movs	r1, #1
 8007838:	f7ff bbd8 	b.w	8006fec <_strtod_l+0x2f4>
 800783c:	f3af 8000 	nop.w
 8007840:	ffc00000 	.word	0xffc00000
 8007844:	41dfffff 	.word	0x41dfffff
 8007848:	000fffff 	.word	0x000fffff
 800784c:	7ff00000 	.word	0x7ff00000
 8007850:	7fefffff 	.word	0x7fefffff
 8007854:	7c9fffff 	.word	0x7c9fffff
 8007858:	7fe00000 	.word	0x7fe00000

0800785c <_strtod_r>:
 800785c:	4b01      	ldr	r3, [pc, #4]	; (8007864 <_strtod_r+0x8>)
 800785e:	f7ff ba4b 	b.w	8006cf8 <_strtod_l>
 8007862:	bf00      	nop
 8007864:	20000070 	.word	0x20000070

08007868 <_strtol_l.constprop.0>:
 8007868:	2b01      	cmp	r3, #1
 800786a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786e:	d001      	beq.n	8007874 <_strtol_l.constprop.0+0xc>
 8007870:	2b24      	cmp	r3, #36	; 0x24
 8007872:	d906      	bls.n	8007882 <_strtol_l.constprop.0+0x1a>
 8007874:	f7fd fe52 	bl	800551c <__errno>
 8007878:	2316      	movs	r3, #22
 800787a:	6003      	str	r3, [r0, #0]
 800787c:	2000      	movs	r0, #0
 800787e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007882:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007968 <_strtol_l.constprop.0+0x100>
 8007886:	460d      	mov	r5, r1
 8007888:	462e      	mov	r6, r5
 800788a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800788e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007892:	f017 0708 	ands.w	r7, r7, #8
 8007896:	d1f7      	bne.n	8007888 <_strtol_l.constprop.0+0x20>
 8007898:	2c2d      	cmp	r4, #45	; 0x2d
 800789a:	d132      	bne.n	8007902 <_strtol_l.constprop.0+0x9a>
 800789c:	782c      	ldrb	r4, [r5, #0]
 800789e:	2701      	movs	r7, #1
 80078a0:	1cb5      	adds	r5, r6, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d05b      	beq.n	800795e <_strtol_l.constprop.0+0xf6>
 80078a6:	2b10      	cmp	r3, #16
 80078a8:	d109      	bne.n	80078be <_strtol_l.constprop.0+0x56>
 80078aa:	2c30      	cmp	r4, #48	; 0x30
 80078ac:	d107      	bne.n	80078be <_strtol_l.constprop.0+0x56>
 80078ae:	782c      	ldrb	r4, [r5, #0]
 80078b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80078b4:	2c58      	cmp	r4, #88	; 0x58
 80078b6:	d14d      	bne.n	8007954 <_strtol_l.constprop.0+0xec>
 80078b8:	786c      	ldrb	r4, [r5, #1]
 80078ba:	2310      	movs	r3, #16
 80078bc:	3502      	adds	r5, #2
 80078be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80078c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80078c6:	f04f 0e00 	mov.w	lr, #0
 80078ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80078ce:	4676      	mov	r6, lr
 80078d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80078d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80078d8:	f1bc 0f09 	cmp.w	ip, #9
 80078dc:	d816      	bhi.n	800790c <_strtol_l.constprop.0+0xa4>
 80078de:	4664      	mov	r4, ip
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	dd24      	ble.n	800792e <_strtol_l.constprop.0+0xc6>
 80078e4:	f1be 3fff 	cmp.w	lr, #4294967295
 80078e8:	d008      	beq.n	80078fc <_strtol_l.constprop.0+0x94>
 80078ea:	45b1      	cmp	r9, r6
 80078ec:	d31c      	bcc.n	8007928 <_strtol_l.constprop.0+0xc0>
 80078ee:	d101      	bne.n	80078f4 <_strtol_l.constprop.0+0x8c>
 80078f0:	45a2      	cmp	sl, r4
 80078f2:	db19      	blt.n	8007928 <_strtol_l.constprop.0+0xc0>
 80078f4:	fb06 4603 	mla	r6, r6, r3, r4
 80078f8:	f04f 0e01 	mov.w	lr, #1
 80078fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007900:	e7e8      	b.n	80078d4 <_strtol_l.constprop.0+0x6c>
 8007902:	2c2b      	cmp	r4, #43	; 0x2b
 8007904:	bf04      	itt	eq
 8007906:	782c      	ldrbeq	r4, [r5, #0]
 8007908:	1cb5      	addeq	r5, r6, #2
 800790a:	e7ca      	b.n	80078a2 <_strtol_l.constprop.0+0x3a>
 800790c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007910:	f1bc 0f19 	cmp.w	ip, #25
 8007914:	d801      	bhi.n	800791a <_strtol_l.constprop.0+0xb2>
 8007916:	3c37      	subs	r4, #55	; 0x37
 8007918:	e7e2      	b.n	80078e0 <_strtol_l.constprop.0+0x78>
 800791a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800791e:	f1bc 0f19 	cmp.w	ip, #25
 8007922:	d804      	bhi.n	800792e <_strtol_l.constprop.0+0xc6>
 8007924:	3c57      	subs	r4, #87	; 0x57
 8007926:	e7db      	b.n	80078e0 <_strtol_l.constprop.0+0x78>
 8007928:	f04f 3eff 	mov.w	lr, #4294967295
 800792c:	e7e6      	b.n	80078fc <_strtol_l.constprop.0+0x94>
 800792e:	f1be 3fff 	cmp.w	lr, #4294967295
 8007932:	d105      	bne.n	8007940 <_strtol_l.constprop.0+0xd8>
 8007934:	2322      	movs	r3, #34	; 0x22
 8007936:	6003      	str	r3, [r0, #0]
 8007938:	4646      	mov	r6, r8
 800793a:	b942      	cbnz	r2, 800794e <_strtol_l.constprop.0+0xe6>
 800793c:	4630      	mov	r0, r6
 800793e:	e79e      	b.n	800787e <_strtol_l.constprop.0+0x16>
 8007940:	b107      	cbz	r7, 8007944 <_strtol_l.constprop.0+0xdc>
 8007942:	4276      	negs	r6, r6
 8007944:	2a00      	cmp	r2, #0
 8007946:	d0f9      	beq.n	800793c <_strtol_l.constprop.0+0xd4>
 8007948:	f1be 0f00 	cmp.w	lr, #0
 800794c:	d000      	beq.n	8007950 <_strtol_l.constprop.0+0xe8>
 800794e:	1e69      	subs	r1, r5, #1
 8007950:	6011      	str	r1, [r2, #0]
 8007952:	e7f3      	b.n	800793c <_strtol_l.constprop.0+0xd4>
 8007954:	2430      	movs	r4, #48	; 0x30
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1b1      	bne.n	80078be <_strtol_l.constprop.0+0x56>
 800795a:	2308      	movs	r3, #8
 800795c:	e7af      	b.n	80078be <_strtol_l.constprop.0+0x56>
 800795e:	2c30      	cmp	r4, #48	; 0x30
 8007960:	d0a5      	beq.n	80078ae <_strtol_l.constprop.0+0x46>
 8007962:	230a      	movs	r3, #10
 8007964:	e7ab      	b.n	80078be <_strtol_l.constprop.0+0x56>
 8007966:	bf00      	nop
 8007968:	08009b69 	.word	0x08009b69

0800796c <_strtol_r>:
 800796c:	f7ff bf7c 	b.w	8007868 <_strtol_l.constprop.0>

08007970 <__ssputs_r>:
 8007970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	688e      	ldr	r6, [r1, #8]
 8007976:	461f      	mov	r7, r3
 8007978:	42be      	cmp	r6, r7
 800797a:	680b      	ldr	r3, [r1, #0]
 800797c:	4682      	mov	sl, r0
 800797e:	460c      	mov	r4, r1
 8007980:	4690      	mov	r8, r2
 8007982:	d82c      	bhi.n	80079de <__ssputs_r+0x6e>
 8007984:	898a      	ldrh	r2, [r1, #12]
 8007986:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800798a:	d026      	beq.n	80079da <__ssputs_r+0x6a>
 800798c:	6965      	ldr	r5, [r4, #20]
 800798e:	6909      	ldr	r1, [r1, #16]
 8007990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007994:	eba3 0901 	sub.w	r9, r3, r1
 8007998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800799c:	1c7b      	adds	r3, r7, #1
 800799e:	444b      	add	r3, r9
 80079a0:	106d      	asrs	r5, r5, #1
 80079a2:	429d      	cmp	r5, r3
 80079a4:	bf38      	it	cc
 80079a6:	461d      	movcc	r5, r3
 80079a8:	0553      	lsls	r3, r2, #21
 80079aa:	d527      	bpl.n	80079fc <__ssputs_r+0x8c>
 80079ac:	4629      	mov	r1, r5
 80079ae:	f7fe fc53 	bl	8006258 <_malloc_r>
 80079b2:	4606      	mov	r6, r0
 80079b4:	b360      	cbz	r0, 8007a10 <__ssputs_r+0xa0>
 80079b6:	6921      	ldr	r1, [r4, #16]
 80079b8:	464a      	mov	r2, r9
 80079ba:	f000 fa1b 	bl	8007df4 <memcpy>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	6126      	str	r6, [r4, #16]
 80079cc:	6165      	str	r5, [r4, #20]
 80079ce:	444e      	add	r6, r9
 80079d0:	eba5 0509 	sub.w	r5, r5, r9
 80079d4:	6026      	str	r6, [r4, #0]
 80079d6:	60a5      	str	r5, [r4, #8]
 80079d8:	463e      	mov	r6, r7
 80079da:	42be      	cmp	r6, r7
 80079dc:	d900      	bls.n	80079e0 <__ssputs_r+0x70>
 80079de:	463e      	mov	r6, r7
 80079e0:	6820      	ldr	r0, [r4, #0]
 80079e2:	4632      	mov	r2, r6
 80079e4:	4641      	mov	r1, r8
 80079e6:	f000 f9c9 	bl	8007d7c <memmove>
 80079ea:	68a3      	ldr	r3, [r4, #8]
 80079ec:	1b9b      	subs	r3, r3, r6
 80079ee:	60a3      	str	r3, [r4, #8]
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	4433      	add	r3, r6
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	2000      	movs	r0, #0
 80079f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fc:	462a      	mov	r2, r5
 80079fe:	f000 fdac 	bl	800855a <_realloc_r>
 8007a02:	4606      	mov	r6, r0
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d1e0      	bne.n	80079ca <__ssputs_r+0x5a>
 8007a08:	6921      	ldr	r1, [r4, #16]
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	f7fe fbb0 	bl	8006170 <_free_r>
 8007a10:	230c      	movs	r3, #12
 8007a12:	f8ca 3000 	str.w	r3, [sl]
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a22:	e7e9      	b.n	80079f8 <__ssputs_r+0x88>

08007a24 <_svfiprintf_r>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	4698      	mov	r8, r3
 8007a2a:	898b      	ldrh	r3, [r1, #12]
 8007a2c:	061b      	lsls	r3, r3, #24
 8007a2e:	b09d      	sub	sp, #116	; 0x74
 8007a30:	4607      	mov	r7, r0
 8007a32:	460d      	mov	r5, r1
 8007a34:	4614      	mov	r4, r2
 8007a36:	d50e      	bpl.n	8007a56 <_svfiprintf_r+0x32>
 8007a38:	690b      	ldr	r3, [r1, #16]
 8007a3a:	b963      	cbnz	r3, 8007a56 <_svfiprintf_r+0x32>
 8007a3c:	2140      	movs	r1, #64	; 0x40
 8007a3e:	f7fe fc0b 	bl	8006258 <_malloc_r>
 8007a42:	6028      	str	r0, [r5, #0]
 8007a44:	6128      	str	r0, [r5, #16]
 8007a46:	b920      	cbnz	r0, 8007a52 <_svfiprintf_r+0x2e>
 8007a48:	230c      	movs	r3, #12
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	e0d0      	b.n	8007bf4 <_svfiprintf_r+0x1d0>
 8007a52:	2340      	movs	r3, #64	; 0x40
 8007a54:	616b      	str	r3, [r5, #20]
 8007a56:	2300      	movs	r3, #0
 8007a58:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5a:	2320      	movs	r3, #32
 8007a5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a64:	2330      	movs	r3, #48	; 0x30
 8007a66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c0c <_svfiprintf_r+0x1e8>
 8007a6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a6e:	f04f 0901 	mov.w	r9, #1
 8007a72:	4623      	mov	r3, r4
 8007a74:	469a      	mov	sl, r3
 8007a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a7a:	b10a      	cbz	r2, 8007a80 <_svfiprintf_r+0x5c>
 8007a7c:	2a25      	cmp	r2, #37	; 0x25
 8007a7e:	d1f9      	bne.n	8007a74 <_svfiprintf_r+0x50>
 8007a80:	ebba 0b04 	subs.w	fp, sl, r4
 8007a84:	d00b      	beq.n	8007a9e <_svfiprintf_r+0x7a>
 8007a86:	465b      	mov	r3, fp
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	f7ff ff6f 	bl	8007970 <__ssputs_r>
 8007a92:	3001      	adds	r0, #1
 8007a94:	f000 80a9 	beq.w	8007bea <_svfiprintf_r+0x1c6>
 8007a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a9a:	445a      	add	r2, fp
 8007a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 80a1 	beq.w	8007bea <_svfiprintf_r+0x1c6>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ab2:	f10a 0a01 	add.w	sl, sl, #1
 8007ab6:	9304      	str	r3, [sp, #16]
 8007ab8:	9307      	str	r3, [sp, #28]
 8007aba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007abe:	931a      	str	r3, [sp, #104]	; 0x68
 8007ac0:	4654      	mov	r4, sl
 8007ac2:	2205      	movs	r2, #5
 8007ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac8:	4850      	ldr	r0, [pc, #320]	; (8007c0c <_svfiprintf_r+0x1e8>)
 8007aca:	f7f8 fbb9 	bl	8000240 <memchr>
 8007ace:	9a04      	ldr	r2, [sp, #16]
 8007ad0:	b9d8      	cbnz	r0, 8007b0a <_svfiprintf_r+0xe6>
 8007ad2:	06d0      	lsls	r0, r2, #27
 8007ad4:	bf44      	itt	mi
 8007ad6:	2320      	movmi	r3, #32
 8007ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007adc:	0711      	lsls	r1, r2, #28
 8007ade:	bf44      	itt	mi
 8007ae0:	232b      	movmi	r3, #43	; 0x2b
 8007ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aea:	2b2a      	cmp	r3, #42	; 0x2a
 8007aec:	d015      	beq.n	8007b1a <_svfiprintf_r+0xf6>
 8007aee:	9a07      	ldr	r2, [sp, #28]
 8007af0:	4654      	mov	r4, sl
 8007af2:	2000      	movs	r0, #0
 8007af4:	f04f 0c0a 	mov.w	ip, #10
 8007af8:	4621      	mov	r1, r4
 8007afa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007afe:	3b30      	subs	r3, #48	; 0x30
 8007b00:	2b09      	cmp	r3, #9
 8007b02:	d94d      	bls.n	8007ba0 <_svfiprintf_r+0x17c>
 8007b04:	b1b0      	cbz	r0, 8007b34 <_svfiprintf_r+0x110>
 8007b06:	9207      	str	r2, [sp, #28]
 8007b08:	e014      	b.n	8007b34 <_svfiprintf_r+0x110>
 8007b0a:	eba0 0308 	sub.w	r3, r0, r8
 8007b0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	46a2      	mov	sl, r4
 8007b18:	e7d2      	b.n	8007ac0 <_svfiprintf_r+0x9c>
 8007b1a:	9b03      	ldr	r3, [sp, #12]
 8007b1c:	1d19      	adds	r1, r3, #4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	9103      	str	r1, [sp, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bfbb      	ittet	lt
 8007b26:	425b      	neglt	r3, r3
 8007b28:	f042 0202 	orrlt.w	r2, r2, #2
 8007b2c:	9307      	strge	r3, [sp, #28]
 8007b2e:	9307      	strlt	r3, [sp, #28]
 8007b30:	bfb8      	it	lt
 8007b32:	9204      	strlt	r2, [sp, #16]
 8007b34:	7823      	ldrb	r3, [r4, #0]
 8007b36:	2b2e      	cmp	r3, #46	; 0x2e
 8007b38:	d10c      	bne.n	8007b54 <_svfiprintf_r+0x130>
 8007b3a:	7863      	ldrb	r3, [r4, #1]
 8007b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3e:	d134      	bne.n	8007baa <_svfiprintf_r+0x186>
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	1d1a      	adds	r2, r3, #4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	9203      	str	r2, [sp, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfb8      	it	lt
 8007b4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b50:	3402      	adds	r4, #2
 8007b52:	9305      	str	r3, [sp, #20]
 8007b54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c1c <_svfiprintf_r+0x1f8>
 8007b58:	7821      	ldrb	r1, [r4, #0]
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	4650      	mov	r0, sl
 8007b5e:	f7f8 fb6f 	bl	8000240 <memchr>
 8007b62:	b138      	cbz	r0, 8007b74 <_svfiprintf_r+0x150>
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	eba0 000a 	sub.w	r0, r0, sl
 8007b6a:	2240      	movs	r2, #64	; 0x40
 8007b6c:	4082      	lsls	r2, r0
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	3401      	adds	r4, #1
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	4825      	ldr	r0, [pc, #148]	; (8007c10 <_svfiprintf_r+0x1ec>)
 8007b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b7e:	2206      	movs	r2, #6
 8007b80:	f7f8 fb5e 	bl	8000240 <memchr>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d038      	beq.n	8007bfa <_svfiprintf_r+0x1d6>
 8007b88:	4b22      	ldr	r3, [pc, #136]	; (8007c14 <_svfiprintf_r+0x1f0>)
 8007b8a:	bb1b      	cbnz	r3, 8007bd4 <_svfiprintf_r+0x1b0>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	3307      	adds	r3, #7
 8007b90:	f023 0307 	bic.w	r3, r3, #7
 8007b94:	3308      	adds	r3, #8
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9a:	4433      	add	r3, r6
 8007b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9e:	e768      	b.n	8007a72 <_svfiprintf_r+0x4e>
 8007ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e7a6      	b.n	8007af8 <_svfiprintf_r+0xd4>
 8007baa:	2300      	movs	r3, #0
 8007bac:	3401      	adds	r4, #1
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f04f 0c0a 	mov.w	ip, #10
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bbc:	3a30      	subs	r2, #48	; 0x30
 8007bbe:	2a09      	cmp	r2, #9
 8007bc0:	d903      	bls.n	8007bca <_svfiprintf_r+0x1a6>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0c6      	beq.n	8007b54 <_svfiprintf_r+0x130>
 8007bc6:	9105      	str	r1, [sp, #20]
 8007bc8:	e7c4      	b.n	8007b54 <_svfiprintf_r+0x130>
 8007bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bce:	4604      	mov	r4, r0
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e7f0      	b.n	8007bb6 <_svfiprintf_r+0x192>
 8007bd4:	ab03      	add	r3, sp, #12
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	462a      	mov	r2, r5
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <_svfiprintf_r+0x1f4>)
 8007bdc:	a904      	add	r1, sp, #16
 8007bde:	4638      	mov	r0, r7
 8007be0:	f7fc fd76 	bl	80046d0 <_printf_float>
 8007be4:	1c42      	adds	r2, r0, #1
 8007be6:	4606      	mov	r6, r0
 8007be8:	d1d6      	bne.n	8007b98 <_svfiprintf_r+0x174>
 8007bea:	89ab      	ldrh	r3, [r5, #12]
 8007bec:	065b      	lsls	r3, r3, #25
 8007bee:	f53f af2d 	bmi.w	8007a4c <_svfiprintf_r+0x28>
 8007bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bf4:	b01d      	add	sp, #116	; 0x74
 8007bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfa:	ab03      	add	r3, sp, #12
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	462a      	mov	r2, r5
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <_svfiprintf_r+0x1f4>)
 8007c02:	a904      	add	r1, sp, #16
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7fc ffeb 	bl	8004be0 <_printf_i>
 8007c0a:	e7eb      	b.n	8007be4 <_svfiprintf_r+0x1c0>
 8007c0c:	08009c69 	.word	0x08009c69
 8007c10:	08009c73 	.word	0x08009c73
 8007c14:	080046d1 	.word	0x080046d1
 8007c18:	08007971 	.word	0x08007971
 8007c1c:	08009c6f 	.word	0x08009c6f

08007c20 <__sflush_r>:
 8007c20:	898a      	ldrh	r2, [r1, #12]
 8007c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c26:	4605      	mov	r5, r0
 8007c28:	0710      	lsls	r0, r2, #28
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	d458      	bmi.n	8007ce0 <__sflush_r+0xc0>
 8007c2e:	684b      	ldr	r3, [r1, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc05      	bgt.n	8007c40 <__sflush_r+0x20>
 8007c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dc02      	bgt.n	8007c40 <__sflush_r+0x20>
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c42:	2e00      	cmp	r6, #0
 8007c44:	d0f9      	beq.n	8007c3a <__sflush_r+0x1a>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c4c:	682f      	ldr	r7, [r5, #0]
 8007c4e:	6a21      	ldr	r1, [r4, #32]
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	d032      	beq.n	8007cba <__sflush_r+0x9a>
 8007c54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	075a      	lsls	r2, r3, #29
 8007c5a:	d505      	bpl.n	8007c68 <__sflush_r+0x48>
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	1ac0      	subs	r0, r0, r3
 8007c60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c62:	b10b      	cbz	r3, 8007c68 <__sflush_r+0x48>
 8007c64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c66:	1ac0      	subs	r0, r0, r3
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c6e:	6a21      	ldr	r1, [r4, #32]
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b0      	blx	r6
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	d106      	bne.n	8007c88 <__sflush_r+0x68>
 8007c7a:	6829      	ldr	r1, [r5, #0]
 8007c7c:	291d      	cmp	r1, #29
 8007c7e:	d82b      	bhi.n	8007cd8 <__sflush_r+0xb8>
 8007c80:	4a29      	ldr	r2, [pc, #164]	; (8007d28 <__sflush_r+0x108>)
 8007c82:	410a      	asrs	r2, r1
 8007c84:	07d6      	lsls	r6, r2, #31
 8007c86:	d427      	bmi.n	8007cd8 <__sflush_r+0xb8>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	6062      	str	r2, [r4, #4]
 8007c8c:	04d9      	lsls	r1, r3, #19
 8007c8e:	6922      	ldr	r2, [r4, #16]
 8007c90:	6022      	str	r2, [r4, #0]
 8007c92:	d504      	bpl.n	8007c9e <__sflush_r+0x7e>
 8007c94:	1c42      	adds	r2, r0, #1
 8007c96:	d101      	bne.n	8007c9c <__sflush_r+0x7c>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b903      	cbnz	r3, 8007c9e <__sflush_r+0x7e>
 8007c9c:	6560      	str	r0, [r4, #84]	; 0x54
 8007c9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ca0:	602f      	str	r7, [r5, #0]
 8007ca2:	2900      	cmp	r1, #0
 8007ca4:	d0c9      	beq.n	8007c3a <__sflush_r+0x1a>
 8007ca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007caa:	4299      	cmp	r1, r3
 8007cac:	d002      	beq.n	8007cb4 <__sflush_r+0x94>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f7fe fa5e 	bl	8006170 <_free_r>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	6360      	str	r0, [r4, #52]	; 0x34
 8007cb8:	e7c0      	b.n	8007c3c <__sflush_r+0x1c>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b0      	blx	r6
 8007cc0:	1c41      	adds	r1, r0, #1
 8007cc2:	d1c8      	bne.n	8007c56 <__sflush_r+0x36>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0c5      	beq.n	8007c56 <__sflush_r+0x36>
 8007cca:	2b1d      	cmp	r3, #29
 8007ccc:	d001      	beq.n	8007cd2 <__sflush_r+0xb2>
 8007cce:	2b16      	cmp	r3, #22
 8007cd0:	d101      	bne.n	8007cd6 <__sflush_r+0xb6>
 8007cd2:	602f      	str	r7, [r5, #0]
 8007cd4:	e7b1      	b.n	8007c3a <__sflush_r+0x1a>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	e7ad      	b.n	8007c3c <__sflush_r+0x1c>
 8007ce0:	690f      	ldr	r7, [r1, #16]
 8007ce2:	2f00      	cmp	r7, #0
 8007ce4:	d0a9      	beq.n	8007c3a <__sflush_r+0x1a>
 8007ce6:	0793      	lsls	r3, r2, #30
 8007ce8:	680e      	ldr	r6, [r1, #0]
 8007cea:	bf08      	it	eq
 8007cec:	694b      	ldreq	r3, [r1, #20]
 8007cee:	600f      	str	r7, [r1, #0]
 8007cf0:	bf18      	it	ne
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	eba6 0807 	sub.w	r8, r6, r7
 8007cf8:	608b      	str	r3, [r1, #8]
 8007cfa:	f1b8 0f00 	cmp.w	r8, #0
 8007cfe:	dd9c      	ble.n	8007c3a <__sflush_r+0x1a>
 8007d00:	6a21      	ldr	r1, [r4, #32]
 8007d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d04:	4643      	mov	r3, r8
 8007d06:	463a      	mov	r2, r7
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b0      	blx	r6
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	dc06      	bgt.n	8007d1e <__sflush_r+0xfe>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	e78e      	b.n	8007c3c <__sflush_r+0x1c>
 8007d1e:	4407      	add	r7, r0
 8007d20:	eba8 0800 	sub.w	r8, r8, r0
 8007d24:	e7e9      	b.n	8007cfa <__sflush_r+0xda>
 8007d26:	bf00      	nop
 8007d28:	dfbffffe 	.word	0xdfbffffe

08007d2c <_fflush_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	b913      	cbnz	r3, 8007d3c <_fflush_r+0x10>
 8007d36:	2500      	movs	r5, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	b118      	cbz	r0, 8007d46 <_fflush_r+0x1a>
 8007d3e:	6a03      	ldr	r3, [r0, #32]
 8007d40:	b90b      	cbnz	r3, 8007d46 <_fflush_r+0x1a>
 8007d42:	f7fd faff 	bl	8005344 <__sinit>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f3      	beq.n	8007d36 <_fflush_r+0xa>
 8007d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d50:	07d0      	lsls	r0, r2, #31
 8007d52:	d404      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d54:	0599      	lsls	r1, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d5a:	f7fd fc0a 	bl	8005572 <__retarget_lock_acquire_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7ff ff5d 	bl	8007c20 <__sflush_r>
 8007d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d68:	07da      	lsls	r2, r3, #31
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	d4e4      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	059b      	lsls	r3, r3, #22
 8007d72:	d4e1      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d76:	f7fd fbfd 	bl	8005574 <__retarget_lock_release_recursive>
 8007d7a:	e7dd      	b.n	8007d38 <_fflush_r+0xc>

08007d7c <memmove>:
 8007d7c:	4288      	cmp	r0, r1
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	eb01 0402 	add.w	r4, r1, r2
 8007d84:	d902      	bls.n	8007d8c <memmove+0x10>
 8007d86:	4284      	cmp	r4, r0
 8007d88:	4623      	mov	r3, r4
 8007d8a:	d807      	bhi.n	8007d9c <memmove+0x20>
 8007d8c:	1e43      	subs	r3, r0, #1
 8007d8e:	42a1      	cmp	r1, r4
 8007d90:	d008      	beq.n	8007da4 <memmove+0x28>
 8007d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d9a:	e7f8      	b.n	8007d8e <memmove+0x12>
 8007d9c:	4402      	add	r2, r0
 8007d9e:	4601      	mov	r1, r0
 8007da0:	428a      	cmp	r2, r1
 8007da2:	d100      	bne.n	8007da6 <memmove+0x2a>
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dae:	e7f7      	b.n	8007da0 <memmove+0x24>

08007db0 <strncmp>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	b16a      	cbz	r2, 8007dd0 <strncmp+0x20>
 8007db4:	3901      	subs	r1, #1
 8007db6:	1884      	adds	r4, r0, r2
 8007db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d103      	bne.n	8007dcc <strncmp+0x1c>
 8007dc4:	42a0      	cmp	r0, r4
 8007dc6:	d001      	beq.n	8007dcc <strncmp+0x1c>
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d1f5      	bne.n	8007db8 <strncmp+0x8>
 8007dcc:	1ad0      	subs	r0, r2, r3
 8007dce:	bd10      	pop	{r4, pc}
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	e7fc      	b.n	8007dce <strncmp+0x1e>

08007dd4 <_sbrk_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	; (8007df0 <_sbrk_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f9 ff54 	bl	8001c8c <_sbrk>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_sbrk_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_sbrk_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	200008a8 	.word	0x200008a8

08007df4 <memcpy>:
 8007df4:	440a      	add	r2, r1
 8007df6:	4291      	cmp	r1, r2
 8007df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dfc:	d100      	bne.n	8007e00 <memcpy+0xc>
 8007dfe:	4770      	bx	lr
 8007e00:	b510      	push	{r4, lr}
 8007e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	d1f9      	bne.n	8007e02 <memcpy+0xe>
 8007e0e:	bd10      	pop	{r4, pc}

08007e10 <nan>:
 8007e10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007e18 <nan+0x8>
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	00000000 	.word	0x00000000
 8007e1c:	7ff80000 	.word	0x7ff80000

08007e20 <__assert_func>:
 8007e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e22:	4614      	mov	r4, r2
 8007e24:	461a      	mov	r2, r3
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <__assert_func+0x2c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	68d8      	ldr	r0, [r3, #12]
 8007e2e:	b14c      	cbz	r4, 8007e44 <__assert_func+0x24>
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <__assert_func+0x30>)
 8007e32:	9100      	str	r1, [sp, #0]
 8007e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e38:	4906      	ldr	r1, [pc, #24]	; (8007e54 <__assert_func+0x34>)
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	f000 fbca 	bl	80085d4 <fiprintf>
 8007e40:	f000 fbda 	bl	80085f8 <abort>
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <__assert_func+0x38>)
 8007e46:	461c      	mov	r4, r3
 8007e48:	e7f3      	b.n	8007e32 <__assert_func+0x12>
 8007e4a:	bf00      	nop
 8007e4c:	2000006c 	.word	0x2000006c
 8007e50:	08009c82 	.word	0x08009c82
 8007e54:	08009c8f 	.word	0x08009c8f
 8007e58:	08009cbd 	.word	0x08009cbd

08007e5c <_calloc_r>:
 8007e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e5e:	fba1 2402 	umull	r2, r4, r1, r2
 8007e62:	b94c      	cbnz	r4, 8007e78 <_calloc_r+0x1c>
 8007e64:	4611      	mov	r1, r2
 8007e66:	9201      	str	r2, [sp, #4]
 8007e68:	f7fe f9f6 	bl	8006258 <_malloc_r>
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	4605      	mov	r5, r0
 8007e70:	b930      	cbnz	r0, 8007e80 <_calloc_r+0x24>
 8007e72:	4628      	mov	r0, r5
 8007e74:	b003      	add	sp, #12
 8007e76:	bd30      	pop	{r4, r5, pc}
 8007e78:	220c      	movs	r2, #12
 8007e7a:	6002      	str	r2, [r0, #0]
 8007e7c:	2500      	movs	r5, #0
 8007e7e:	e7f8      	b.n	8007e72 <_calloc_r+0x16>
 8007e80:	4621      	mov	r1, r4
 8007e82:	f7fd faf8 	bl	8005476 <memset>
 8007e86:	e7f4      	b.n	8007e72 <_calloc_r+0x16>

08007e88 <rshift>:
 8007e88:	6903      	ldr	r3, [r0, #16]
 8007e8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e96:	f100 0414 	add.w	r4, r0, #20
 8007e9a:	dd45      	ble.n	8007f28 <rshift+0xa0>
 8007e9c:	f011 011f 	ands.w	r1, r1, #31
 8007ea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ea8:	d10c      	bne.n	8007ec4 <rshift+0x3c>
 8007eaa:	f100 0710 	add.w	r7, r0, #16
 8007eae:	4629      	mov	r1, r5
 8007eb0:	42b1      	cmp	r1, r6
 8007eb2:	d334      	bcc.n	8007f1e <rshift+0x96>
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	1eea      	subs	r2, r5, #3
 8007eba:	4296      	cmp	r6, r2
 8007ebc:	bf38      	it	cc
 8007ebe:	2300      	movcc	r3, #0
 8007ec0:	4423      	add	r3, r4
 8007ec2:	e015      	b.n	8007ef0 <rshift+0x68>
 8007ec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ec8:	f1c1 0820 	rsb	r8, r1, #32
 8007ecc:	40cf      	lsrs	r7, r1
 8007ece:	f105 0e04 	add.w	lr, r5, #4
 8007ed2:	46a1      	mov	r9, r4
 8007ed4:	4576      	cmp	r6, lr
 8007ed6:	46f4      	mov	ip, lr
 8007ed8:	d815      	bhi.n	8007f06 <rshift+0x7e>
 8007eda:	1a9a      	subs	r2, r3, r2
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	3a04      	subs	r2, #4
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	42ae      	cmp	r6, r5
 8007ee4:	bf38      	it	cc
 8007ee6:	2200      	movcc	r2, #0
 8007ee8:	18a3      	adds	r3, r4, r2
 8007eea:	50a7      	str	r7, [r4, r2]
 8007eec:	b107      	cbz	r7, 8007ef0 <rshift+0x68>
 8007eee:	3304      	adds	r3, #4
 8007ef0:	1b1a      	subs	r2, r3, r4
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007ef8:	bf08      	it	eq
 8007efa:	2300      	moveq	r3, #0
 8007efc:	6102      	str	r2, [r0, #16]
 8007efe:	bf08      	it	eq
 8007f00:	6143      	streq	r3, [r0, #20]
 8007f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f06:	f8dc c000 	ldr.w	ip, [ip]
 8007f0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f0e:	ea4c 0707 	orr.w	r7, ip, r7
 8007f12:	f849 7b04 	str.w	r7, [r9], #4
 8007f16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f1a:	40cf      	lsrs	r7, r1
 8007f1c:	e7da      	b.n	8007ed4 <rshift+0x4c>
 8007f1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f22:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f26:	e7c3      	b.n	8007eb0 <rshift+0x28>
 8007f28:	4623      	mov	r3, r4
 8007f2a:	e7e1      	b.n	8007ef0 <rshift+0x68>

08007f2c <__hexdig_fun>:
 8007f2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f30:	2b09      	cmp	r3, #9
 8007f32:	d802      	bhi.n	8007f3a <__hexdig_fun+0xe>
 8007f34:	3820      	subs	r0, #32
 8007f36:	b2c0      	uxtb	r0, r0
 8007f38:	4770      	bx	lr
 8007f3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d801      	bhi.n	8007f46 <__hexdig_fun+0x1a>
 8007f42:	3847      	subs	r0, #71	; 0x47
 8007f44:	e7f7      	b.n	8007f36 <__hexdig_fun+0xa>
 8007f46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d801      	bhi.n	8007f52 <__hexdig_fun+0x26>
 8007f4e:	3827      	subs	r0, #39	; 0x27
 8007f50:	e7f1      	b.n	8007f36 <__hexdig_fun+0xa>
 8007f52:	2000      	movs	r0, #0
 8007f54:	4770      	bx	lr
	...

08007f58 <__gethex>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	4617      	mov	r7, r2
 8007f5e:	680a      	ldr	r2, [r1, #0]
 8007f60:	b085      	sub	sp, #20
 8007f62:	f102 0b02 	add.w	fp, r2, #2
 8007f66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f6e:	4681      	mov	r9, r0
 8007f70:	468a      	mov	sl, r1
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	32fe      	adds	r2, #254	; 0xfe
 8007f76:	eb02 030b 	add.w	r3, r2, fp
 8007f7a:	46d8      	mov	r8, fp
 8007f7c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	2830      	cmp	r0, #48	; 0x30
 8007f84:	d0f7      	beq.n	8007f76 <__gethex+0x1e>
 8007f86:	f7ff ffd1 	bl	8007f2c <__hexdig_fun>
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d138      	bne.n	8008002 <__gethex+0xaa>
 8007f90:	49a7      	ldr	r1, [pc, #668]	; (8008230 <__gethex+0x2d8>)
 8007f92:	2201      	movs	r2, #1
 8007f94:	4640      	mov	r0, r8
 8007f96:	f7ff ff0b 	bl	8007db0 <strncmp>
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d169      	bne.n	8008074 <__gethex+0x11c>
 8007fa0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007fa4:	465d      	mov	r5, fp
 8007fa6:	f7ff ffc1 	bl	8007f2c <__hexdig_fun>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d064      	beq.n	8008078 <__gethex+0x120>
 8007fae:	465a      	mov	r2, fp
 8007fb0:	7810      	ldrb	r0, [r2, #0]
 8007fb2:	2830      	cmp	r0, #48	; 0x30
 8007fb4:	4690      	mov	r8, r2
 8007fb6:	f102 0201 	add.w	r2, r2, #1
 8007fba:	d0f9      	beq.n	8007fb0 <__gethex+0x58>
 8007fbc:	f7ff ffb6 	bl	8007f2c <__hexdig_fun>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	fab0 f480 	clz	r4, r0
 8007fc6:	0964      	lsrs	r4, r4, #5
 8007fc8:	465e      	mov	r6, fp
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	4642      	mov	r2, r8
 8007fce:	4615      	mov	r5, r2
 8007fd0:	3201      	adds	r2, #1
 8007fd2:	7828      	ldrb	r0, [r5, #0]
 8007fd4:	f7ff ffaa 	bl	8007f2c <__hexdig_fun>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d1f8      	bne.n	8007fce <__gethex+0x76>
 8007fdc:	4994      	ldr	r1, [pc, #592]	; (8008230 <__gethex+0x2d8>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f7ff fee5 	bl	8007db0 <strncmp>
 8007fe6:	b978      	cbnz	r0, 8008008 <__gethex+0xb0>
 8007fe8:	b946      	cbnz	r6, 8007ffc <__gethex+0xa4>
 8007fea:	1c6e      	adds	r6, r5, #1
 8007fec:	4632      	mov	r2, r6
 8007fee:	4615      	mov	r5, r2
 8007ff0:	3201      	adds	r2, #1
 8007ff2:	7828      	ldrb	r0, [r5, #0]
 8007ff4:	f7ff ff9a 	bl	8007f2c <__hexdig_fun>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d1f8      	bne.n	8007fee <__gethex+0x96>
 8007ffc:	1b73      	subs	r3, r6, r5
 8007ffe:	009e      	lsls	r6, r3, #2
 8008000:	e004      	b.n	800800c <__gethex+0xb4>
 8008002:	2400      	movs	r4, #0
 8008004:	4626      	mov	r6, r4
 8008006:	e7e1      	b.n	8007fcc <__gethex+0x74>
 8008008:	2e00      	cmp	r6, #0
 800800a:	d1f7      	bne.n	8007ffc <__gethex+0xa4>
 800800c:	782b      	ldrb	r3, [r5, #0]
 800800e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008012:	2b50      	cmp	r3, #80	; 0x50
 8008014:	d13d      	bne.n	8008092 <__gethex+0x13a>
 8008016:	786b      	ldrb	r3, [r5, #1]
 8008018:	2b2b      	cmp	r3, #43	; 0x2b
 800801a:	d02f      	beq.n	800807c <__gethex+0x124>
 800801c:	2b2d      	cmp	r3, #45	; 0x2d
 800801e:	d031      	beq.n	8008084 <__gethex+0x12c>
 8008020:	1c69      	adds	r1, r5, #1
 8008022:	f04f 0b00 	mov.w	fp, #0
 8008026:	7808      	ldrb	r0, [r1, #0]
 8008028:	f7ff ff80 	bl	8007f2c <__hexdig_fun>
 800802c:	1e42      	subs	r2, r0, #1
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	2a18      	cmp	r2, #24
 8008032:	d82e      	bhi.n	8008092 <__gethex+0x13a>
 8008034:	f1a0 0210 	sub.w	r2, r0, #16
 8008038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800803c:	f7ff ff76 	bl	8007f2c <__hexdig_fun>
 8008040:	f100 3cff 	add.w	ip, r0, #4294967295
 8008044:	fa5f fc8c 	uxtb.w	ip, ip
 8008048:	f1bc 0f18 	cmp.w	ip, #24
 800804c:	d91d      	bls.n	800808a <__gethex+0x132>
 800804e:	f1bb 0f00 	cmp.w	fp, #0
 8008052:	d000      	beq.n	8008056 <__gethex+0xfe>
 8008054:	4252      	negs	r2, r2
 8008056:	4416      	add	r6, r2
 8008058:	f8ca 1000 	str.w	r1, [sl]
 800805c:	b1dc      	cbz	r4, 8008096 <__gethex+0x13e>
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf14      	ite	ne
 8008064:	f04f 0800 	movne.w	r8, #0
 8008068:	f04f 0806 	moveq.w	r8, #6
 800806c:	4640      	mov	r0, r8
 800806e:	b005      	add	sp, #20
 8008070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008074:	4645      	mov	r5, r8
 8008076:	4626      	mov	r6, r4
 8008078:	2401      	movs	r4, #1
 800807a:	e7c7      	b.n	800800c <__gethex+0xb4>
 800807c:	f04f 0b00 	mov.w	fp, #0
 8008080:	1ca9      	adds	r1, r5, #2
 8008082:	e7d0      	b.n	8008026 <__gethex+0xce>
 8008084:	f04f 0b01 	mov.w	fp, #1
 8008088:	e7fa      	b.n	8008080 <__gethex+0x128>
 800808a:	230a      	movs	r3, #10
 800808c:	fb03 0002 	mla	r0, r3, r2, r0
 8008090:	e7d0      	b.n	8008034 <__gethex+0xdc>
 8008092:	4629      	mov	r1, r5
 8008094:	e7e0      	b.n	8008058 <__gethex+0x100>
 8008096:	eba5 0308 	sub.w	r3, r5, r8
 800809a:	3b01      	subs	r3, #1
 800809c:	4621      	mov	r1, r4
 800809e:	2b07      	cmp	r3, #7
 80080a0:	dc0a      	bgt.n	80080b8 <__gethex+0x160>
 80080a2:	4648      	mov	r0, r9
 80080a4:	f7fe f964 	bl	8006370 <_Balloc>
 80080a8:	4604      	mov	r4, r0
 80080aa:	b940      	cbnz	r0, 80080be <__gethex+0x166>
 80080ac:	4b61      	ldr	r3, [pc, #388]	; (8008234 <__gethex+0x2dc>)
 80080ae:	4602      	mov	r2, r0
 80080b0:	21e4      	movs	r1, #228	; 0xe4
 80080b2:	4861      	ldr	r0, [pc, #388]	; (8008238 <__gethex+0x2e0>)
 80080b4:	f7ff feb4 	bl	8007e20 <__assert_func>
 80080b8:	3101      	adds	r1, #1
 80080ba:	105b      	asrs	r3, r3, #1
 80080bc:	e7ef      	b.n	800809e <__gethex+0x146>
 80080be:	f100 0a14 	add.w	sl, r0, #20
 80080c2:	2300      	movs	r3, #0
 80080c4:	495a      	ldr	r1, [pc, #360]	; (8008230 <__gethex+0x2d8>)
 80080c6:	f8cd a004 	str.w	sl, [sp, #4]
 80080ca:	469b      	mov	fp, r3
 80080cc:	45a8      	cmp	r8, r5
 80080ce:	d342      	bcc.n	8008156 <__gethex+0x1fe>
 80080d0:	9801      	ldr	r0, [sp, #4]
 80080d2:	f840 bb04 	str.w	fp, [r0], #4
 80080d6:	eba0 000a 	sub.w	r0, r0, sl
 80080da:	1080      	asrs	r0, r0, #2
 80080dc:	6120      	str	r0, [r4, #16]
 80080de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80080e2:	4658      	mov	r0, fp
 80080e4:	f7fe fa36 	bl	8006554 <__hi0bits>
 80080e8:	683d      	ldr	r5, [r7, #0]
 80080ea:	eba8 0000 	sub.w	r0, r8, r0
 80080ee:	42a8      	cmp	r0, r5
 80080f0:	dd59      	ble.n	80081a6 <__gethex+0x24e>
 80080f2:	eba0 0805 	sub.w	r8, r0, r5
 80080f6:	4641      	mov	r1, r8
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7fe fdc2 	bl	8006c82 <__any_on>
 80080fe:	4683      	mov	fp, r0
 8008100:	b1b8      	cbz	r0, 8008132 <__gethex+0x1da>
 8008102:	f108 33ff 	add.w	r3, r8, #4294967295
 8008106:	1159      	asrs	r1, r3, #5
 8008108:	f003 021f 	and.w	r2, r3, #31
 800810c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008110:	f04f 0b01 	mov.w	fp, #1
 8008114:	fa0b f202 	lsl.w	r2, fp, r2
 8008118:	420a      	tst	r2, r1
 800811a:	d00a      	beq.n	8008132 <__gethex+0x1da>
 800811c:	455b      	cmp	r3, fp
 800811e:	dd06      	ble.n	800812e <__gethex+0x1d6>
 8008120:	f1a8 0102 	sub.w	r1, r8, #2
 8008124:	4620      	mov	r0, r4
 8008126:	f7fe fdac 	bl	8006c82 <__any_on>
 800812a:	2800      	cmp	r0, #0
 800812c:	d138      	bne.n	80081a0 <__gethex+0x248>
 800812e:	f04f 0b02 	mov.w	fp, #2
 8008132:	4641      	mov	r1, r8
 8008134:	4620      	mov	r0, r4
 8008136:	f7ff fea7 	bl	8007e88 <rshift>
 800813a:	4446      	add	r6, r8
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	42b3      	cmp	r3, r6
 8008140:	da41      	bge.n	80081c6 <__gethex+0x26e>
 8008142:	4621      	mov	r1, r4
 8008144:	4648      	mov	r0, r9
 8008146:	f7fe f953 	bl	80063f0 <_Bfree>
 800814a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800814c:	2300      	movs	r3, #0
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008154:	e78a      	b.n	800806c <__gethex+0x114>
 8008156:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800815a:	2a2e      	cmp	r2, #46	; 0x2e
 800815c:	d014      	beq.n	8008188 <__gethex+0x230>
 800815e:	2b20      	cmp	r3, #32
 8008160:	d106      	bne.n	8008170 <__gethex+0x218>
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	f843 bb04 	str.w	fp, [r3], #4
 8008168:	f04f 0b00 	mov.w	fp, #0
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	465b      	mov	r3, fp
 8008170:	7828      	ldrb	r0, [r5, #0]
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	f7ff feda 	bl	8007f2c <__hexdig_fun>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	f000 000f 	and.w	r0, r0, #15
 800817e:	4098      	lsls	r0, r3
 8008180:	ea4b 0b00 	orr.w	fp, fp, r0
 8008184:	3304      	adds	r3, #4
 8008186:	e7a1      	b.n	80080cc <__gethex+0x174>
 8008188:	45a8      	cmp	r8, r5
 800818a:	d8e8      	bhi.n	800815e <__gethex+0x206>
 800818c:	2201      	movs	r2, #1
 800818e:	4628      	mov	r0, r5
 8008190:	9303      	str	r3, [sp, #12]
 8008192:	f7ff fe0d 	bl	8007db0 <strncmp>
 8008196:	4926      	ldr	r1, [pc, #152]	; (8008230 <__gethex+0x2d8>)
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	2800      	cmp	r0, #0
 800819c:	d1df      	bne.n	800815e <__gethex+0x206>
 800819e:	e795      	b.n	80080cc <__gethex+0x174>
 80081a0:	f04f 0b03 	mov.w	fp, #3
 80081a4:	e7c5      	b.n	8008132 <__gethex+0x1da>
 80081a6:	da0b      	bge.n	80081c0 <__gethex+0x268>
 80081a8:	eba5 0800 	sub.w	r8, r5, r0
 80081ac:	4621      	mov	r1, r4
 80081ae:	4642      	mov	r2, r8
 80081b0:	4648      	mov	r0, r9
 80081b2:	f7fe fb37 	bl	8006824 <__lshift>
 80081b6:	eba6 0608 	sub.w	r6, r6, r8
 80081ba:	4604      	mov	r4, r0
 80081bc:	f100 0a14 	add.w	sl, r0, #20
 80081c0:	f04f 0b00 	mov.w	fp, #0
 80081c4:	e7ba      	b.n	800813c <__gethex+0x1e4>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	42b3      	cmp	r3, r6
 80081ca:	dd73      	ble.n	80082b4 <__gethex+0x35c>
 80081cc:	1b9e      	subs	r6, r3, r6
 80081ce:	42b5      	cmp	r5, r6
 80081d0:	dc34      	bgt.n	800823c <__gethex+0x2e4>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d023      	beq.n	8008220 <__gethex+0x2c8>
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d025      	beq.n	8008228 <__gethex+0x2d0>
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d115      	bne.n	800820c <__gethex+0x2b4>
 80081e0:	42b5      	cmp	r5, r6
 80081e2:	d113      	bne.n	800820c <__gethex+0x2b4>
 80081e4:	2d01      	cmp	r5, #1
 80081e6:	d10b      	bne.n	8008200 <__gethex+0x2a8>
 80081e8:	9a02      	ldr	r2, [sp, #8]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	2301      	movs	r3, #1
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	f8ca 3000 	str.w	r3, [sl]
 80081f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80081fc:	601c      	str	r4, [r3, #0]
 80081fe:	e735      	b.n	800806c <__gethex+0x114>
 8008200:	1e69      	subs	r1, r5, #1
 8008202:	4620      	mov	r0, r4
 8008204:	f7fe fd3d 	bl	8006c82 <__any_on>
 8008208:	2800      	cmp	r0, #0
 800820a:	d1ed      	bne.n	80081e8 <__gethex+0x290>
 800820c:	4621      	mov	r1, r4
 800820e:	4648      	mov	r0, r9
 8008210:	f7fe f8ee 	bl	80063f0 <_Bfree>
 8008214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008216:	2300      	movs	r3, #0
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800821e:	e725      	b.n	800806c <__gethex+0x114>
 8008220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1f2      	bne.n	800820c <__gethex+0x2b4>
 8008226:	e7df      	b.n	80081e8 <__gethex+0x290>
 8008228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1dc      	bne.n	80081e8 <__gethex+0x290>
 800822e:	e7ed      	b.n	800820c <__gethex+0x2b4>
 8008230:	08009b14 	.word	0x08009b14
 8008234:	080099ad 	.word	0x080099ad
 8008238:	08009cbe 	.word	0x08009cbe
 800823c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008240:	f1bb 0f00 	cmp.w	fp, #0
 8008244:	d133      	bne.n	80082ae <__gethex+0x356>
 8008246:	f1b8 0f00 	cmp.w	r8, #0
 800824a:	d004      	beq.n	8008256 <__gethex+0x2fe>
 800824c:	4641      	mov	r1, r8
 800824e:	4620      	mov	r0, r4
 8008250:	f7fe fd17 	bl	8006c82 <__any_on>
 8008254:	4683      	mov	fp, r0
 8008256:	ea4f 1268 	mov.w	r2, r8, asr #5
 800825a:	2301      	movs	r3, #1
 800825c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008260:	f008 081f 	and.w	r8, r8, #31
 8008264:	fa03 f308 	lsl.w	r3, r3, r8
 8008268:	4213      	tst	r3, r2
 800826a:	4631      	mov	r1, r6
 800826c:	4620      	mov	r0, r4
 800826e:	bf18      	it	ne
 8008270:	f04b 0b02 	orrne.w	fp, fp, #2
 8008274:	1bad      	subs	r5, r5, r6
 8008276:	f7ff fe07 	bl	8007e88 <rshift>
 800827a:	687e      	ldr	r6, [r7, #4]
 800827c:	f04f 0802 	mov.w	r8, #2
 8008280:	f1bb 0f00 	cmp.w	fp, #0
 8008284:	d04a      	beq.n	800831c <__gethex+0x3c4>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d016      	beq.n	80082ba <__gethex+0x362>
 800828c:	2b03      	cmp	r3, #3
 800828e:	d018      	beq.n	80082c2 <__gethex+0x36a>
 8008290:	2b01      	cmp	r3, #1
 8008292:	d109      	bne.n	80082a8 <__gethex+0x350>
 8008294:	f01b 0f02 	tst.w	fp, #2
 8008298:	d006      	beq.n	80082a8 <__gethex+0x350>
 800829a:	f8da 3000 	ldr.w	r3, [sl]
 800829e:	ea4b 0b03 	orr.w	fp, fp, r3
 80082a2:	f01b 0f01 	tst.w	fp, #1
 80082a6:	d10f      	bne.n	80082c8 <__gethex+0x370>
 80082a8:	f048 0810 	orr.w	r8, r8, #16
 80082ac:	e036      	b.n	800831c <__gethex+0x3c4>
 80082ae:	f04f 0b01 	mov.w	fp, #1
 80082b2:	e7d0      	b.n	8008256 <__gethex+0x2fe>
 80082b4:	f04f 0801 	mov.w	r8, #1
 80082b8:	e7e2      	b.n	8008280 <__gethex+0x328>
 80082ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082bc:	f1c3 0301 	rsb	r3, r3, #1
 80082c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0ef      	beq.n	80082a8 <__gethex+0x350>
 80082c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082cc:	f104 0214 	add.w	r2, r4, #20
 80082d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80082da:	2300      	movs	r3, #0
 80082dc:	4694      	mov	ip, r2
 80082de:	f852 1b04 	ldr.w	r1, [r2], #4
 80082e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80082e6:	d01e      	beq.n	8008326 <__gethex+0x3ce>
 80082e8:	3101      	adds	r1, #1
 80082ea:	f8cc 1000 	str.w	r1, [ip]
 80082ee:	f1b8 0f02 	cmp.w	r8, #2
 80082f2:	f104 0214 	add.w	r2, r4, #20
 80082f6:	d13d      	bne.n	8008374 <__gethex+0x41c>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	d10b      	bne.n	8008318 <__gethex+0x3c0>
 8008300:	1169      	asrs	r1, r5, #5
 8008302:	2301      	movs	r3, #1
 8008304:	f005 051f 	and.w	r5, r5, #31
 8008308:	fa03 f505 	lsl.w	r5, r3, r5
 800830c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008310:	421d      	tst	r5, r3
 8008312:	bf18      	it	ne
 8008314:	f04f 0801 	movne.w	r8, #1
 8008318:	f048 0820 	orr.w	r8, r8, #32
 800831c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800831e:	601c      	str	r4, [r3, #0]
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	601e      	str	r6, [r3, #0]
 8008324:	e6a2      	b.n	800806c <__gethex+0x114>
 8008326:	4290      	cmp	r0, r2
 8008328:	f842 3c04 	str.w	r3, [r2, #-4]
 800832c:	d8d6      	bhi.n	80082dc <__gethex+0x384>
 800832e:	68a2      	ldr	r2, [r4, #8]
 8008330:	4593      	cmp	fp, r2
 8008332:	db17      	blt.n	8008364 <__gethex+0x40c>
 8008334:	6861      	ldr	r1, [r4, #4]
 8008336:	4648      	mov	r0, r9
 8008338:	3101      	adds	r1, #1
 800833a:	f7fe f819 	bl	8006370 <_Balloc>
 800833e:	4682      	mov	sl, r0
 8008340:	b918      	cbnz	r0, 800834a <__gethex+0x3f2>
 8008342:	4b1b      	ldr	r3, [pc, #108]	; (80083b0 <__gethex+0x458>)
 8008344:	4602      	mov	r2, r0
 8008346:	2184      	movs	r1, #132	; 0x84
 8008348:	e6b3      	b.n	80080b2 <__gethex+0x15a>
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	3202      	adds	r2, #2
 800834e:	f104 010c 	add.w	r1, r4, #12
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	300c      	adds	r0, #12
 8008356:	f7ff fd4d 	bl	8007df4 <memcpy>
 800835a:	4621      	mov	r1, r4
 800835c:	4648      	mov	r0, r9
 800835e:	f7fe f847 	bl	80063f0 <_Bfree>
 8008362:	4654      	mov	r4, sl
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	1c51      	adds	r1, r2, #1
 8008368:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800836c:	6121      	str	r1, [r4, #16]
 800836e:	2101      	movs	r1, #1
 8008370:	6151      	str	r1, [r2, #20]
 8008372:	e7bc      	b.n	80082ee <__gethex+0x396>
 8008374:	6921      	ldr	r1, [r4, #16]
 8008376:	4559      	cmp	r1, fp
 8008378:	dd0b      	ble.n	8008392 <__gethex+0x43a>
 800837a:	2101      	movs	r1, #1
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff fd83 	bl	8007e88 <rshift>
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	3601      	adds	r6, #1
 8008386:	42b3      	cmp	r3, r6
 8008388:	f6ff aedb 	blt.w	8008142 <__gethex+0x1ea>
 800838c:	f04f 0801 	mov.w	r8, #1
 8008390:	e7c2      	b.n	8008318 <__gethex+0x3c0>
 8008392:	f015 051f 	ands.w	r5, r5, #31
 8008396:	d0f9      	beq.n	800838c <__gethex+0x434>
 8008398:	9b01      	ldr	r3, [sp, #4]
 800839a:	441a      	add	r2, r3
 800839c:	f1c5 0520 	rsb	r5, r5, #32
 80083a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80083a4:	f7fe f8d6 	bl	8006554 <__hi0bits>
 80083a8:	42a8      	cmp	r0, r5
 80083aa:	dbe6      	blt.n	800837a <__gethex+0x422>
 80083ac:	e7ee      	b.n	800838c <__gethex+0x434>
 80083ae:	bf00      	nop
 80083b0:	080099ad 	.word	0x080099ad

080083b4 <L_shift>:
 80083b4:	f1c2 0208 	rsb	r2, r2, #8
 80083b8:	0092      	lsls	r2, r2, #2
 80083ba:	b570      	push	{r4, r5, r6, lr}
 80083bc:	f1c2 0620 	rsb	r6, r2, #32
 80083c0:	6843      	ldr	r3, [r0, #4]
 80083c2:	6804      	ldr	r4, [r0, #0]
 80083c4:	fa03 f506 	lsl.w	r5, r3, r6
 80083c8:	432c      	orrs	r4, r5
 80083ca:	40d3      	lsrs	r3, r2
 80083cc:	6004      	str	r4, [r0, #0]
 80083ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80083d2:	4288      	cmp	r0, r1
 80083d4:	d3f4      	bcc.n	80083c0 <L_shift+0xc>
 80083d6:	bd70      	pop	{r4, r5, r6, pc}

080083d8 <__match>:
 80083d8:	b530      	push	{r4, r5, lr}
 80083da:	6803      	ldr	r3, [r0, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	b914      	cbnz	r4, 80083ea <__match+0x12>
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	2001      	movs	r0, #1
 80083e8:	bd30      	pop	{r4, r5, pc}
 80083ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083f2:	2d19      	cmp	r5, #25
 80083f4:	bf98      	it	ls
 80083f6:	3220      	addls	r2, #32
 80083f8:	42a2      	cmp	r2, r4
 80083fa:	d0f0      	beq.n	80083de <__match+0x6>
 80083fc:	2000      	movs	r0, #0
 80083fe:	e7f3      	b.n	80083e8 <__match+0x10>

08008400 <__hexnan>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	680b      	ldr	r3, [r1, #0]
 8008406:	6801      	ldr	r1, [r0, #0]
 8008408:	115e      	asrs	r6, r3, #5
 800840a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800840e:	f013 031f 	ands.w	r3, r3, #31
 8008412:	b087      	sub	sp, #28
 8008414:	bf18      	it	ne
 8008416:	3604      	addne	r6, #4
 8008418:	2500      	movs	r5, #0
 800841a:	1f37      	subs	r7, r6, #4
 800841c:	4682      	mov	sl, r0
 800841e:	4690      	mov	r8, r2
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	f846 5c04 	str.w	r5, [r6, #-4]
 8008426:	46b9      	mov	r9, r7
 8008428:	463c      	mov	r4, r7
 800842a:	9502      	str	r5, [sp, #8]
 800842c:	46ab      	mov	fp, r5
 800842e:	784a      	ldrb	r2, [r1, #1]
 8008430:	1c4b      	adds	r3, r1, #1
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	b342      	cbz	r2, 8008488 <__hexnan+0x88>
 8008436:	4610      	mov	r0, r2
 8008438:	9105      	str	r1, [sp, #20]
 800843a:	9204      	str	r2, [sp, #16]
 800843c:	f7ff fd76 	bl	8007f2c <__hexdig_fun>
 8008440:	2800      	cmp	r0, #0
 8008442:	d14f      	bne.n	80084e4 <__hexnan+0xe4>
 8008444:	9a04      	ldr	r2, [sp, #16]
 8008446:	9905      	ldr	r1, [sp, #20]
 8008448:	2a20      	cmp	r2, #32
 800844a:	d818      	bhi.n	800847e <__hexnan+0x7e>
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	459b      	cmp	fp, r3
 8008450:	dd13      	ble.n	800847a <__hexnan+0x7a>
 8008452:	454c      	cmp	r4, r9
 8008454:	d206      	bcs.n	8008464 <__hexnan+0x64>
 8008456:	2d07      	cmp	r5, #7
 8008458:	dc04      	bgt.n	8008464 <__hexnan+0x64>
 800845a:	462a      	mov	r2, r5
 800845c:	4649      	mov	r1, r9
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff ffa8 	bl	80083b4 <L_shift>
 8008464:	4544      	cmp	r4, r8
 8008466:	d950      	bls.n	800850a <__hexnan+0x10a>
 8008468:	2300      	movs	r3, #0
 800846a:	f1a4 0904 	sub.w	r9, r4, #4
 800846e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008472:	f8cd b008 	str.w	fp, [sp, #8]
 8008476:	464c      	mov	r4, r9
 8008478:	461d      	mov	r5, r3
 800847a:	9903      	ldr	r1, [sp, #12]
 800847c:	e7d7      	b.n	800842e <__hexnan+0x2e>
 800847e:	2a29      	cmp	r2, #41	; 0x29
 8008480:	d155      	bne.n	800852e <__hexnan+0x12e>
 8008482:	3102      	adds	r1, #2
 8008484:	f8ca 1000 	str.w	r1, [sl]
 8008488:	f1bb 0f00 	cmp.w	fp, #0
 800848c:	d04f      	beq.n	800852e <__hexnan+0x12e>
 800848e:	454c      	cmp	r4, r9
 8008490:	d206      	bcs.n	80084a0 <__hexnan+0xa0>
 8008492:	2d07      	cmp	r5, #7
 8008494:	dc04      	bgt.n	80084a0 <__hexnan+0xa0>
 8008496:	462a      	mov	r2, r5
 8008498:	4649      	mov	r1, r9
 800849a:	4620      	mov	r0, r4
 800849c:	f7ff ff8a 	bl	80083b4 <L_shift>
 80084a0:	4544      	cmp	r4, r8
 80084a2:	d934      	bls.n	800850e <__hexnan+0x10e>
 80084a4:	f1a8 0204 	sub.w	r2, r8, #4
 80084a8:	4623      	mov	r3, r4
 80084aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80084ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80084b2:	429f      	cmp	r7, r3
 80084b4:	d2f9      	bcs.n	80084aa <__hexnan+0xaa>
 80084b6:	1b3b      	subs	r3, r7, r4
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	3e03      	subs	r6, #3
 80084c0:	3401      	adds	r4, #1
 80084c2:	42a6      	cmp	r6, r4
 80084c4:	bf38      	it	cc
 80084c6:	2304      	movcc	r3, #4
 80084c8:	4443      	add	r3, r8
 80084ca:	2200      	movs	r2, #0
 80084cc:	f843 2b04 	str.w	r2, [r3], #4
 80084d0:	429f      	cmp	r7, r3
 80084d2:	d2fb      	bcs.n	80084cc <__hexnan+0xcc>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	b91b      	cbnz	r3, 80084e0 <__hexnan+0xe0>
 80084d8:	4547      	cmp	r7, r8
 80084da:	d126      	bne.n	800852a <__hexnan+0x12a>
 80084dc:	2301      	movs	r3, #1
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	2005      	movs	r0, #5
 80084e2:	e025      	b.n	8008530 <__hexnan+0x130>
 80084e4:	3501      	adds	r5, #1
 80084e6:	2d08      	cmp	r5, #8
 80084e8:	f10b 0b01 	add.w	fp, fp, #1
 80084ec:	dd06      	ble.n	80084fc <__hexnan+0xfc>
 80084ee:	4544      	cmp	r4, r8
 80084f0:	d9c3      	bls.n	800847a <__hexnan+0x7a>
 80084f2:	2300      	movs	r3, #0
 80084f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80084f8:	2501      	movs	r5, #1
 80084fa:	3c04      	subs	r4, #4
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	f000 000f 	and.w	r0, r0, #15
 8008502:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008506:	6020      	str	r0, [r4, #0]
 8008508:	e7b7      	b.n	800847a <__hexnan+0x7a>
 800850a:	2508      	movs	r5, #8
 800850c:	e7b5      	b.n	800847a <__hexnan+0x7a>
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0df      	beq.n	80084d4 <__hexnan+0xd4>
 8008514:	f1c3 0320 	rsb	r3, r3, #32
 8008518:	f04f 32ff 	mov.w	r2, #4294967295
 800851c:	40da      	lsrs	r2, r3
 800851e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008522:	4013      	ands	r3, r2
 8008524:	f846 3c04 	str.w	r3, [r6, #-4]
 8008528:	e7d4      	b.n	80084d4 <__hexnan+0xd4>
 800852a:	3f04      	subs	r7, #4
 800852c:	e7d2      	b.n	80084d4 <__hexnan+0xd4>
 800852e:	2004      	movs	r0, #4
 8008530:	b007      	add	sp, #28
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008536 <__ascii_mbtowc>:
 8008536:	b082      	sub	sp, #8
 8008538:	b901      	cbnz	r1, 800853c <__ascii_mbtowc+0x6>
 800853a:	a901      	add	r1, sp, #4
 800853c:	b142      	cbz	r2, 8008550 <__ascii_mbtowc+0x1a>
 800853e:	b14b      	cbz	r3, 8008554 <__ascii_mbtowc+0x1e>
 8008540:	7813      	ldrb	r3, [r2, #0]
 8008542:	600b      	str	r3, [r1, #0]
 8008544:	7812      	ldrb	r2, [r2, #0]
 8008546:	1e10      	subs	r0, r2, #0
 8008548:	bf18      	it	ne
 800854a:	2001      	movne	r0, #1
 800854c:	b002      	add	sp, #8
 800854e:	4770      	bx	lr
 8008550:	4610      	mov	r0, r2
 8008552:	e7fb      	b.n	800854c <__ascii_mbtowc+0x16>
 8008554:	f06f 0001 	mvn.w	r0, #1
 8008558:	e7f8      	b.n	800854c <__ascii_mbtowc+0x16>

0800855a <_realloc_r>:
 800855a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855e:	4680      	mov	r8, r0
 8008560:	4614      	mov	r4, r2
 8008562:	460e      	mov	r6, r1
 8008564:	b921      	cbnz	r1, 8008570 <_realloc_r+0x16>
 8008566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800856a:	4611      	mov	r1, r2
 800856c:	f7fd be74 	b.w	8006258 <_malloc_r>
 8008570:	b92a      	cbnz	r2, 800857e <_realloc_r+0x24>
 8008572:	f7fd fdfd 	bl	8006170 <_free_r>
 8008576:	4625      	mov	r5, r4
 8008578:	4628      	mov	r0, r5
 800857a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857e:	f000 f842 	bl	8008606 <_malloc_usable_size_r>
 8008582:	4284      	cmp	r4, r0
 8008584:	4607      	mov	r7, r0
 8008586:	d802      	bhi.n	800858e <_realloc_r+0x34>
 8008588:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800858c:	d812      	bhi.n	80085b4 <_realloc_r+0x5a>
 800858e:	4621      	mov	r1, r4
 8008590:	4640      	mov	r0, r8
 8008592:	f7fd fe61 	bl	8006258 <_malloc_r>
 8008596:	4605      	mov	r5, r0
 8008598:	2800      	cmp	r0, #0
 800859a:	d0ed      	beq.n	8008578 <_realloc_r+0x1e>
 800859c:	42bc      	cmp	r4, r7
 800859e:	4622      	mov	r2, r4
 80085a0:	4631      	mov	r1, r6
 80085a2:	bf28      	it	cs
 80085a4:	463a      	movcs	r2, r7
 80085a6:	f7ff fc25 	bl	8007df4 <memcpy>
 80085aa:	4631      	mov	r1, r6
 80085ac:	4640      	mov	r0, r8
 80085ae:	f7fd fddf 	bl	8006170 <_free_r>
 80085b2:	e7e1      	b.n	8008578 <_realloc_r+0x1e>
 80085b4:	4635      	mov	r5, r6
 80085b6:	e7df      	b.n	8008578 <_realloc_r+0x1e>

080085b8 <__ascii_wctomb>:
 80085b8:	b149      	cbz	r1, 80085ce <__ascii_wctomb+0x16>
 80085ba:	2aff      	cmp	r2, #255	; 0xff
 80085bc:	bf85      	ittet	hi
 80085be:	238a      	movhi	r3, #138	; 0x8a
 80085c0:	6003      	strhi	r3, [r0, #0]
 80085c2:	700a      	strbls	r2, [r1, #0]
 80085c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80085c8:	bf98      	it	ls
 80085ca:	2001      	movls	r0, #1
 80085cc:	4770      	bx	lr
 80085ce:	4608      	mov	r0, r1
 80085d0:	4770      	bx	lr
	...

080085d4 <fiprintf>:
 80085d4:	b40e      	push	{r1, r2, r3}
 80085d6:	b503      	push	{r0, r1, lr}
 80085d8:	4601      	mov	r1, r0
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	4805      	ldr	r0, [pc, #20]	; (80085f4 <fiprintf+0x20>)
 80085de:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e2:	6800      	ldr	r0, [r0, #0]
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	f000 f83f 	bl	8008668 <_vfiprintf_r>
 80085ea:	b002      	add	sp, #8
 80085ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80085f0:	b003      	add	sp, #12
 80085f2:	4770      	bx	lr
 80085f4:	2000006c 	.word	0x2000006c

080085f8 <abort>:
 80085f8:	b508      	push	{r3, lr}
 80085fa:	2006      	movs	r0, #6
 80085fc:	f000 fa0c 	bl	8008a18 <raise>
 8008600:	2001      	movs	r0, #1
 8008602:	f7f9 facb 	bl	8001b9c <_exit>

08008606 <_malloc_usable_size_r>:
 8008606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860a:	1f18      	subs	r0, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfbc      	itt	lt
 8008610:	580b      	ldrlt	r3, [r1, r0]
 8008612:	18c0      	addlt	r0, r0, r3
 8008614:	4770      	bx	lr

08008616 <__sfputc_r>:
 8008616:	6893      	ldr	r3, [r2, #8]
 8008618:	3b01      	subs	r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	b410      	push	{r4}
 800861e:	6093      	str	r3, [r2, #8]
 8008620:	da08      	bge.n	8008634 <__sfputc_r+0x1e>
 8008622:	6994      	ldr	r4, [r2, #24]
 8008624:	42a3      	cmp	r3, r4
 8008626:	db01      	blt.n	800862c <__sfputc_r+0x16>
 8008628:	290a      	cmp	r1, #10
 800862a:	d103      	bne.n	8008634 <__sfputc_r+0x1e>
 800862c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008630:	f000 b934 	b.w	800889c <__swbuf_r>
 8008634:	6813      	ldr	r3, [r2, #0]
 8008636:	1c58      	adds	r0, r3, #1
 8008638:	6010      	str	r0, [r2, #0]
 800863a:	7019      	strb	r1, [r3, #0]
 800863c:	4608      	mov	r0, r1
 800863e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008642:	4770      	bx	lr

08008644 <__sfputs_r>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	4606      	mov	r6, r0
 8008648:	460f      	mov	r7, r1
 800864a:	4614      	mov	r4, r2
 800864c:	18d5      	adds	r5, r2, r3
 800864e:	42ac      	cmp	r4, r5
 8008650:	d101      	bne.n	8008656 <__sfputs_r+0x12>
 8008652:	2000      	movs	r0, #0
 8008654:	e007      	b.n	8008666 <__sfputs_r+0x22>
 8008656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865a:	463a      	mov	r2, r7
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff ffda 	bl	8008616 <__sfputc_r>
 8008662:	1c43      	adds	r3, r0, #1
 8008664:	d1f3      	bne.n	800864e <__sfputs_r+0xa>
 8008666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008668 <_vfiprintf_r>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	460d      	mov	r5, r1
 800866e:	b09d      	sub	sp, #116	; 0x74
 8008670:	4614      	mov	r4, r2
 8008672:	4698      	mov	r8, r3
 8008674:	4606      	mov	r6, r0
 8008676:	b118      	cbz	r0, 8008680 <_vfiprintf_r+0x18>
 8008678:	6a03      	ldr	r3, [r0, #32]
 800867a:	b90b      	cbnz	r3, 8008680 <_vfiprintf_r+0x18>
 800867c:	f7fc fe62 	bl	8005344 <__sinit>
 8008680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008682:	07d9      	lsls	r1, r3, #31
 8008684:	d405      	bmi.n	8008692 <_vfiprintf_r+0x2a>
 8008686:	89ab      	ldrh	r3, [r5, #12]
 8008688:	059a      	lsls	r2, r3, #22
 800868a:	d402      	bmi.n	8008692 <_vfiprintf_r+0x2a>
 800868c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800868e:	f7fc ff70 	bl	8005572 <__retarget_lock_acquire_recursive>
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	071b      	lsls	r3, r3, #28
 8008696:	d501      	bpl.n	800869c <_vfiprintf_r+0x34>
 8008698:	692b      	ldr	r3, [r5, #16]
 800869a:	b99b      	cbnz	r3, 80086c4 <_vfiprintf_r+0x5c>
 800869c:	4629      	mov	r1, r5
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f93a 	bl	8008918 <__swsetup_r>
 80086a4:	b170      	cbz	r0, 80086c4 <_vfiprintf_r+0x5c>
 80086a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a8:	07dc      	lsls	r4, r3, #31
 80086aa:	d504      	bpl.n	80086b6 <_vfiprintf_r+0x4e>
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	b01d      	add	sp, #116	; 0x74
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	0598      	lsls	r0, r3, #22
 80086ba:	d4f7      	bmi.n	80086ac <_vfiprintf_r+0x44>
 80086bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086be:	f7fc ff59 	bl	8005574 <__retarget_lock_release_recursive>
 80086c2:	e7f3      	b.n	80086ac <_vfiprintf_r+0x44>
 80086c4:	2300      	movs	r3, #0
 80086c6:	9309      	str	r3, [sp, #36]	; 0x24
 80086c8:	2320      	movs	r3, #32
 80086ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d2:	2330      	movs	r3, #48	; 0x30
 80086d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008888 <_vfiprintf_r+0x220>
 80086d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086dc:	f04f 0901 	mov.w	r9, #1
 80086e0:	4623      	mov	r3, r4
 80086e2:	469a      	mov	sl, r3
 80086e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e8:	b10a      	cbz	r2, 80086ee <_vfiprintf_r+0x86>
 80086ea:	2a25      	cmp	r2, #37	; 0x25
 80086ec:	d1f9      	bne.n	80086e2 <_vfiprintf_r+0x7a>
 80086ee:	ebba 0b04 	subs.w	fp, sl, r4
 80086f2:	d00b      	beq.n	800870c <_vfiprintf_r+0xa4>
 80086f4:	465b      	mov	r3, fp
 80086f6:	4622      	mov	r2, r4
 80086f8:	4629      	mov	r1, r5
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7ff ffa2 	bl	8008644 <__sfputs_r>
 8008700:	3001      	adds	r0, #1
 8008702:	f000 80a9 	beq.w	8008858 <_vfiprintf_r+0x1f0>
 8008706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008708:	445a      	add	r2, fp
 800870a:	9209      	str	r2, [sp, #36]	; 0x24
 800870c:	f89a 3000 	ldrb.w	r3, [sl]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80a1 	beq.w	8008858 <_vfiprintf_r+0x1f0>
 8008716:	2300      	movs	r3, #0
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008720:	f10a 0a01 	add.w	sl, sl, #1
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	9307      	str	r3, [sp, #28]
 8008728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800872c:	931a      	str	r3, [sp, #104]	; 0x68
 800872e:	4654      	mov	r4, sl
 8008730:	2205      	movs	r2, #5
 8008732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008736:	4854      	ldr	r0, [pc, #336]	; (8008888 <_vfiprintf_r+0x220>)
 8008738:	f7f7 fd82 	bl	8000240 <memchr>
 800873c:	9a04      	ldr	r2, [sp, #16]
 800873e:	b9d8      	cbnz	r0, 8008778 <_vfiprintf_r+0x110>
 8008740:	06d1      	lsls	r1, r2, #27
 8008742:	bf44      	itt	mi
 8008744:	2320      	movmi	r3, #32
 8008746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800874a:	0713      	lsls	r3, r2, #28
 800874c:	bf44      	itt	mi
 800874e:	232b      	movmi	r3, #43	; 0x2b
 8008750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008754:	f89a 3000 	ldrb.w	r3, [sl]
 8008758:	2b2a      	cmp	r3, #42	; 0x2a
 800875a:	d015      	beq.n	8008788 <_vfiprintf_r+0x120>
 800875c:	9a07      	ldr	r2, [sp, #28]
 800875e:	4654      	mov	r4, sl
 8008760:	2000      	movs	r0, #0
 8008762:	f04f 0c0a 	mov.w	ip, #10
 8008766:	4621      	mov	r1, r4
 8008768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800876c:	3b30      	subs	r3, #48	; 0x30
 800876e:	2b09      	cmp	r3, #9
 8008770:	d94d      	bls.n	800880e <_vfiprintf_r+0x1a6>
 8008772:	b1b0      	cbz	r0, 80087a2 <_vfiprintf_r+0x13a>
 8008774:	9207      	str	r2, [sp, #28]
 8008776:	e014      	b.n	80087a2 <_vfiprintf_r+0x13a>
 8008778:	eba0 0308 	sub.w	r3, r0, r8
 800877c:	fa09 f303 	lsl.w	r3, r9, r3
 8008780:	4313      	orrs	r3, r2
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	46a2      	mov	sl, r4
 8008786:	e7d2      	b.n	800872e <_vfiprintf_r+0xc6>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	1d19      	adds	r1, r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	9103      	str	r1, [sp, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	bfbb      	ittet	lt
 8008794:	425b      	neglt	r3, r3
 8008796:	f042 0202 	orrlt.w	r2, r2, #2
 800879a:	9307      	strge	r3, [sp, #28]
 800879c:	9307      	strlt	r3, [sp, #28]
 800879e:	bfb8      	it	lt
 80087a0:	9204      	strlt	r2, [sp, #16]
 80087a2:	7823      	ldrb	r3, [r4, #0]
 80087a4:	2b2e      	cmp	r3, #46	; 0x2e
 80087a6:	d10c      	bne.n	80087c2 <_vfiprintf_r+0x15a>
 80087a8:	7863      	ldrb	r3, [r4, #1]
 80087aa:	2b2a      	cmp	r3, #42	; 0x2a
 80087ac:	d134      	bne.n	8008818 <_vfiprintf_r+0x1b0>
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	1d1a      	adds	r2, r3, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	9203      	str	r2, [sp, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bfb8      	it	lt
 80087ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80087be:	3402      	adds	r4, #2
 80087c0:	9305      	str	r3, [sp, #20]
 80087c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008898 <_vfiprintf_r+0x230>
 80087c6:	7821      	ldrb	r1, [r4, #0]
 80087c8:	2203      	movs	r2, #3
 80087ca:	4650      	mov	r0, sl
 80087cc:	f7f7 fd38 	bl	8000240 <memchr>
 80087d0:	b138      	cbz	r0, 80087e2 <_vfiprintf_r+0x17a>
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	eba0 000a 	sub.w	r0, r0, sl
 80087d8:	2240      	movs	r2, #64	; 0x40
 80087da:	4082      	lsls	r2, r0
 80087dc:	4313      	orrs	r3, r2
 80087de:	3401      	adds	r4, #1
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e6:	4829      	ldr	r0, [pc, #164]	; (800888c <_vfiprintf_r+0x224>)
 80087e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ec:	2206      	movs	r2, #6
 80087ee:	f7f7 fd27 	bl	8000240 <memchr>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d03f      	beq.n	8008876 <_vfiprintf_r+0x20e>
 80087f6:	4b26      	ldr	r3, [pc, #152]	; (8008890 <_vfiprintf_r+0x228>)
 80087f8:	bb1b      	cbnz	r3, 8008842 <_vfiprintf_r+0x1da>
 80087fa:	9b03      	ldr	r3, [sp, #12]
 80087fc:	3307      	adds	r3, #7
 80087fe:	f023 0307 	bic.w	r3, r3, #7
 8008802:	3308      	adds	r3, #8
 8008804:	9303      	str	r3, [sp, #12]
 8008806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008808:	443b      	add	r3, r7
 800880a:	9309      	str	r3, [sp, #36]	; 0x24
 800880c:	e768      	b.n	80086e0 <_vfiprintf_r+0x78>
 800880e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008812:	460c      	mov	r4, r1
 8008814:	2001      	movs	r0, #1
 8008816:	e7a6      	b.n	8008766 <_vfiprintf_r+0xfe>
 8008818:	2300      	movs	r3, #0
 800881a:	3401      	adds	r4, #1
 800881c:	9305      	str	r3, [sp, #20]
 800881e:	4619      	mov	r1, r3
 8008820:	f04f 0c0a 	mov.w	ip, #10
 8008824:	4620      	mov	r0, r4
 8008826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800882a:	3a30      	subs	r2, #48	; 0x30
 800882c:	2a09      	cmp	r2, #9
 800882e:	d903      	bls.n	8008838 <_vfiprintf_r+0x1d0>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0c6      	beq.n	80087c2 <_vfiprintf_r+0x15a>
 8008834:	9105      	str	r1, [sp, #20]
 8008836:	e7c4      	b.n	80087c2 <_vfiprintf_r+0x15a>
 8008838:	fb0c 2101 	mla	r1, ip, r1, r2
 800883c:	4604      	mov	r4, r0
 800883e:	2301      	movs	r3, #1
 8008840:	e7f0      	b.n	8008824 <_vfiprintf_r+0x1bc>
 8008842:	ab03      	add	r3, sp, #12
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	462a      	mov	r2, r5
 8008848:	4b12      	ldr	r3, [pc, #72]	; (8008894 <_vfiprintf_r+0x22c>)
 800884a:	a904      	add	r1, sp, #16
 800884c:	4630      	mov	r0, r6
 800884e:	f7fb ff3f 	bl	80046d0 <_printf_float>
 8008852:	4607      	mov	r7, r0
 8008854:	1c78      	adds	r0, r7, #1
 8008856:	d1d6      	bne.n	8008806 <_vfiprintf_r+0x19e>
 8008858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800885a:	07d9      	lsls	r1, r3, #31
 800885c:	d405      	bmi.n	800886a <_vfiprintf_r+0x202>
 800885e:	89ab      	ldrh	r3, [r5, #12]
 8008860:	059a      	lsls	r2, r3, #22
 8008862:	d402      	bmi.n	800886a <_vfiprintf_r+0x202>
 8008864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008866:	f7fc fe85 	bl	8005574 <__retarget_lock_release_recursive>
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	065b      	lsls	r3, r3, #25
 800886e:	f53f af1d 	bmi.w	80086ac <_vfiprintf_r+0x44>
 8008872:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008874:	e71c      	b.n	80086b0 <_vfiprintf_r+0x48>
 8008876:	ab03      	add	r3, sp, #12
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	462a      	mov	r2, r5
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <_vfiprintf_r+0x22c>)
 800887e:	a904      	add	r1, sp, #16
 8008880:	4630      	mov	r0, r6
 8008882:	f7fc f9ad 	bl	8004be0 <_printf_i>
 8008886:	e7e4      	b.n	8008852 <_vfiprintf_r+0x1ea>
 8008888:	08009c69 	.word	0x08009c69
 800888c:	08009c73 	.word	0x08009c73
 8008890:	080046d1 	.word	0x080046d1
 8008894:	08008645 	.word	0x08008645
 8008898:	08009c6f 	.word	0x08009c6f

0800889c <__swbuf_r>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	460e      	mov	r6, r1
 80088a0:	4614      	mov	r4, r2
 80088a2:	4605      	mov	r5, r0
 80088a4:	b118      	cbz	r0, 80088ae <__swbuf_r+0x12>
 80088a6:	6a03      	ldr	r3, [r0, #32]
 80088a8:	b90b      	cbnz	r3, 80088ae <__swbuf_r+0x12>
 80088aa:	f7fc fd4b 	bl	8005344 <__sinit>
 80088ae:	69a3      	ldr	r3, [r4, #24]
 80088b0:	60a3      	str	r3, [r4, #8]
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	071a      	lsls	r2, r3, #28
 80088b6:	d525      	bpl.n	8008904 <__swbuf_r+0x68>
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	b31b      	cbz	r3, 8008904 <__swbuf_r+0x68>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	6922      	ldr	r2, [r4, #16]
 80088c0:	1a98      	subs	r0, r3, r2
 80088c2:	6963      	ldr	r3, [r4, #20]
 80088c4:	b2f6      	uxtb	r6, r6
 80088c6:	4283      	cmp	r3, r0
 80088c8:	4637      	mov	r7, r6
 80088ca:	dc04      	bgt.n	80088d6 <__swbuf_r+0x3a>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	f7ff fa2c 	bl	8007d2c <_fflush_r>
 80088d4:	b9e0      	cbnz	r0, 8008910 <__swbuf_r+0x74>
 80088d6:	68a3      	ldr	r3, [r4, #8]
 80088d8:	3b01      	subs	r3, #1
 80088da:	60a3      	str	r3, [r4, #8]
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	6022      	str	r2, [r4, #0]
 80088e2:	701e      	strb	r6, [r3, #0]
 80088e4:	6962      	ldr	r2, [r4, #20]
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d004      	beq.n	80088f6 <__swbuf_r+0x5a>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	07db      	lsls	r3, r3, #31
 80088f0:	d506      	bpl.n	8008900 <__swbuf_r+0x64>
 80088f2:	2e0a      	cmp	r6, #10
 80088f4:	d104      	bne.n	8008900 <__swbuf_r+0x64>
 80088f6:	4621      	mov	r1, r4
 80088f8:	4628      	mov	r0, r5
 80088fa:	f7ff fa17 	bl	8007d2c <_fflush_r>
 80088fe:	b938      	cbnz	r0, 8008910 <__swbuf_r+0x74>
 8008900:	4638      	mov	r0, r7
 8008902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008904:	4621      	mov	r1, r4
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f806 	bl	8008918 <__swsetup_r>
 800890c:	2800      	cmp	r0, #0
 800890e:	d0d5      	beq.n	80088bc <__swbuf_r+0x20>
 8008910:	f04f 37ff 	mov.w	r7, #4294967295
 8008914:	e7f4      	b.n	8008900 <__swbuf_r+0x64>
	...

08008918 <__swsetup_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4b2a      	ldr	r3, [pc, #168]	; (80089c4 <__swsetup_r+0xac>)
 800891c:	4605      	mov	r5, r0
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	460c      	mov	r4, r1
 8008922:	b118      	cbz	r0, 800892c <__swsetup_r+0x14>
 8008924:	6a03      	ldr	r3, [r0, #32]
 8008926:	b90b      	cbnz	r3, 800892c <__swsetup_r+0x14>
 8008928:	f7fc fd0c 	bl	8005344 <__sinit>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008932:	0718      	lsls	r0, r3, #28
 8008934:	d422      	bmi.n	800897c <__swsetup_r+0x64>
 8008936:	06d9      	lsls	r1, r3, #27
 8008938:	d407      	bmi.n	800894a <__swsetup_r+0x32>
 800893a:	2309      	movs	r3, #9
 800893c:	602b      	str	r3, [r5, #0]
 800893e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	e034      	b.n	80089b4 <__swsetup_r+0x9c>
 800894a:	0758      	lsls	r0, r3, #29
 800894c:	d512      	bpl.n	8008974 <__swsetup_r+0x5c>
 800894e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008950:	b141      	cbz	r1, 8008964 <__swsetup_r+0x4c>
 8008952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008956:	4299      	cmp	r1, r3
 8008958:	d002      	beq.n	8008960 <__swsetup_r+0x48>
 800895a:	4628      	mov	r0, r5
 800895c:	f7fd fc08 	bl	8006170 <_free_r>
 8008960:	2300      	movs	r3, #0
 8008962:	6363      	str	r3, [r4, #52]	; 0x34
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	2300      	movs	r3, #0
 800896e:	6063      	str	r3, [r4, #4]
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f043 0308 	orr.w	r3, r3, #8
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	b94b      	cbnz	r3, 8008994 <__swsetup_r+0x7c>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800898a:	d003      	beq.n	8008994 <__swsetup_r+0x7c>
 800898c:	4621      	mov	r1, r4
 800898e:	4628      	mov	r0, r5
 8008990:	f000 f884 	bl	8008a9c <__smakebuf_r>
 8008994:	89a0      	ldrh	r0, [r4, #12]
 8008996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800899a:	f010 0301 	ands.w	r3, r0, #1
 800899e:	d00a      	beq.n	80089b6 <__swsetup_r+0x9e>
 80089a0:	2300      	movs	r3, #0
 80089a2:	60a3      	str	r3, [r4, #8]
 80089a4:	6963      	ldr	r3, [r4, #20]
 80089a6:	425b      	negs	r3, r3
 80089a8:	61a3      	str	r3, [r4, #24]
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	b943      	cbnz	r3, 80089c0 <__swsetup_r+0xa8>
 80089ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089b2:	d1c4      	bne.n	800893e <__swsetup_r+0x26>
 80089b4:	bd38      	pop	{r3, r4, r5, pc}
 80089b6:	0781      	lsls	r1, r0, #30
 80089b8:	bf58      	it	pl
 80089ba:	6963      	ldrpl	r3, [r4, #20]
 80089bc:	60a3      	str	r3, [r4, #8]
 80089be:	e7f4      	b.n	80089aa <__swsetup_r+0x92>
 80089c0:	2000      	movs	r0, #0
 80089c2:	e7f7      	b.n	80089b4 <__swsetup_r+0x9c>
 80089c4:	2000006c 	.word	0x2000006c

080089c8 <_raise_r>:
 80089c8:	291f      	cmp	r1, #31
 80089ca:	b538      	push	{r3, r4, r5, lr}
 80089cc:	4604      	mov	r4, r0
 80089ce:	460d      	mov	r5, r1
 80089d0:	d904      	bls.n	80089dc <_raise_r+0x14>
 80089d2:	2316      	movs	r3, #22
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	f04f 30ff 	mov.w	r0, #4294967295
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089de:	b112      	cbz	r2, 80089e6 <_raise_r+0x1e>
 80089e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089e4:	b94b      	cbnz	r3, 80089fa <_raise_r+0x32>
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 f830 	bl	8008a4c <_getpid_r>
 80089ec:	462a      	mov	r2, r5
 80089ee:	4601      	mov	r1, r0
 80089f0:	4620      	mov	r0, r4
 80089f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f6:	f000 b817 	b.w	8008a28 <_kill_r>
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d00a      	beq.n	8008a14 <_raise_r+0x4c>
 80089fe:	1c59      	adds	r1, r3, #1
 8008a00:	d103      	bne.n	8008a0a <_raise_r+0x42>
 8008a02:	2316      	movs	r3, #22
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	2001      	movs	r0, #1
 8008a08:	e7e7      	b.n	80089da <_raise_r+0x12>
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a10:	4628      	mov	r0, r5
 8008a12:	4798      	blx	r3
 8008a14:	2000      	movs	r0, #0
 8008a16:	e7e0      	b.n	80089da <_raise_r+0x12>

08008a18 <raise>:
 8008a18:	4b02      	ldr	r3, [pc, #8]	; (8008a24 <raise+0xc>)
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	f7ff bfd3 	b.w	80089c8 <_raise_r>
 8008a22:	bf00      	nop
 8008a24:	2000006c 	.word	0x2000006c

08008a28 <_kill_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d07      	ldr	r5, [pc, #28]	; (8008a48 <_kill_r+0x20>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	f7f9 f8a1 	bl	8001b7c <_kill>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d102      	bne.n	8008a44 <_kill_r+0x1c>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	b103      	cbz	r3, 8008a44 <_kill_r+0x1c>
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	200008a8 	.word	0x200008a8

08008a4c <_getpid_r>:
 8008a4c:	f7f9 b88e 	b.w	8001b6c <_getpid>

08008a50 <__swhatbuf_r>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	460c      	mov	r4, r1
 8008a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	b096      	sub	sp, #88	; 0x58
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	461e      	mov	r6, r3
 8008a60:	da0d      	bge.n	8008a7e <__swhatbuf_r+0x2e>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a68:	f04f 0100 	mov.w	r1, #0
 8008a6c:	bf0c      	ite	eq
 8008a6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a72:	2340      	movne	r3, #64	; 0x40
 8008a74:	2000      	movs	r0, #0
 8008a76:	6031      	str	r1, [r6, #0]
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	b016      	add	sp, #88	; 0x58
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	466a      	mov	r2, sp
 8008a80:	f000 f848 	bl	8008b14 <_fstat_r>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	dbec      	blt.n	8008a62 <__swhatbuf_r+0x12>
 8008a88:	9901      	ldr	r1, [sp, #4]
 8008a8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a92:	4259      	negs	r1, r3
 8008a94:	4159      	adcs	r1, r3
 8008a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a9a:	e7eb      	b.n	8008a74 <__swhatbuf_r+0x24>

08008a9c <__smakebuf_r>:
 8008a9c:	898b      	ldrh	r3, [r1, #12]
 8008a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008aa0:	079d      	lsls	r5, r3, #30
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	d507      	bpl.n	8008ab8 <__smakebuf_r+0x1c>
 8008aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	6123      	str	r3, [r4, #16]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	6163      	str	r3, [r4, #20]
 8008ab4:	b002      	add	sp, #8
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	ab01      	add	r3, sp, #4
 8008aba:	466a      	mov	r2, sp
 8008abc:	f7ff ffc8 	bl	8008a50 <__swhatbuf_r>
 8008ac0:	9900      	ldr	r1, [sp, #0]
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7fd fbc7 	bl	8006258 <_malloc_r>
 8008aca:	b948      	cbnz	r0, 8008ae0 <__smakebuf_r+0x44>
 8008acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad0:	059a      	lsls	r2, r3, #22
 8008ad2:	d4ef      	bmi.n	8008ab4 <__smakebuf_r+0x18>
 8008ad4:	f023 0303 	bic.w	r3, r3, #3
 8008ad8:	f043 0302 	orr.w	r3, r3, #2
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	e7e3      	b.n	8008aa8 <__smakebuf_r+0xc>
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	6020      	str	r0, [r4, #0]
 8008ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	9b00      	ldr	r3, [sp, #0]
 8008aec:	6163      	str	r3, [r4, #20]
 8008aee:	9b01      	ldr	r3, [sp, #4]
 8008af0:	6120      	str	r0, [r4, #16]
 8008af2:	b15b      	cbz	r3, 8008b0c <__smakebuf_r+0x70>
 8008af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 f81d 	bl	8008b38 <_isatty_r>
 8008afe:	b128      	cbz	r0, 8008b0c <__smakebuf_r+0x70>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	431d      	orrs	r5, r3
 8008b10:	81a5      	strh	r5, [r4, #12]
 8008b12:	e7cf      	b.n	8008ab4 <__smakebuf_r+0x18>

08008b14 <_fstat_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4d07      	ldr	r5, [pc, #28]	; (8008b34 <_fstat_r+0x20>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	f7f9 f88a 	bl	8001c3a <_fstat>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	d102      	bne.n	8008b30 <_fstat_r+0x1c>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	b103      	cbz	r3, 8008b30 <_fstat_r+0x1c>
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	bd38      	pop	{r3, r4, r5, pc}
 8008b32:	bf00      	nop
 8008b34:	200008a8 	.word	0x200008a8

08008b38 <_isatty_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d06      	ldr	r5, [pc, #24]	; (8008b54 <_isatty_r+0x1c>)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	f7f9 f889 	bl	8001c5a <_isatty>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_isatty_r+0x1a>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_isatty_r+0x1a>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	200008a8 	.word	0x200008a8

08008b58 <_init>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr

08008b64 <_fini>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	bf00      	nop
 8008b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6a:	bc08      	pop	{r3}
 8008b6c:	469e      	mov	lr, r3
 8008b6e:	4770      	bx	lr
