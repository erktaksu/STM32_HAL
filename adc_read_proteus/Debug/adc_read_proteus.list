
adc_read_proteus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a1c  08003a1c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a1c  08003a1c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08003a80  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003a80  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000815d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000166b  00000000  00000000  00028225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00029890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b0  00000000  00000000  00029fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017200  00000000  00000000  0002a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095cd  00000000  00000000  00041888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b46  00000000  00000000  0004ae55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002318  00000000  00000000  000cf99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800396c 	.word	0x0800396c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	0800396c 	.word	0x0800396c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__aeabi_d2f>:
 8000a64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a6c:	bf24      	itt	cs
 8000a6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a76:	d90d      	bls.n	8000a94 <__aeabi_d2f+0x30>
 8000a78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a98:	d121      	bne.n	8000ade <__aeabi_d2f+0x7a>
 8000a9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9e:	bfbc      	itt	lt
 8000aa0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa4:	4770      	bxlt	lr
 8000aa6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aae:	f1c2 0218 	rsb	r2, r2, #24
 8000ab2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aba:	fa20 f002 	lsr.w	r0, r0, r2
 8000abe:	bf18      	it	ne
 8000ac0:	f040 0001 	orrne.w	r0, r0, #1
 8000ac4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000acc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad0:	ea40 000c 	orr.w	r0, r0, ip
 8000ad4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000adc:	e7cc      	b.n	8000a78 <__aeabi_d2f+0x14>
 8000ade:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae2:	d107      	bne.n	8000af4 <__aeabi_d2f+0x90>
 8000ae4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae8:	bf1e      	ittt	ne
 8000aea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af2:	4770      	bxne	lr
 8000af4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_frsub>:
 8000b04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b08:	e002      	b.n	8000b10 <__addsf3>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_fsub>:
 8000b0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b10 <__addsf3>:
 8000b10:	0042      	lsls	r2, r0, #1
 8000b12:	bf1f      	itttt	ne
 8000b14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b18:	ea92 0f03 	teqne	r2, r3
 8000b1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b24:	d06a      	beq.n	8000bfc <__addsf3+0xec>
 8000b26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2e:	bfc1      	itttt	gt
 8000b30:	18d2      	addgt	r2, r2, r3
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	4048      	eorgt	r0, r1
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	bfb8      	it	lt
 8000b3a:	425b      	neglt	r3, r3
 8000b3c:	2b19      	cmp	r3, #25
 8000b3e:	bf88      	it	hi
 8000b40:	4770      	bxhi	lr
 8000b42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4249      	negne	r1, r1
 8000b62:	ea92 0f03 	teq	r2, r3
 8000b66:	d03f      	beq.n	8000be8 <__addsf3+0xd8>
 8000b68:	f1a2 0201 	sub.w	r2, r2, #1
 8000b6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b70:	eb10 000c 	adds.w	r0, r0, ip
 8000b74:	f1c3 0320 	rsb	r3, r3, #32
 8000b78:	fa01 f103 	lsl.w	r1, r1, r3
 8000b7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b80:	d502      	bpl.n	8000b88 <__addsf3+0x78>
 8000b82:	4249      	negs	r1, r1
 8000b84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b8c:	d313      	bcc.n	8000bb6 <__addsf3+0xa6>
 8000b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b92:	d306      	bcc.n	8000ba2 <__addsf3+0x92>
 8000b94:	0840      	lsrs	r0, r0, #1
 8000b96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9a:	f102 0201 	add.w	r2, r2, #1
 8000b9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ba0:	d251      	bcs.n	8000c46 <__addsf3+0x136>
 8000ba2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000baa:	bf08      	it	eq
 8000bac:	f020 0001 	biceq.w	r0, r0, #1
 8000bb0:	ea40 0003 	orr.w	r0, r0, r3
 8000bb4:	4770      	bx	lr
 8000bb6:	0049      	lsls	r1, r1, #1
 8000bb8:	eb40 0000 	adc.w	r0, r0, r0
 8000bbc:	3a01      	subs	r2, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc4:	d2ed      	bcs.n	8000ba2 <__addsf3+0x92>
 8000bc6:	fab0 fc80 	clz	ip, r0
 8000bca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bce:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd6:	bfaa      	itet	ge
 8000bd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bdc:	4252      	neglt	r2, r2
 8000bde:	4318      	orrge	r0, r3
 8000be0:	bfbc      	itt	lt
 8000be2:	40d0      	lsrlt	r0, r2
 8000be4:	4318      	orrlt	r0, r3
 8000be6:	4770      	bx	lr
 8000be8:	f092 0f00 	teq	r2, #0
 8000bec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf0:	bf06      	itte	eq
 8000bf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf6:	3201      	addeq	r2, #1
 8000bf8:	3b01      	subne	r3, #1
 8000bfa:	e7b5      	b.n	8000b68 <__addsf3+0x58>
 8000bfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c04:	bf18      	it	ne
 8000c06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0a:	d021      	beq.n	8000c50 <__addsf3+0x140>
 8000c0c:	ea92 0f03 	teq	r2, r3
 8000c10:	d004      	beq.n	8000c1c <__addsf3+0x10c>
 8000c12:	f092 0f00 	teq	r2, #0
 8000c16:	bf08      	it	eq
 8000c18:	4608      	moveq	r0, r1
 8000c1a:	4770      	bx	lr
 8000c1c:	ea90 0f01 	teq	r0, r1
 8000c20:	bf1c      	itt	ne
 8000c22:	2000      	movne	r0, #0
 8000c24:	4770      	bxne	lr
 8000c26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2a:	d104      	bne.n	8000c36 <__addsf3+0x126>
 8000c2c:	0040      	lsls	r0, r0, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	4770      	bx	lr
 8000c36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3a:	bf3c      	itt	cc
 8000c3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c40:	4770      	bxcc	lr
 8000c42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4e:	4770      	bx	lr
 8000c50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c54:	bf16      	itet	ne
 8000c56:	4608      	movne	r0, r1
 8000c58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c5c:	4601      	movne	r1, r0
 8000c5e:	0242      	lsls	r2, r0, #9
 8000c60:	bf06      	itte	eq
 8000c62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c66:	ea90 0f01 	teqeq	r0, r1
 8000c6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_ui2f>:
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e004      	b.n	8000c80 <__aeabi_i2f+0x8>
 8000c76:	bf00      	nop

08000c78 <__aeabi_i2f>:
 8000c78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	bf48      	it	mi
 8000c7e:	4240      	negmi	r0, r0
 8000c80:	ea5f 0c00 	movs.w	ip, r0
 8000c84:	bf08      	it	eq
 8000c86:	4770      	bxeq	lr
 8000c88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c8c:	4601      	mov	r1, r0
 8000c8e:	f04f 0000 	mov.w	r0, #0
 8000c92:	e01c      	b.n	8000cce <__aeabi_l2f+0x2a>

08000c94 <__aeabi_ul2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e00a      	b.n	8000cb8 <__aeabi_l2f+0x14>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_l2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	d502      	bpl.n	8000cb8 <__aeabi_l2f+0x14>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	ea5f 0c01 	movs.w	ip, r1
 8000cbc:	bf02      	ittt	eq
 8000cbe:	4684      	moveq	ip, r0
 8000cc0:	4601      	moveq	r1, r0
 8000cc2:	2000      	moveq	r0, #0
 8000cc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc8:	bf08      	it	eq
 8000cca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd2:	fabc f28c 	clz	r2, ip
 8000cd6:	3a08      	subs	r2, #8
 8000cd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cdc:	db10      	blt.n	8000d00 <__aeabi_l2f+0x5c>
 8000cde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	f020 0001 	biceq.w	r0, r0, #1
 8000cfe:	4770      	bx	lr
 8000d00:	f102 0220 	add.w	r2, r2, #32
 8000d04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d10:	fa21 f202 	lsr.w	r2, r1, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_f2uiz>:
 8000d20:	0042      	lsls	r2, r0, #1
 8000d22:	d20e      	bcs.n	8000d42 <__aeabi_f2uiz+0x22>
 8000d24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d28:	d30b      	bcc.n	8000d42 <__aeabi_f2uiz+0x22>
 8000d2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d32:	d409      	bmi.n	8000d48 <__aeabi_f2uiz+0x28>
 8000d34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d40:	4770      	bx	lr
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	4770      	bx	lr
 8000d48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d4c:	d101      	bne.n	8000d52 <__aeabi_f2uiz+0x32>
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	d102      	bne.n	8000d58 <__aeabi_f2uiz+0x38>
 8000d52:	f04f 30ff 	mov.w	r0, #4294967295
 8000d56:	4770      	bx	lr
 8000d58:	f04f 0000 	mov.w	r0, #0
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d66:	f000 fad9 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f893 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f000 f951 	bl	8001014 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d72:	f000 f8e7 	bl	8000f44 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d76:	f000 f923 	bl	8000fc0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000d7a:	483b      	ldr	r0, [pc, #236]	; (8000e68 <main+0x108>)
 8000d7c:	f000 fc2c 	bl	80015d8 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK){
 8000d80:	2164      	movs	r1, #100	; 0x64
 8000d82:	4839      	ldr	r0, [pc, #228]	; (8000e68 <main+0x108>)
 8000d84:	f000 fcd6 	bl	8001734 <HAL_ADC_PollForConversion>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d122      	bne.n	8000dd4 <main+0x74>
	  		  adc_value = HAL_ADC_GetValue(&hadc1);
 8000d8e:	4836      	ldr	r0, [pc, #216]	; (8000e68 <main+0x108>)
 8000d90:	f000 fdd6 	bl	8001940 <HAL_ADC_GetValue>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <main+0x10c>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	  		  adc_voltage=adc_value/4096.0*3.3;
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <main+0x10c>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fbe3 	bl	800056c <__aeabi_i2d>
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <main+0x110>)
 8000dac:	f7ff fd72 	bl	8000894 <__aeabi_ddiv>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	a329      	add	r3, pc, #164	; (adr r3, 8000e60 <main+0x100>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fc3f 	bl	8000640 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fe4b 	bl	8000a64 <__aeabi_d2f>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <main+0x114>)
 8000dd2:	6013      	str	r3, [r2, #0]

	  	}
	  tam_kisim=(uint32_t)adc_voltage;
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <main+0x114>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffa1 	bl	8000d20 <__aeabi_f2uiz>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <main+0x118>)
 8000de4:	801a      	strh	r2, [r3, #0]
	  ondalikli_kisim=(uint32_t)((adc_voltage-tam_kisim)*1000);
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <main+0x114>)
 8000de8:	681c      	ldr	r4, [r3, #0]
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <main+0x118>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff42 	bl	8000c78 <__aeabi_i2f>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff fe87 	bl	8000b0c <__aeabi_fsub>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	491e      	ldr	r1, [pc, #120]	; (8000e7c <main+0x11c>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9ac 	bl	8000160 <__aeabi_fmul>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff88 	bl	8000d20 <__aeabi_f2uiz>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <main+0x120>)
 8000e16:	801a      	strh	r2, [r3, #0]

	  //TEST GPIO PIN CONVERSION BEGIN
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4819      	ldr	r0, [pc, #100]	; (8000e84 <main+0x124>)
 8000e1e:	f001 f98f 	bl	8002140 <HAL_GPIO_WritePin>


	  sprintf(msg," ADC_deger:%d ,ADC_voltage:%d,%d \r\n",adc_value,tam_kisim,ondalikli_kisim);
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <main+0x10c>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <main+0x118>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <main+0x120>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	460b      	mov	r3, r1
 8000e36:	4914      	ldr	r1, [pc, #80]	; (8000e88 <main+0x128>)
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <main+0x12c>)
 8000e3a:	f002 f8e5 	bl	8003008 <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000e3e:	4813      	ldr	r0, [pc, #76]	; (8000e8c <main+0x12c>)
 8000e40:	f7ff f986 	bl	8000150 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	490f      	ldr	r1, [pc, #60]	; (8000e8c <main+0x12c>)
 8000e4e:	4810      	ldr	r0, [pc, #64]	; (8000e90 <main+0x130>)
 8000e50:	f001 ff5a 	bl	8002d08 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8000e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e58:	f000 fac2 	bl	80013e0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000e5c:	e78d      	b.n	8000d7a <main+0x1a>
 8000e5e:	bf00      	nop
 8000e60:	66666666 	.word	0x66666666
 8000e64:	400a6666 	.word	0x400a6666
 8000e68:	20000078 	.word	0x20000078
 8000e6c:	200000f4 	.word	0x200000f4
 8000e70:	40b00000 	.word	0x40b00000
 8000e74:	200000f0 	.word	0x200000f0
 8000e78:	200000f6 	.word	0x200000f6
 8000e7c:	447a0000 	.word	0x447a0000
 8000e80:	200000f8 	.word	0x200000f8
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	08003984 	.word	0x08003984
 8000e8c:	200000fc 	.word	0x200000fc
 8000e90:	200000a8 	.word	0x200000a8

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 f8d0 	bl	8003048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000ed8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 f944 	bl	8002170 <HAL_RCC_OscConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000eee:	f000 f8db 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fbb0 	bl	8002674 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f1a:	f000 f8c5 	bl	80010a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fd30 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f36:	f000 f8b7 	bl	80010a8 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3750      	adds	r7, #80	; 0x50
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f56:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <MX_ADC1_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000f82:	f000 fa51 	bl	8001428 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 f88c 	bl	80010a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_ADC1_Init+0x74>)
 8000fa2:	f000 fcd9 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fac:	f000 f87c 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000078 	.word	0x20000078
 8000fbc:	40012400 	.word	0x40012400

08000fc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_USART1_UART_Init+0x50>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000ff8:	f001 fe36 	bl	8002c68 <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001002:	f000 f851 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000a8 	.word	0x200000a8
 8001010:	40013800 	.word	0x40013800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_GPIO_Init+0x8c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_GPIO_Init+0x8c>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_GPIO_Init+0x8c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_GPIO_Init+0x8c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <MX_GPIO_Init+0x8c>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_GPIO_Init+0x8c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_GPIO_Init+0x8c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <MX_GPIO_Init+0x8c>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_GPIO_Init+0x8c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2101      	movs	r1, #1
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001076:	f001 f863 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	4619      	mov	r1, r3
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001092:	f000 fed9 	bl	8001e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010c00 	.word	0x40010c00

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_MspInit+0x40>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_MspInit+0x40>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_MspInit+0x40>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_MspInit+0x40>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_MspInit+0x40>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_MspInit+0x40>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_ADC_MspInit+0x6c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d121      	bne.n	800115c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_ADC_MspInit+0x70>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_ADC_MspInit+0x70>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_ADC_MspInit+0x70>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_ADC_MspInit+0x70>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <HAL_ADC_MspInit+0x70>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_ADC_MspInit+0x70>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114c:	2303      	movs	r3, #3
 800114e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_ADC_MspInit+0x74>)
 8001158:	f000 fe76 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40012400 	.word	0x40012400
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_UART_MspInit+0x8c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d131      	bne.n	80011f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_UART_MspInit+0x90>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <HAL_UART_MspInit+0x90>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_UART_MspInit+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_UART_MspInit+0x90>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_UART_MspInit+0x90>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_UART_MspInit+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <HAL_UART_MspInit+0x94>)
 80011d6:	f000 fe37 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_UART_MspInit+0x94>)
 80011f0:	f000 fe2a 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40013800 	.word	0x40013800
 8001200:	40021000 	.word	0x40021000
 8001204:	40010800 	.word	0x40010800

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f8ab 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f001 fee6 	bl	8003058 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20001800 	.word	0x20001800
 80012b8:	00000400 	.word	0x00000400
 80012bc:	20000108 	.word	0x20000108
 80012c0:	20000258 	.word	0x20000258

080012c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d0:	f7ff fff8 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012d6:	490c      	ldr	r1, [pc, #48]	; (8001308 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012ec:	4c09      	ldr	r4, [pc, #36]	; (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fa:	f001 feb3 	bl	8003064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fe:	f7ff fd2f 	bl	8000d60 <main>
  bx lr
 8001302:	4770      	bx	lr
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800130c:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8001310:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001314:	20000258 	.word	0x20000258

08001318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_2_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_Init+0x28>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_Init+0x28>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fd57 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	200f      	movs	r0, #15
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff febc 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40022000 	.word	0x40022000

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fd61 	bl	8001e2e <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 fd37 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_IncTick+0x1c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_IncTick+0x20>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a03      	ldr	r2, [pc, #12]	; (80013c8 <HAL_IncTick+0x20>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000008 	.word	0x20000008
 80013c8:	2000010c 	.word	0x2000010c

080013cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <HAL_GetTick+0x10>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	2000010c 	.word	0x2000010c

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff fff0 	bl	80013cc <HAL_GetTick>
 80013ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f8:	d005      	beq.n	8001406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_Delay+0x44>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001406:	bf00      	nop
 8001408:	f7ff ffe0 	bl	80013cc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <HAL_Delay+0x28>
  {
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0be      	b.n	80015c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe46 	bl	80010f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fbc5 	bl	8001bfc <ADC_ConversionStop_Disable>
 8001472:	4603      	mov	r3, r0
 8001474:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 8099 	bne.w	80015b6 <HAL_ADC_Init+0x18e>
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 8095 	bne.w	80015b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001494:	f023 0302 	bic.w	r3, r3, #2
 8001498:	f043 0202 	orr.w	r2, r3, #2
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7b1b      	ldrb	r3, [r3, #12]
 80014ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_Init+0xa2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_ADC_Init+0xa8>
 80014ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ce:	e000      	b.n	80014d2 <HAL_ADC_Init+0xaa>
 80014d0:	2300      	movs	r3, #0
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7d1b      	ldrb	r3, [r3, #20]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d119      	bne.n	8001514 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7b1b      	ldrb	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	035a      	lsls	r2, r3, #13
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	e00b      	b.n	8001514 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <HAL_ADC_Init+0x1a8>)
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	430b      	orrs	r3, r1
 800153a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001544:	d003      	beq.n	800154e <HAL_ADC_Init+0x126>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d104      	bne.n	8001558 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	3b01      	subs	r3, #1
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	430a      	orrs	r2, r1
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_ADC_Init+0x1ac>)
 8001574:	4013      	ands	r3, r2
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	d10b      	bne.n	8001594 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001592:	e018      	b.n	80015c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	f023 0312 	bic.w	r3, r3, #18
 800159c:	f043 0210 	orr.w	r2, r3, #16
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015b4:	e007      	b.n	80015c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	ffe1f7fd 	.word	0xffe1f7fd
 80015d4:	ff1f0efe 	.word	0xff1f0efe

080015d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Start+0x1a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e098      	b.n	8001724 <HAL_ADC_Start+0x14c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 faa4 	bl	8001b48 <ADC_Enable>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8087 	bne.w	800171a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a41      	ldr	r2, [pc, #260]	; (800172c <HAL_ADC_Start+0x154>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d105      	bne.n	8001636 <HAL_ADC_Start+0x5e>
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_ADC_Start+0x158>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d026      	beq.n	800169e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001660:	e01d      	b.n	800169e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <HAL_ADC_Start+0x158>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d004      	beq.n	8001682 <HAL_ADC_Start+0xaa>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <HAL_ADC_Start+0x154>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10d      	bne.n	800169e <HAL_ADC_Start+0xc6>
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_ADC_Start+0x158>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001696:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	f023 0206 	bic.w	r2, r3, #6
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b6:	e002      	b.n	80016be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f06f 0202 	mvn.w	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016de:	d113      	bne.n	8001708 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_ADC_Start+0x154>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_ADC_Start+0x158>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	e00c      	b.n	8001722 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	e003      	b.n	8001722 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40012800 	.word	0x40012800
 8001730:	40012400 	.word	0x40012400

08001734 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800174a:	f7ff fe3f 	bl	80013cc <HAL_GetTick>
 800174e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0d3      	b.n	800191e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d131      	bne.n	80017e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800178e:	2b00      	cmp	r3, #0
 8001790:	d12a      	bne.n	80017e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001792:	e021      	b.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d01d      	beq.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_ADC_PollForConversion+0x7e>
 80017a2:	f7ff fe13 	bl	80013cc <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d212      	bcs.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10b      	bne.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0a2      	b.n	800191e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0d6      	beq.n	8001794 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017e6:	e070      	b.n	80018ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <HAL_ADC_PollForConversion+0x1f4>)
 80017ea:	681c      	ldr	r4, [r3, #0]
 80017ec:	2002      	movs	r0, #2
 80017ee:	f001 f985 	bl	8002afc <HAL_RCCEx_GetPeriphCLKFreq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6919      	ldr	r1, [r3, #16]
 80017fe:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_ADC_PollForConversion+0x1f8>)
 8001800:	400b      	ands	r3, r1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_PollForConversion+0x104>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68d9      	ldr	r1, [r3, #12]
 800180c:	4b48      	ldr	r3, [pc, #288]	; (8001930 <HAL_ADC_PollForConversion+0x1fc>)
 800180e:	400b      	ands	r3, r1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d111      	bne.n	8001838 <HAL_ADC_PollForConversion+0x104>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6919      	ldr	r1, [r3, #16]
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_ADC_PollForConversion+0x200>)
 800181c:	400b      	ands	r3, r1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <HAL_ADC_PollForConversion+0x100>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68d9      	ldr	r1, [r3, #12]
 8001828:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_ADC_PollForConversion+0x204>)
 800182a:	400b      	ands	r3, r1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_ADC_PollForConversion+0x100>
 8001830:	2314      	movs	r3, #20
 8001832:	e020      	b.n	8001876 <HAL_ADC_PollForConversion+0x142>
 8001834:	2329      	movs	r3, #41	; 0x29
 8001836:	e01e      	b.n	8001876 <HAL_ADC_PollForConversion+0x142>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6919      	ldr	r1, [r3, #16]
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_ADC_PollForConversion+0x200>)
 8001840:	400b      	ands	r3, r1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_ADC_PollForConversion+0x120>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_ADC_PollForConversion+0x204>)
 800184e:	400b      	ands	r3, r1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <HAL_ADC_PollForConversion+0x13c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6919      	ldr	r1, [r3, #16]
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <HAL_ADC_PollForConversion+0x208>)
 800185c:	400b      	ands	r3, r1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d108      	bne.n	8001874 <HAL_ADC_PollForConversion+0x140>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68d9      	ldr	r1, [r3, #12]
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_ADC_PollForConversion+0x208>)
 800186a:	400b      	ands	r3, r1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADC_PollForConversion+0x140>
 8001870:	2354      	movs	r3, #84	; 0x54
 8001872:	e000      	b.n	8001876 <HAL_ADC_PollForConversion+0x142>
 8001874:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800187c:	e021      	b.n	80018c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d01a      	beq.n	80018bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_ADC_PollForConversion+0x168>
 800188c:	f7ff fd9e 	bl	80013cc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d20f      	bcs.n	80018bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d90b      	bls.n	80018bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f043 0204 	orr.w	r2, r3, #4
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e030      	b.n	800191e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d8d9      	bhi.n	800187e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f06f 0212 	mvn.w	r2, #18
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018ee:	d115      	bne.n	800191c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000
 800192c:	24924924 	.word	0x24924924
 8001930:	00924924 	.word	0x00924924
 8001934:	12492492 	.word	0x12492492
 8001938:	00492492 	.word	0x00492492
 800193c:	00249249 	.word	0x00249249

08001940 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x20>
 8001974:	2302      	movs	r3, #2
 8001976:	e0dc      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x1da>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d81c      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4019      	ands	r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b05      	subs	r3, #5
 80019b4:	fa00 f203 	lsl.w	r2, r0, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	635a      	str	r2, [r3, #52]	; 0x34
 80019c0:	e03c      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d81c      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b23      	subs	r3, #35	; 0x23
 80019dc:	221f      	movs	r2, #31
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4019      	ands	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	e01b      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	221f      	movs	r2, #31
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b41      	subs	r3, #65	; 0x41
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d91c      	bls.n	8001a7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	e019      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6919      	ldr	r1, [r3, #16]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d132      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d125      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d126      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1b2>
 8001b16:	e007      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	20000000 	.word	0x20000000
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d040      	beq.n	8001be8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <ADC_Enable+0xac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <ADC_Enable+0xb0>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b84:	e002      	b.n	8001b8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b92:	f7ff fc1b 	bl	80013cc <HAL_GetTick>
 8001b96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b98:	e01f      	b.n	8001bda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b9a:	f7ff fc17 	bl	80013cc <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d918      	bls.n	8001bda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d011      	beq.n	8001bda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e007      	b.n	8001bea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d1d8      	bne.n	8001b9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d12e      	bne.n	8001c74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c26:	f7ff fbd1 	bl	80013cc <HAL_GetTick>
 8001c2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c2c:	e01b      	b.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c2e:	f7ff fbcd 	bl	80013cc <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d914      	bls.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10d      	bne.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e007      	b.n	8001c76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d0dc      	beq.n	8001c2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff90 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff49 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff5e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff90 	bl	8001d38 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5f 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffb0 	bl	8001d9c <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e161      	b.n	8002120 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8150 	bne.w	800211a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a97      	ldr	r2, [pc, #604]	; (80020dc <HAL_GPIO_Init+0x294>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d05e      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e84:	4a95      	ldr	r2, [pc, #596]	; (80020dc <HAL_GPIO_Init+0x294>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d875      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e8a:	4a95      	ldr	r2, [pc, #596]	; (80020e0 <HAL_GPIO_Init+0x298>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d058      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e90:	4a93      	ldr	r2, [pc, #588]	; (80020e0 <HAL_GPIO_Init+0x298>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d86f      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e96:	4a93      	ldr	r2, [pc, #588]	; (80020e4 <HAL_GPIO_Init+0x29c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d052      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a91      	ldr	r2, [pc, #580]	; (80020e4 <HAL_GPIO_Init+0x29c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d869      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a91      	ldr	r2, [pc, #580]	; (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04c      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a8f      	ldr	r2, [pc, #572]	; (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d863      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eae:	4a8f      	ldr	r2, [pc, #572]	; (80020ec <HAL_GPIO_Init+0x2a4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d046      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a8d      	ldr	r2, [pc, #564]	; (80020ec <HAL_GPIO_Init+0x2a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d85d      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d82a      	bhi.n	8001f14 <HAL_GPIO_Init+0xcc>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d859      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ec2:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <HAL_GPIO_Init+0x80>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001f2f 	.word	0x08001f2f
 8001ed4:	08001f71 	.word	0x08001f71
 8001ed8:	08001f77 	.word	0x08001f77
 8001edc:	08001f77 	.word	0x08001f77
 8001ee0:	08001f77 	.word	0x08001f77
 8001ee4:	08001f77 	.word	0x08001f77
 8001ee8:	08001f77 	.word	0x08001f77
 8001eec:	08001f77 	.word	0x08001f77
 8001ef0:	08001f77 	.word	0x08001f77
 8001ef4:	08001f77 	.word	0x08001f77
 8001ef8:	08001f77 	.word	0x08001f77
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f77 	.word	0x08001f77
 8001f04:	08001f77 	.word	0x08001f77
 8001f08:	08001f77 	.word	0x08001f77
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f39 	.word	0x08001f39
 8001f14:	4a76      	ldr	r2, [pc, #472]	; (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1a:	e02c      	b.n	8001f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e029      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e024      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	3308      	adds	r3, #8
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e01f      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e01a      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e013      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	611a      	str	r2, [r3, #16]
          break;
 8001f62:	e009      	b.n	8001f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	615a      	str	r2, [r3, #20]
          break;
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          break;
 8001f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d801      	bhi.n	8001f82 <HAL_GPIO_Init+0x13a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_Init+0x13e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d802      	bhi.n	8001f94 <HAL_GPIO_Init+0x14c>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x152>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3b08      	subs	r3, #8
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a9 	beq.w	800211a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe0:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <HAL_GPIO_Init+0x2b4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00d      	beq.n	8002028 <HAL_GPIO_Init+0x1e0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <HAL_GPIO_Init+0x2b8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1dc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3b      	ldr	r2, [pc, #236]	; (8002104 <HAL_GPIO_Init+0x2bc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_GPIO_Init+0x1d8>
 800201c:	2302      	movs	r3, #2
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002020:	2303      	movs	r3, #3
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002028:	2300      	movs	r3, #0
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203a:	492f      	ldr	r1, [pc, #188]	; (80020f8 <HAL_GPIO_Init+0x2b0>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	492b      	ldr	r1, [pc, #172]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4921      	ldr	r1, [pc, #132]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	491d      	ldr	r1, [pc, #116]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4917      	ldr	r1, [pc, #92]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4913      	ldr	r1, [pc, #76]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01f      	beq.n	800210c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	490d      	ldr	r1, [pc, #52]	; (8002108 <HAL_GPIO_Init+0x2c0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e01f      	b.n	800211a <HAL_GPIO_Init+0x2d2>
 80020da:	bf00      	nop
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10310000 	.word	0x10310000
 80020e4:	10220000 	.word	0x10220000
 80020e8:	10210000 	.word	0x10210000
 80020ec:	10120000 	.word	0x10120000
 80020f0:	10110000 	.word	0x10110000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010800 	.word	0x40010800
 8002100:	40010c00 	.word	0x40010c00
 8002104:	40011000 	.word	0x40011000
 8002108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_GPIO_Init+0x2f4>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	43db      	mvns	r3, r3
 8002114:	4909      	ldr	r1, [pc, #36]	; (800213c <HAL_GPIO_Init+0x2f4>)
 8002116:	4013      	ands	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	3301      	adds	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ae96 	bne.w	8001e5c <HAL_GPIO_Init+0x14>
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	372c      	adds	r7, #44	; 0x2c
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800215c:	e003      	b.n	8002166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	041a      	lsls	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e272      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8087 	beq.w	800229e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002190:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b04      	cmp	r3, #4
 800219a:	d00c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800219c:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
 80021a8:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d10b      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d06c      	beq.n	800229c <HAL_RCC_OscConfig+0x12c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d168      	bne.n	800229c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e24c      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x76>
 80021d8:	4b80      	ldr	r3, [pc, #512]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e02e      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a7a      	ldr	r2, [pc, #488]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b78      	ldr	r3, [pc, #480]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a77      	ldr	r2, [pc, #476]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0xbc>
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a71      	ldr	r2, [pc, #452]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6e      	ldr	r2, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 800222c:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a67      	ldr	r2, [pc, #412]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff f8be 	bl	80013cc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff f8ba 	bl	80013cc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e200      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b5d      	ldr	r3, [pc, #372]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xe4>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f8aa 	bl	80013cc <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff f8a6 	bl	80013cc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1ec      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x10c>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022aa:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022b6:	4b49      	ldr	r3, [pc, #292]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1c0      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4939      	ldr	r1, [pc, #228]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff f85f 	bl	80013cc <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7ff f85b 	bl	80013cc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1a1      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4927      	ldr	r1, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff f83e 	bl	80013cc <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff f83a 	bl	80013cc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e180      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d03a      	beq.n	80023f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d019      	beq.n	80023ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_RCC_OscConfig+0x274>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7ff f81e 	bl	80013cc <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff f81a 	bl	80013cc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e160      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f000 face 	bl	8002954 <RCC_Delay>
 80023b8:	e01c      	b.n	80023f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff f804 	bl	80013cc <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c6:	e00f      	b.n	80023e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7ff f800 	bl	80013cc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d908      	bls.n	80023e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e146      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	42420000 	.word	0x42420000
 80023e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b92      	ldr	r3, [pc, #584]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e9      	bne.n	80023c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a6 	beq.w	800254e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a87      	ldr	r2, [pc, #540]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCC_OscConfig+0x4c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b7f      	ldr	r3, [pc, #508]	; (8002638 <HAL_RCC_OscConfig+0x4c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7e      	ldr	r2, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x4c8>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7fe ffc1 	bl	80013cc <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe ffbd 	bl	80013cc <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e103      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b75      	ldr	r3, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x4c8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x312>
 8002474:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a6e      	ldr	r2, [pc, #440]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e02d      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x334>
 800248a:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a66      	ldr	r2, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	e01c      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x356>
 80024ac:	4b61      	ldr	r3, [pc, #388]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a60      	ldr	r2, [pc, #384]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a5d      	ldr	r2, [pc, #372]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a5a      	ldr	r2, [pc, #360]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b58      	ldr	r3, [pc, #352]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a57      	ldr	r2, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe ff71 	bl	80013cc <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe ff6d 	bl	80013cc <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0b1      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ee      	beq.n	80024ee <HAL_RCC_OscConfig+0x37e>
 8002510:	e014      	b.n	800253c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe ff5b 	bl	80013cc <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe ff57 	bl	80013cc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e09b      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	4b40      	ldr	r3, [pc, #256]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a3b      	ldr	r2, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8087 	beq.w	8002666 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d061      	beq.n	8002628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d146      	bne.n	80025fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x4cc>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe ff2b 	bl	80013cc <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe ff27 	bl	80013cc <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e06d      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4921      	ldr	r1, [pc, #132]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a19      	ldr	r1, [r3, #32]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	430b      	orrs	r3, r1
 80025c6:	491b      	ldr	r1, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe fefb 	bl	80013cc <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7fe fef7 	bl	80013cc <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e03d      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x46a>
 80025f8:	e035      	b.n	8002666 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fee4 	bl	80013cc <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fee0 	bl	80013cc <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e026      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x498>
 8002626:	e01e      	b.n	8002666 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e019      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x500>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0d0      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d910      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b67      	ldr	r3, [pc, #412]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4965      	ldr	r1, [pc, #404]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d040      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d115      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e073      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06b      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4936      	ldr	r1, [pc, #216]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe fe32 	bl	80013cc <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe fe2e 	bl	80013cc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e053      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d210      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4922      	ldr	r1, [pc, #136]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002802:	f000 f821 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490a      	ldr	r1, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1cc>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1d0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fd90 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40022000 	.word	0x40022000
 8002838:	40021000 	.word	0x40021000
 800283c:	080039a8 	.word	0x080039a8
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x30>
 8002872:	2b08      	cmp	r3, #8
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x36>
 8002876:	e027      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800287a:	613b      	str	r3, [r7, #16]
      break;
 800287c:	e027      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d010      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0c5b      	lsrs	r3, r3, #17
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028aa:	fb03 f202 	mul.w	r2, r3, r2
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e004      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	613b      	str	r3, [r7, #16]
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	613b      	str	r3, [r7, #16]
      break;
 80028cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ce:	693b      	ldr	r3, [r7, #16]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	080039c0 	.word	0x080039c0
 80028e8:	080039d0 	.word	0x080039d0
 80028ec:	003d0900 	.word	0x003d0900

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b02      	ldr	r3, [pc, #8]	; (8002900 <HAL_RCC_GetHCLKFreq+0x10>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000000 	.word	0x20000000

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002908:	f7ff fff2 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	080039b8 	.word	0x080039b8

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002930:	f7ff ffde 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0adb      	lsrs	r3, r3, #11
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	080039b8 	.word	0x080039b8

08002954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <RCC_Delay+0x34>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <RCC_Delay+0x38>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002970:	bf00      	nop
  }
  while (Delay --);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <RCC_Delay+0x1c>
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000000 	.word	0x20000000
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d07d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029ac:	2300      	movs	r3, #0
 80029ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b0:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4a4b      	ldr	r2, [pc, #300]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	61d3      	str	r3, [r2, #28]
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d4:	2301      	movs	r3, #1
 80029d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d118      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a42      	ldr	r2, [pc, #264]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f0:	f7fe fcec 	bl	80013cc <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	e008      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe fce8 	bl	80013cc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e06d      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a16:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d02e      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d027      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a34:	4b2e      	ldr	r3, [pc, #184]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a4a:	4a29      	ldr	r2, [pc, #164]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d014      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fcb7 	bl	80013cc <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe fcb3 	bl	80013cc <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e036      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ee      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4917      	ldr	r1, [pc, #92]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	490b      	ldr	r1, [pc, #44]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42420440 	.word	0x42420440

08002afc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	f200 808a 	bhi.w	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d045      	beq.n	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d075      	beq.n	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b32:	e082      	b.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002b34:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b3a:	4b45      	ldr	r3, [pc, #276]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d07b      	beq.n	8002c3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0c9b      	lsrs	r3, r3, #18
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	4a41      	ldr	r2, [pc, #260]	; (8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002b50:	5cd3      	ldrb	r3, [r2, r3]
 8002b52:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d015      	beq.n	8002b8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	0c5b      	lsrs	r3, r3, #17
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	4a3b      	ldr	r2, [pc, #236]	; (8002c58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e004      	b.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b94:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	61bb      	str	r3, [r7, #24]
      break;
 8002ba6:	e04a      	b.n	8002c3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	61bb      	str	r3, [r7, #24]
      break;
 8002bb6:	e042      	b.n	8002c3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e01f      	b.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be6:	d109      	bne.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002bf4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c06:	d11c      	bne.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002c14:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c18:	61bb      	str	r3, [r7, #24]
      break;
 8002c1a:	e012      	b.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c1c:	e011      	b.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c1e:	f7ff fe85 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0b9b      	lsrs	r3, r3, #14
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	61bb      	str	r3, [r7, #24]
      break;
 8002c38:	e004      	b.n	8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c42:	bf00      	nop
    }
  }
  return (frequency);
 8002c44:	69bb      	ldr	r3, [r7, #24]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	080039d4 	.word	0x080039d4
 8002c58:	080039e4 	.word	0x080039e4
 8002c5c:	007a1200 	.word	0x007a1200
 8002c60:	003d0900 	.word	0x003d0900
 8002c64:	aaaaaaab 	.word	0xaaaaaaab

08002c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e042      	b.n	8002d00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fa6e 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f91d 	bl	8002eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d16d      	bne.n	8002e04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_UART_Transmit+0x2c>
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e066      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fe fb41 	bl	80013cc <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d7c:	e02a      	b.n	8002dd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f840 	bl	8002e0e <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e036      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3302      	adds	r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e007      	b.n	8002dc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cf      	bne.n	8002d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f810 	bl	8002e0e <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e006      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b090      	sub	sp, #64	; 0x40
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	e050      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d04c      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	f7fe facd 	bl	80013cc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d241      	bcs.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330c      	adds	r3, #12
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e5e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	613b      	str	r3, [r7, #16]
   return(result);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3314      	adds	r3, #20
 8002e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e92:	623a      	str	r2, [r7, #32]
 8002e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	69f9      	ldr	r1, [r7, #28]
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e5      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00f      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d09f      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3740      	adds	r7, #64	; 0x40
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f26:	f023 030c 	bic.w	r3, r3, #12
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <UART_SetConfig+0x114>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f54:	f7ff fcea 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	e002      	b.n	8002f62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7ff fcd2 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8002f60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <UART_SetConfig+0x118>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	0119      	lsls	r1, r3, #4
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009a      	lsls	r2, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <UART_SetConfig+0x118>)
 8002f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	3332      	adds	r3, #50	; 0x32
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <UART_SetConfig+0x118>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb8:	4419      	add	r1, r3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <UART_SetConfig+0x118>)
 8002fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	fb00 f303 	mul.w	r3, r0, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <UART_SetConfig+0x118>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	440a      	add	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40013800 	.word	0x40013800
 8003004:	51eb851f 	.word	0x51eb851f

08003008 <siprintf>:
 8003008:	b40e      	push	{r1, r2, r3}
 800300a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800300e:	b500      	push	{lr}
 8003010:	b09c      	sub	sp, #112	; 0x70
 8003012:	ab1d      	add	r3, sp, #116	; 0x74
 8003014:	9002      	str	r0, [sp, #8]
 8003016:	9006      	str	r0, [sp, #24]
 8003018:	9107      	str	r1, [sp, #28]
 800301a:	9104      	str	r1, [sp, #16]
 800301c:	4808      	ldr	r0, [pc, #32]	; (8003040 <siprintf+0x38>)
 800301e:	4909      	ldr	r1, [pc, #36]	; (8003044 <siprintf+0x3c>)
 8003020:	f853 2b04 	ldr.w	r2, [r3], #4
 8003024:	9105      	str	r1, [sp, #20]
 8003026:	6800      	ldr	r0, [r0, #0]
 8003028:	a902      	add	r1, sp, #8
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	f000 f98e 	bl	800334c <_svfiprintf_r>
 8003030:	2200      	movs	r2, #0
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	b01c      	add	sp, #112	; 0x70
 8003038:	f85d eb04 	ldr.w	lr, [sp], #4
 800303c:	b003      	add	sp, #12
 800303e:	4770      	bx	lr
 8003040:	20000058 	.word	0x20000058
 8003044:	ffff0208 	.word	0xffff0208

08003048 <memset>:
 8003048:	4603      	mov	r3, r0
 800304a:	4402      	add	r2, r0
 800304c:	4293      	cmp	r3, r2
 800304e:	d100      	bne.n	8003052 <memset+0xa>
 8003050:	4770      	bx	lr
 8003052:	f803 1b01 	strb.w	r1, [r3], #1
 8003056:	e7f9      	b.n	800304c <memset+0x4>

08003058 <__errno>:
 8003058:	4b01      	ldr	r3, [pc, #4]	; (8003060 <__errno+0x8>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000058 	.word	0x20000058

08003064 <__libc_init_array>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	2600      	movs	r6, #0
 8003068:	4d0c      	ldr	r5, [pc, #48]	; (800309c <__libc_init_array+0x38>)
 800306a:	4c0d      	ldr	r4, [pc, #52]	; (80030a0 <__libc_init_array+0x3c>)
 800306c:	1b64      	subs	r4, r4, r5
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	42a6      	cmp	r6, r4
 8003072:	d109      	bne.n	8003088 <__libc_init_array+0x24>
 8003074:	f000 fc7a 	bl	800396c <_init>
 8003078:	2600      	movs	r6, #0
 800307a:	4d0a      	ldr	r5, [pc, #40]	; (80030a4 <__libc_init_array+0x40>)
 800307c:	4c0a      	ldr	r4, [pc, #40]	; (80030a8 <__libc_init_array+0x44>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	42a6      	cmp	r6, r4
 8003084:	d105      	bne.n	8003092 <__libc_init_array+0x2e>
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	f855 3b04 	ldr.w	r3, [r5], #4
 800308c:	4798      	blx	r3
 800308e:	3601      	adds	r6, #1
 8003090:	e7ee      	b.n	8003070 <__libc_init_array+0xc>
 8003092:	f855 3b04 	ldr.w	r3, [r5], #4
 8003096:	4798      	blx	r3
 8003098:	3601      	adds	r6, #1
 800309a:	e7f2      	b.n	8003082 <__libc_init_array+0x1e>
 800309c:	08003a1c 	.word	0x08003a1c
 80030a0:	08003a1c 	.word	0x08003a1c
 80030a4:	08003a1c 	.word	0x08003a1c
 80030a8:	08003a20 	.word	0x08003a20

080030ac <__retarget_lock_acquire_recursive>:
 80030ac:	4770      	bx	lr

080030ae <__retarget_lock_release_recursive>:
 80030ae:	4770      	bx	lr

080030b0 <_free_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	4605      	mov	r5, r0
 80030b4:	2900      	cmp	r1, #0
 80030b6:	d040      	beq.n	800313a <_free_r+0x8a>
 80030b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030bc:	1f0c      	subs	r4, r1, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bfb8      	it	lt
 80030c2:	18e4      	addlt	r4, r4, r3
 80030c4:	f000 f8dc 	bl	8003280 <__malloc_lock>
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <_free_r+0x8c>)
 80030ca:	6813      	ldr	r3, [r2, #0]
 80030cc:	b933      	cbnz	r3, 80030dc <_free_r+0x2c>
 80030ce:	6063      	str	r3, [r4, #4]
 80030d0:	6014      	str	r4, [r2, #0]
 80030d2:	4628      	mov	r0, r5
 80030d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030d8:	f000 b8d8 	b.w	800328c <__malloc_unlock>
 80030dc:	42a3      	cmp	r3, r4
 80030de:	d908      	bls.n	80030f2 <_free_r+0x42>
 80030e0:	6820      	ldr	r0, [r4, #0]
 80030e2:	1821      	adds	r1, r4, r0
 80030e4:	428b      	cmp	r3, r1
 80030e6:	bf01      	itttt	eq
 80030e8:	6819      	ldreq	r1, [r3, #0]
 80030ea:	685b      	ldreq	r3, [r3, #4]
 80030ec:	1809      	addeq	r1, r1, r0
 80030ee:	6021      	streq	r1, [r4, #0]
 80030f0:	e7ed      	b.n	80030ce <_free_r+0x1e>
 80030f2:	461a      	mov	r2, r3
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	b10b      	cbz	r3, 80030fc <_free_r+0x4c>
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d9fa      	bls.n	80030f2 <_free_r+0x42>
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	1850      	adds	r0, r2, r1
 8003100:	42a0      	cmp	r0, r4
 8003102:	d10b      	bne.n	800311c <_free_r+0x6c>
 8003104:	6820      	ldr	r0, [r4, #0]
 8003106:	4401      	add	r1, r0
 8003108:	1850      	adds	r0, r2, r1
 800310a:	4283      	cmp	r3, r0
 800310c:	6011      	str	r1, [r2, #0]
 800310e:	d1e0      	bne.n	80030d2 <_free_r+0x22>
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4408      	add	r0, r1
 8003116:	6010      	str	r0, [r2, #0]
 8003118:	6053      	str	r3, [r2, #4]
 800311a:	e7da      	b.n	80030d2 <_free_r+0x22>
 800311c:	d902      	bls.n	8003124 <_free_r+0x74>
 800311e:	230c      	movs	r3, #12
 8003120:	602b      	str	r3, [r5, #0]
 8003122:	e7d6      	b.n	80030d2 <_free_r+0x22>
 8003124:	6820      	ldr	r0, [r4, #0]
 8003126:	1821      	adds	r1, r4, r0
 8003128:	428b      	cmp	r3, r1
 800312a:	bf01      	itttt	eq
 800312c:	6819      	ldreq	r1, [r3, #0]
 800312e:	685b      	ldreq	r3, [r3, #4]
 8003130:	1809      	addeq	r1, r1, r0
 8003132:	6021      	streq	r1, [r4, #0]
 8003134:	6063      	str	r3, [r4, #4]
 8003136:	6054      	str	r4, [r2, #4]
 8003138:	e7cb      	b.n	80030d2 <_free_r+0x22>
 800313a:	bd38      	pop	{r3, r4, r5, pc}
 800313c:	20000250 	.word	0x20000250

08003140 <sbrk_aligned>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4e0e      	ldr	r6, [pc, #56]	; (800317c <sbrk_aligned+0x3c>)
 8003144:	460c      	mov	r4, r1
 8003146:	6831      	ldr	r1, [r6, #0]
 8003148:	4605      	mov	r5, r0
 800314a:	b911      	cbnz	r1, 8003152 <sbrk_aligned+0x12>
 800314c:	f000 fbaa 	bl	80038a4 <_sbrk_r>
 8003150:	6030      	str	r0, [r6, #0]
 8003152:	4621      	mov	r1, r4
 8003154:	4628      	mov	r0, r5
 8003156:	f000 fba5 	bl	80038a4 <_sbrk_r>
 800315a:	1c43      	adds	r3, r0, #1
 800315c:	d00a      	beq.n	8003174 <sbrk_aligned+0x34>
 800315e:	1cc4      	adds	r4, r0, #3
 8003160:	f024 0403 	bic.w	r4, r4, #3
 8003164:	42a0      	cmp	r0, r4
 8003166:	d007      	beq.n	8003178 <sbrk_aligned+0x38>
 8003168:	1a21      	subs	r1, r4, r0
 800316a:	4628      	mov	r0, r5
 800316c:	f000 fb9a 	bl	80038a4 <_sbrk_r>
 8003170:	3001      	adds	r0, #1
 8003172:	d101      	bne.n	8003178 <sbrk_aligned+0x38>
 8003174:	f04f 34ff 	mov.w	r4, #4294967295
 8003178:	4620      	mov	r0, r4
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	20000254 	.word	0x20000254

08003180 <_malloc_r>:
 8003180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003184:	1ccd      	adds	r5, r1, #3
 8003186:	f025 0503 	bic.w	r5, r5, #3
 800318a:	3508      	adds	r5, #8
 800318c:	2d0c      	cmp	r5, #12
 800318e:	bf38      	it	cc
 8003190:	250c      	movcc	r5, #12
 8003192:	2d00      	cmp	r5, #0
 8003194:	4607      	mov	r7, r0
 8003196:	db01      	blt.n	800319c <_malloc_r+0x1c>
 8003198:	42a9      	cmp	r1, r5
 800319a:	d905      	bls.n	80031a8 <_malloc_r+0x28>
 800319c:	230c      	movs	r3, #12
 800319e:	2600      	movs	r6, #0
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4630      	mov	r0, r6
 80031a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800327c <_malloc_r+0xfc>
 80031ac:	f000 f868 	bl	8003280 <__malloc_lock>
 80031b0:	f8d8 3000 	ldr.w	r3, [r8]
 80031b4:	461c      	mov	r4, r3
 80031b6:	bb5c      	cbnz	r4, 8003210 <_malloc_r+0x90>
 80031b8:	4629      	mov	r1, r5
 80031ba:	4638      	mov	r0, r7
 80031bc:	f7ff ffc0 	bl	8003140 <sbrk_aligned>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	4604      	mov	r4, r0
 80031c4:	d155      	bne.n	8003272 <_malloc_r+0xf2>
 80031c6:	f8d8 4000 	ldr.w	r4, [r8]
 80031ca:	4626      	mov	r6, r4
 80031cc:	2e00      	cmp	r6, #0
 80031ce:	d145      	bne.n	800325c <_malloc_r+0xdc>
 80031d0:	2c00      	cmp	r4, #0
 80031d2:	d048      	beq.n	8003266 <_malloc_r+0xe6>
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	4631      	mov	r1, r6
 80031d8:	4638      	mov	r0, r7
 80031da:	eb04 0903 	add.w	r9, r4, r3
 80031de:	f000 fb61 	bl	80038a4 <_sbrk_r>
 80031e2:	4581      	cmp	r9, r0
 80031e4:	d13f      	bne.n	8003266 <_malloc_r+0xe6>
 80031e6:	6821      	ldr	r1, [r4, #0]
 80031e8:	4638      	mov	r0, r7
 80031ea:	1a6d      	subs	r5, r5, r1
 80031ec:	4629      	mov	r1, r5
 80031ee:	f7ff ffa7 	bl	8003140 <sbrk_aligned>
 80031f2:	3001      	adds	r0, #1
 80031f4:	d037      	beq.n	8003266 <_malloc_r+0xe6>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	442b      	add	r3, r5
 80031fa:	6023      	str	r3, [r4, #0]
 80031fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d038      	beq.n	8003276 <_malloc_r+0xf6>
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	42a2      	cmp	r2, r4
 8003208:	d12b      	bne.n	8003262 <_malloc_r+0xe2>
 800320a:	2200      	movs	r2, #0
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e00f      	b.n	8003230 <_malloc_r+0xb0>
 8003210:	6822      	ldr	r2, [r4, #0]
 8003212:	1b52      	subs	r2, r2, r5
 8003214:	d41f      	bmi.n	8003256 <_malloc_r+0xd6>
 8003216:	2a0b      	cmp	r2, #11
 8003218:	d917      	bls.n	800324a <_malloc_r+0xca>
 800321a:	1961      	adds	r1, r4, r5
 800321c:	42a3      	cmp	r3, r4
 800321e:	6025      	str	r5, [r4, #0]
 8003220:	bf18      	it	ne
 8003222:	6059      	strne	r1, [r3, #4]
 8003224:	6863      	ldr	r3, [r4, #4]
 8003226:	bf08      	it	eq
 8003228:	f8c8 1000 	streq.w	r1, [r8]
 800322c:	5162      	str	r2, [r4, r5]
 800322e:	604b      	str	r3, [r1, #4]
 8003230:	4638      	mov	r0, r7
 8003232:	f104 060b 	add.w	r6, r4, #11
 8003236:	f000 f829 	bl	800328c <__malloc_unlock>
 800323a:	f026 0607 	bic.w	r6, r6, #7
 800323e:	1d23      	adds	r3, r4, #4
 8003240:	1af2      	subs	r2, r6, r3
 8003242:	d0ae      	beq.n	80031a2 <_malloc_r+0x22>
 8003244:	1b9b      	subs	r3, r3, r6
 8003246:	50a3      	str	r3, [r4, r2]
 8003248:	e7ab      	b.n	80031a2 <_malloc_r+0x22>
 800324a:	42a3      	cmp	r3, r4
 800324c:	6862      	ldr	r2, [r4, #4]
 800324e:	d1dd      	bne.n	800320c <_malloc_r+0x8c>
 8003250:	f8c8 2000 	str.w	r2, [r8]
 8003254:	e7ec      	b.n	8003230 <_malloc_r+0xb0>
 8003256:	4623      	mov	r3, r4
 8003258:	6864      	ldr	r4, [r4, #4]
 800325a:	e7ac      	b.n	80031b6 <_malloc_r+0x36>
 800325c:	4634      	mov	r4, r6
 800325e:	6876      	ldr	r6, [r6, #4]
 8003260:	e7b4      	b.n	80031cc <_malloc_r+0x4c>
 8003262:	4613      	mov	r3, r2
 8003264:	e7cc      	b.n	8003200 <_malloc_r+0x80>
 8003266:	230c      	movs	r3, #12
 8003268:	4638      	mov	r0, r7
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	f000 f80e 	bl	800328c <__malloc_unlock>
 8003270:	e797      	b.n	80031a2 <_malloc_r+0x22>
 8003272:	6025      	str	r5, [r4, #0]
 8003274:	e7dc      	b.n	8003230 <_malloc_r+0xb0>
 8003276:	605b      	str	r3, [r3, #4]
 8003278:	deff      	udf	#255	; 0xff
 800327a:	bf00      	nop
 800327c:	20000250 	.word	0x20000250

08003280 <__malloc_lock>:
 8003280:	4801      	ldr	r0, [pc, #4]	; (8003288 <__malloc_lock+0x8>)
 8003282:	f7ff bf13 	b.w	80030ac <__retarget_lock_acquire_recursive>
 8003286:	bf00      	nop
 8003288:	2000024c 	.word	0x2000024c

0800328c <__malloc_unlock>:
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <__malloc_unlock+0x8>)
 800328e:	f7ff bf0e 	b.w	80030ae <__retarget_lock_release_recursive>
 8003292:	bf00      	nop
 8003294:	2000024c 	.word	0x2000024c

08003298 <__ssputs_r>:
 8003298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	461f      	mov	r7, r3
 800329e:	688e      	ldr	r6, [r1, #8]
 80032a0:	4682      	mov	sl, r0
 80032a2:	42be      	cmp	r6, r7
 80032a4:	460c      	mov	r4, r1
 80032a6:	4690      	mov	r8, r2
 80032a8:	680b      	ldr	r3, [r1, #0]
 80032aa:	d82c      	bhi.n	8003306 <__ssputs_r+0x6e>
 80032ac:	898a      	ldrh	r2, [r1, #12]
 80032ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032b2:	d026      	beq.n	8003302 <__ssputs_r+0x6a>
 80032b4:	6965      	ldr	r5, [r4, #20]
 80032b6:	6909      	ldr	r1, [r1, #16]
 80032b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032bc:	eba3 0901 	sub.w	r9, r3, r1
 80032c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032c4:	1c7b      	adds	r3, r7, #1
 80032c6:	444b      	add	r3, r9
 80032c8:	106d      	asrs	r5, r5, #1
 80032ca:	429d      	cmp	r5, r3
 80032cc:	bf38      	it	cc
 80032ce:	461d      	movcc	r5, r3
 80032d0:	0553      	lsls	r3, r2, #21
 80032d2:	d527      	bpl.n	8003324 <__ssputs_r+0x8c>
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7ff ff53 	bl	8003180 <_malloc_r>
 80032da:	4606      	mov	r6, r0
 80032dc:	b360      	cbz	r0, 8003338 <__ssputs_r+0xa0>
 80032de:	464a      	mov	r2, r9
 80032e0:	6921      	ldr	r1, [r4, #16]
 80032e2:	f000 fafd 	bl	80038e0 <memcpy>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	6126      	str	r6, [r4, #16]
 80032f4:	444e      	add	r6, r9
 80032f6:	6026      	str	r6, [r4, #0]
 80032f8:	463e      	mov	r6, r7
 80032fa:	6165      	str	r5, [r4, #20]
 80032fc:	eba5 0509 	sub.w	r5, r5, r9
 8003300:	60a5      	str	r5, [r4, #8]
 8003302:	42be      	cmp	r6, r7
 8003304:	d900      	bls.n	8003308 <__ssputs_r+0x70>
 8003306:	463e      	mov	r6, r7
 8003308:	4632      	mov	r2, r6
 800330a:	4641      	mov	r1, r8
 800330c:	6820      	ldr	r0, [r4, #0]
 800330e:	f000 faaf 	bl	8003870 <memmove>
 8003312:	2000      	movs	r0, #0
 8003314:	68a3      	ldr	r3, [r4, #8]
 8003316:	1b9b      	subs	r3, r3, r6
 8003318:	60a3      	str	r3, [r4, #8]
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	4433      	add	r3, r6
 800331e:	6023      	str	r3, [r4, #0]
 8003320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003324:	462a      	mov	r2, r5
 8003326:	f000 fae9 	bl	80038fc <_realloc_r>
 800332a:	4606      	mov	r6, r0
 800332c:	2800      	cmp	r0, #0
 800332e:	d1e0      	bne.n	80032f2 <__ssputs_r+0x5a>
 8003330:	4650      	mov	r0, sl
 8003332:	6921      	ldr	r1, [r4, #16]
 8003334:	f7ff febc 	bl	80030b0 <_free_r>
 8003338:	230c      	movs	r3, #12
 800333a:	f8ca 3000 	str.w	r3, [sl]
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	e7e9      	b.n	8003320 <__ssputs_r+0x88>

0800334c <_svfiprintf_r>:
 800334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003350:	4698      	mov	r8, r3
 8003352:	898b      	ldrh	r3, [r1, #12]
 8003354:	4607      	mov	r7, r0
 8003356:	061b      	lsls	r3, r3, #24
 8003358:	460d      	mov	r5, r1
 800335a:	4614      	mov	r4, r2
 800335c:	b09d      	sub	sp, #116	; 0x74
 800335e:	d50e      	bpl.n	800337e <_svfiprintf_r+0x32>
 8003360:	690b      	ldr	r3, [r1, #16]
 8003362:	b963      	cbnz	r3, 800337e <_svfiprintf_r+0x32>
 8003364:	2140      	movs	r1, #64	; 0x40
 8003366:	f7ff ff0b 	bl	8003180 <_malloc_r>
 800336a:	6028      	str	r0, [r5, #0]
 800336c:	6128      	str	r0, [r5, #16]
 800336e:	b920      	cbnz	r0, 800337a <_svfiprintf_r+0x2e>
 8003370:	230c      	movs	r3, #12
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	e0d0      	b.n	800351c <_svfiprintf_r+0x1d0>
 800337a:	2340      	movs	r3, #64	; 0x40
 800337c:	616b      	str	r3, [r5, #20]
 800337e:	2300      	movs	r3, #0
 8003380:	9309      	str	r3, [sp, #36]	; 0x24
 8003382:	2320      	movs	r3, #32
 8003384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003388:	2330      	movs	r3, #48	; 0x30
 800338a:	f04f 0901 	mov.w	r9, #1
 800338e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003392:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003534 <_svfiprintf_r+0x1e8>
 8003396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800339a:	4623      	mov	r3, r4
 800339c:	469a      	mov	sl, r3
 800339e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033a2:	b10a      	cbz	r2, 80033a8 <_svfiprintf_r+0x5c>
 80033a4:	2a25      	cmp	r2, #37	; 0x25
 80033a6:	d1f9      	bne.n	800339c <_svfiprintf_r+0x50>
 80033a8:	ebba 0b04 	subs.w	fp, sl, r4
 80033ac:	d00b      	beq.n	80033c6 <_svfiprintf_r+0x7a>
 80033ae:	465b      	mov	r3, fp
 80033b0:	4622      	mov	r2, r4
 80033b2:	4629      	mov	r1, r5
 80033b4:	4638      	mov	r0, r7
 80033b6:	f7ff ff6f 	bl	8003298 <__ssputs_r>
 80033ba:	3001      	adds	r0, #1
 80033bc:	f000 80a9 	beq.w	8003512 <_svfiprintf_r+0x1c6>
 80033c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033c2:	445a      	add	r2, fp
 80033c4:	9209      	str	r2, [sp, #36]	; 0x24
 80033c6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a1 	beq.w	8003512 <_svfiprintf_r+0x1c6>
 80033d0:	2300      	movs	r3, #0
 80033d2:	f04f 32ff 	mov.w	r2, #4294967295
 80033d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033da:	f10a 0a01 	add.w	sl, sl, #1
 80033de:	9304      	str	r3, [sp, #16]
 80033e0:	9307      	str	r3, [sp, #28]
 80033e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033e6:	931a      	str	r3, [sp, #104]	; 0x68
 80033e8:	4654      	mov	r4, sl
 80033ea:	2205      	movs	r2, #5
 80033ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f0:	4850      	ldr	r0, [pc, #320]	; (8003534 <_svfiprintf_r+0x1e8>)
 80033f2:	f000 fa67 	bl	80038c4 <memchr>
 80033f6:	9a04      	ldr	r2, [sp, #16]
 80033f8:	b9d8      	cbnz	r0, 8003432 <_svfiprintf_r+0xe6>
 80033fa:	06d0      	lsls	r0, r2, #27
 80033fc:	bf44      	itt	mi
 80033fe:	2320      	movmi	r3, #32
 8003400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003404:	0711      	lsls	r1, r2, #28
 8003406:	bf44      	itt	mi
 8003408:	232b      	movmi	r3, #43	; 0x2b
 800340a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800340e:	f89a 3000 	ldrb.w	r3, [sl]
 8003412:	2b2a      	cmp	r3, #42	; 0x2a
 8003414:	d015      	beq.n	8003442 <_svfiprintf_r+0xf6>
 8003416:	4654      	mov	r4, sl
 8003418:	2000      	movs	r0, #0
 800341a:	f04f 0c0a 	mov.w	ip, #10
 800341e:	9a07      	ldr	r2, [sp, #28]
 8003420:	4621      	mov	r1, r4
 8003422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003426:	3b30      	subs	r3, #48	; 0x30
 8003428:	2b09      	cmp	r3, #9
 800342a:	d94d      	bls.n	80034c8 <_svfiprintf_r+0x17c>
 800342c:	b1b0      	cbz	r0, 800345c <_svfiprintf_r+0x110>
 800342e:	9207      	str	r2, [sp, #28]
 8003430:	e014      	b.n	800345c <_svfiprintf_r+0x110>
 8003432:	eba0 0308 	sub.w	r3, r0, r8
 8003436:	fa09 f303 	lsl.w	r3, r9, r3
 800343a:	4313      	orrs	r3, r2
 800343c:	46a2      	mov	sl, r4
 800343e:	9304      	str	r3, [sp, #16]
 8003440:	e7d2      	b.n	80033e8 <_svfiprintf_r+0x9c>
 8003442:	9b03      	ldr	r3, [sp, #12]
 8003444:	1d19      	adds	r1, r3, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	9103      	str	r1, [sp, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	bfbb      	ittet	lt
 800344e:	425b      	neglt	r3, r3
 8003450:	f042 0202 	orrlt.w	r2, r2, #2
 8003454:	9307      	strge	r3, [sp, #28]
 8003456:	9307      	strlt	r3, [sp, #28]
 8003458:	bfb8      	it	lt
 800345a:	9204      	strlt	r2, [sp, #16]
 800345c:	7823      	ldrb	r3, [r4, #0]
 800345e:	2b2e      	cmp	r3, #46	; 0x2e
 8003460:	d10c      	bne.n	800347c <_svfiprintf_r+0x130>
 8003462:	7863      	ldrb	r3, [r4, #1]
 8003464:	2b2a      	cmp	r3, #42	; 0x2a
 8003466:	d134      	bne.n	80034d2 <_svfiprintf_r+0x186>
 8003468:	9b03      	ldr	r3, [sp, #12]
 800346a:	3402      	adds	r4, #2
 800346c:	1d1a      	adds	r2, r3, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	9203      	str	r2, [sp, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	bfb8      	it	lt
 8003476:	f04f 33ff 	movlt.w	r3, #4294967295
 800347a:	9305      	str	r3, [sp, #20]
 800347c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003538 <_svfiprintf_r+0x1ec>
 8003480:	2203      	movs	r2, #3
 8003482:	4650      	mov	r0, sl
 8003484:	7821      	ldrb	r1, [r4, #0]
 8003486:	f000 fa1d 	bl	80038c4 <memchr>
 800348a:	b138      	cbz	r0, 800349c <_svfiprintf_r+0x150>
 800348c:	2240      	movs	r2, #64	; 0x40
 800348e:	9b04      	ldr	r3, [sp, #16]
 8003490:	eba0 000a 	sub.w	r0, r0, sl
 8003494:	4082      	lsls	r2, r0
 8003496:	4313      	orrs	r3, r2
 8003498:	3401      	adds	r4, #1
 800349a:	9304      	str	r3, [sp, #16]
 800349c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a0:	2206      	movs	r2, #6
 80034a2:	4826      	ldr	r0, [pc, #152]	; (800353c <_svfiprintf_r+0x1f0>)
 80034a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034a8:	f000 fa0c 	bl	80038c4 <memchr>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d038      	beq.n	8003522 <_svfiprintf_r+0x1d6>
 80034b0:	4b23      	ldr	r3, [pc, #140]	; (8003540 <_svfiprintf_r+0x1f4>)
 80034b2:	bb1b      	cbnz	r3, 80034fc <_svfiprintf_r+0x1b0>
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	3307      	adds	r3, #7
 80034b8:	f023 0307 	bic.w	r3, r3, #7
 80034bc:	3308      	adds	r3, #8
 80034be:	9303      	str	r3, [sp, #12]
 80034c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c2:	4433      	add	r3, r6
 80034c4:	9309      	str	r3, [sp, #36]	; 0x24
 80034c6:	e768      	b.n	800339a <_svfiprintf_r+0x4e>
 80034c8:	460c      	mov	r4, r1
 80034ca:	2001      	movs	r0, #1
 80034cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d0:	e7a6      	b.n	8003420 <_svfiprintf_r+0xd4>
 80034d2:	2300      	movs	r3, #0
 80034d4:	f04f 0c0a 	mov.w	ip, #10
 80034d8:	4619      	mov	r1, r3
 80034da:	3401      	adds	r4, #1
 80034dc:	9305      	str	r3, [sp, #20]
 80034de:	4620      	mov	r0, r4
 80034e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e4:	3a30      	subs	r2, #48	; 0x30
 80034e6:	2a09      	cmp	r2, #9
 80034e8:	d903      	bls.n	80034f2 <_svfiprintf_r+0x1a6>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0c6      	beq.n	800347c <_svfiprintf_r+0x130>
 80034ee:	9105      	str	r1, [sp, #20]
 80034f0:	e7c4      	b.n	800347c <_svfiprintf_r+0x130>
 80034f2:	4604      	mov	r4, r0
 80034f4:	2301      	movs	r3, #1
 80034f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80034fa:	e7f0      	b.n	80034de <_svfiprintf_r+0x192>
 80034fc:	ab03      	add	r3, sp, #12
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	462a      	mov	r2, r5
 8003502:	4638      	mov	r0, r7
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <_svfiprintf_r+0x1f8>)
 8003506:	a904      	add	r1, sp, #16
 8003508:	f3af 8000 	nop.w
 800350c:	1c42      	adds	r2, r0, #1
 800350e:	4606      	mov	r6, r0
 8003510:	d1d6      	bne.n	80034c0 <_svfiprintf_r+0x174>
 8003512:	89ab      	ldrh	r3, [r5, #12]
 8003514:	065b      	lsls	r3, r3, #25
 8003516:	f53f af2d 	bmi.w	8003374 <_svfiprintf_r+0x28>
 800351a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800351c:	b01d      	add	sp, #116	; 0x74
 800351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003522:	ab03      	add	r3, sp, #12
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	462a      	mov	r2, r5
 8003528:	4638      	mov	r0, r7
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <_svfiprintf_r+0x1f8>)
 800352c:	a904      	add	r1, sp, #16
 800352e:	f000 f87d 	bl	800362c <_printf_i>
 8003532:	e7eb      	b.n	800350c <_svfiprintf_r+0x1c0>
 8003534:	080039e6 	.word	0x080039e6
 8003538:	080039ec 	.word	0x080039ec
 800353c:	080039f0 	.word	0x080039f0
 8003540:	00000000 	.word	0x00000000
 8003544:	08003299 	.word	0x08003299

08003548 <_printf_common>:
 8003548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354c:	4616      	mov	r6, r2
 800354e:	4699      	mov	r9, r3
 8003550:	688a      	ldr	r2, [r1, #8]
 8003552:	690b      	ldr	r3, [r1, #16]
 8003554:	4607      	mov	r7, r0
 8003556:	4293      	cmp	r3, r2
 8003558:	bfb8      	it	lt
 800355a:	4613      	movlt	r3, r2
 800355c:	6033      	str	r3, [r6, #0]
 800355e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003562:	460c      	mov	r4, r1
 8003564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003568:	b10a      	cbz	r2, 800356e <_printf_common+0x26>
 800356a:	3301      	adds	r3, #1
 800356c:	6033      	str	r3, [r6, #0]
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	0699      	lsls	r1, r3, #26
 8003572:	bf42      	ittt	mi
 8003574:	6833      	ldrmi	r3, [r6, #0]
 8003576:	3302      	addmi	r3, #2
 8003578:	6033      	strmi	r3, [r6, #0]
 800357a:	6825      	ldr	r5, [r4, #0]
 800357c:	f015 0506 	ands.w	r5, r5, #6
 8003580:	d106      	bne.n	8003590 <_printf_common+0x48>
 8003582:	f104 0a19 	add.w	sl, r4, #25
 8003586:	68e3      	ldr	r3, [r4, #12]
 8003588:	6832      	ldr	r2, [r6, #0]
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	42ab      	cmp	r3, r5
 800358e:	dc2b      	bgt.n	80035e8 <_printf_common+0xa0>
 8003590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003594:	1e13      	subs	r3, r2, #0
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	bf18      	it	ne
 800359a:	2301      	movne	r3, #1
 800359c:	0692      	lsls	r2, r2, #26
 800359e:	d430      	bmi.n	8003602 <_printf_common+0xba>
 80035a0:	4649      	mov	r1, r9
 80035a2:	4638      	mov	r0, r7
 80035a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035a8:	47c0      	blx	r8
 80035aa:	3001      	adds	r0, #1
 80035ac:	d023      	beq.n	80035f6 <_printf_common+0xae>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	6922      	ldr	r2, [r4, #16]
 80035b2:	f003 0306 	and.w	r3, r3, #6
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf14      	ite	ne
 80035ba:	2500      	movne	r5, #0
 80035bc:	6833      	ldreq	r3, [r6, #0]
 80035be:	f04f 0600 	mov.w	r6, #0
 80035c2:	bf08      	it	eq
 80035c4:	68e5      	ldreq	r5, [r4, #12]
 80035c6:	f104 041a 	add.w	r4, r4, #26
 80035ca:	bf08      	it	eq
 80035cc:	1aed      	subeq	r5, r5, r3
 80035ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035d2:	bf08      	it	eq
 80035d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d8:	4293      	cmp	r3, r2
 80035da:	bfc4      	itt	gt
 80035dc:	1a9b      	subgt	r3, r3, r2
 80035de:	18ed      	addgt	r5, r5, r3
 80035e0:	42b5      	cmp	r5, r6
 80035e2:	d11a      	bne.n	800361a <_printf_common+0xd2>
 80035e4:	2000      	movs	r0, #0
 80035e6:	e008      	b.n	80035fa <_printf_common+0xb2>
 80035e8:	2301      	movs	r3, #1
 80035ea:	4652      	mov	r2, sl
 80035ec:	4649      	mov	r1, r9
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	3001      	adds	r0, #1
 80035f4:	d103      	bne.n	80035fe <_printf_common+0xb6>
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fe:	3501      	adds	r5, #1
 8003600:	e7c1      	b.n	8003586 <_printf_common+0x3e>
 8003602:	2030      	movs	r0, #48	; 0x30
 8003604:	18e1      	adds	r1, r4, r3
 8003606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003610:	4422      	add	r2, r4
 8003612:	3302      	adds	r3, #2
 8003614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003618:	e7c2      	b.n	80035a0 <_printf_common+0x58>
 800361a:	2301      	movs	r3, #1
 800361c:	4622      	mov	r2, r4
 800361e:	4649      	mov	r1, r9
 8003620:	4638      	mov	r0, r7
 8003622:	47c0      	blx	r8
 8003624:	3001      	adds	r0, #1
 8003626:	d0e6      	beq.n	80035f6 <_printf_common+0xae>
 8003628:	3601      	adds	r6, #1
 800362a:	e7d9      	b.n	80035e0 <_printf_common+0x98>

0800362c <_printf_i>:
 800362c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	7e0f      	ldrb	r7, [r1, #24]
 8003632:	4691      	mov	r9, r2
 8003634:	2f78      	cmp	r7, #120	; 0x78
 8003636:	4680      	mov	r8, r0
 8003638:	460c      	mov	r4, r1
 800363a:	469a      	mov	sl, r3
 800363c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800363e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003642:	d807      	bhi.n	8003654 <_printf_i+0x28>
 8003644:	2f62      	cmp	r7, #98	; 0x62
 8003646:	d80a      	bhi.n	800365e <_printf_i+0x32>
 8003648:	2f00      	cmp	r7, #0
 800364a:	f000 80d5 	beq.w	80037f8 <_printf_i+0x1cc>
 800364e:	2f58      	cmp	r7, #88	; 0x58
 8003650:	f000 80c1 	beq.w	80037d6 <_printf_i+0x1aa>
 8003654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800365c:	e03a      	b.n	80036d4 <_printf_i+0xa8>
 800365e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003662:	2b15      	cmp	r3, #21
 8003664:	d8f6      	bhi.n	8003654 <_printf_i+0x28>
 8003666:	a101      	add	r1, pc, #4	; (adr r1, 800366c <_printf_i+0x40>)
 8003668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800366c:	080036c5 	.word	0x080036c5
 8003670:	080036d9 	.word	0x080036d9
 8003674:	08003655 	.word	0x08003655
 8003678:	08003655 	.word	0x08003655
 800367c:	08003655 	.word	0x08003655
 8003680:	08003655 	.word	0x08003655
 8003684:	080036d9 	.word	0x080036d9
 8003688:	08003655 	.word	0x08003655
 800368c:	08003655 	.word	0x08003655
 8003690:	08003655 	.word	0x08003655
 8003694:	08003655 	.word	0x08003655
 8003698:	080037df 	.word	0x080037df
 800369c:	08003705 	.word	0x08003705
 80036a0:	08003799 	.word	0x08003799
 80036a4:	08003655 	.word	0x08003655
 80036a8:	08003655 	.word	0x08003655
 80036ac:	08003801 	.word	0x08003801
 80036b0:	08003655 	.word	0x08003655
 80036b4:	08003705 	.word	0x08003705
 80036b8:	08003655 	.word	0x08003655
 80036bc:	08003655 	.word	0x08003655
 80036c0:	080037a1 	.word	0x080037a1
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	602a      	str	r2, [r5, #0]
 80036cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0a0      	b.n	800381a <_printf_i+0x1ee>
 80036d8:	6820      	ldr	r0, [r4, #0]
 80036da:	682b      	ldr	r3, [r5, #0]
 80036dc:	0607      	lsls	r7, r0, #24
 80036de:	f103 0104 	add.w	r1, r3, #4
 80036e2:	6029      	str	r1, [r5, #0]
 80036e4:	d501      	bpl.n	80036ea <_printf_i+0xbe>
 80036e6:	681e      	ldr	r6, [r3, #0]
 80036e8:	e003      	b.n	80036f2 <_printf_i+0xc6>
 80036ea:	0646      	lsls	r6, r0, #25
 80036ec:	d5fb      	bpl.n	80036e6 <_printf_i+0xba>
 80036ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036f2:	2e00      	cmp	r6, #0
 80036f4:	da03      	bge.n	80036fe <_printf_i+0xd2>
 80036f6:	232d      	movs	r3, #45	; 0x2d
 80036f8:	4276      	negs	r6, r6
 80036fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036fe:	230a      	movs	r3, #10
 8003700:	4859      	ldr	r0, [pc, #356]	; (8003868 <_printf_i+0x23c>)
 8003702:	e012      	b.n	800372a <_printf_i+0xfe>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	1d19      	adds	r1, r3, #4
 800370a:	6029      	str	r1, [r5, #0]
 800370c:	0605      	lsls	r5, r0, #24
 800370e:	d501      	bpl.n	8003714 <_printf_i+0xe8>
 8003710:	681e      	ldr	r6, [r3, #0]
 8003712:	e002      	b.n	800371a <_printf_i+0xee>
 8003714:	0641      	lsls	r1, r0, #25
 8003716:	d5fb      	bpl.n	8003710 <_printf_i+0xe4>
 8003718:	881e      	ldrh	r6, [r3, #0]
 800371a:	2f6f      	cmp	r7, #111	; 0x6f
 800371c:	bf0c      	ite	eq
 800371e:	2308      	moveq	r3, #8
 8003720:	230a      	movne	r3, #10
 8003722:	4851      	ldr	r0, [pc, #324]	; (8003868 <_printf_i+0x23c>)
 8003724:	2100      	movs	r1, #0
 8003726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800372a:	6865      	ldr	r5, [r4, #4]
 800372c:	2d00      	cmp	r5, #0
 800372e:	bfa8      	it	ge
 8003730:	6821      	ldrge	r1, [r4, #0]
 8003732:	60a5      	str	r5, [r4, #8]
 8003734:	bfa4      	itt	ge
 8003736:	f021 0104 	bicge.w	r1, r1, #4
 800373a:	6021      	strge	r1, [r4, #0]
 800373c:	b90e      	cbnz	r6, 8003742 <_printf_i+0x116>
 800373e:	2d00      	cmp	r5, #0
 8003740:	d04b      	beq.n	80037da <_printf_i+0x1ae>
 8003742:	4615      	mov	r5, r2
 8003744:	fbb6 f1f3 	udiv	r1, r6, r3
 8003748:	fb03 6711 	mls	r7, r3, r1, r6
 800374c:	5dc7      	ldrb	r7, [r0, r7]
 800374e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003752:	4637      	mov	r7, r6
 8003754:	42bb      	cmp	r3, r7
 8003756:	460e      	mov	r6, r1
 8003758:	d9f4      	bls.n	8003744 <_printf_i+0x118>
 800375a:	2b08      	cmp	r3, #8
 800375c:	d10b      	bne.n	8003776 <_printf_i+0x14a>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	07de      	lsls	r6, r3, #31
 8003762:	d508      	bpl.n	8003776 <_printf_i+0x14a>
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	6861      	ldr	r1, [r4, #4]
 8003768:	4299      	cmp	r1, r3
 800376a:	bfde      	ittt	le
 800376c:	2330      	movle	r3, #48	; 0x30
 800376e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003772:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003776:	1b52      	subs	r2, r2, r5
 8003778:	6122      	str	r2, [r4, #16]
 800377a:	464b      	mov	r3, r9
 800377c:	4621      	mov	r1, r4
 800377e:	4640      	mov	r0, r8
 8003780:	f8cd a000 	str.w	sl, [sp]
 8003784:	aa03      	add	r2, sp, #12
 8003786:	f7ff fedf 	bl	8003548 <_printf_common>
 800378a:	3001      	adds	r0, #1
 800378c:	d14a      	bne.n	8003824 <_printf_i+0x1f8>
 800378e:	f04f 30ff 	mov.w	r0, #4294967295
 8003792:	b004      	add	sp, #16
 8003794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	2778      	movs	r7, #120	; 0x78
 80037a2:	4832      	ldr	r0, [pc, #200]	; (800386c <_printf_i+0x240>)
 80037a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	6829      	ldr	r1, [r5, #0]
 80037ac:	061f      	lsls	r7, r3, #24
 80037ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80037b2:	d402      	bmi.n	80037ba <_printf_i+0x18e>
 80037b4:	065f      	lsls	r7, r3, #25
 80037b6:	bf48      	it	mi
 80037b8:	b2b6      	uxthmi	r6, r6
 80037ba:	07df      	lsls	r7, r3, #31
 80037bc:	bf48      	it	mi
 80037be:	f043 0320 	orrmi.w	r3, r3, #32
 80037c2:	6029      	str	r1, [r5, #0]
 80037c4:	bf48      	it	mi
 80037c6:	6023      	strmi	r3, [r4, #0]
 80037c8:	b91e      	cbnz	r6, 80037d2 <_printf_i+0x1a6>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f023 0320 	bic.w	r3, r3, #32
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	2310      	movs	r3, #16
 80037d4:	e7a6      	b.n	8003724 <_printf_i+0xf8>
 80037d6:	4824      	ldr	r0, [pc, #144]	; (8003868 <_printf_i+0x23c>)
 80037d8:	e7e4      	b.n	80037a4 <_printf_i+0x178>
 80037da:	4615      	mov	r5, r2
 80037dc:	e7bd      	b.n	800375a <_printf_i+0x12e>
 80037de:	682b      	ldr	r3, [r5, #0]
 80037e0:	6826      	ldr	r6, [r4, #0]
 80037e2:	1d18      	adds	r0, r3, #4
 80037e4:	6961      	ldr	r1, [r4, #20]
 80037e6:	6028      	str	r0, [r5, #0]
 80037e8:	0635      	lsls	r5, r6, #24
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	d501      	bpl.n	80037f2 <_printf_i+0x1c6>
 80037ee:	6019      	str	r1, [r3, #0]
 80037f0:	e002      	b.n	80037f8 <_printf_i+0x1cc>
 80037f2:	0670      	lsls	r0, r6, #25
 80037f4:	d5fb      	bpl.n	80037ee <_printf_i+0x1c2>
 80037f6:	8019      	strh	r1, [r3, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	4615      	mov	r5, r2
 80037fc:	6123      	str	r3, [r4, #16]
 80037fe:	e7bc      	b.n	800377a <_printf_i+0x14e>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	2100      	movs	r1, #0
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	602a      	str	r2, [r5, #0]
 8003808:	681d      	ldr	r5, [r3, #0]
 800380a:	6862      	ldr	r2, [r4, #4]
 800380c:	4628      	mov	r0, r5
 800380e:	f000 f859 	bl	80038c4 <memchr>
 8003812:	b108      	cbz	r0, 8003818 <_printf_i+0x1ec>
 8003814:	1b40      	subs	r0, r0, r5
 8003816:	6060      	str	r0, [r4, #4]
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	6123      	str	r3, [r4, #16]
 800381c:	2300      	movs	r3, #0
 800381e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003822:	e7aa      	b.n	800377a <_printf_i+0x14e>
 8003824:	462a      	mov	r2, r5
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	47d0      	blx	sl
 800382e:	3001      	adds	r0, #1
 8003830:	d0ad      	beq.n	800378e <_printf_i+0x162>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	079b      	lsls	r3, r3, #30
 8003836:	d413      	bmi.n	8003860 <_printf_i+0x234>
 8003838:	68e0      	ldr	r0, [r4, #12]
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	4298      	cmp	r0, r3
 800383e:	bfb8      	it	lt
 8003840:	4618      	movlt	r0, r3
 8003842:	e7a6      	b.n	8003792 <_printf_i+0x166>
 8003844:	2301      	movs	r3, #1
 8003846:	4632      	mov	r2, r6
 8003848:	4649      	mov	r1, r9
 800384a:	4640      	mov	r0, r8
 800384c:	47d0      	blx	sl
 800384e:	3001      	adds	r0, #1
 8003850:	d09d      	beq.n	800378e <_printf_i+0x162>
 8003852:	3501      	adds	r5, #1
 8003854:	68e3      	ldr	r3, [r4, #12]
 8003856:	9903      	ldr	r1, [sp, #12]
 8003858:	1a5b      	subs	r3, r3, r1
 800385a:	42ab      	cmp	r3, r5
 800385c:	dcf2      	bgt.n	8003844 <_printf_i+0x218>
 800385e:	e7eb      	b.n	8003838 <_printf_i+0x20c>
 8003860:	2500      	movs	r5, #0
 8003862:	f104 0619 	add.w	r6, r4, #25
 8003866:	e7f5      	b.n	8003854 <_printf_i+0x228>
 8003868:	080039f7 	.word	0x080039f7
 800386c:	08003a08 	.word	0x08003a08

08003870 <memmove>:
 8003870:	4288      	cmp	r0, r1
 8003872:	b510      	push	{r4, lr}
 8003874:	eb01 0402 	add.w	r4, r1, r2
 8003878:	d902      	bls.n	8003880 <memmove+0x10>
 800387a:	4284      	cmp	r4, r0
 800387c:	4623      	mov	r3, r4
 800387e:	d807      	bhi.n	8003890 <memmove+0x20>
 8003880:	1e43      	subs	r3, r0, #1
 8003882:	42a1      	cmp	r1, r4
 8003884:	d008      	beq.n	8003898 <memmove+0x28>
 8003886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800388a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800388e:	e7f8      	b.n	8003882 <memmove+0x12>
 8003890:	4601      	mov	r1, r0
 8003892:	4402      	add	r2, r0
 8003894:	428a      	cmp	r2, r1
 8003896:	d100      	bne.n	800389a <memmove+0x2a>
 8003898:	bd10      	pop	{r4, pc}
 800389a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800389e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038a2:	e7f7      	b.n	8003894 <memmove+0x24>

080038a4 <_sbrk_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	2300      	movs	r3, #0
 80038a8:	4d05      	ldr	r5, [pc, #20]	; (80038c0 <_sbrk_r+0x1c>)
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	f7fd fcd2 	bl	8001258 <_sbrk>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_sbrk_r+0x1a>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	b103      	cbz	r3, 80038be <_sbrk_r+0x1a>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	20000248 	.word	0x20000248

080038c4 <memchr>:
 80038c4:	4603      	mov	r3, r0
 80038c6:	b510      	push	{r4, lr}
 80038c8:	b2c9      	uxtb	r1, r1
 80038ca:	4402      	add	r2, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	d101      	bne.n	80038d6 <memchr+0x12>
 80038d2:	2000      	movs	r0, #0
 80038d4:	e003      	b.n	80038de <memchr+0x1a>
 80038d6:	7804      	ldrb	r4, [r0, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	428c      	cmp	r4, r1
 80038dc:	d1f6      	bne.n	80038cc <memchr+0x8>
 80038de:	bd10      	pop	{r4, pc}

080038e0 <memcpy>:
 80038e0:	440a      	add	r2, r1
 80038e2:	4291      	cmp	r1, r2
 80038e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80038e8:	d100      	bne.n	80038ec <memcpy+0xc>
 80038ea:	4770      	bx	lr
 80038ec:	b510      	push	{r4, lr}
 80038ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f2:	4291      	cmp	r1, r2
 80038f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038f8:	d1f9      	bne.n	80038ee <memcpy+0xe>
 80038fa:	bd10      	pop	{r4, pc}

080038fc <_realloc_r>:
 80038fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003900:	4680      	mov	r8, r0
 8003902:	4614      	mov	r4, r2
 8003904:	460e      	mov	r6, r1
 8003906:	b921      	cbnz	r1, 8003912 <_realloc_r+0x16>
 8003908:	4611      	mov	r1, r2
 800390a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800390e:	f7ff bc37 	b.w	8003180 <_malloc_r>
 8003912:	b92a      	cbnz	r2, 8003920 <_realloc_r+0x24>
 8003914:	f7ff fbcc 	bl	80030b0 <_free_r>
 8003918:	4625      	mov	r5, r4
 800391a:	4628      	mov	r0, r5
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003920:	f000 f81b 	bl	800395a <_malloc_usable_size_r>
 8003924:	4284      	cmp	r4, r0
 8003926:	4607      	mov	r7, r0
 8003928:	d802      	bhi.n	8003930 <_realloc_r+0x34>
 800392a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800392e:	d812      	bhi.n	8003956 <_realloc_r+0x5a>
 8003930:	4621      	mov	r1, r4
 8003932:	4640      	mov	r0, r8
 8003934:	f7ff fc24 	bl	8003180 <_malloc_r>
 8003938:	4605      	mov	r5, r0
 800393a:	2800      	cmp	r0, #0
 800393c:	d0ed      	beq.n	800391a <_realloc_r+0x1e>
 800393e:	42bc      	cmp	r4, r7
 8003940:	4622      	mov	r2, r4
 8003942:	4631      	mov	r1, r6
 8003944:	bf28      	it	cs
 8003946:	463a      	movcs	r2, r7
 8003948:	f7ff ffca 	bl	80038e0 <memcpy>
 800394c:	4631      	mov	r1, r6
 800394e:	4640      	mov	r0, r8
 8003950:	f7ff fbae 	bl	80030b0 <_free_r>
 8003954:	e7e1      	b.n	800391a <_realloc_r+0x1e>
 8003956:	4635      	mov	r5, r6
 8003958:	e7df      	b.n	800391a <_realloc_r+0x1e>

0800395a <_malloc_usable_size_r>:
 800395a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800395e:	1f18      	subs	r0, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	bfbc      	itt	lt
 8003964:	580b      	ldrlt	r3, [r1, r0]
 8003966:	18c0      	addlt	r0, r0, r3
 8003968:	4770      	bx	lr
	...

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
