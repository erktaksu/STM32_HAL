
F100_Proje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083dc  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080085b0  080085b0  000185b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a28  08008a28  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008a28  08008a28  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a28  08008a28  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001d8  08008c08  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08008c08  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a51f  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d7e  00000000  00000000  0002a763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b48  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012298  00000000  00000000  0002dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc97  00000000  00000000  0003ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b619  00000000  00000000  0004dbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046d4  00000000  00000000  000b91c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008594 	.word	0x08008594

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008594 	.word	0x08008594

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	4605      	mov	r5, r0
 8000c2c:	460c      	mov	r4, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2300      	movs	r3, #0
 8000c32:	4628      	mov	r0, r5
 8000c34:	4621      	mov	r1, r4
 8000c36:	f7ff ff21 	bl	8000a7c <__aeabi_dcmplt>
 8000c3a:	b928      	cbnz	r0, 8000c48 <__aeabi_d2lz+0x20>
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	4621      	mov	r1, r4
 8000c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c44:	f000 b80a 	b.w	8000c5c <__aeabi_d2ulz>
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c4e:	f000 f805 	bl	8000c5c <__aeabi_d2ulz>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	bd38      	pop	{r3, r4, r5, pc}
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2ulz>:
 8000c5c:	b5d0      	push	{r4, r6, r7, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <__aeabi_d2ulz+0x34>)
 8000c62:	4606      	mov	r6, r0
 8000c64:	460f      	mov	r7, r1
 8000c66:	f7ff fc97 	bl	8000598 <__aeabi_dmul>
 8000c6a:	f7ff ff6d 	bl	8000b48 <__aeabi_d2uiz>
 8000c6e:	4604      	mov	r4, r0
 8000c70:	f7ff fc18 	bl	80004a4 <__aeabi_ui2d>
 8000c74:	2200      	movs	r2, #0
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <__aeabi_d2ulz+0x38>)
 8000c78:	f7ff fc8e 	bl	8000598 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4630      	mov	r0, r6
 8000c82:	4639      	mov	r1, r7
 8000c84:	f7ff fad0 	bl	8000228 <__aeabi_dsub>
 8000c88:	f7ff ff5e 	bl	8000b48 <__aeabi_d2uiz>
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c90:	3df00000 	.word	0x3df00000
 8000c94:	41f00000 	.word	0x41f00000

08000c98 <Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "LCD.h"
 
void Delay(uint32_t nCount)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000ca0:	e002      	b.n	8000ca8 <Delay+0x10>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f9      	bne.n	8000ca2 <Delay+0xa>
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <lcd_delay>:
void lcd_delay(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
 Delay(1000);
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f7ff ffe9 	bl	8000c98 <Delay>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000cd6:	4b57      	ldr	r3, [pc, #348]	; (8000e34 <lcd_cmd+0x168>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	615a      	str	r2, [r3, #20]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000cdc:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <lcd_cmd+0x168>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000ce2:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <lcd_cmd+0x168>)
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000ce8:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <lcd_cmd+0x168>)
 8000cea:	2220      	movs	r2, #32
 8000cec:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000cee:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <lcd_cmd+0x168>)
 8000cf0:	2240      	movs	r2, #64	; 0x40
 8000cf2:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000cf4:	4b4f      	ldr	r3, [pc, #316]	; (8000e34 <lcd_cmd+0x168>)
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000cfa:	f7ff ffde 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <lcd_cmd+0x168>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	4a4c      	ldr	r2, [pc, #304]	; (8000e34 <lcd_cmd+0x168>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <lcd_cmd+0x50>
 8000d14:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <lcd_cmd+0x168>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	e003      	b.n	8000d24 <lcd_cmd+0x58>
 8000d1c:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <lcd_cmd+0x168>)
 8000d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d22:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 0320 	and.w	r3, r3, #32
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <lcd_cmd+0x6a>
 8000d2e:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <lcd_cmd+0x168>)
 8000d30:	2220      	movs	r2, #32
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	e003      	b.n	8000d3e <lcd_cmd+0x72>
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <lcd_cmd+0x168>)
 8000d38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d3c:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <lcd_cmd+0x84>
 8000d48:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <lcd_cmd+0x168>)
 8000d4a:	2240      	movs	r2, #64	; 0x40
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	e003      	b.n	8000d58 <lcd_cmd+0x8c>
 8000d50:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <lcd_cmd+0x168>)
 8000d52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d56:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da03      	bge.n	8000d68 <lcd_cmd+0x9c>
 8000d60:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <lcd_cmd+0x168>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	611a      	str	r2, [r3, #16]
 8000d66:	e003      	b.n	8000d70 <lcd_cmd+0xa4>
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <lcd_cmd+0x168>)
 8000d6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d6e:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000d70:	f7ff ffa3 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000d74:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <lcd_cmd+0x168>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <lcd_cmd+0x168>)
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <lcd_cmd+0x168>)
 8000d82:	2220      	movs	r2, #32
 8000d84:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <lcd_cmd+0x168>)
 8000d88:	2240      	movs	r2, #64	; 0x40
 8000d8a:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <lcd_cmd+0x168>)
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000d92:	f7ff ff92 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <lcd_cmd+0x168>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <lcd_cmd+0x168>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <lcd_cmd+0xe8>
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <lcd_cmd+0x168>)
 8000dae:	2210      	movs	r2, #16
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	e003      	b.n	8000dbc <lcd_cmd+0xf0>
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <lcd_cmd+0x168>)
 8000db6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dba:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <lcd_cmd+0x102>
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <lcd_cmd+0x168>)
 8000dc8:	2220      	movs	r2, #32
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	e003      	b.n	8000dd6 <lcd_cmd+0x10a>
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <lcd_cmd+0x168>)
 8000dd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dd4:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <lcd_cmd+0x11c>
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <lcd_cmd+0x168>)
 8000de2:	2240      	movs	r2, #64	; 0x40
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	e003      	b.n	8000df0 <lcd_cmd+0x124>
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <lcd_cmd+0x168>)
 8000dea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dee:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <lcd_cmd+0x136>
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <lcd_cmd+0x168>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	e003      	b.n	8000e0a <lcd_cmd+0x13e>
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <lcd_cmd+0x168>)
 8000e04:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e08:	611a      	str	r2, [r3, #16]

 lcd_delay();
 8000e0a:	f7ff ff56 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <lcd_cmd+0x168>)
 8000e10:	2202      	movs	r2, #2
 8000e12:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <lcd_cmd+0x168>)
 8000e16:	2210      	movs	r2, #16
 8000e18:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <lcd_cmd+0x168>)
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <lcd_cmd+0x168>)
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000e26:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <lcd_cmd+0x168>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	615a      	str	r2, [r3, #20]
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010800 	.word	0x40010800

08000e38 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	60d3      	str	r3, [r2, #12]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000e54:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000e60:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e62:	2240      	movs	r2, #64	; 0x40
 8000e64:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000e66:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000e6c:	f7ff ff25 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000e70:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <lcd_char_cp+0x56>
 8000e86:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e88:	2210      	movs	r2, #16
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	e003      	b.n	8000e96 <lcd_char_cp+0x5e>
 8000e8e:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <lcd_char_cp+0x170>)
 8000e90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e94:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 0320 	and.w	r3, r3, #32
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <lcd_char_cp+0x70>
 8000ea0:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <lcd_char_cp+0x170>)
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	e003      	b.n	8000eb0 <lcd_char_cp+0x78>
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <lcd_char_cp+0x170>)
 8000eaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000eae:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <lcd_char_cp+0x8a>
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <lcd_char_cp+0x170>)
 8000ebc:	2240      	movs	r2, #64	; 0x40
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	e003      	b.n	8000eca <lcd_char_cp+0x92>
 8000ec2:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <lcd_char_cp+0x170>)
 8000ec4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ec8:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da03      	bge.n	8000eda <lcd_char_cp+0xa2>
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <lcd_char_cp+0x170>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	e003      	b.n	8000ee2 <lcd_char_cp+0xaa>
 8000eda:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <lcd_char_cp+0x170>)
 8000edc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ee0:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000ee2:	f7ff feea 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <lcd_char_cp+0x170>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <lcd_char_cp+0x170>)
 8000eee:	2210      	movs	r2, #16
 8000ef0:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <lcd_char_cp+0x170>)
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <lcd_char_cp+0x170>)
 8000efa:	2240      	movs	r2, #64	; 0x40
 8000efc:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000f04:	f7ff fed9 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <lcd_char_cp+0xee>
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f20:	2210      	movs	r2, #16
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	e003      	b.n	8000f2e <lcd_char_cp+0xf6>
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f2c:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <lcd_char_cp+0x108>
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	e003      	b.n	8000f48 <lcd_char_cp+0x110>
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f46:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <lcd_char_cp+0x122>
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	e003      	b.n	8000f62 <lcd_char_cp+0x12a>
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f60:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <lcd_char_cp+0x13c>
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	e003      	b.n	8000f7c <lcd_char_cp+0x144>
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f7a:	611a      	str	r2, [r3, #16]

 lcd_delay();
 8000f7c:	f7ff fe9d 	bl	8000cba <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f8e:	2220      	movs	r2, #32
 8000f90:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f94:	2240      	movs	r2, #64	; 0x40
 8000f96:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <lcd_char_cp+0x170>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	615a      	str	r2, [r3, #20]
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010800 	.word	0x40010800

08000fac <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 while(*out_char)
 8000fb4:	e008      	b.n	8000fc8 <lcd_out_cp+0x1c>
 {
  lcd_delay();
 8000fb6:	f7ff fe80 	bl	8000cba <lcd_delay>
  lcd_char_cp(*out_char++);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff38 	bl	8000e38 <lcd_char_cp>
 while(*out_char)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f2      	bne.n	8000fb6 <lcd_out_cp+0xa>
 }
 lcd_delay();
 8000fd0:	f7ff fe73 	bl	8000cba <lcd_delay>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <lcd_init>:


void lcd_init(char bits, char font, char lines)
{  
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	71bb      	strb	r3, [r7, #6]
 8000fea:	4613      	mov	r3, r2
 8000fec:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000fee:	20fa      	movs	r0, #250	; 0xfa
 8000ff0:	f000 fcf2 	bl	80019d8 <HAL_Delay>
 lcd_cmd(_RETURN_HOME);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff fe69 	bl	8000ccc <lcd_cmd>
    HAL_Delay(50);
 8000ffa:	2032      	movs	r0, #50	; 0x32
 8000ffc:	f000 fcec 	bl	80019d8 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	4313      	orrs	r3, r2
 8001006:	b2da      	uxtb	r2, r3
 8001008:	797b      	ldrb	r3, [r7, #5]
 800100a:	4313      	orrs	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f043 0320 	orr.w	r3, r3, #32
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe59 	bl	8000ccc <lcd_cmd>
    HAL_Delay(50);
 800101a:	2032      	movs	r0, #50	; 0x32
 800101c:	f000 fcdc 	bl	80019d8 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8001020:	2006      	movs	r0, #6
 8001022:	f7ff fe53 	bl	8000ccc <lcd_cmd>
    HAL_Delay(50);
 8001026:	2032      	movs	r0, #50	; 0x32
 8001028:	f000 fcd6 	bl	80019d8 <HAL_Delay>
    lcd_cmd(0x0E);
 800102c:	200e      	movs	r0, #14
 800102e:	f7ff fe4d 	bl	8000ccc <lcd_cmd>
    HAL_Delay(50);
 8001032:	2032      	movs	r0, #50	; 0x32
 8001034:	f000 fcd0 	bl	80019d8 <HAL_Delay>
    lcd_cmd(0x0C);
 8001038:	200c      	movs	r0, #12
 800103a:	f7ff fe47 	bl	8000ccc <lcd_cmd>
    HAL_Delay(50);
 800103e:	2032      	movs	r0, #50	; 0x32
 8001040:	f000 fcca 	bl	80019d8 <HAL_Delay>
    lcd_cmd(0x01);
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff fe41 	bl	8000ccc <lcd_cmd>
    HAL_Delay(100);
 800104a:	2064      	movs	r0, #100	; 0x64
 800104c:	f000 fcc4 	bl	80019d8 <HAL_Delay>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d106      	bne.n	800107c <lcd_gotoxy+0x24>
 {
  lcd_cmd(0x80 + (column - 1));
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	337f      	adds	r3, #127	; 0x7f
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe29 	bl	8000ccc <lcd_cmd>
 }
 else if(row == 2)
 {
  lcd_cmd(0xC0 + (column - 1));
 } 
}
 800107a:	e008      	b.n	800108e <lcd_gotoxy+0x36>
 else if(row == 2)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d105      	bne.n	800108e <lcd_gotoxy+0x36>
  lcd_cmd(0xC0 + (column - 1));
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	3b41      	subs	r3, #65	; 0x41
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fe1f 	bl	8000ccc <lcd_cmd>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <lcd_print>:
 lcd_gotoxy(row, column);
 lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	460b      	mov	r3, r1
 80010a4:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 80010a6:	79ba      	ldrb	r2, [r7, #6]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffd3 	bl	8001058 <lcd_gotoxy>
 lcd_out_cp(out_char);
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	f7ff ff7a 	bl	8000fac <lcd_out_cp>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_clear>:
void lcd_clear(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    
 lcd_cmd(_CLEAR);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fe01 	bl	8000ccc <lcd_cmd>
    HAL_Delay(2);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f000 fc84 	bl	80019d8 <HAL_Delay>
    
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fc24 	bl	8001926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f8bb 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f000 f9df 	bl	80014a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010e6:	f000 f959 	bl	800139c <MX_TIM1_Init>
  MX_RTC_Init();
 80010ea:	f000 f90d 	bl	8001308 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //tımer kanalı pwm olarak basladı
 80010ee:	2100      	movs	r1, #0
 80010f0:	484a      	ldr	r0, [pc, #296]	; (800121c <main+0x148>)
 80010f2:	f002 f9df 	bl	80034b4 <HAL_TIM_PWM_Start>
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 80010f6:	2208      	movs	r2, #8
 80010f8:	2100      	movs	r1, #0
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff ff6e 	bl	8000fdc <lcd_init>
	//lcd_print(1,1,"lcd acilis");
lcd_clear();
 8001100:	f7ff ffde 	bl	80010c0 <lcd_clear>
__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001104:	4b45      	ldr	r3, [pc, #276]	; (800121c <main+0x148>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   HAL_RTC_GetTime(&hrtc, &stime,RTC_FORMAT_BIN);
 800110e:	2200      	movs	r2, #0
 8001110:	4943      	ldr	r1, [pc, #268]	; (8001220 <main+0x14c>)
 8001112:	4844      	ldr	r0, [pc, #272]	; (8001224 <main+0x150>)
 8001114:	f001 fcfa 	bl	8002b0c <HAL_RTC_GetTime>
	   HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001118:	2200      	movs	r2, #0
 800111a:	4943      	ldr	r1, [pc, #268]	; (8001228 <main+0x154>)
 800111c:	4841      	ldr	r0, [pc, #260]	; (8001224 <main+0x150>)
 800111e:	f001 fe83 	bl	8002e28 <HAL_RTC_GetDate>



	   saat=stime.Hours;
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <main+0x14c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <main+0x158>)
 800112a:	801a      	strh	r2, [r3, #0]
	   dakika=stime.Minutes;
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <main+0x14c>)
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <main+0x15c>)
 8001134:	801a      	strh	r2, [r3, #0]
	   saniye=stime.Seconds;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <main+0x14c>)
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <main+0x160>)
 800113e:	801a      	strh	r2, [r3, #0]

	   gun=date.Date;
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <main+0x154>)
 8001142:	789b      	ldrb	r3, [r3, #2]
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <main+0x164>)
 8001148:	801a      	strh	r2, [r3, #0]
	   ay=date.Month;
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <main+0x154>)
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b3a      	ldr	r3, [pc, #232]	; (800123c <main+0x168>)
 8001152:	801a      	strh	r2, [r3, #0]
	   yil=date.Year;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <main+0x154>)
 8001156:	78db      	ldrb	r3, [r3, #3]
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <main+0x16c>)
 800115c:	801a      	strh	r2, [r3, #0]

	   sprintf(saat_deger,"%0.2d:%0.2d:%0.2d",saat,dakika,saniye);
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <main+0x158>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <main+0x15c>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <main+0x160>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	4934      	ldr	r1, [pc, #208]	; (8001244 <main+0x170>)
 8001174:	4834      	ldr	r0, [pc, #208]	; (8001248 <main+0x174>)
 8001176:	f003 fd87 	bl	8004c88 <siprintf>
	   sprintf(tarih_deger,"%0.2d:%0.2d:%0.2d",gun,ay,yil);
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <main+0x164>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <main+0x168>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <main+0x16c>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	460b      	mov	r3, r1
 800118e:	492d      	ldr	r1, [pc, #180]	; (8001244 <main+0x170>)
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <main+0x178>)
 8001192:	f003 fd79 	bl	8004c88 <siprintf>



	  lcd_print(1,5,saat_deger);
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <main+0x174>)
 8001198:	2105      	movs	r1, #5
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff7b 	bl	8001096 <lcd_print>
	  lcd_print(2,5,tarih_deger);
 80011a0:	4a2a      	ldr	r2, [pc, #168]	; (800124c <main+0x178>)
 80011a2:	2105      	movs	r1, #5
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff ff76 	bl	8001096 <lcd_print>

if(direct==1)
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <main+0x17c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d115      	bne.n	80011de <main+0x10a>
{
	if(i<2500 ){
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <main+0x180>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80011ba:	4293      	cmp	r3, r2
 80011bc:	dc0a      	bgt.n	80011d4 <main+0x100>
		 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,i);
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <main+0x180>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <main+0x148>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
		 		  i+=112;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <main+0x180>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3370      	adds	r3, #112	; 0x70
 80011ce:	4a21      	ldr	r2, [pc, #132]	; (8001254 <main+0x180>)
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01b      	b.n	800120c <main+0x138>
	}

	else
	{
		direct =-1;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <main+0x17c>)
 80011d6:	f04f 32ff 	mov.w	r2, #4294967295
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e016      	b.n	800120c <main+0x138>
	}
}

else if(direct==-1)
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <main+0x17c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e6:	d111      	bne.n	800120c <main+0x138>
{
	if(i>0)
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <main+0x180>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dd0a      	ble.n	8001206 <main+0x132>
	{
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,i);
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <main+0x180>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <main+0x148>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
		 		  i-=112;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <main+0x180>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3b70      	subs	r3, #112	; 0x70
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <main+0x180>)
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e002      	b.n	800120c <main+0x138>
	}
	else
	{
		direct=1;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <main+0x17c>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
	}
}


		  HAL_Delay(1000);
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f000 fbe2 	bl	80019d8 <HAL_Delay>
			  lcd_clear();
 8001214:	f7ff ff54 	bl	80010c0 <lcd_clear>
	   HAL_RTC_GetTime(&hrtc, &stime,RTC_FORMAT_BIN);
 8001218:	e779      	b.n	800110e <main+0x3a>
 800121a:	bf00      	nop
 800121c:	20000260 	.word	0x20000260
 8001220:	200001f4 	.word	0x200001f4
 8001224:	2000024c 	.word	0x2000024c
 8001228:	200001f8 	.word	0x200001f8
 800122c:	20000242 	.word	0x20000242
 8001230:	20000244 	.word	0x20000244
 8001234:	20000246 	.word	0x20000246
 8001238:	2000023c 	.word	0x2000023c
 800123c:	2000023e 	.word	0x2000023e
 8001240:	20000240 	.word	0x20000240
 8001244:	080085b0 	.word	0x080085b0
 8001248:	200001fc 	.word	0x200001fc
 800124c:	2000021c 	.word	0x2000021c
 8001250:	20000000 	.word	0x20000000
 8001254:	20000248 	.word	0x20000248

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b092      	sub	sp, #72	; 0x48
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2228      	movs	r2, #40	; 0x28
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fd71 	bl	8004d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001286:	230a      	movs	r3, #10
 8001288:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128a:	2301      	movs	r3, #1
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128e:	2310      	movs	r3, #16
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800129a:	2300      	movs	r3, #0
 800129c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800129e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fe45 	bl	8001f38 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80012b4:	f000 f976 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 f8b2 	bl	800243c <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012de:	f000 f961 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012e2:	2301      	movs	r3, #1
 80012e4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f9ea 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012fa:	f000 f953 	bl	80015a4 <Error_Handler>
  }
}
 80012fe:	bf00      	nop
 8001300:	3748      	adds	r7, #72	; 0x48
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2100      	movs	r1, #0
 8001312:	460a      	mov	r2, r1
 8001314:	801a      	strh	r2, [r3, #0]
 8001316:	460a      	mov	r2, r1
 8001318:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_RTC_Init+0x8c>)
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <MX_RTC_Init+0x90>)
 8001322:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_RTC_Init+0x8c>)
 8001326:	f04f 32ff 	mov.w	r2, #4294967295
 800132a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_RTC_Init+0x8c>)
 800132e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001332:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001334:	4817      	ldr	r0, [pc, #92]	; (8001394 <MX_RTC_Init+0x8c>)
 8001336:	f001 fac5 	bl	80028c4 <HAL_RTC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001340:	f000 f930 	bl	80015a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8001344:	230a      	movs	r3, #10
 8001346:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 20;
 8001348:	2314      	movs	r3, #20
 800134a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 800134c:	2332      	movs	r3, #50	; 0x32
 800134e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	480f      	ldr	r0, [pc, #60]	; (8001394 <MX_RTC_Init+0x8c>)
 8001358:	f001 fb40 	bl	80029dc <HAL_RTC_SetTime>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001362:	f000 f91f 	bl	80015a4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001366:	2306      	movs	r3, #6
 8001368:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MAY;
 800136a:	2305      	movs	r3, #5
 800136c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 28;
 800136e:	231c      	movs	r3, #28
 8001370:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 24;
 8001372:	2318      	movs	r3, #24
 8001374:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_RTC_Init+0x8c>)
 800137e:	f001 fc9d 	bl	8002cbc <HAL_RTC_SetDate>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001388:	f000 f90c 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000024c 	.word	0x2000024c
 8001398:	40002800 	.word	0x40002800

0800139c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b092      	sub	sp, #72	; 0x48
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2220      	movs	r2, #32
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fcc1 	bl	8004d4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <MX_TIM1_Init+0x100>)
 80013ce:	4a34      	ldr	r2, [pc, #208]	; (80014a0 <MX_TIM1_Init+0x104>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <MX_TIM1_Init+0x100>)
 80013d4:	2217      	movs	r2, #23
 80013d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <MX_TIM1_Init+0x100>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <MX_TIM1_Init+0x100>)
 80013e0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <MX_TIM1_Init+0x100>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <MX_TIM1_Init+0x100>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <MX_TIM1_Init+0x100>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <MX_TIM1_Init+0x100>)
 80013fa:	f002 f80b 	bl	8003414 <HAL_TIM_PWM_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001404:	f000 f8ce 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001410:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001414:	4619      	mov	r1, r3
 8001416:	4821      	ldr	r0, [pc, #132]	; (800149c <MX_TIM1_Init+0x100>)
 8001418:	f002 fc50 	bl	8003cbc <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001422:	f000 f8bf 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001426:	2360      	movs	r3, #96	; 0x60
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <MX_TIM1_Init+0x100>)
 800144c:	f002 f8f4 	bl	8003638 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001456:	f000 f8a5 	bl	80015a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800146e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001472:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_TIM1_Init+0x100>)
 800147e:	f002 fc83 	bl	8003d88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001488:	f000 f88c 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <MX_TIM1_Init+0x100>)
 800148e:	f000 f903 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8001492:	bf00      	nop
 8001494:	3748      	adds	r7, #72	; 0x48
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000260 	.word	0x20000260
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a35      	ldr	r2, [pc, #212]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014d6:	f043 0320 	orr.w	r3, r3, #32
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0320 	and.w	r3, r3, #32
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_GPIO_Init+0xf0>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_GPIO_Init+0xf0>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a23      	ldr	r2, [pc, #140]	; (8001594 <MX_GPIO_Init+0xf0>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_GPIO_Init+0xf0>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001518:	2200      	movs	r2, #0
 800151a:	21f6      	movs	r1, #246	; 0xf6
 800151c:	481e      	ldr	r0, [pc, #120]	; (8001598 <MX_GPIO_Init+0xf4>)
 800151e:	f000 fce7 	bl	8001ef0 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	481d      	ldr	r0, [pc, #116]	; (800159c <MX_GPIO_Init+0xf8>)
 8001528:	f000 fce2 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2170      	movs	r1, #112	; 0x70
 8001530:	481b      	ldr	r0, [pc, #108]	; (80015a0 <MX_GPIO_Init+0xfc>)
 8001532:	f000 fcdd 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001536:	23f6      	movs	r3, #246	; 0xf6
 8001538:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2302      	movs	r3, #2
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4619      	mov	r1, r3
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <MX_GPIO_Init+0xf4>)
 800154e:	f000 fb4b 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <MX_GPIO_Init+0xf8>)
 800156a:	f000 fb3d 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800156e:	2370      	movs	r3, #112	; 0x70
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2302      	movs	r3, #2
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4619      	mov	r1, r3
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_GPIO_Init+0xfc>)
 8001586:	f000 fb2f 	bl	8001be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40010800 	.word	0x40010800
 800159c:	40011000 	.word	0x40011000
 80015a0:	40010c00 	.word	0x40010c00

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_MspInit+0x5c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_MspInit+0x5c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6193      	str	r3, [r2, #24]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_MspInit+0x5c>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x5c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_MspInit+0x5c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x5c>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_MspInit+0x60>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_MspInit+0x60>)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000

08001614 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_RTC_MspInit+0x3c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d110      	bne.n	8001648 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001626:	f000 fc7b 	bl	8001f20 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_RTC_MspInit+0x40>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_RTC_MspInit+0x40>)
 8001630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_RTC_MspInit+0x40>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_RTC_MspInit+0x44>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40002800 	.word	0x40002800
 8001654:	40021000 	.word	0x40021000
 8001658:	4242043c 	.word	0x4242043c

0800165c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a09      	ldr	r2, [pc, #36]	; (8001690 <HAL_TIM_PWM_MspInit+0x34>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10b      	bne.n	8001686 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_TIM_PWM_MspInit+0x38>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_TIM_PWM_MspInit+0x38>)
 8001674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_TIM_PWM_MspInit+0x38>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d118      	bne.n	80016ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_TIM_MspPostInit+0x60>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_TIM_MspPostInit+0x60>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_TIM_MspPostInit+0x60>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2302      	movs	r3, #2
 80016dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_TIM_MspPostInit+0x64>)
 80016e6:	f000 fa7f 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010800 	.word	0x40010800

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f000 f92b 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001766:	f003 fb45 	bl	8004df4 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
  return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
  while (1) {}    /* Make sure we hang here */
 800178e:	e7fe      	b.n	800178e <_exit+0x12>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
  }

  return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e009      	b.n	80017f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <_write+0x12>
  }
  return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001828:	605a      	str	r2, [r3, #4]
  return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <_isatty>:

int _isatty(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
	...

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f003 faae 	bl	8004df4 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20002000 	.word	0x20002000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	200002a8 	.word	0x200002a8
 80018cc:	20000400 	.word	0x20000400

080018d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018dc:	f7ff fff8 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018e2:	490c      	ldr	r1, [pc, #48]	; (8001914 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018f8:	4c09      	ldr	r4, [pc, #36]	; (8001920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001906:	f003 fa7b 	bl	8004e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190a:	f7ff fbe3 	bl	80010d4 <main>
  bx lr
 800190e:	4770      	bx	lr
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001918:	08008a30 	.word	0x08008a30
  ldr r2, =_sbss
 800191c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001920:	200003fc 	.word	0x200003fc

08001924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_IRQHandler>

08001926 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192a:	2003      	movs	r0, #3
 800192c:	f000 f928 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001930:	2000      	movs	r0, #0
 8001932:	f000 f805 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001936:	f7ff fe3b 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f935 	bl	8001bce <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 f90b 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000004 	.word	0x20000004
 8001998:	2000000c 	.word	0x2000000c
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x1c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x20>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_IncTick+0x20>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	200002ac 	.word	0x200002ac

080019c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b02      	ldr	r3, [pc, #8]	; (80019d4 <HAL_GetTick+0x10>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	200002ac 	.word	0x200002ac

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff fff0 	bl	80019c4 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffe0 	bl	80019c4 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000000c 	.word	0x2000000c

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff90 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff49 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff5e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff90 	bl	8001ad8 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5f 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffb0 	bl	8001b3c <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	; 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e169      	b.n	8001ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8158 	bne.w	8001eca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a9a      	ldr	r2, [pc, #616]	; (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d05e      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a98      	ldr	r2, [pc, #608]	; (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d875      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c2a:	4a98      	ldr	r2, [pc, #608]	; (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d058      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c30:	4a96      	ldr	r2, [pc, #600]	; (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d86f      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c36:	4a96      	ldr	r2, [pc, #600]	; (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d052      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a94      	ldr	r2, [pc, #592]	; (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d869      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c42:	4a94      	ldr	r2, [pc, #592]	; (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04c      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c48:	4a92      	ldr	r2, [pc, #584]	; (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d863      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a92      	ldr	r2, [pc, #584]	; (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d046      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c54:	4a90      	ldr	r2, [pc, #576]	; (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d85d      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d82a      	bhi.n	8001cb4 <HAL_GPIO_Init+0xcc>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d859      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <HAL_GPIO_Init+0x80>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001ce3 	.word	0x08001ce3
 8001c6c:	08001cbd 	.word	0x08001cbd
 8001c70:	08001ccf 	.word	0x08001ccf
 8001c74:	08001d11 	.word	0x08001d11
 8001c78:	08001d17 	.word	0x08001d17
 8001c7c:	08001d17 	.word	0x08001d17
 8001c80:	08001d17 	.word	0x08001d17
 8001c84:	08001d17 	.word	0x08001d17
 8001c88:	08001d17 	.word	0x08001d17
 8001c8c:	08001d17 	.word	0x08001d17
 8001c90:	08001d17 	.word	0x08001d17
 8001c94:	08001d17 	.word	0x08001d17
 8001c98:	08001d17 	.word	0x08001d17
 8001c9c:	08001d17 	.word	0x08001d17
 8001ca0:	08001d17 	.word	0x08001d17
 8001ca4:	08001d17 	.word	0x08001d17
 8001ca8:	08001d17 	.word	0x08001d17
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001cd9 	.word	0x08001cd9
 8001cb4:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <HAL_GPIO_Init+0x2b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cba:	e02c      	b.n	8001d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e029      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e024      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e01f      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e01a      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cea:	2304      	movs	r3, #4
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e013      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	611a      	str	r2, [r3, #16]
          break;
 8001d02:	e009      	b.n	8001d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	615a      	str	r2, [r3, #20]
          break;
 8001d0e:	e003      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          break;
 8001d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2bff      	cmp	r3, #255	; 0xff
 8001d1c:	d801      	bhi.n	8001d22 <HAL_GPIO_Init+0x13a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_Init+0x13e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2bff      	cmp	r3, #255	; 0xff
 8001d2c:	d802      	bhi.n	8001d34 <HAL_GPIO_Init+0x14c>
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x152>
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	3b08      	subs	r3, #8
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	210f      	movs	r1, #15
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80b1 	beq.w	8001eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d80:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1ec>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3f      	ldr	r2, [pc, #252]	; (8001eac <HAL_GPIO_Init+0x2c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <HAL_GPIO_Init+0x2c8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1e4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3d      	ldr	r2, [pc, #244]	; (8001eb4 <HAL_GPIO_Init+0x2cc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1e0>
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001de6:	492f      	ldr	r1, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	492c      	ldr	r1, [pc, #176]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4928      	ldr	r1, [pc, #160]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4918      	ldr	r1, [pc, #96]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4914      	ldr	r1, [pc, #80]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d021      	beq.n	8001ebc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e021      	b.n	8001eca <HAL_GPIO_Init+0x2e2>
 8001e86:	bf00      	nop
 8001e88:	10320000 	.word	0x10320000
 8001e8c:	10310000 	.word	0x10310000
 8001e90:	10220000 	.word	0x10220000
 8001e94:	10210000 	.word	0x10210000
 8001e98:	10120000 	.word	0x10120000
 8001e9c:	10110000 	.word	0x10110000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40011400 	.word	0x40011400
 8001eb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_GPIO_Init+0x304>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	4909      	ldr	r1, [pc, #36]	; (8001eec <HAL_GPIO_Init+0x304>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	3301      	adds	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f47f ae8e 	bne.w	8001bfc <HAL_GPIO_Init+0x14>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	372c      	adds	r7, #44	; 0x2c
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0c:	e003      	b.n	8001f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	420e0020 	.word	0x420e0020

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e272      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8087 	beq.w	8002066 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f58:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d00c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f64:	4b8f      	ldr	r3, [pc, #572]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d112      	bne.n	8001f96 <HAL_RCC_OscConfig+0x5e>
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d10b      	bne.n	8001f96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06c      	beq.n	8002064 <HAL_RCC_OscConfig+0x12c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d168      	bne.n	8002064 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e24c      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x76>
 8001fa0:	4b80      	ldr	r3, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a7f      	ldr	r2, [pc, #508]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e02e      	b.n	800200c <HAL_RCC_OscConfig+0xd4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x98>
 8001fb6:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7a      	ldr	r2, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a77      	ldr	r2, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xd4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xbc>
 8001fda:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a71      	ldr	r2, [pc, #452]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xd4>
 8001ff4:	4b6b      	ldr	r3, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a67      	ldr	r2, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fcd6 	bl	80019c4 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff fcd2 	bl	80019c4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e200      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0xe4>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fcc2 	bl	80019c4 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fcbe 	bl	80019c4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1ec      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x10c>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d063      	beq.n	800213a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002072:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800207e:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x18c>
 800208a:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x176>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e1c0      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4939      	ldr	r1, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	e03a      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fc77 	bl	80019c4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff fc73 	bl	80019c4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1a1      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4927      	ldr	r1, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fc56 	bl	80019c4 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff fc52 	bl	80019c4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e180      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03a      	beq.n	80021bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d019      	beq.n	8002182 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_RCC_OscConfig+0x274>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7ff fc36 	bl	80019c4 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7ff fc32 	bl	80019c4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e160      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x26c>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800217a:	2001      	movs	r0, #1
 800217c:	f000 fa86 	bl	800268c <RCC_Delay>
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_OscConfig+0x274>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff fc1c 	bl	80019c4 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	e00f      	b.n	80021b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff fc18 	bl	80019c4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d908      	bls.n	80021b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e146      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	42420000 	.word	0x42420000
 80021ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e9      	bne.n	8002190 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a6 	beq.w	8002316 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10d      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	4b85      	ldr	r3, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4b82      	ldr	r3, [pc, #520]	; (8002400 <HAL_RCC_OscConfig+0x4c8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002202:	4b7f      	ldr	r3, [pc, #508]	; (8002400 <HAL_RCC_OscConfig+0x4c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7e      	ldr	r2, [pc, #504]	; (8002400 <HAL_RCC_OscConfig+0x4c8>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7ff fbd9 	bl	80019c4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7ff fbd5 	bl	80019c4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e103      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	4b75      	ldr	r3, [pc, #468]	; (8002400 <HAL_RCC_OscConfig+0x4c8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x312>
 800223c:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e02d      	b.n	80022a6 <HAL_RCC_OscConfig+0x36e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x334>
 8002252:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a69      	ldr	r2, [pc, #420]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a66      	ldr	r2, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	6213      	str	r3, [r2, #32]
 800226a:	e01c      	b.n	80022a6 <HAL_RCC_OscConfig+0x36e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x356>
 8002274:	4b61      	ldr	r3, [pc, #388]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a60      	ldr	r2, [pc, #384]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	4b5e      	ldr	r3, [pc, #376]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6213      	str	r3, [r2, #32]
 800228c:	e00b      	b.n	80022a6 <HAL_RCC_OscConfig+0x36e>
 800228e:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a5a      	ldr	r2, [pc, #360]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b58      	ldr	r3, [pc, #352]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a57      	ldr	r2, [pc, #348]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d015      	beq.n	80022da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fb89 	bl	80019c4 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff fb85 	bl	80019c4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0b1      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ee      	beq.n	80022b6 <HAL_RCC_OscConfig+0x37e>
 80022d8:	e014      	b.n	8002304 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff fb73 	bl	80019c4 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff fb6f 	bl	80019c4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e09b      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8087 	beq.w	800242e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d061      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d146      	bne.n	80023c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff fb43 	bl	80019c4 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff fb3f 	bl	80019c4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e06d      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002368:	d108      	bne.n	800237c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	4921      	ldr	r1, [pc, #132]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a19      	ldr	r1, [r3, #32]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	430b      	orrs	r3, r1
 800238e:	491b      	ldr	r1, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff fb13 	bl	80019c4 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7ff fb0f 	bl	80019c4 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e03d      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46a>
 80023c0:	e035      	b.n	800242e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fafc 	bl	80019c4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7ff faf8 	bl	80019c4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e026      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x498>
 80023ee:	e01e      	b.n	800242e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e019      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
 80023fc:	40021000 	.word	0x40021000
 8002400:	40007000 	.word	0x40007000
 8002404:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_OscConfig+0x500>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	429a      	cmp	r2, r3
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0a0      	b.n	8002592 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002468:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a4b      	ldr	r2, [pc, #300]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 800246e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002480:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a45      	ldr	r2, [pc, #276]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 8002486:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800248a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4940      	ldr	r1, [pc, #256]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d040      	beq.n	800252c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d115      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e067      	b.n	8002592 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e05b      	b.n	8002592 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4929      	ldr	r1, [pc, #164]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7ff fa62 	bl	80019c4 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7ff fa5e 	bl	80019c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e03b      	b.n	8002592 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4915      	ldr	r1, [pc, #84]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490d      	ldr	r1, [pc, #52]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f81f 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x160>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	4909      	ldr	r1, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x164>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_RCC_ClockConfig+0x168>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_RCC_ClockConfig+0x16c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f9d8 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	080085c4 	.word	0x080085c4
 80025a4:	20000004 	.word	0x20000004
 80025a8:	20000008 	.word	0x20000008

080025ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_GetSysClockFreq+0x90>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x30>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x36>
 80025da:	e026      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_RCC_GetSysClockFreq+0x94>)
 80025de:	613b      	str	r3, [r7, #16]
      break;
 80025e0:	e026      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0c9b      	lsrs	r3, r3, #18
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00f      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_GetSysClockFreq+0x90>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_RCC_GetSysClockFreq+0x94>)
 800260c:	fb03 f202 	mul.w	r2, r3, r2
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e004      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_RCC_GetSysClockFreq+0xa0>)
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetSysClockFreq+0x94>)
 800262c:	613b      	str	r3, [r7, #16]
      break;
 800262e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002630:	693b      	ldr	r3, [r7, #16]
}
 8002632:	4618      	mov	r0, r3
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40021000 	.word	0x40021000
 8002640:	007a1200 	.word	0x007a1200
 8002644:	080085dc 	.word	0x080085dc
 8002648:	080085ec 	.word	0x080085ec
 800264c:	003d0900 	.word	0x003d0900

08002650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b02      	ldr	r3, [pc, #8]	; (8002660 <HAL_RCC_GetHCLKFreq+0x10>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002668:	f7ff fff2 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0adb      	lsrs	r3, r3, #11
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	080085d4 	.word	0x080085d4

0800268c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <RCC_Delay+0x34>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <RCC_Delay+0x38>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a5b      	lsrs	r3, r3, #9
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026a8:	bf00      	nop
  }
  while (Delay --);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	60fa      	str	r2, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <RCC_Delay+0x1c>
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000004 	.word	0x20000004
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d07d      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e8:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b44      	ldr	r3, [pc, #272]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a43      	ldr	r2, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d118      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271c:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002728:	f7ff f94c 	bl	80019c4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	e008      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7ff f948 	bl	80019c4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e05e      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d02e      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d027      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d014      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff f917 	bl	80019c4 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff f913 	bl	80019c4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e027      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ee      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	490f      	ldr	r1, [pc, #60]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d105      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
 8002810:	42420440 	.word	0x42420440

08002814 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d003      	beq.n	8002832 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d033      	beq.n	8002898 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002830:	e041      	b.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      temp_reg = RCC->BDCR;
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002842:	d108      	bne.n	8002856 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        frequency = LSE_VALUE;
 800284e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e01f      	b.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d109      	bne.n	8002876 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = LSI_VALUE;
 800286e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e00f      	b.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002880:	d118      	bne.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        frequency = HSE_VALUE / 128U;
 800288e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002892:	60fb      	str	r3, [r7, #12]
      break;
 8002894:	e00e      	b.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8002896:	e00d      	b.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002898:	f7ff fee4 	bl	8002664 <HAL_RCC_GetPCLK2Freq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0b9b      	lsrs	r3, r3, #14
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	3301      	adds	r3, #1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	60fb      	str	r3, [r7, #12]
      break;
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      break;
 80028b4:	bf00      	nop
    }
  }
  return (frequency);
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07a      	b.n	80029d0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7c5b      	ldrb	r3, [r3, #17]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fe92 	bl	8001614 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 faea 	bl	8002ed0 <HAL_RTC_WaitForSynchro>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2204      	movs	r2, #4
 8002906:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e061      	b.n	80029d0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fba3 	bl	8003058 <RTC_EnterInitMode>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2204      	movs	r2, #4
 800291c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e056      	b.n	80029d0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0207 	bic.w	r2, r2, #7
 8002930:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_RTC_Init+0x114>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <HAL_RTC_Init+0x114>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002946:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_RTC_Init+0x114>)
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4921      	ldr	r1, [pc, #132]	; (80029d8 <HAL_RTC_Init+0x114>)
 8002954:	4313      	orrs	r3, r2
 8002956:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d003      	beq.n	800296a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e00e      	b.n	8002988 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800296a:	2001      	movs	r0, #1
 800296c:	f7ff ff52 	bl	8002814 <HAL_RCCEx_GetPeriphCLKFreq>
 8002970:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2204      	movs	r2, #4
 800297c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e026      	b.n	80029d0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3b01      	subs	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	0c1a      	lsrs	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f002 020f 	and.w	r2, r2, #15
 8002994:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	b292      	uxth	r2, r2
 800299e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb81 	bl	80030a8 <RTC_ExitInitMode>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00c      	b.n	80029d0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80029ce:	2300      	movs	r3, #0
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40006c00 	.word	0x40006c00

080029dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_RTC_SetTime+0x20>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e080      	b.n	8002b02 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	7c1b      	ldrb	r3, [r3, #16]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_RTC_SetTime+0x30>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e07a      	b.n	8002b02 <HAL_RTC_SetTime+0x126>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2202      	movs	r2, #2
 8002a16:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d113      	bne.n	8002a46 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a28:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	4619      	mov	r1, r3
 8002a32:	460b      	mov	r3, r1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a5b      	subs	r3, r3, r1
 8002a38:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a3a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e01e      	b.n	8002a84 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb71 	bl	8003132 <RTC_Bcd2ToByte>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a58:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fb66 	bl	8003132 <RTC_Bcd2ToByte>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a72:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	789b      	ldrb	r3, [r3, #2]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fb5a 	bl	8003132 <RTC_Bcd2ToByte>
 8002a7e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a80:	4423      	add	r3, r4
 8002a82:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a84:	6979      	ldr	r1, [r7, #20]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa7f 	bl	8002f8a <RTC_WriteTimeCounter>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2204      	movs	r2, #4
 8002a96:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e02f      	b.n	8002b02 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0205 	bic.w	r2, r2, #5
 8002ab0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa90 	bl	8002fd8 <RTC_ReadAlarmCounter>
 8002ab8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d018      	beq.n	8002af4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d214      	bcs.n	8002af4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002ad0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ad4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ad6:	6939      	ldr	r1, [r7, #16]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa96 	bl	800300a <RTC_WriteAlarmCounter>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e006      	b.n	8002b02 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
	...

08002b0c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_RTC_GetTime+0x28>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b5      	b.n	8002ca4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0ac      	b.n	8002ca4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f9ed 	bl	8002f2a <RTC_ReadTimeCounter>
 8002b50:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4a55      	ldr	r2, [pc, #340]	; (8002cac <HAL_RTC_GetTime+0x1a0>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0adb      	lsrs	r3, r3, #11
 8002b5c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4b52      	ldr	r3, [pc, #328]	; (8002cac <HAL_RTC_GetTime+0x1a0>)
 8002b62:	fba3 1302 	umull	r1, r3, r3, r2
 8002b66:	0adb      	lsrs	r3, r3, #11
 8002b68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	4a4f      	ldr	r2, [pc, #316]	; (8002cb0 <HAL_RTC_GetTime+0x1a4>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4a4a      	ldr	r2, [pc, #296]	; (8002cac <HAL_RTC_GetTime+0x1a0>)
 8002b84:	fba2 1203 	umull	r1, r2, r2, r3
 8002b88:	0ad2      	lsrs	r2, r2, #11
 8002b8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002b8e:	fb01 f202 	mul.w	r2, r1, r2
 8002b92:	1a9a      	subs	r2, r3, r2
 8002b94:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RTC_GetTime+0x1a4>)
 8002b96:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9a:	0959      	lsrs	r1, r3, #5
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a5b      	subs	r3, r3, r1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	1ad1      	subs	r1, r2, r3
 8002ba6:	b2ca      	uxtb	r2, r1
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b17      	cmp	r3, #23
 8002bb0:	d955      	bls.n	8002c5e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4a3f      	ldr	r2, [pc, #252]	; (8002cb4 <HAL_RTC_GetTime+0x1a8>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002bbe:	6939      	ldr	r1, [r7, #16]
 8002bc0:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_RTC_GetTime+0x1a8>)
 8002bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002bc6:	091a      	lsrs	r2, r3, #4
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1aca      	subs	r2, r1, r3
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f9fd 	bl	8002fd8 <RTC_ReadAlarmCounter>
 8002bde:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d008      	beq.n	8002bfa <HAL_RTC_GetTime+0xee>
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d904      	bls.n	8002bfa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	e002      	b.n	8002c00 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <HAL_RTC_GetTime+0x1ac>)
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f9ba 	bl	8002f8a <RTC_WriteTimeCounter>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e041      	b.n	8002ca4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d00c      	beq.n	8002c42 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c30:	69f9      	ldr	r1, [r7, #28]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f9e9 	bl	800300a <RTC_WriteAlarmCounter>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e030      	b.n	8002ca4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c42:	69f9      	ldr	r1, [r7, #28]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f9e0 	bl	800300a <RTC_WriteAlarmCounter>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e027      	b.n	8002ca4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa88 	bl	800316c <RTC_DateUpdate>
 8002c5c:	e003      	b.n	8002c66 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01a      	beq.n	8002ca2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fa41 	bl	80030f8 <RTC_ByteToBcd2>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa38 	bl	80030f8 <RTC_ByteToBcd2>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fa2f 	bl	80030f8 <RTC_ByteToBcd2>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	91a2b3c5 	.word	0x91a2b3c5
 8002cb0:	88888889 	.word	0x88888889
 8002cb4:	aaaaaaab 	.word	0xaaaaaaab
 8002cb8:	00015180 	.word	0x00015180

08002cbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_RTC_SetDate+0x24>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e097      	b.n	8002e14 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	7c1b      	ldrb	r3, [r3, #16]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_RTC_SetDate+0x34>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e091      	b.n	8002e14 <HAL_RTC_SetDate+0x158>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	78da      	ldrb	r2, [r3, #3]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	785a      	ldrb	r2, [r3, #1]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	789a      	ldrb	r2, [r3, #2]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	739a      	strb	r2, [r3, #14]
 8002d1a:	e01a      	b.n	8002d52 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	78db      	ldrb	r3, [r3, #3]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa06 	bl	8003132 <RTC_Bcd2ToByte>
 8002d26:	4603      	mov	r3, r0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f9fd 	bl	8003132 <RTC_Bcd2ToByte>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	789b      	ldrb	r3, [r3, #2]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 f9f4 	bl	8003132 <RTC_Bcd2ToByte>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	7bdb      	ldrb	r3, [r3, #15]
 8002d56:	4618      	mov	r0, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	7b59      	ldrb	r1, [r3, #13]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	7b9b      	ldrb	r3, [r3, #14]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f000 fadf 	bl	8003324 <RTC_WeekDayNum>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	7b1a      	ldrb	r2, [r3, #12]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8d7 	bl	8002f2a <RTC_ReadTimeCounter>
 8002d7c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <HAL_RTC_SetDate+0x160>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0adb      	lsrs	r3, r3, #11
 8002d88:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b18      	cmp	r3, #24
 8002d8e:	d93a      	bls.n	8002e06 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_RTC_SetDate+0x164>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_RTC_SetDate+0x168>)
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002da6:	69f9      	ldr	r1, [r7, #28]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f8ee 	bl	8002f8a <RTC_WriteTimeCounter>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2204      	movs	r2, #4
 8002db8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e027      	b.n	8002e14 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f907 	bl	8002fd8 <RTC_ReadAlarmCounter>
 8002dca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d018      	beq.n	8002e06 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d214      	bcs.n	8002e06 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002de2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002de6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002de8:	69b9      	ldr	r1, [r7, #24]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f90d 	bl	800300a <RTC_WriteAlarmCounter>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e006      	b.n	8002e14 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	91a2b3c5 	.word	0x91a2b3c5
 8002e20:	aaaaaaab 	.word	0xaaaaaaab
 8002e24:	00015180 	.word	0x00015180

08002e28 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2100      	movs	r1, #0
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	460a      	mov	r2, r1
 8002e40:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_RTC_GetDate+0x26>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e03a      	b.n	8002ec8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	2200      	movs	r2, #0
 8002e58:	4619      	mov	r1, r3
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff fe56 	bl	8002b0c <HAL_RTC_GetTime>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e02e      	b.n	8002ec8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	7b1a      	ldrb	r2, [r3, #12]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	7bda      	ldrb	r2, [r3, #15]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	7b5a      	ldrb	r2, [r3, #13]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	7b9a      	ldrb	r2, [r3, #14]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01a      	beq.n	8002ec6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	78db      	ldrb	r3, [r3, #3]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f92f 	bl	80030f8 <RTC_ByteToBcd2>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f926 	bl	80030f8 <RTC_ByteToBcd2>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	789b      	ldrb	r3, [r3, #2]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f91d 	bl	80030f8 <RTC_ByteToBcd2>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01d      	b.n	8002f22 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0208 	bic.w	r2, r2, #8
 8002ef4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ef6:	f7fe fd65 	bl	80019c4 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002efc:	e009      	b.n	8002f12 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002efe:	f7fe fd61 	bl	80019c4 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0c:	d901      	bls.n	8002f12 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e007      	b.n	8002f22 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	827b      	strh	r3, [r7, #18]
 8002f36:	2300      	movs	r3, #0
 8002f38:	823b      	strh	r3, [r7, #16]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002f5a:	8a7a      	ldrh	r2, [r7, #18]
 8002f5c:	8a3b      	ldrh	r3, [r7, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d008      	beq.n	8002f74 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002f62:	8a3b      	ldrh	r3, [r7, #16]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e004      	b.n	8002f7e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002f74:	8a7b      	ldrh	r3, [r7, #18]
 8002f76:	041a      	lsls	r2, r3, #16
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002f7e:	697b      	ldr	r3, [r7, #20]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f85d 	bl	8003058 <RTC_EnterInitMode>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e011      	b.n	8002fce <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	0c12      	lsrs	r2, r2, #16
 8002fb2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f872 	bl	80030a8 <RTC_ExitInitMode>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	81fb      	strh	r3, [r7, #14]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	041a      	lsls	r2, r3, #16
 8002ffc:	89bb      	ldrh	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f81d 	bl	8003058 <RTC_EnterInitMode>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e011      	b.n	800304e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	0c12      	lsrs	r2, r2, #16
 8003032:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b292      	uxth	r2, r2
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f832 	bl	80030a8 <RTC_ExitInitMode>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003064:	f7fe fcae 	bl	80019c4 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800306a:	e009      	b.n	8003080 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800306c:	f7fe fcaa 	bl	80019c4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307a:	d901      	bls.n	8003080 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e00f      	b.n	80030a0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0210 	orr.w	r2, r2, #16
 800309c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0210 	bic.w	r2, r2, #16
 80030c2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80030c4:	f7fe fc7e 	bl	80019c4 <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030ca:	e009      	b.n	80030e0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030cc:	f7fe fc7a 	bl	80019c4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030da:	d901      	bls.n	80030e0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e007      	b.n	80030f0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0ee      	beq.n	80030cc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003106:	e005      	b.n	8003114 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	3b0a      	subs	r3, #10
 8003112:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	2b09      	cmp	r3, #9
 8003118:	d8f6      	bhi.n	8003108 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	b2da      	uxtb	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	4313      	orrs	r3, r2
 8003126:	b2db      	uxtb	r3, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	4413      	add	r3, r2
 8003160:	b2db      	uxtb	r3, r3
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7bdb      	ldrb	r3, [r3, #15]
 800318a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7b5b      	ldrb	r3, [r3, #13]
 8003190:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7b9b      	ldrb	r3, [r3, #14]
 8003196:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	e06f      	b.n	800327e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d011      	beq.n	80031c8 <RTC_DateUpdate+0x5c>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d00e      	beq.n	80031c8 <RTC_DateUpdate+0x5c>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d00b      	beq.n	80031c8 <RTC_DateUpdate+0x5c>
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b07      	cmp	r3, #7
 80031b4:	d008      	beq.n	80031c8 <RTC_DateUpdate+0x5c>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d005      	beq.n	80031c8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d002      	beq.n	80031c8 <RTC_DateUpdate+0x5c>
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d117      	bne.n	80031f8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b1e      	cmp	r3, #30
 80031cc:	d803      	bhi.n	80031d6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80031d4:	e050      	b.n	8003278 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d005      	beq.n	80031e8 <RTC_DateUpdate+0x7c>
        {
          month++;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	3301      	adds	r3, #1
 80031e0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80031e2:	2301      	movs	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80031e6:	e047      	b.n	8003278 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
          day = 1U;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
          year++;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3301      	adds	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80031f6:	e03f      	b.n	8003278 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d008      	beq.n	8003210 <RTC_DateUpdate+0xa4>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d005      	beq.n	8003210 <RTC_DateUpdate+0xa4>
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b09      	cmp	r3, #9
 8003208:	d002      	beq.n	8003210 <RTC_DateUpdate+0xa4>
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b0b      	cmp	r3, #11
 800320e:	d10c      	bne.n	800322a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b1d      	cmp	r3, #29
 8003214:	d803      	bhi.n	800321e <RTC_DateUpdate+0xb2>
      {
        day++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800321c:	e02c      	b.n	8003278 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	3301      	adds	r3, #1
 8003222:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003224:	2301      	movs	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003228:	e026      	b.n	8003278 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d123      	bne.n	8003278 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b1b      	cmp	r3, #27
 8003234:	d803      	bhi.n	800323e <RTC_DateUpdate+0xd2>
      {
        day++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3301      	adds	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e01c      	b.n	8003278 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b1c      	cmp	r3, #28
 8003242:	d111      	bne.n	8003268 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f839 	bl	80032c0 <RTC_IsLeapYear>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <RTC_DateUpdate+0xf0>
        {
          day++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e00d      	b.n	8003278 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	3301      	adds	r3, #1
 8003260:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003262:	2301      	movs	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e007      	b.n	8003278 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b1d      	cmp	r3, #29
 800326c:	d104      	bne.n	8003278 <RTC_DateUpdate+0x10c>
      {
        month++;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3301      	adds	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003274:	2301      	movs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	3301      	adds	r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d38b      	bcc.n	800319e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6978      	ldr	r0, [r7, #20]
 80032aa:	f000 f83b 	bl	8003324 <RTC_WeekDayNum>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	731a      	strb	r2, [r3, #12]
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e01d      	b.n	8003316 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	4a10      	ldr	r2, [pc, #64]	; (8003320 <RTC_IsLeapYear+0x60>)
 80032de:	fba2 1203 	umull	r1, r2, r2, r3
 80032e2:	0952      	lsrs	r2, r2, #5
 80032e4:	2164      	movs	r1, #100	; 0x64
 80032e6:	fb01 f202 	mul.w	r2, r1, r2
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00f      	b.n	8003316 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <RTC_IsLeapYear+0x60>)
 80032fa:	fba2 1203 	umull	r1, r2, r2, r3
 80032fe:	09d2      	lsrs	r2, r2, #7
 8003300:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003304:	fb01 f202 	mul.w	r2, r1, r2
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003314:	2300      	movs	r3, #0
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	51eb851f 	.word	0x51eb851f

08003324 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
 8003330:	4613      	mov	r3, r2
 8003332:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003342:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d82d      	bhi.n	80033a6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	4a2c      	ldr	r2, [pc, #176]	; (8003408 <RTC_WeekDayNum+0xe4>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	085a      	lsrs	r2, r3, #1
 800335e:	78bb      	ldrb	r3, [r7, #2]
 8003360:	441a      	add	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	441a      	add	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3b01      	subs	r3, #1
 8003372:	4926      	ldr	r1, [pc, #152]	; (800340c <RTC_WeekDayNum+0xe8>)
 8003374:	fba1 1303 	umull	r1, r3, r1, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	1ad2      	subs	r2, r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	3b01      	subs	r3, #1
 8003380:	4922      	ldr	r1, [pc, #136]	; (800340c <RTC_WeekDayNum+0xe8>)
 8003382:	fba1 1303 	umull	r1, r3, r1, r3
 8003386:	09db      	lsrs	r3, r3, #7
 8003388:	4413      	add	r3, r2
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <RTC_WeekDayNum+0xec>)
 800338e:	fba3 1302 	umull	r1, r3, r3, r2
 8003392:	1ad1      	subs	r1, r2, r3
 8003394:	0849      	lsrs	r1, r1, #1
 8003396:	440b      	add	r3, r1
 8003398:	0899      	lsrs	r1, r3, #2
 800339a:	460b      	mov	r3, r1
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	1a5b      	subs	r3, r3, r1
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e029      	b.n	80033fa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <RTC_WeekDayNum+0xe4>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	085a      	lsrs	r2, r3, #1
 80033ba:	78bb      	ldrb	r3, [r7, #2]
 80033bc:	441a      	add	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	441a      	add	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	441a      	add	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4910      	ldr	r1, [pc, #64]	; (800340c <RTC_WeekDayNum+0xe8>)
 80033cc:	fba1 1303 	umull	r1, r3, r1, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	1ad2      	subs	r2, r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	490d      	ldr	r1, [pc, #52]	; (800340c <RTC_WeekDayNum+0xe8>)
 80033d8:	fba1 1303 	umull	r1, r3, r1, r3
 80033dc:	09db      	lsrs	r3, r3, #7
 80033de:	4413      	add	r3, r2
 80033e0:	1c9a      	adds	r2, r3, #2
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <RTC_WeekDayNum+0xec>)
 80033e4:	fba3 1302 	umull	r1, r3, r3, r2
 80033e8:	1ad1      	subs	r1, r2, r3
 80033ea:	0849      	lsrs	r1, r1, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	0899      	lsrs	r1, r3, #2
 80033f0:	460b      	mov	r3, r1
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a5b      	subs	r3, r3, r1
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	b2db      	uxtb	r3, r3
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	38e38e39 	.word	0x38e38e39
 800340c:	51eb851f 	.word	0x51eb851f
 8003410:	24924925 	.word	0x24924925

08003414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe f90e 	bl	800165c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 f9b2 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x24>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e022      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d109      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x3e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e015      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e008      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e077      	b.n	8003616 <HAL_TIM_PWM_Start+0x162>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0x82>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003534:	e013      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0x92>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003544:	e00b      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xa2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003554:	e003      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fb84 	bl	8003c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_TIM_PWM_Start+0x16c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00e      	beq.n	8003594 <HAL_TIM_PWM_Start+0xe0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <HAL_TIM_PWM_Start+0x170>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_TIM_PWM_Start+0xe0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_TIM_PWM_Start+0x174>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_TIM_PWM_Start+0xe0>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_TIM_PWM_Start+0x178>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_TIM_PWM_Start+0xe4>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_TIM_PWM_Start+0xe6>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_TIM_PWM_Start+0xfa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_TIM_PWM_Start+0x16c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_TIM_PWM_Start+0x12c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d00e      	beq.n	80035e0 <HAL_TIM_PWM_Start+0x12c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_TIM_PWM_Start+0x17c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_TIM_PWM_Start+0x12c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <HAL_TIM_PWM_Start+0x180>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_TIM_PWM_Start+0x12c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <HAL_TIM_PWM_Start+0x170>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d111      	bne.n	8003604 <HAL_TIM_PWM_Start+0x150>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d010      	beq.n	8003614 <HAL_TIM_PWM_Start+0x160>
    {
      __HAL_TIM_ENABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	e007      	b.n	8003614 <HAL_TIM_PWM_Start+0x160>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800

08003638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003652:	2302      	movs	r3, #2
 8003654:	e0ae      	b.n	80037b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	f200 809f 	bhi.w	80037a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036a1 	.word	0x080036a1
 8003670:	080037a5 	.word	0x080037a5
 8003674:	080037a5 	.word	0x080037a5
 8003678:	080037a5 	.word	0x080037a5
 800367c:	080036e1 	.word	0x080036e1
 8003680:	080037a5 	.word	0x080037a5
 8003684:	080037a5 	.word	0x080037a5
 8003688:	080037a5 	.word	0x080037a5
 800368c:	08003723 	.word	0x08003723
 8003690:	080037a5 	.word	0x080037a5
 8003694:	080037a5 	.word	0x080037a5
 8003698:	080037a5 	.word	0x080037a5
 800369c:	08003763 	.word	0x08003763
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f908 	bl	80038bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0208 	orr.w	r2, r2, #8
 80036ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6999      	ldr	r1, [r3, #24]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	619a      	str	r2, [r3, #24]
      break;
 80036de:	e064      	b.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f96c 	bl	80039c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6999      	ldr	r1, [r3, #24]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	021a      	lsls	r2, r3, #8
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	619a      	str	r2, [r3, #24]
      break;
 8003720:	e043      	b.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f9c7 	bl	8003abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0208 	orr.w	r2, r2, #8
 800373c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0204 	bic.w	r2, r2, #4
 800374c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69d9      	ldr	r1, [r3, #28]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	61da      	str	r2, [r3, #28]
      break;
 8003760:	e023      	b.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fa23 	bl	8003bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69d9      	ldr	r1, [r3, #28]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	61da      	str	r2, [r3, #28]
      break;
 80037a2:	e002      	b.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	75fb      	strb	r3, [r7, #23]
      break;
 80037a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a35      	ldr	r2, [pc, #212]	; (80038a4 <TIM_Base_SetConfig+0xe8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00b      	beq.n	80037ec <TIM_Base_SetConfig+0x30>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d007      	beq.n	80037ec <TIM_Base_SetConfig+0x30>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a32      	ldr	r2, [pc, #200]	; (80038a8 <TIM_Base_SetConfig+0xec>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0x30>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a31      	ldr	r2, [pc, #196]	; (80038ac <TIM_Base_SetConfig+0xf0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d108      	bne.n	80037fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <TIM_Base_SetConfig+0xe8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d017      	beq.n	8003836 <TIM_Base_SetConfig+0x7a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d013      	beq.n	8003836 <TIM_Base_SetConfig+0x7a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <TIM_Base_SetConfig+0xec>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00f      	beq.n	8003836 <TIM_Base_SetConfig+0x7a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a24      	ldr	r2, [pc, #144]	; (80038ac <TIM_Base_SetConfig+0xf0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00b      	beq.n	8003836 <TIM_Base_SetConfig+0x7a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a23      	ldr	r2, [pc, #140]	; (80038b0 <TIM_Base_SetConfig+0xf4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <TIM_Base_SetConfig+0x7a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <TIM_Base_SetConfig+0xf8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d003      	beq.n	8003836 <TIM_Base_SetConfig+0x7a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <TIM_Base_SetConfig+0xfc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d108      	bne.n	8003848 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <TIM_Base_SetConfig+0xe8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0xd0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <TIM_Base_SetConfig+0xf4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0xd0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a0d      	ldr	r2, [pc, #52]	; (80038b4 <TIM_Base_SetConfig+0xf8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0xd0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <TIM_Base_SetConfig+0xfc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d103      	bne.n	8003894 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	615a      	str	r2, [r3, #20]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800

080038bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0201 	bic.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 0302 	bic.w	r3, r3, #2
 8003904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <TIM_OC1_SetConfig+0xf8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00b      	beq.n	8003930 <TIM_OC1_SetConfig+0x74>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a27      	ldr	r2, [pc, #156]	; (80039b8 <TIM_OC1_SetConfig+0xfc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_OC1_SetConfig+0x74>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <TIM_OC1_SetConfig+0x100>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_OC1_SetConfig+0x74>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a25      	ldr	r2, [pc, #148]	; (80039c0 <TIM_OC1_SetConfig+0x104>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10c      	bne.n	800394a <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0308 	bic.w	r3, r3, #8
 8003936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <TIM_OC1_SetConfig+0xf8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00b      	beq.n	800396a <TIM_OC1_SetConfig+0xae>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <TIM_OC1_SetConfig+0xfc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <TIM_OC1_SetConfig+0xae>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIM_OC1_SetConfig+0x100>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <TIM_OC1_SetConfig+0xae>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <TIM_OC1_SetConfig+0x104>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800

080039c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f023 0210 	bic.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0320 	bic.w	r3, r3, #32
 8003a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a23      	ldr	r2, [pc, #140]	; (8003aac <TIM_OC2_SetConfig+0xe8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10d      	bne.n	8003a40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <TIM_OC2_SetConfig+0xe8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_OC2_SetConfig+0x9c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <TIM_OC2_SetConfig+0xec>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC2_SetConfig+0x9c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <TIM_OC2_SetConfig+0xf0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC2_SetConfig+0x9c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a17      	ldr	r2, [pc, #92]	; (8003ab8 <TIM_OC2_SetConfig+0xf4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d113      	bne.n	8003a88 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800

08003abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <TIM_OC3_SetConfig+0xe8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10d      	bne.n	8003b36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <TIM_OC3_SetConfig+0xe8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <TIM_OC3_SetConfig+0x9a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <TIM_OC3_SetConfig+0xec>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <TIM_OC3_SetConfig+0x9a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <TIM_OC3_SetConfig+0xf0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_OC3_SetConfig+0x9a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <TIM_OC3_SetConfig+0xf4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d113      	bne.n	8003b7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	031b      	lsls	r3, r3, #12
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <TIM_OC4_SetConfig+0xb0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <TIM_OC4_SetConfig+0x78>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <TIM_OC4_SetConfig+0xb4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_OC4_SetConfig+0x78>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <TIM_OC4_SetConfig+0xb8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC4_SetConfig+0x78>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <TIM_OC4_SetConfig+0xbc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d109      	bne.n	8003c40 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800

08003c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e04b      	b.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d00e      	beq.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10c      	bne.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40014000 	.word	0x40014000

08003d88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e03d      	b.n	8003e20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <__cvt>:
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	461f      	mov	r7, r3
 8003e32:	bfbb      	ittet	lt
 8003e34:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e38:	461f      	movlt	r7, r3
 8003e3a:	2300      	movge	r3, #0
 8003e3c:	232d      	movlt	r3, #45	; 0x2d
 8003e3e:	b088      	sub	sp, #32
 8003e40:	4614      	mov	r4, r2
 8003e42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e46:	7013      	strb	r3, [r2, #0]
 8003e48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e4a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003e4e:	f023 0820 	bic.w	r8, r3, #32
 8003e52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e56:	d005      	beq.n	8003e64 <__cvt+0x3a>
 8003e58:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e5c:	d100      	bne.n	8003e60 <__cvt+0x36>
 8003e5e:	3501      	adds	r5, #1
 8003e60:	2302      	movs	r3, #2
 8003e62:	e000      	b.n	8003e66 <__cvt+0x3c>
 8003e64:	2303      	movs	r3, #3
 8003e66:	aa07      	add	r2, sp, #28
 8003e68:	9204      	str	r2, [sp, #16]
 8003e6a:	aa06      	add	r2, sp, #24
 8003e6c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e70:	e9cd 3500 	strd	r3, r5, [sp]
 8003e74:	4622      	mov	r2, r4
 8003e76:	463b      	mov	r3, r7
 8003e78:	f001 f886 	bl	8004f88 <_dtoa_r>
 8003e7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e80:	4606      	mov	r6, r0
 8003e82:	d102      	bne.n	8003e8a <__cvt+0x60>
 8003e84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e86:	07db      	lsls	r3, r3, #31
 8003e88:	d522      	bpl.n	8003ed0 <__cvt+0xa6>
 8003e8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e8e:	eb06 0905 	add.w	r9, r6, r5
 8003e92:	d110      	bne.n	8003eb6 <__cvt+0x8c>
 8003e94:	7833      	ldrb	r3, [r6, #0]
 8003e96:	2b30      	cmp	r3, #48	; 0x30
 8003e98:	d10a      	bne.n	8003eb0 <__cvt+0x86>
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	4639      	mov	r1, r7
 8003ea2:	f7fc fde1 	bl	8000a68 <__aeabi_dcmpeq>
 8003ea6:	b918      	cbnz	r0, 8003eb0 <__cvt+0x86>
 8003ea8:	f1c5 0501 	rsb	r5, r5, #1
 8003eac:	f8ca 5000 	str.w	r5, [sl]
 8003eb0:	f8da 3000 	ldr.w	r3, [sl]
 8003eb4:	4499      	add	r9, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4620      	mov	r0, r4
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	f7fc fdd3 	bl	8000a68 <__aeabi_dcmpeq>
 8003ec2:	b108      	cbz	r0, 8003ec8 <__cvt+0x9e>
 8003ec4:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ec8:	2230      	movs	r2, #48	; 0x30
 8003eca:	9b07      	ldr	r3, [sp, #28]
 8003ecc:	454b      	cmp	r3, r9
 8003ece:	d307      	bcc.n	8003ee0 <__cvt+0xb6>
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	9b07      	ldr	r3, [sp, #28]
 8003ed4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ed6:	1b9b      	subs	r3, r3, r6
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	b008      	add	sp, #32
 8003edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee0:	1c59      	adds	r1, r3, #1
 8003ee2:	9107      	str	r1, [sp, #28]
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e7f0      	b.n	8003eca <__cvt+0xa0>

08003ee8 <__exponent>:
 8003ee8:	4603      	mov	r3, r0
 8003eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eec:	2900      	cmp	r1, #0
 8003eee:	f803 2b02 	strb.w	r2, [r3], #2
 8003ef2:	bfb6      	itet	lt
 8003ef4:	222d      	movlt	r2, #45	; 0x2d
 8003ef6:	222b      	movge	r2, #43	; 0x2b
 8003ef8:	4249      	neglt	r1, r1
 8003efa:	2909      	cmp	r1, #9
 8003efc:	7042      	strb	r2, [r0, #1]
 8003efe:	dd2a      	ble.n	8003f56 <__exponent+0x6e>
 8003f00:	f10d 0207 	add.w	r2, sp, #7
 8003f04:	4617      	mov	r7, r2
 8003f06:	260a      	movs	r6, #10
 8003f08:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f0c:	4694      	mov	ip, r2
 8003f0e:	fb06 1415 	mls	r4, r6, r5, r1
 8003f12:	3430      	adds	r4, #48	; 0x30
 8003f14:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003f18:	460c      	mov	r4, r1
 8003f1a:	2c63      	cmp	r4, #99	; 0x63
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f22:	dcf1      	bgt.n	8003f08 <__exponent+0x20>
 8003f24:	3130      	adds	r1, #48	; 0x30
 8003f26:	f1ac 0402 	sub.w	r4, ip, #2
 8003f2a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f2e:	4622      	mov	r2, r4
 8003f30:	1c41      	adds	r1, r0, #1
 8003f32:	42ba      	cmp	r2, r7
 8003f34:	d30a      	bcc.n	8003f4c <__exponent+0x64>
 8003f36:	f10d 0209 	add.w	r2, sp, #9
 8003f3a:	eba2 020c 	sub.w	r2, r2, ip
 8003f3e:	42bc      	cmp	r4, r7
 8003f40:	bf88      	it	hi
 8003f42:	2200      	movhi	r2, #0
 8003f44:	4413      	add	r3, r2
 8003f46:	1a18      	subs	r0, r3, r0
 8003f48:	b003      	add	sp, #12
 8003f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003f50:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003f54:	e7ed      	b.n	8003f32 <__exponent+0x4a>
 8003f56:	2330      	movs	r3, #48	; 0x30
 8003f58:	3130      	adds	r1, #48	; 0x30
 8003f5a:	7083      	strb	r3, [r0, #2]
 8003f5c:	70c1      	strb	r1, [r0, #3]
 8003f5e:	1d03      	adds	r3, r0, #4
 8003f60:	e7f1      	b.n	8003f46 <__exponent+0x5e>
	...

08003f64 <_printf_float>:
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	b091      	sub	sp, #68	; 0x44
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f70:	4616      	mov	r6, r2
 8003f72:	461f      	mov	r7, r3
 8003f74:	4605      	mov	r5, r0
 8003f76:	f000 fef3 	bl	8004d60 <_localeconv_r>
 8003f7a:	6803      	ldr	r3, [r0, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f80:	f7fc f946 	bl	8000210 <strlen>
 8003f84:	2300      	movs	r3, #0
 8003f86:	930e      	str	r3, [sp, #56]	; 0x38
 8003f88:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8c:	900a      	str	r0, [sp, #40]	; 0x28
 8003f8e:	3307      	adds	r3, #7
 8003f90:	f023 0307 	bic.w	r3, r3, #7
 8003f94:	f103 0208 	add.w	r2, r3, #8
 8003f98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f9c:	f8d4 b000 	ldr.w	fp, [r4]
 8003fa0:	f8c8 2000 	str.w	r2, [r8]
 8003fa4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003fa8:	4652      	mov	r2, sl
 8003faa:	4643      	mov	r3, r8
 8003fac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fb0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003fb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	4650      	mov	r0, sl
 8003fbc:	4b9c      	ldr	r3, [pc, #624]	; (8004230 <_printf_float+0x2cc>)
 8003fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fc0:	f7fc fd84 	bl	8000acc <__aeabi_dcmpun>
 8003fc4:	bb70      	cbnz	r0, 8004024 <_printf_float+0xc0>
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	4650      	mov	r0, sl
 8003fcc:	4b98      	ldr	r3, [pc, #608]	; (8004230 <_printf_float+0x2cc>)
 8003fce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fd0:	f7fc fd5e 	bl	8000a90 <__aeabi_dcmple>
 8003fd4:	bb30      	cbnz	r0, 8004024 <_printf_float+0xc0>
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4650      	mov	r0, sl
 8003fdc:	4641      	mov	r1, r8
 8003fde:	f7fc fd4d 	bl	8000a7c <__aeabi_dcmplt>
 8003fe2:	b110      	cbz	r0, 8003fea <_printf_float+0x86>
 8003fe4:	232d      	movs	r3, #45	; 0x2d
 8003fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fea:	4a92      	ldr	r2, [pc, #584]	; (8004234 <_printf_float+0x2d0>)
 8003fec:	4b92      	ldr	r3, [pc, #584]	; (8004238 <_printf_float+0x2d4>)
 8003fee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ff2:	bf94      	ite	ls
 8003ff4:	4690      	movls	r8, r2
 8003ff6:	4698      	movhi	r8, r3
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	f04f 0a00 	mov.w	sl, #0
 8003ffe:	6123      	str	r3, [r4, #16]
 8004000:	f02b 0304 	bic.w	r3, fp, #4
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	4633      	mov	r3, r6
 8004008:	4621      	mov	r1, r4
 800400a:	4628      	mov	r0, r5
 800400c:	9700      	str	r7, [sp, #0]
 800400e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004010:	f000 f9d6 	bl	80043c0 <_printf_common>
 8004014:	3001      	adds	r0, #1
 8004016:	f040 8090 	bne.w	800413a <_printf_float+0x1d6>
 800401a:	f04f 30ff 	mov.w	r0, #4294967295
 800401e:	b011      	add	sp, #68	; 0x44
 8004020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004024:	4652      	mov	r2, sl
 8004026:	4643      	mov	r3, r8
 8004028:	4650      	mov	r0, sl
 800402a:	4641      	mov	r1, r8
 800402c:	f7fc fd4e 	bl	8000acc <__aeabi_dcmpun>
 8004030:	b148      	cbz	r0, 8004046 <_printf_float+0xe2>
 8004032:	f1b8 0f00 	cmp.w	r8, #0
 8004036:	bfb8      	it	lt
 8004038:	232d      	movlt	r3, #45	; 0x2d
 800403a:	4a80      	ldr	r2, [pc, #512]	; (800423c <_printf_float+0x2d8>)
 800403c:	bfb8      	it	lt
 800403e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004042:	4b7f      	ldr	r3, [pc, #508]	; (8004240 <_printf_float+0x2dc>)
 8004044:	e7d3      	b.n	8003fee <_printf_float+0x8a>
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	d142      	bne.n	80040d6 <_printf_float+0x172>
 8004050:	2306      	movs	r3, #6
 8004052:	6063      	str	r3, [r4, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	9206      	str	r2, [sp, #24]
 8004058:	aa0e      	add	r2, sp, #56	; 0x38
 800405a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800405e:	aa0d      	add	r2, sp, #52	; 0x34
 8004060:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004064:	9203      	str	r2, [sp, #12]
 8004066:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800406a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	6863      	ldr	r3, [r4, #4]
 8004072:	4652      	mov	r2, sl
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4628      	mov	r0, r5
 8004078:	4643      	mov	r3, r8
 800407a:	910b      	str	r1, [sp, #44]	; 0x2c
 800407c:	f7ff fed5 	bl	8003e2a <__cvt>
 8004080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004082:	4680      	mov	r8, r0
 8004084:	2947      	cmp	r1, #71	; 0x47
 8004086:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004088:	d108      	bne.n	800409c <_printf_float+0x138>
 800408a:	1cc8      	adds	r0, r1, #3
 800408c:	db02      	blt.n	8004094 <_printf_float+0x130>
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	4299      	cmp	r1, r3
 8004092:	dd40      	ble.n	8004116 <_printf_float+0x1b2>
 8004094:	f1a9 0902 	sub.w	r9, r9, #2
 8004098:	fa5f f989 	uxtb.w	r9, r9
 800409c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040a0:	d81f      	bhi.n	80040e2 <_printf_float+0x17e>
 80040a2:	464a      	mov	r2, r9
 80040a4:	3901      	subs	r1, #1
 80040a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040aa:	910d      	str	r1, [sp, #52]	; 0x34
 80040ac:	f7ff ff1c 	bl	8003ee8 <__exponent>
 80040b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040b2:	4682      	mov	sl, r0
 80040b4:	1813      	adds	r3, r2, r0
 80040b6:	2a01      	cmp	r2, #1
 80040b8:	6123      	str	r3, [r4, #16]
 80040ba:	dc02      	bgt.n	80040c2 <_printf_float+0x15e>
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	07d2      	lsls	r2, r2, #31
 80040c0:	d501      	bpl.n	80040c6 <_printf_float+0x162>
 80040c2:	3301      	adds	r3, #1
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d09b      	beq.n	8004006 <_printf_float+0xa2>
 80040ce:	232d      	movs	r3, #45	; 0x2d
 80040d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d4:	e797      	b.n	8004006 <_printf_float+0xa2>
 80040d6:	2947      	cmp	r1, #71	; 0x47
 80040d8:	d1bc      	bne.n	8004054 <_printf_float+0xf0>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1ba      	bne.n	8004054 <_printf_float+0xf0>
 80040de:	2301      	movs	r3, #1
 80040e0:	e7b7      	b.n	8004052 <_printf_float+0xee>
 80040e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80040e6:	d118      	bne.n	800411a <_printf_float+0x1b6>
 80040e8:	2900      	cmp	r1, #0
 80040ea:	6863      	ldr	r3, [r4, #4]
 80040ec:	dd0b      	ble.n	8004106 <_printf_float+0x1a2>
 80040ee:	6121      	str	r1, [r4, #16]
 80040f0:	b913      	cbnz	r3, 80040f8 <_printf_float+0x194>
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	07d0      	lsls	r0, r2, #31
 80040f6:	d502      	bpl.n	80040fe <_printf_float+0x19a>
 80040f8:	3301      	adds	r3, #1
 80040fa:	440b      	add	r3, r1
 80040fc:	6123      	str	r3, [r4, #16]
 80040fe:	f04f 0a00 	mov.w	sl, #0
 8004102:	65a1      	str	r1, [r4, #88]	; 0x58
 8004104:	e7df      	b.n	80040c6 <_printf_float+0x162>
 8004106:	b913      	cbnz	r3, 800410e <_printf_float+0x1aa>
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	07d2      	lsls	r2, r2, #31
 800410c:	d501      	bpl.n	8004112 <_printf_float+0x1ae>
 800410e:	3302      	adds	r3, #2
 8004110:	e7f4      	b.n	80040fc <_printf_float+0x198>
 8004112:	2301      	movs	r3, #1
 8004114:	e7f2      	b.n	80040fc <_printf_float+0x198>
 8004116:	f04f 0967 	mov.w	r9, #103	; 0x67
 800411a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800411c:	4299      	cmp	r1, r3
 800411e:	db05      	blt.n	800412c <_printf_float+0x1c8>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	6121      	str	r1, [r4, #16]
 8004124:	07d8      	lsls	r0, r3, #31
 8004126:	d5ea      	bpl.n	80040fe <_printf_float+0x19a>
 8004128:	1c4b      	adds	r3, r1, #1
 800412a:	e7e7      	b.n	80040fc <_printf_float+0x198>
 800412c:	2900      	cmp	r1, #0
 800412e:	bfcc      	ite	gt
 8004130:	2201      	movgt	r2, #1
 8004132:	f1c1 0202 	rsble	r2, r1, #2
 8004136:	4413      	add	r3, r2
 8004138:	e7e0      	b.n	80040fc <_printf_float+0x198>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	055a      	lsls	r2, r3, #21
 800413e:	d407      	bmi.n	8004150 <_printf_float+0x1ec>
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	4642      	mov	r2, r8
 8004144:	4631      	mov	r1, r6
 8004146:	4628      	mov	r0, r5
 8004148:	47b8      	blx	r7
 800414a:	3001      	adds	r0, #1
 800414c:	d12b      	bne.n	80041a6 <_printf_float+0x242>
 800414e:	e764      	b.n	800401a <_printf_float+0xb6>
 8004150:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004154:	f240 80dd 	bls.w	8004312 <_printf_float+0x3ae>
 8004158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800415c:	2200      	movs	r2, #0
 800415e:	2300      	movs	r3, #0
 8004160:	f7fc fc82 	bl	8000a68 <__aeabi_dcmpeq>
 8004164:	2800      	cmp	r0, #0
 8004166:	d033      	beq.n	80041d0 <_printf_float+0x26c>
 8004168:	2301      	movs	r3, #1
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	4a35      	ldr	r2, [pc, #212]	; (8004244 <_printf_float+0x2e0>)
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f af51 	beq.w	800401a <_printf_float+0xb6>
 8004178:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800417c:	429a      	cmp	r2, r3
 800417e:	db02      	blt.n	8004186 <_printf_float+0x222>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	07d8      	lsls	r0, r3, #31
 8004184:	d50f      	bpl.n	80041a6 <_printf_float+0x242>
 8004186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	47b8      	blx	r7
 8004190:	3001      	adds	r0, #1
 8004192:	f43f af42 	beq.w	800401a <_printf_float+0xb6>
 8004196:	f04f 0800 	mov.w	r8, #0
 800419a:	f104 091a 	add.w	r9, r4, #26
 800419e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a0:	3b01      	subs	r3, #1
 80041a2:	4543      	cmp	r3, r8
 80041a4:	dc09      	bgt.n	80041ba <_printf_float+0x256>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	079b      	lsls	r3, r3, #30
 80041aa:	f100 8104 	bmi.w	80043b6 <_printf_float+0x452>
 80041ae:	68e0      	ldr	r0, [r4, #12]
 80041b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041b2:	4298      	cmp	r0, r3
 80041b4:	bfb8      	it	lt
 80041b6:	4618      	movlt	r0, r3
 80041b8:	e731      	b.n	800401e <_printf_float+0xba>
 80041ba:	2301      	movs	r3, #1
 80041bc:	464a      	mov	r2, r9
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	f43f af28 	beq.w	800401a <_printf_float+0xb6>
 80041ca:	f108 0801 	add.w	r8, r8, #1
 80041ce:	e7e6      	b.n	800419e <_printf_float+0x23a>
 80041d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dc38      	bgt.n	8004248 <_printf_float+0x2e4>
 80041d6:	2301      	movs	r3, #1
 80041d8:	4631      	mov	r1, r6
 80041da:	4628      	mov	r0, r5
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <_printf_float+0x2e0>)
 80041de:	47b8      	blx	r7
 80041e0:	3001      	adds	r0, #1
 80041e2:	f43f af1a 	beq.w	800401a <_printf_float+0xb6>
 80041e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d102      	bne.n	80041f4 <_printf_float+0x290>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	07d9      	lsls	r1, r3, #31
 80041f2:	d5d8      	bpl.n	80041a6 <_printf_float+0x242>
 80041f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041f8:	4631      	mov	r1, r6
 80041fa:	4628      	mov	r0, r5
 80041fc:	47b8      	blx	r7
 80041fe:	3001      	adds	r0, #1
 8004200:	f43f af0b 	beq.w	800401a <_printf_float+0xb6>
 8004204:	f04f 0900 	mov.w	r9, #0
 8004208:	f104 0a1a 	add.w	sl, r4, #26
 800420c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800420e:	425b      	negs	r3, r3
 8004210:	454b      	cmp	r3, r9
 8004212:	dc01      	bgt.n	8004218 <_printf_float+0x2b4>
 8004214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004216:	e794      	b.n	8004142 <_printf_float+0x1de>
 8004218:	2301      	movs	r3, #1
 800421a:	4652      	mov	r2, sl
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	f43f aef9 	beq.w	800401a <_printf_float+0xb6>
 8004228:	f109 0901 	add.w	r9, r9, #1
 800422c:	e7ee      	b.n	800420c <_printf_float+0x2a8>
 800422e:	bf00      	nop
 8004230:	7fefffff 	.word	0x7fefffff
 8004234:	080085fc 	.word	0x080085fc
 8004238:	08008600 	.word	0x08008600
 800423c:	08008604 	.word	0x08008604
 8004240:	08008608 	.word	0x08008608
 8004244:	0800860c 	.word	0x0800860c
 8004248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800424a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800424c:	429a      	cmp	r2, r3
 800424e:	bfa8      	it	ge
 8004250:	461a      	movge	r2, r3
 8004252:	2a00      	cmp	r2, #0
 8004254:	4691      	mov	r9, r2
 8004256:	dc37      	bgt.n	80042c8 <_printf_float+0x364>
 8004258:	f04f 0b00 	mov.w	fp, #0
 800425c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004260:	f104 021a 	add.w	r2, r4, #26
 8004264:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004268:	ebaa 0309 	sub.w	r3, sl, r9
 800426c:	455b      	cmp	r3, fp
 800426e:	dc33      	bgt.n	80042d8 <_printf_float+0x374>
 8004270:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004274:	429a      	cmp	r2, r3
 8004276:	db3b      	blt.n	80042f0 <_printf_float+0x38c>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	07da      	lsls	r2, r3, #31
 800427c:	d438      	bmi.n	80042f0 <_printf_float+0x38c>
 800427e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004282:	eba2 0903 	sub.w	r9, r2, r3
 8004286:	eba2 020a 	sub.w	r2, r2, sl
 800428a:	4591      	cmp	r9, r2
 800428c:	bfa8      	it	ge
 800428e:	4691      	movge	r9, r2
 8004290:	f1b9 0f00 	cmp.w	r9, #0
 8004294:	dc34      	bgt.n	8004300 <_printf_float+0x39c>
 8004296:	f04f 0800 	mov.w	r8, #0
 800429a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800429e:	f104 0a1a 	add.w	sl, r4, #26
 80042a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	eba3 0309 	sub.w	r3, r3, r9
 80042ac:	4543      	cmp	r3, r8
 80042ae:	f77f af7a 	ble.w	80041a6 <_printf_float+0x242>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	f43f aeac 	beq.w	800401a <_printf_float+0xb6>
 80042c2:	f108 0801 	add.w	r8, r8, #1
 80042c6:	e7ec      	b.n	80042a2 <_printf_float+0x33e>
 80042c8:	4613      	mov	r3, r2
 80042ca:	4631      	mov	r1, r6
 80042cc:	4642      	mov	r2, r8
 80042ce:	4628      	mov	r0, r5
 80042d0:	47b8      	blx	r7
 80042d2:	3001      	adds	r0, #1
 80042d4:	d1c0      	bne.n	8004258 <_printf_float+0x2f4>
 80042d6:	e6a0      	b.n	800401a <_printf_float+0xb6>
 80042d8:	2301      	movs	r3, #1
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	920b      	str	r2, [sp, #44]	; 0x2c
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	f43f ae99 	beq.w	800401a <_printf_float+0xb6>
 80042e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042ea:	f10b 0b01 	add.w	fp, fp, #1
 80042ee:	e7b9      	b.n	8004264 <_printf_float+0x300>
 80042f0:	4631      	mov	r1, r6
 80042f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	d1bf      	bne.n	800427e <_printf_float+0x31a>
 80042fe:	e68c      	b.n	800401a <_printf_float+0xb6>
 8004300:	464b      	mov	r3, r9
 8004302:	4631      	mov	r1, r6
 8004304:	4628      	mov	r0, r5
 8004306:	eb08 020a 	add.w	r2, r8, sl
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	d1c2      	bne.n	8004296 <_printf_float+0x332>
 8004310:	e683      	b.n	800401a <_printf_float+0xb6>
 8004312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004314:	2a01      	cmp	r2, #1
 8004316:	dc01      	bgt.n	800431c <_printf_float+0x3b8>
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d539      	bpl.n	8004390 <_printf_float+0x42c>
 800431c:	2301      	movs	r3, #1
 800431e:	4642      	mov	r2, r8
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f ae77 	beq.w	800401a <_printf_float+0xb6>
 800432c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004330:	4631      	mov	r1, r6
 8004332:	4628      	mov	r0, r5
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f ae6f 	beq.w	800401a <_printf_float+0xb6>
 800433c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004340:	2200      	movs	r2, #0
 8004342:	2300      	movs	r3, #0
 8004344:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004348:	f7fc fb8e 	bl	8000a68 <__aeabi_dcmpeq>
 800434c:	b9d8      	cbnz	r0, 8004386 <_printf_float+0x422>
 800434e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004352:	f108 0201 	add.w	r2, r8, #1
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	d10e      	bne.n	800437e <_printf_float+0x41a>
 8004360:	e65b      	b.n	800401a <_printf_float+0xb6>
 8004362:	2301      	movs	r3, #1
 8004364:	464a      	mov	r2, r9
 8004366:	4631      	mov	r1, r6
 8004368:	4628      	mov	r0, r5
 800436a:	47b8      	blx	r7
 800436c:	3001      	adds	r0, #1
 800436e:	f43f ae54 	beq.w	800401a <_printf_float+0xb6>
 8004372:	f108 0801 	add.w	r8, r8, #1
 8004376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004378:	3b01      	subs	r3, #1
 800437a:	4543      	cmp	r3, r8
 800437c:	dcf1      	bgt.n	8004362 <_printf_float+0x3fe>
 800437e:	4653      	mov	r3, sl
 8004380:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004384:	e6de      	b.n	8004144 <_printf_float+0x1e0>
 8004386:	f04f 0800 	mov.w	r8, #0
 800438a:	f104 091a 	add.w	r9, r4, #26
 800438e:	e7f2      	b.n	8004376 <_printf_float+0x412>
 8004390:	2301      	movs	r3, #1
 8004392:	4642      	mov	r2, r8
 8004394:	e7df      	b.n	8004356 <_printf_float+0x3f2>
 8004396:	2301      	movs	r3, #1
 8004398:	464a      	mov	r2, r9
 800439a:	4631      	mov	r1, r6
 800439c:	4628      	mov	r0, r5
 800439e:	47b8      	blx	r7
 80043a0:	3001      	adds	r0, #1
 80043a2:	f43f ae3a 	beq.w	800401a <_printf_float+0xb6>
 80043a6:	f108 0801 	add.w	r8, r8, #1
 80043aa:	68e3      	ldr	r3, [r4, #12]
 80043ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80043ae:	1a5b      	subs	r3, r3, r1
 80043b0:	4543      	cmp	r3, r8
 80043b2:	dcf0      	bgt.n	8004396 <_printf_float+0x432>
 80043b4:	e6fb      	b.n	80041ae <_printf_float+0x24a>
 80043b6:	f04f 0800 	mov.w	r8, #0
 80043ba:	f104 0919 	add.w	r9, r4, #25
 80043be:	e7f4      	b.n	80043aa <_printf_float+0x446>

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4699      	mov	r9, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	4607      	mov	r7, r0
 80043ce:	4293      	cmp	r3, r2
 80043d0:	bfb8      	it	lt
 80043d2:	4613      	movlt	r3, r2
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043da:	460c      	mov	r4, r1
 80043dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc2b      	bgt.n	8004460 <_printf_common+0xa0>
 8004408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800440c:	1e13      	subs	r3, r2, #0
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d430      	bmi.n	800447a <_printf_common+0xba>
 8004418:	4649      	mov	r1, r9
 800441a:	4638      	mov	r0, r7
 800441c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d023      	beq.n	800446e <_printf_common+0xae>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	6922      	ldr	r2, [r4, #16]
 800442a:	f003 0306 	and.w	r3, r3, #6
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf14      	ite	ne
 8004432:	2500      	movne	r5, #0
 8004434:	6833      	ldreq	r3, [r6, #0]
 8004436:	f04f 0600 	mov.w	r6, #0
 800443a:	bf08      	it	eq
 800443c:	68e5      	ldreq	r5, [r4, #12]
 800443e:	f104 041a 	add.w	r4, r4, #26
 8004442:	bf08      	it	eq
 8004444:	1aed      	subeq	r5, r5, r3
 8004446:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800444a:	bf08      	it	eq
 800444c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004450:	4293      	cmp	r3, r2
 8004452:	bfc4      	itt	gt
 8004454:	1a9b      	subgt	r3, r3, r2
 8004456:	18ed      	addgt	r5, r5, r3
 8004458:	42b5      	cmp	r5, r6
 800445a:	d11a      	bne.n	8004492 <_printf_common+0xd2>
 800445c:	2000      	movs	r0, #0
 800445e:	e008      	b.n	8004472 <_printf_common+0xb2>
 8004460:	2301      	movs	r3, #1
 8004462:	4652      	mov	r2, sl
 8004464:	4649      	mov	r1, r9
 8004466:	4638      	mov	r0, r7
 8004468:	47c0      	blx	r8
 800446a:	3001      	adds	r0, #1
 800446c:	d103      	bne.n	8004476 <_printf_common+0xb6>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004476:	3501      	adds	r5, #1
 8004478:	e7c1      	b.n	80043fe <_printf_common+0x3e>
 800447a:	2030      	movs	r0, #48	; 0x30
 800447c:	18e1      	adds	r1, r4, r3
 800447e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004488:	4422      	add	r2, r4
 800448a:	3302      	adds	r3, #2
 800448c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004490:	e7c2      	b.n	8004418 <_printf_common+0x58>
 8004492:	2301      	movs	r3, #1
 8004494:	4622      	mov	r2, r4
 8004496:	4649      	mov	r1, r9
 8004498:	4638      	mov	r0, r7
 800449a:	47c0      	blx	r8
 800449c:	3001      	adds	r0, #1
 800449e:	d0e6      	beq.n	800446e <_printf_common+0xae>
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7d9      	b.n	8004458 <_printf_common+0x98>

080044a4 <_printf_i>:
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	7e0f      	ldrb	r7, [r1, #24]
 80044aa:	4691      	mov	r9, r2
 80044ac:	2f78      	cmp	r7, #120	; 0x78
 80044ae:	4680      	mov	r8, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	469a      	mov	sl, r3
 80044b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ba:	d807      	bhi.n	80044cc <_printf_i+0x28>
 80044bc:	2f62      	cmp	r7, #98	; 0x62
 80044be:	d80a      	bhi.n	80044d6 <_printf_i+0x32>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	f000 80d5 	beq.w	8004670 <_printf_i+0x1cc>
 80044c6:	2f58      	cmp	r7, #88	; 0x58
 80044c8:	f000 80c1 	beq.w	800464e <_printf_i+0x1aa>
 80044cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044d4:	e03a      	b.n	800454c <_printf_i+0xa8>
 80044d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044da:	2b15      	cmp	r3, #21
 80044dc:	d8f6      	bhi.n	80044cc <_printf_i+0x28>
 80044de:	a101      	add	r1, pc, #4	; (adr r1, 80044e4 <_printf_i+0x40>)
 80044e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	08004551 	.word	0x08004551
 80044ec:	080044cd 	.word	0x080044cd
 80044f0:	080044cd 	.word	0x080044cd
 80044f4:	080044cd 	.word	0x080044cd
 80044f8:	080044cd 	.word	0x080044cd
 80044fc:	08004551 	.word	0x08004551
 8004500:	080044cd 	.word	0x080044cd
 8004504:	080044cd 	.word	0x080044cd
 8004508:	080044cd 	.word	0x080044cd
 800450c:	080044cd 	.word	0x080044cd
 8004510:	08004657 	.word	0x08004657
 8004514:	0800457d 	.word	0x0800457d
 8004518:	08004611 	.word	0x08004611
 800451c:	080044cd 	.word	0x080044cd
 8004520:	080044cd 	.word	0x080044cd
 8004524:	08004679 	.word	0x08004679
 8004528:	080044cd 	.word	0x080044cd
 800452c:	0800457d 	.word	0x0800457d
 8004530:	080044cd 	.word	0x080044cd
 8004534:	080044cd 	.word	0x080044cd
 8004538:	08004619 	.word	0x08004619
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e0a0      	b.n	8004692 <_printf_i+0x1ee>
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	682b      	ldr	r3, [r5, #0]
 8004554:	0607      	lsls	r7, r0, #24
 8004556:	f103 0104 	add.w	r1, r3, #4
 800455a:	6029      	str	r1, [r5, #0]
 800455c:	d501      	bpl.n	8004562 <_printf_i+0xbe>
 800455e:	681e      	ldr	r6, [r3, #0]
 8004560:	e003      	b.n	800456a <_printf_i+0xc6>
 8004562:	0646      	lsls	r6, r0, #25
 8004564:	d5fb      	bpl.n	800455e <_printf_i+0xba>
 8004566:	f9b3 6000 	ldrsh.w	r6, [r3]
 800456a:	2e00      	cmp	r6, #0
 800456c:	da03      	bge.n	8004576 <_printf_i+0xd2>
 800456e:	232d      	movs	r3, #45	; 0x2d
 8004570:	4276      	negs	r6, r6
 8004572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004576:	230a      	movs	r3, #10
 8004578:	4859      	ldr	r0, [pc, #356]	; (80046e0 <_printf_i+0x23c>)
 800457a:	e012      	b.n	80045a2 <_printf_i+0xfe>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	1d19      	adds	r1, r3, #4
 8004582:	6029      	str	r1, [r5, #0]
 8004584:	0605      	lsls	r5, r0, #24
 8004586:	d501      	bpl.n	800458c <_printf_i+0xe8>
 8004588:	681e      	ldr	r6, [r3, #0]
 800458a:	e002      	b.n	8004592 <_printf_i+0xee>
 800458c:	0641      	lsls	r1, r0, #25
 800458e:	d5fb      	bpl.n	8004588 <_printf_i+0xe4>
 8004590:	881e      	ldrh	r6, [r3, #0]
 8004592:	2f6f      	cmp	r7, #111	; 0x6f
 8004594:	bf0c      	ite	eq
 8004596:	2308      	moveq	r3, #8
 8004598:	230a      	movne	r3, #10
 800459a:	4851      	ldr	r0, [pc, #324]	; (80046e0 <_printf_i+0x23c>)
 800459c:	2100      	movs	r1, #0
 800459e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045a2:	6865      	ldr	r5, [r4, #4]
 80045a4:	2d00      	cmp	r5, #0
 80045a6:	bfa8      	it	ge
 80045a8:	6821      	ldrge	r1, [r4, #0]
 80045aa:	60a5      	str	r5, [r4, #8]
 80045ac:	bfa4      	itt	ge
 80045ae:	f021 0104 	bicge.w	r1, r1, #4
 80045b2:	6021      	strge	r1, [r4, #0]
 80045b4:	b90e      	cbnz	r6, 80045ba <_printf_i+0x116>
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	d04b      	beq.n	8004652 <_printf_i+0x1ae>
 80045ba:	4615      	mov	r5, r2
 80045bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80045c0:	fb03 6711 	mls	r7, r3, r1, r6
 80045c4:	5dc7      	ldrb	r7, [r0, r7]
 80045c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ca:	4637      	mov	r7, r6
 80045cc:	42bb      	cmp	r3, r7
 80045ce:	460e      	mov	r6, r1
 80045d0:	d9f4      	bls.n	80045bc <_printf_i+0x118>
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d10b      	bne.n	80045ee <_printf_i+0x14a>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	07de      	lsls	r6, r3, #31
 80045da:	d508      	bpl.n	80045ee <_printf_i+0x14a>
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	6861      	ldr	r1, [r4, #4]
 80045e0:	4299      	cmp	r1, r3
 80045e2:	bfde      	ittt	le
 80045e4:	2330      	movle	r3, #48	; 0x30
 80045e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045ee:	1b52      	subs	r2, r2, r5
 80045f0:	6122      	str	r2, [r4, #16]
 80045f2:	464b      	mov	r3, r9
 80045f4:	4621      	mov	r1, r4
 80045f6:	4640      	mov	r0, r8
 80045f8:	f8cd a000 	str.w	sl, [sp]
 80045fc:	aa03      	add	r2, sp, #12
 80045fe:	f7ff fedf 	bl	80043c0 <_printf_common>
 8004602:	3001      	adds	r0, #1
 8004604:	d14a      	bne.n	800469c <_printf_i+0x1f8>
 8004606:	f04f 30ff 	mov.w	r0, #4294967295
 800460a:	b004      	add	sp, #16
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	2778      	movs	r7, #120	; 0x78
 800461a:	4832      	ldr	r0, [pc, #200]	; (80046e4 <_printf_i+0x240>)
 800461c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	6829      	ldr	r1, [r5, #0]
 8004624:	061f      	lsls	r7, r3, #24
 8004626:	f851 6b04 	ldr.w	r6, [r1], #4
 800462a:	d402      	bmi.n	8004632 <_printf_i+0x18e>
 800462c:	065f      	lsls	r7, r3, #25
 800462e:	bf48      	it	mi
 8004630:	b2b6      	uxthmi	r6, r6
 8004632:	07df      	lsls	r7, r3, #31
 8004634:	bf48      	it	mi
 8004636:	f043 0320 	orrmi.w	r3, r3, #32
 800463a:	6029      	str	r1, [r5, #0]
 800463c:	bf48      	it	mi
 800463e:	6023      	strmi	r3, [r4, #0]
 8004640:	b91e      	cbnz	r6, 800464a <_printf_i+0x1a6>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f023 0320 	bic.w	r3, r3, #32
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	2310      	movs	r3, #16
 800464c:	e7a6      	b.n	800459c <_printf_i+0xf8>
 800464e:	4824      	ldr	r0, [pc, #144]	; (80046e0 <_printf_i+0x23c>)
 8004650:	e7e4      	b.n	800461c <_printf_i+0x178>
 8004652:	4615      	mov	r5, r2
 8004654:	e7bd      	b.n	80045d2 <_printf_i+0x12e>
 8004656:	682b      	ldr	r3, [r5, #0]
 8004658:	6826      	ldr	r6, [r4, #0]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6961      	ldr	r1, [r4, #20]
 800465e:	6028      	str	r0, [r5, #0]
 8004660:	0635      	lsls	r5, r6, #24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	d501      	bpl.n	800466a <_printf_i+0x1c6>
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	e002      	b.n	8004670 <_printf_i+0x1cc>
 800466a:	0670      	lsls	r0, r6, #25
 800466c:	d5fb      	bpl.n	8004666 <_printf_i+0x1c2>
 800466e:	8019      	strh	r1, [r3, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	4615      	mov	r5, r2
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	e7bc      	b.n	80045f2 <_printf_i+0x14e>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	2100      	movs	r1, #0
 800467c:	1d1a      	adds	r2, r3, #4
 800467e:	602a      	str	r2, [r5, #0]
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	6862      	ldr	r2, [r4, #4]
 8004684:	4628      	mov	r0, r5
 8004686:	f000 fbe2 	bl	8004e4e <memchr>
 800468a:	b108      	cbz	r0, 8004690 <_printf_i+0x1ec>
 800468c:	1b40      	subs	r0, r0, r5
 800468e:	6060      	str	r0, [r4, #4]
 8004690:	6863      	ldr	r3, [r4, #4]
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	2300      	movs	r3, #0
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469a:	e7aa      	b.n	80045f2 <_printf_i+0x14e>
 800469c:	462a      	mov	r2, r5
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	47d0      	blx	sl
 80046a6:	3001      	adds	r0, #1
 80046a8:	d0ad      	beq.n	8004606 <_printf_i+0x162>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	079b      	lsls	r3, r3, #30
 80046ae:	d413      	bmi.n	80046d8 <_printf_i+0x234>
 80046b0:	68e0      	ldr	r0, [r4, #12]
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	4298      	cmp	r0, r3
 80046b6:	bfb8      	it	lt
 80046b8:	4618      	movlt	r0, r3
 80046ba:	e7a6      	b.n	800460a <_printf_i+0x166>
 80046bc:	2301      	movs	r3, #1
 80046be:	4632      	mov	r2, r6
 80046c0:	4649      	mov	r1, r9
 80046c2:	4640      	mov	r0, r8
 80046c4:	47d0      	blx	sl
 80046c6:	3001      	adds	r0, #1
 80046c8:	d09d      	beq.n	8004606 <_printf_i+0x162>
 80046ca:	3501      	adds	r5, #1
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	9903      	ldr	r1, [sp, #12]
 80046d0:	1a5b      	subs	r3, r3, r1
 80046d2:	42ab      	cmp	r3, r5
 80046d4:	dcf2      	bgt.n	80046bc <_printf_i+0x218>
 80046d6:	e7eb      	b.n	80046b0 <_printf_i+0x20c>
 80046d8:	2500      	movs	r5, #0
 80046da:	f104 0619 	add.w	r6, r4, #25
 80046de:	e7f5      	b.n	80046cc <_printf_i+0x228>
 80046e0:	0800860e 	.word	0x0800860e
 80046e4:	0800861f 	.word	0x0800861f

080046e8 <_scanf_float>:
 80046e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ec:	b087      	sub	sp, #28
 80046ee:	9303      	str	r3, [sp, #12]
 80046f0:	688b      	ldr	r3, [r1, #8]
 80046f2:	4617      	mov	r7, r2
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80046fa:	bf85      	ittet	hi
 80046fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004700:	195b      	addhi	r3, r3, r5
 8004702:	2300      	movls	r3, #0
 8004704:	9302      	strhi	r3, [sp, #8]
 8004706:	bf88      	it	hi
 8004708:	f240 135d 	movwhi	r3, #349	; 0x15d
 800470c:	468b      	mov	fp, r1
 800470e:	f04f 0500 	mov.w	r5, #0
 8004712:	bf8c      	ite	hi
 8004714:	608b      	strhi	r3, [r1, #8]
 8004716:	9302      	strls	r3, [sp, #8]
 8004718:	680b      	ldr	r3, [r1, #0]
 800471a:	4680      	mov	r8, r0
 800471c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004720:	f84b 3b1c 	str.w	r3, [fp], #28
 8004724:	460c      	mov	r4, r1
 8004726:	465e      	mov	r6, fp
 8004728:	46aa      	mov	sl, r5
 800472a:	46a9      	mov	r9, r5
 800472c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004730:	9501      	str	r5, [sp, #4]
 8004732:	68a2      	ldr	r2, [r4, #8]
 8004734:	b152      	cbz	r2, 800474c <_scanf_float+0x64>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b4e      	cmp	r3, #78	; 0x4e
 800473c:	d864      	bhi.n	8004808 <_scanf_float+0x120>
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d83c      	bhi.n	80047bc <_scanf_float+0xd4>
 8004742:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004746:	b2c8      	uxtb	r0, r1
 8004748:	280e      	cmp	r0, #14
 800474a:	d93a      	bls.n	80047c2 <_scanf_float+0xda>
 800474c:	f1b9 0f00 	cmp.w	r9, #0
 8004750:	d003      	beq.n	800475a <_scanf_float+0x72>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800475e:	f1ba 0f01 	cmp.w	sl, #1
 8004762:	f200 8113 	bhi.w	800498c <_scanf_float+0x2a4>
 8004766:	455e      	cmp	r6, fp
 8004768:	f200 8105 	bhi.w	8004976 <_scanf_float+0x28e>
 800476c:	2501      	movs	r5, #1
 800476e:	4628      	mov	r0, r5
 8004770:	b007      	add	sp, #28
 8004772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004776:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800477a:	2a0d      	cmp	r2, #13
 800477c:	d8e6      	bhi.n	800474c <_scanf_float+0x64>
 800477e:	a101      	add	r1, pc, #4	; (adr r1, 8004784 <_scanf_float+0x9c>)
 8004780:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004784:	080048c3 	.word	0x080048c3
 8004788:	0800474d 	.word	0x0800474d
 800478c:	0800474d 	.word	0x0800474d
 8004790:	0800474d 	.word	0x0800474d
 8004794:	08004923 	.word	0x08004923
 8004798:	080048fb 	.word	0x080048fb
 800479c:	0800474d 	.word	0x0800474d
 80047a0:	0800474d 	.word	0x0800474d
 80047a4:	080048d1 	.word	0x080048d1
 80047a8:	0800474d 	.word	0x0800474d
 80047ac:	0800474d 	.word	0x0800474d
 80047b0:	0800474d 	.word	0x0800474d
 80047b4:	0800474d 	.word	0x0800474d
 80047b8:	08004889 	.word	0x08004889
 80047bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80047c0:	e7db      	b.n	800477a <_scanf_float+0x92>
 80047c2:	290e      	cmp	r1, #14
 80047c4:	d8c2      	bhi.n	800474c <_scanf_float+0x64>
 80047c6:	a001      	add	r0, pc, #4	; (adr r0, 80047cc <_scanf_float+0xe4>)
 80047c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80047cc:	0800487b 	.word	0x0800487b
 80047d0:	0800474d 	.word	0x0800474d
 80047d4:	0800487b 	.word	0x0800487b
 80047d8:	0800490f 	.word	0x0800490f
 80047dc:	0800474d 	.word	0x0800474d
 80047e0:	08004829 	.word	0x08004829
 80047e4:	08004865 	.word	0x08004865
 80047e8:	08004865 	.word	0x08004865
 80047ec:	08004865 	.word	0x08004865
 80047f0:	08004865 	.word	0x08004865
 80047f4:	08004865 	.word	0x08004865
 80047f8:	08004865 	.word	0x08004865
 80047fc:	08004865 	.word	0x08004865
 8004800:	08004865 	.word	0x08004865
 8004804:	08004865 	.word	0x08004865
 8004808:	2b6e      	cmp	r3, #110	; 0x6e
 800480a:	d809      	bhi.n	8004820 <_scanf_float+0x138>
 800480c:	2b60      	cmp	r3, #96	; 0x60
 800480e:	d8b2      	bhi.n	8004776 <_scanf_float+0x8e>
 8004810:	2b54      	cmp	r3, #84	; 0x54
 8004812:	d077      	beq.n	8004904 <_scanf_float+0x21c>
 8004814:	2b59      	cmp	r3, #89	; 0x59
 8004816:	d199      	bne.n	800474c <_scanf_float+0x64>
 8004818:	2d07      	cmp	r5, #7
 800481a:	d197      	bne.n	800474c <_scanf_float+0x64>
 800481c:	2508      	movs	r5, #8
 800481e:	e029      	b.n	8004874 <_scanf_float+0x18c>
 8004820:	2b74      	cmp	r3, #116	; 0x74
 8004822:	d06f      	beq.n	8004904 <_scanf_float+0x21c>
 8004824:	2b79      	cmp	r3, #121	; 0x79
 8004826:	e7f6      	b.n	8004816 <_scanf_float+0x12e>
 8004828:	6821      	ldr	r1, [r4, #0]
 800482a:	05c8      	lsls	r0, r1, #23
 800482c:	d51a      	bpl.n	8004864 <_scanf_float+0x17c>
 800482e:	9b02      	ldr	r3, [sp, #8]
 8004830:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004834:	6021      	str	r1, [r4, #0]
 8004836:	f109 0901 	add.w	r9, r9, #1
 800483a:	b11b      	cbz	r3, 8004844 <_scanf_float+0x15c>
 800483c:	3b01      	subs	r3, #1
 800483e:	3201      	adds	r2, #1
 8004840:	9302      	str	r3, [sp, #8]
 8004842:	60a2      	str	r2, [r4, #8]
 8004844:	68a3      	ldr	r3, [r4, #8]
 8004846:	3b01      	subs	r3, #1
 8004848:	60a3      	str	r3, [r4, #8]
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	3301      	adds	r3, #1
 800484e:	6123      	str	r3, [r4, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3b01      	subs	r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	f340 8084 	ble.w	8004964 <_scanf_float+0x27c>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	e766      	b.n	8004732 <_scanf_float+0x4a>
 8004864:	eb1a 0f05 	cmn.w	sl, r5
 8004868:	f47f af70 	bne.w	800474c <_scanf_float+0x64>
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004872:	6022      	str	r2, [r4, #0]
 8004874:	f806 3b01 	strb.w	r3, [r6], #1
 8004878:	e7e4      	b.n	8004844 <_scanf_float+0x15c>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	0610      	lsls	r0, r2, #24
 800487e:	f57f af65 	bpl.w	800474c <_scanf_float+0x64>
 8004882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004886:	e7f4      	b.n	8004872 <_scanf_float+0x18a>
 8004888:	f1ba 0f00 	cmp.w	sl, #0
 800488c:	d10e      	bne.n	80048ac <_scanf_float+0x1c4>
 800488e:	f1b9 0f00 	cmp.w	r9, #0
 8004892:	d10e      	bne.n	80048b2 <_scanf_float+0x1ca>
 8004894:	6822      	ldr	r2, [r4, #0]
 8004896:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800489a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800489e:	d108      	bne.n	80048b2 <_scanf_float+0x1ca>
 80048a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80048a4:	f04f 0a01 	mov.w	sl, #1
 80048a8:	6022      	str	r2, [r4, #0]
 80048aa:	e7e3      	b.n	8004874 <_scanf_float+0x18c>
 80048ac:	f1ba 0f02 	cmp.w	sl, #2
 80048b0:	d055      	beq.n	800495e <_scanf_float+0x276>
 80048b2:	2d01      	cmp	r5, #1
 80048b4:	d002      	beq.n	80048bc <_scanf_float+0x1d4>
 80048b6:	2d04      	cmp	r5, #4
 80048b8:	f47f af48 	bne.w	800474c <_scanf_float+0x64>
 80048bc:	3501      	adds	r5, #1
 80048be:	b2ed      	uxtb	r5, r5
 80048c0:	e7d8      	b.n	8004874 <_scanf_float+0x18c>
 80048c2:	f1ba 0f01 	cmp.w	sl, #1
 80048c6:	f47f af41 	bne.w	800474c <_scanf_float+0x64>
 80048ca:	f04f 0a02 	mov.w	sl, #2
 80048ce:	e7d1      	b.n	8004874 <_scanf_float+0x18c>
 80048d0:	b97d      	cbnz	r5, 80048f2 <_scanf_float+0x20a>
 80048d2:	f1b9 0f00 	cmp.w	r9, #0
 80048d6:	f47f af3c 	bne.w	8004752 <_scanf_float+0x6a>
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80048e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80048e4:	f47f af39 	bne.w	800475a <_scanf_float+0x72>
 80048e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80048ec:	2501      	movs	r5, #1
 80048ee:	6022      	str	r2, [r4, #0]
 80048f0:	e7c0      	b.n	8004874 <_scanf_float+0x18c>
 80048f2:	2d03      	cmp	r5, #3
 80048f4:	d0e2      	beq.n	80048bc <_scanf_float+0x1d4>
 80048f6:	2d05      	cmp	r5, #5
 80048f8:	e7de      	b.n	80048b8 <_scanf_float+0x1d0>
 80048fa:	2d02      	cmp	r5, #2
 80048fc:	f47f af26 	bne.w	800474c <_scanf_float+0x64>
 8004900:	2503      	movs	r5, #3
 8004902:	e7b7      	b.n	8004874 <_scanf_float+0x18c>
 8004904:	2d06      	cmp	r5, #6
 8004906:	f47f af21 	bne.w	800474c <_scanf_float+0x64>
 800490a:	2507      	movs	r5, #7
 800490c:	e7b2      	b.n	8004874 <_scanf_float+0x18c>
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	0591      	lsls	r1, r2, #22
 8004912:	f57f af1b 	bpl.w	800474c <_scanf_float+0x64>
 8004916:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800491a:	6022      	str	r2, [r4, #0]
 800491c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004920:	e7a8      	b.n	8004874 <_scanf_float+0x18c>
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004928:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800492c:	d006      	beq.n	800493c <_scanf_float+0x254>
 800492e:	0550      	lsls	r0, r2, #21
 8004930:	f57f af0c 	bpl.w	800474c <_scanf_float+0x64>
 8004934:	f1b9 0f00 	cmp.w	r9, #0
 8004938:	f43f af0f 	beq.w	800475a <_scanf_float+0x72>
 800493c:	0591      	lsls	r1, r2, #22
 800493e:	bf58      	it	pl
 8004940:	9901      	ldrpl	r1, [sp, #4]
 8004942:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004946:	bf58      	it	pl
 8004948:	eba9 0101 	subpl.w	r1, r9, r1
 800494c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	bf58      	it	pl
 8004956:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	e78a      	b.n	8004874 <_scanf_float+0x18c>
 800495e:	f04f 0a03 	mov.w	sl, #3
 8004962:	e787      	b.n	8004874 <_scanf_float+0x18c>
 8004964:	4639      	mov	r1, r7
 8004966:	4640      	mov	r0, r8
 8004968:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800496c:	4798      	blx	r3
 800496e:	2800      	cmp	r0, #0
 8004970:	f43f aedf 	beq.w	8004732 <_scanf_float+0x4a>
 8004974:	e6ea      	b.n	800474c <_scanf_float+0x64>
 8004976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800497a:	463a      	mov	r2, r7
 800497c:	4640      	mov	r0, r8
 800497e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004982:	4798      	blx	r3
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	3b01      	subs	r3, #1
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	e6ec      	b.n	8004766 <_scanf_float+0x7e>
 800498c:	1e6b      	subs	r3, r5, #1
 800498e:	2b06      	cmp	r3, #6
 8004990:	d825      	bhi.n	80049de <_scanf_float+0x2f6>
 8004992:	2d02      	cmp	r5, #2
 8004994:	d836      	bhi.n	8004a04 <_scanf_float+0x31c>
 8004996:	455e      	cmp	r6, fp
 8004998:	f67f aee8 	bls.w	800476c <_scanf_float+0x84>
 800499c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049a0:	463a      	mov	r2, r7
 80049a2:	4640      	mov	r0, r8
 80049a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049a8:	4798      	blx	r3
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	e7f1      	b.n	8004996 <_scanf_float+0x2ae>
 80049b2:	9802      	ldr	r0, [sp, #8]
 80049b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80049bc:	463a      	mov	r2, r7
 80049be:	9002      	str	r0, [sp, #8]
 80049c0:	4640      	mov	r0, r8
 80049c2:	4798      	blx	r3
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	6123      	str	r3, [r4, #16]
 80049ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049ce:	fa5f fa8a 	uxtb.w	sl, sl
 80049d2:	f1ba 0f02 	cmp.w	sl, #2
 80049d6:	d1ec      	bne.n	80049b2 <_scanf_float+0x2ca>
 80049d8:	3d03      	subs	r5, #3
 80049da:	b2ed      	uxtb	r5, r5
 80049dc:	1b76      	subs	r6, r6, r5
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	05da      	lsls	r2, r3, #23
 80049e2:	d52f      	bpl.n	8004a44 <_scanf_float+0x35c>
 80049e4:	055b      	lsls	r3, r3, #21
 80049e6:	d510      	bpl.n	8004a0a <_scanf_float+0x322>
 80049e8:	455e      	cmp	r6, fp
 80049ea:	f67f aebf 	bls.w	800476c <_scanf_float+0x84>
 80049ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049f2:	463a      	mov	r2, r7
 80049f4:	4640      	mov	r0, r8
 80049f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049fa:	4798      	blx	r3
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	e7f1      	b.n	80049e8 <_scanf_float+0x300>
 8004a04:	46aa      	mov	sl, r5
 8004a06:	9602      	str	r6, [sp, #8]
 8004a08:	e7df      	b.n	80049ca <_scanf_float+0x2e2>
 8004a0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a0e:	6923      	ldr	r3, [r4, #16]
 8004a10:	2965      	cmp	r1, #101	; 0x65
 8004a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a16:	f106 35ff 	add.w	r5, r6, #4294967295
 8004a1a:	6123      	str	r3, [r4, #16]
 8004a1c:	d00c      	beq.n	8004a38 <_scanf_float+0x350>
 8004a1e:	2945      	cmp	r1, #69	; 0x45
 8004a20:	d00a      	beq.n	8004a38 <_scanf_float+0x350>
 8004a22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a26:	463a      	mov	r2, r7
 8004a28:	4640      	mov	r0, r8
 8004a2a:	4798      	blx	r3
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	1eb5      	subs	r5, r6, #2
 8004a36:	6123      	str	r3, [r4, #16]
 8004a38:	463a      	mov	r2, r7
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a40:	4798      	blx	r3
 8004a42:	462e      	mov	r6, r5
 8004a44:	6825      	ldr	r5, [r4, #0]
 8004a46:	f015 0510 	ands.w	r5, r5, #16
 8004a4a:	d155      	bne.n	8004af8 <_scanf_float+0x410>
 8004a4c:	7035      	strb	r5, [r6, #0]
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a58:	d11d      	bne.n	8004a96 <_scanf_float+0x3ae>
 8004a5a:	9b01      	ldr	r3, [sp, #4]
 8004a5c:	454b      	cmp	r3, r9
 8004a5e:	eba3 0209 	sub.w	r2, r3, r9
 8004a62:	d125      	bne.n	8004ab0 <_scanf_float+0x3c8>
 8004a64:	2200      	movs	r2, #0
 8004a66:	4659      	mov	r1, fp
 8004a68:	4640      	mov	r0, r8
 8004a6a:	f002 fc21 	bl	80072b0 <_strtod_r>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	f8d4 c000 	ldr.w	ip, [r4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f01c 0f02 	tst.w	ip, #2
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	460f      	mov	r7, r1
 8004a7e:	f103 0204 	add.w	r2, r3, #4
 8004a82:	d020      	beq.n	8004ac6 <_scanf_float+0x3de>
 8004a84:	9903      	ldr	r1, [sp, #12]
 8004a86:	600a      	str	r2, [r1, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	e9c3 6700 	strd	r6, r7, [r3]
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60e3      	str	r3, [r4, #12]
 8004a94:	e66b      	b.n	800476e <_scanf_float+0x86>
 8004a96:	9b04      	ldr	r3, [sp, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0e3      	beq.n	8004a64 <_scanf_float+0x37c>
 8004a9c:	9905      	ldr	r1, [sp, #20]
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	462a      	mov	r2, r5
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	3101      	adds	r1, #1
 8004aa6:	f002 fc87 	bl	80073b8 <_strtol_r>
 8004aaa:	9b04      	ldr	r3, [sp, #16]
 8004aac:	9e05      	ldr	r6, [sp, #20]
 8004aae:	1ac2      	subs	r2, r0, r3
 8004ab0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ab4:	429e      	cmp	r6, r3
 8004ab6:	bf28      	it	cs
 8004ab8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004abc:	4630      	mov	r0, r6
 8004abe:	490f      	ldr	r1, [pc, #60]	; (8004afc <_scanf_float+0x414>)
 8004ac0:	f000 f8e2 	bl	8004c88 <siprintf>
 8004ac4:	e7ce      	b.n	8004a64 <_scanf_float+0x37c>
 8004ac6:	f01c 0f04 	tst.w	ip, #4
 8004aca:	d1db      	bne.n	8004a84 <_scanf_float+0x39c>
 8004acc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004ad0:	f8cc 2000 	str.w	r2, [ip]
 8004ad4:	f8d3 8000 	ldr.w	r8, [r3]
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	f7fb fff6 	bl	8000acc <__aeabi_dcmpun>
 8004ae0:	b128      	cbz	r0, 8004aee <_scanf_float+0x406>
 8004ae2:	4807      	ldr	r0, [pc, #28]	; (8004b00 <_scanf_float+0x418>)
 8004ae4:	f000 f9c2 	bl	8004e6c <nanf>
 8004ae8:	f8c8 0000 	str.w	r0, [r8]
 8004aec:	e7cf      	b.n	8004a8e <_scanf_float+0x3a6>
 8004aee:	4630      	mov	r0, r6
 8004af0:	4639      	mov	r1, r7
 8004af2:	f7fc f849 	bl	8000b88 <__aeabi_d2f>
 8004af6:	e7f7      	b.n	8004ae8 <_scanf_float+0x400>
 8004af8:	2500      	movs	r5, #0
 8004afa:	e638      	b.n	800476e <_scanf_float+0x86>
 8004afc:	08008630 	.word	0x08008630
 8004b00:	080089c5 	.word	0x080089c5

08004b04 <std>:
 8004b04:	2300      	movs	r3, #0
 8004b06:	b510      	push	{r4, lr}
 8004b08:	4604      	mov	r4, r0
 8004b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b12:	6083      	str	r3, [r0, #8]
 8004b14:	8181      	strh	r1, [r0, #12]
 8004b16:	6643      	str	r3, [r0, #100]	; 0x64
 8004b18:	81c2      	strh	r2, [r0, #14]
 8004b1a:	6183      	str	r3, [r0, #24]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	2208      	movs	r2, #8
 8004b20:	305c      	adds	r0, #92	; 0x5c
 8004b22:	f000 f914 	bl	8004d4e <memset>
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <std+0x58>)
 8004b28:	6224      	str	r4, [r4, #32]
 8004b2a:	6263      	str	r3, [r4, #36]	; 0x24
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <std+0x5c>)
 8004b2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <std+0x60>)
 8004b32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <std+0x64>)
 8004b36:	6323      	str	r3, [r4, #48]	; 0x30
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <std+0x68>)
 8004b3a:	429c      	cmp	r4, r3
 8004b3c:	d006      	beq.n	8004b4c <std+0x48>
 8004b3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b42:	4294      	cmp	r4, r2
 8004b44:	d002      	beq.n	8004b4c <std+0x48>
 8004b46:	33d0      	adds	r3, #208	; 0xd0
 8004b48:	429c      	cmp	r4, r3
 8004b4a:	d105      	bne.n	8004b58 <std+0x54>
 8004b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b54:	f000 b978 	b.w	8004e48 <__retarget_lock_init_recursive>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	bf00      	nop
 8004b5c:	08004cc9 	.word	0x08004cc9
 8004b60:	08004ceb 	.word	0x08004ceb
 8004b64:	08004d23 	.word	0x08004d23
 8004b68:	08004d47 	.word	0x08004d47
 8004b6c:	200002b0 	.word	0x200002b0

08004b70 <stdio_exit_handler>:
 8004b70:	4a02      	ldr	r2, [pc, #8]	; (8004b7c <stdio_exit_handler+0xc>)
 8004b72:	4903      	ldr	r1, [pc, #12]	; (8004b80 <stdio_exit_handler+0x10>)
 8004b74:	4803      	ldr	r0, [pc, #12]	; (8004b84 <stdio_exit_handler+0x14>)
 8004b76:	f000 b869 	b.w	8004c4c <_fwalk_sglue>
 8004b7a:	bf00      	nop
 8004b7c:	20000010 	.word	0x20000010
 8004b80:	08007771 	.word	0x08007771
 8004b84:	2000001c 	.word	0x2000001c

08004b88 <cleanup_stdio>:
 8004b88:	6841      	ldr	r1, [r0, #4]
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <cleanup_stdio+0x34>)
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	4299      	cmp	r1, r3
 8004b90:	4604      	mov	r4, r0
 8004b92:	d001      	beq.n	8004b98 <cleanup_stdio+0x10>
 8004b94:	f002 fdec 	bl	8007770 <_fflush_r>
 8004b98:	68a1      	ldr	r1, [r4, #8]
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <cleanup_stdio+0x38>)
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d002      	beq.n	8004ba6 <cleanup_stdio+0x1e>
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f002 fde5 	bl	8007770 <_fflush_r>
 8004ba6:	68e1      	ldr	r1, [r4, #12]
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <cleanup_stdio+0x3c>)
 8004baa:	4299      	cmp	r1, r3
 8004bac:	d004      	beq.n	8004bb8 <cleanup_stdio+0x30>
 8004bae:	4620      	mov	r0, r4
 8004bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb4:	f002 bddc 	b.w	8007770 <_fflush_r>
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	bf00      	nop
 8004bbc:	200002b0 	.word	0x200002b0
 8004bc0:	20000318 	.word	0x20000318
 8004bc4:	20000380 	.word	0x20000380

08004bc8 <global_stdio_init.part.0>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <global_stdio_init.part.0+0x30>)
 8004bcc:	4c0b      	ldr	r4, [pc, #44]	; (8004bfc <global_stdio_init.part.0+0x34>)
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <global_stdio_init.part.0+0x38>)
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f7ff ff94 	bl	8004b04 <std>
 8004bdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004be0:	2201      	movs	r2, #1
 8004be2:	2109      	movs	r1, #9
 8004be4:	f7ff ff8e 	bl	8004b04 <std>
 8004be8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bec:	2202      	movs	r2, #2
 8004bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf2:	2112      	movs	r1, #18
 8004bf4:	f7ff bf86 	b.w	8004b04 <std>
 8004bf8:	200003e8 	.word	0x200003e8
 8004bfc:	200002b0 	.word	0x200002b0
 8004c00:	08004b71 	.word	0x08004b71

08004c04 <__sfp_lock_acquire>:
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <__sfp_lock_acquire+0x8>)
 8004c06:	f000 b920 	b.w	8004e4a <__retarget_lock_acquire_recursive>
 8004c0a:	bf00      	nop
 8004c0c:	200003f1 	.word	0x200003f1

08004c10 <__sfp_lock_release>:
 8004c10:	4801      	ldr	r0, [pc, #4]	; (8004c18 <__sfp_lock_release+0x8>)
 8004c12:	f000 b91b 	b.w	8004e4c <__retarget_lock_release_recursive>
 8004c16:	bf00      	nop
 8004c18:	200003f1 	.word	0x200003f1

08004c1c <__sinit>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	4604      	mov	r4, r0
 8004c20:	f7ff fff0 	bl	8004c04 <__sfp_lock_acquire>
 8004c24:	6a23      	ldr	r3, [r4, #32]
 8004c26:	b11b      	cbz	r3, 8004c30 <__sinit+0x14>
 8004c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c2c:	f7ff bff0 	b.w	8004c10 <__sfp_lock_release>
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <__sinit+0x28>)
 8004c32:	6223      	str	r3, [r4, #32]
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <__sinit+0x2c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f5      	bne.n	8004c28 <__sinit+0xc>
 8004c3c:	f7ff ffc4 	bl	8004bc8 <global_stdio_init.part.0>
 8004c40:	e7f2      	b.n	8004c28 <__sinit+0xc>
 8004c42:	bf00      	nop
 8004c44:	08004b89 	.word	0x08004b89
 8004c48:	200003e8 	.word	0x200003e8

08004c4c <_fwalk_sglue>:
 8004c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c50:	4607      	mov	r7, r0
 8004c52:	4688      	mov	r8, r1
 8004c54:	4614      	mov	r4, r2
 8004c56:	2600      	movs	r6, #0
 8004c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8004c60:	d505      	bpl.n	8004c6e <_fwalk_sglue+0x22>
 8004c62:	6824      	ldr	r4, [r4, #0]
 8004c64:	2c00      	cmp	r4, #0
 8004c66:	d1f7      	bne.n	8004c58 <_fwalk_sglue+0xc>
 8004c68:	4630      	mov	r0, r6
 8004c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6e:	89ab      	ldrh	r3, [r5, #12]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d907      	bls.n	8004c84 <_fwalk_sglue+0x38>
 8004c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	d003      	beq.n	8004c84 <_fwalk_sglue+0x38>
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c0      	blx	r8
 8004c82:	4306      	orrs	r6, r0
 8004c84:	3568      	adds	r5, #104	; 0x68
 8004c86:	e7e9      	b.n	8004c5c <_fwalk_sglue+0x10>

08004c88 <siprintf>:
 8004c88:	b40e      	push	{r1, r2, r3}
 8004c8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c8e:	b500      	push	{lr}
 8004c90:	b09c      	sub	sp, #112	; 0x70
 8004c92:	ab1d      	add	r3, sp, #116	; 0x74
 8004c94:	9002      	str	r0, [sp, #8]
 8004c96:	9006      	str	r0, [sp, #24]
 8004c98:	9107      	str	r1, [sp, #28]
 8004c9a:	9104      	str	r1, [sp, #16]
 8004c9c:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <siprintf+0x38>)
 8004c9e:	4909      	ldr	r1, [pc, #36]	; (8004cc4 <siprintf+0x3c>)
 8004ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca4:	9105      	str	r1, [sp, #20]
 8004ca6:	6800      	ldr	r0, [r0, #0]
 8004ca8:	a902      	add	r1, sp, #8
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	f002 fbe0 	bl	8007470 <_svfiprintf_r>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	9b02      	ldr	r3, [sp, #8]
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	b01c      	add	sp, #112	; 0x70
 8004cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cbc:	b003      	add	sp, #12
 8004cbe:	4770      	bx	lr
 8004cc0:	20000068 	.word	0x20000068
 8004cc4:	ffff0208 	.word	0xffff0208

08004cc8 <__sread>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd0:	f000 f86c 	bl	8004dac <_read_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	bfab      	itete	ge
 8004cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cda:	89a3      	ldrhlt	r3, [r4, #12]
 8004cdc:	181b      	addge	r3, r3, r0
 8004cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ce2:	bfac      	ite	ge
 8004ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ce6:	81a3      	strhlt	r3, [r4, #12]
 8004ce8:	bd10      	pop	{r4, pc}

08004cea <__swrite>:
 8004cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	461f      	mov	r7, r3
 8004cf0:	898b      	ldrh	r3, [r1, #12]
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	05db      	lsls	r3, r3, #23
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	d505      	bpl.n	8004d08 <__swrite+0x1e>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d04:	f000 f840 	bl	8004d88 <_lseek_r>
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	4632      	mov	r2, r6
 8004d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	4628      	mov	r0, r5
 8004d14:	463b      	mov	r3, r7
 8004d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1e:	f000 b857 	b.w	8004dd0 <_write_r>

08004d22 <__sseek>:
 8004d22:	b510      	push	{r4, lr}
 8004d24:	460c      	mov	r4, r1
 8004d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2a:	f000 f82d 	bl	8004d88 <_lseek_r>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	bf15      	itete	ne
 8004d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d3e:	81a3      	strheq	r3, [r4, #12]
 8004d40:	bf18      	it	ne
 8004d42:	81a3      	strhne	r3, [r4, #12]
 8004d44:	bd10      	pop	{r4, pc}

08004d46 <__sclose>:
 8004d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4a:	f000 b80d 	b.w	8004d68 <_close_r>

08004d4e <memset>:
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4402      	add	r2, r0
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d100      	bne.n	8004d58 <memset+0xa>
 8004d56:	4770      	bx	lr
 8004d58:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5c:	e7f9      	b.n	8004d52 <memset+0x4>
	...

08004d60 <_localeconv_r>:
 8004d60:	4800      	ldr	r0, [pc, #0]	; (8004d64 <_localeconv_r+0x4>)
 8004d62:	4770      	bx	lr
 8004d64:	2000015c 	.word	0x2000015c

08004d68 <_close_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4d05      	ldr	r5, [pc, #20]	; (8004d84 <_close_r+0x1c>)
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fc fd45 	bl	8001802 <_close>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_close_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_close_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	200003ec 	.word	0x200003ec

08004d88 <_lseek_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	2200      	movs	r2, #0
 8004d92:	4d05      	ldr	r5, [pc, #20]	; (8004da8 <_lseek_r+0x20>)
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc fd57 	bl	800184a <_lseek>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_lseek_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_lseek_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	200003ec 	.word	0x200003ec

08004dac <_read_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	2200      	movs	r2, #0
 8004db6:	4d05      	ldr	r5, [pc, #20]	; (8004dcc <_read_r+0x20>)
 8004db8:	602a      	str	r2, [r5, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7fc fce8 	bl	8001790 <_read>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_read_r+0x1e>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_read_r+0x1e>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	200003ec 	.word	0x200003ec

08004dd0 <_write_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4d05      	ldr	r5, [pc, #20]	; (8004df0 <_write_r+0x20>)
 8004ddc:	602a      	str	r2, [r5, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f7fc fcf3 	bl	80017ca <_write>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_write_r+0x1e>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_write_r+0x1e>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	200003ec 	.word	0x200003ec

08004df4 <__errno>:
 8004df4:	4b01      	ldr	r3, [pc, #4]	; (8004dfc <__errno+0x8>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000068 	.word	0x20000068

08004e00 <__libc_init_array>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	2600      	movs	r6, #0
 8004e04:	4d0c      	ldr	r5, [pc, #48]	; (8004e38 <__libc_init_array+0x38>)
 8004e06:	4c0d      	ldr	r4, [pc, #52]	; (8004e3c <__libc_init_array+0x3c>)
 8004e08:	1b64      	subs	r4, r4, r5
 8004e0a:	10a4      	asrs	r4, r4, #2
 8004e0c:	42a6      	cmp	r6, r4
 8004e0e:	d109      	bne.n	8004e24 <__libc_init_array+0x24>
 8004e10:	f003 fbc0 	bl	8008594 <_init>
 8004e14:	2600      	movs	r6, #0
 8004e16:	4d0a      	ldr	r5, [pc, #40]	; (8004e40 <__libc_init_array+0x40>)
 8004e18:	4c0a      	ldr	r4, [pc, #40]	; (8004e44 <__libc_init_array+0x44>)
 8004e1a:	1b64      	subs	r4, r4, r5
 8004e1c:	10a4      	asrs	r4, r4, #2
 8004e1e:	42a6      	cmp	r6, r4
 8004e20:	d105      	bne.n	8004e2e <__libc_init_array+0x2e>
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e28:	4798      	blx	r3
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7ee      	b.n	8004e0c <__libc_init_array+0xc>
 8004e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e32:	4798      	blx	r3
 8004e34:	3601      	adds	r6, #1
 8004e36:	e7f2      	b.n	8004e1e <__libc_init_array+0x1e>
 8004e38:	08008a28 	.word	0x08008a28
 8004e3c:	08008a28 	.word	0x08008a28
 8004e40:	08008a28 	.word	0x08008a28
 8004e44:	08008a2c 	.word	0x08008a2c

08004e48 <__retarget_lock_init_recursive>:
 8004e48:	4770      	bx	lr

08004e4a <__retarget_lock_acquire_recursive>:
 8004e4a:	4770      	bx	lr

08004e4c <__retarget_lock_release_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <memchr>:
 8004e4e:	4603      	mov	r3, r0
 8004e50:	b510      	push	{r4, lr}
 8004e52:	b2c9      	uxtb	r1, r1
 8004e54:	4402      	add	r2, r0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	d101      	bne.n	8004e60 <memchr+0x12>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	e003      	b.n	8004e68 <memchr+0x1a>
 8004e60:	7804      	ldrb	r4, [r0, #0]
 8004e62:	3301      	adds	r3, #1
 8004e64:	428c      	cmp	r4, r1
 8004e66:	d1f6      	bne.n	8004e56 <memchr+0x8>
 8004e68:	bd10      	pop	{r4, pc}
	...

08004e6c <nanf>:
 8004e6c:	4800      	ldr	r0, [pc, #0]	; (8004e70 <nanf+0x4>)
 8004e6e:	4770      	bx	lr
 8004e70:	7fc00000 	.word	0x7fc00000

08004e74 <quorem>:
 8004e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	6903      	ldr	r3, [r0, #16]
 8004e7a:	690c      	ldr	r4, [r1, #16]
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	db7f      	blt.n	8004f82 <quorem+0x10e>
 8004e82:	3c01      	subs	r4, #1
 8004e84:	f100 0514 	add.w	r5, r0, #20
 8004e88:	f101 0814 	add.w	r8, r1, #20
 8004e8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ea2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eaa:	d331      	bcc.n	8004f10 <quorem+0x9c>
 8004eac:	f04f 0e00 	mov.w	lr, #0
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	46ac      	mov	ip, r5
 8004eb4:	46f2      	mov	sl, lr
 8004eb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8004eba:	b293      	uxth	r3, r2
 8004ebc:	fb06 e303 	mla	r3, r6, r3, lr
 8004ec0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ec4:	0c1a      	lsrs	r2, r3, #16
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	fb06 220e 	mla	r2, r6, lr, r2
 8004ecc:	ebaa 0303 	sub.w	r3, sl, r3
 8004ed0:	f8dc a000 	ldr.w	sl, [ip]
 8004ed4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ed8:	fa1f fa8a 	uxth.w	sl, sl
 8004edc:	4453      	add	r3, sl
 8004ede:	f8dc a000 	ldr.w	sl, [ip]
 8004ee2:	b292      	uxth	r2, r2
 8004ee4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ef2:	4581      	cmp	r9, r0
 8004ef4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ef8:	f84c 3b04 	str.w	r3, [ip], #4
 8004efc:	d2db      	bcs.n	8004eb6 <quorem+0x42>
 8004efe:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f02:	b92b      	cbnz	r3, 8004f10 <quorem+0x9c>
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	3b04      	subs	r3, #4
 8004f08:	429d      	cmp	r5, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	d32d      	bcc.n	8004f6a <quorem+0xf6>
 8004f0e:	613c      	str	r4, [r7, #16]
 8004f10:	4638      	mov	r0, r7
 8004f12:	f001 f9dd 	bl	80062d0 <__mcmp>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	db23      	blt.n	8004f62 <quorem+0xee>
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	3601      	adds	r6, #1
 8004f20:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f24:	f8d1 c000 	ldr.w	ip, [r1]
 8004f28:	b293      	uxth	r3, r2
 8004f2a:	1ac3      	subs	r3, r0, r3
 8004f2c:	0c12      	lsrs	r2, r2, #16
 8004f2e:	fa1f f08c 	uxth.w	r0, ip
 8004f32:	4403      	add	r3, r0
 8004f34:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f42:	45c1      	cmp	r9, r8
 8004f44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f48:	f841 3b04 	str.w	r3, [r1], #4
 8004f4c:	d2e8      	bcs.n	8004f20 <quorem+0xac>
 8004f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f56:	b922      	cbnz	r2, 8004f62 <quorem+0xee>
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	429d      	cmp	r5, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	d30a      	bcc.n	8004f76 <quorem+0x102>
 8004f60:	613c      	str	r4, [r7, #16]
 8004f62:	4630      	mov	r0, r6
 8004f64:	b003      	add	sp, #12
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	3b04      	subs	r3, #4
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	d1cd      	bne.n	8004f0e <quorem+0x9a>
 8004f72:	3c01      	subs	r4, #1
 8004f74:	e7c8      	b.n	8004f08 <quorem+0x94>
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d1f0      	bne.n	8004f60 <quorem+0xec>
 8004f7e:	3c01      	subs	r4, #1
 8004f80:	e7eb      	b.n	8004f5a <quorem+0xe6>
 8004f82:	2000      	movs	r0, #0
 8004f84:	e7ee      	b.n	8004f64 <quorem+0xf0>
	...

08004f88 <_dtoa_r>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	461f      	mov	r7, r3
 8004f90:	69c4      	ldr	r4, [r0, #28]
 8004f92:	b099      	sub	sp, #100	; 0x64
 8004f94:	4605      	mov	r5, r0
 8004f96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004f9e:	b974      	cbnz	r4, 8004fbe <_dtoa_r+0x36>
 8004fa0:	2010      	movs	r0, #16
 8004fa2:	f000 fe1d 	bl	8005be0 <malloc>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	61e8      	str	r0, [r5, #28]
 8004faa:	b920      	cbnz	r0, 8004fb6 <_dtoa_r+0x2e>
 8004fac:	21ef      	movs	r1, #239	; 0xef
 8004fae:	4bac      	ldr	r3, [pc, #688]	; (8005260 <_dtoa_r+0x2d8>)
 8004fb0:	48ac      	ldr	r0, [pc, #688]	; (8005264 <_dtoa_r+0x2dc>)
 8004fb2:	f002 fc55 	bl	8007860 <__assert_func>
 8004fb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fba:	6004      	str	r4, [r0, #0]
 8004fbc:	60c4      	str	r4, [r0, #12]
 8004fbe:	69eb      	ldr	r3, [r5, #28]
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	b151      	cbz	r1, 8004fda <_dtoa_r+0x52>
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4093      	lsls	r3, r2
 8004fca:	604a      	str	r2, [r1, #4]
 8004fcc:	608b      	str	r3, [r1, #8]
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 fefa 	bl	8005dc8 <_Bfree>
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	69eb      	ldr	r3, [r5, #28]
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	1e3b      	subs	r3, r7, #0
 8004fdc:	bfaf      	iteee	ge
 8004fde:	2300      	movge	r3, #0
 8004fe0:	2201      	movlt	r2, #1
 8004fe2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fe6:	9305      	strlt	r3, [sp, #20]
 8004fe8:	bfa8      	it	ge
 8004fea:	f8c8 3000 	strge.w	r3, [r8]
 8004fee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004ff2:	4b9d      	ldr	r3, [pc, #628]	; (8005268 <_dtoa_r+0x2e0>)
 8004ff4:	bfb8      	it	lt
 8004ff6:	f8c8 2000 	strlt.w	r2, [r8]
 8004ffa:	ea33 0309 	bics.w	r3, r3, r9
 8004ffe:	d119      	bne.n	8005034 <_dtoa_r+0xac>
 8005000:	f242 730f 	movw	r3, #9999	; 0x270f
 8005004:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800500c:	4333      	orrs	r3, r6
 800500e:	f000 8589 	beq.w	8005b24 <_dtoa_r+0xb9c>
 8005012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005014:	b953      	cbnz	r3, 800502c <_dtoa_r+0xa4>
 8005016:	4b95      	ldr	r3, [pc, #596]	; (800526c <_dtoa_r+0x2e4>)
 8005018:	e023      	b.n	8005062 <_dtoa_r+0xda>
 800501a:	4b95      	ldr	r3, [pc, #596]	; (8005270 <_dtoa_r+0x2e8>)
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	3308      	adds	r3, #8
 8005020:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	9803      	ldr	r0, [sp, #12]
 8005026:	b019      	add	sp, #100	; 0x64
 8005028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502c:	4b8f      	ldr	r3, [pc, #572]	; (800526c <_dtoa_r+0x2e4>)
 800502e:	9303      	str	r3, [sp, #12]
 8005030:	3303      	adds	r3, #3
 8005032:	e7f5      	b.n	8005020 <_dtoa_r+0x98>
 8005034:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005038:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800503c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	f7fb fd10 	bl	8000a68 <__aeabi_dcmpeq>
 8005048:	4680      	mov	r8, r0
 800504a:	b160      	cbz	r0, 8005066 <_dtoa_r+0xde>
 800504c:	2301      	movs	r3, #1
 800504e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8562 	beq.w	8005b1e <_dtoa_r+0xb96>
 800505a:	4b86      	ldr	r3, [pc, #536]	; (8005274 <_dtoa_r+0x2ec>)
 800505c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	3b01      	subs	r3, #1
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	e7de      	b.n	8005024 <_dtoa_r+0x9c>
 8005066:	ab16      	add	r3, sp, #88	; 0x58
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	ab17      	add	r3, sp, #92	; 0x5c
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	4628      	mov	r0, r5
 8005070:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005074:	f001 fa3c 	bl	80064f0 <__d2b>
 8005078:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800507c:	4682      	mov	sl, r0
 800507e:	2c00      	cmp	r4, #0
 8005080:	d07e      	beq.n	8005180 <_dtoa_r+0x1f8>
 8005082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005088:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800508c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005090:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005094:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005098:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800509c:	4619      	mov	r1, r3
 800509e:	2200      	movs	r2, #0
 80050a0:	4b75      	ldr	r3, [pc, #468]	; (8005278 <_dtoa_r+0x2f0>)
 80050a2:	f7fb f8c1 	bl	8000228 <__aeabi_dsub>
 80050a6:	a368      	add	r3, pc, #416	; (adr r3, 8005248 <_dtoa_r+0x2c0>)
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f7fb fa74 	bl	8000598 <__aeabi_dmul>
 80050b0:	a367      	add	r3, pc, #412	; (adr r3, 8005250 <_dtoa_r+0x2c8>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f7fb f8b9 	bl	800022c <__adddf3>
 80050ba:	4606      	mov	r6, r0
 80050bc:	4620      	mov	r0, r4
 80050be:	460f      	mov	r7, r1
 80050c0:	f7fb fa00 	bl	80004c4 <__aeabi_i2d>
 80050c4:	a364      	add	r3, pc, #400	; (adr r3, 8005258 <_dtoa_r+0x2d0>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb fa65 	bl	8000598 <__aeabi_dmul>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4630      	mov	r0, r6
 80050d4:	4639      	mov	r1, r7
 80050d6:	f7fb f8a9 	bl	800022c <__adddf3>
 80050da:	4606      	mov	r6, r0
 80050dc:	460f      	mov	r7, r1
 80050de:	f7fb fd0b 	bl	8000af8 <__aeabi_d2iz>
 80050e2:	2200      	movs	r2, #0
 80050e4:	4683      	mov	fp, r0
 80050e6:	2300      	movs	r3, #0
 80050e8:	4630      	mov	r0, r6
 80050ea:	4639      	mov	r1, r7
 80050ec:	f7fb fcc6 	bl	8000a7c <__aeabi_dcmplt>
 80050f0:	b148      	cbz	r0, 8005106 <_dtoa_r+0x17e>
 80050f2:	4658      	mov	r0, fp
 80050f4:	f7fb f9e6 	bl	80004c4 <__aeabi_i2d>
 80050f8:	4632      	mov	r2, r6
 80050fa:	463b      	mov	r3, r7
 80050fc:	f7fb fcb4 	bl	8000a68 <__aeabi_dcmpeq>
 8005100:	b908      	cbnz	r0, 8005106 <_dtoa_r+0x17e>
 8005102:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005106:	f1bb 0f16 	cmp.w	fp, #22
 800510a:	d857      	bhi.n	80051bc <_dtoa_r+0x234>
 800510c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005110:	4b5a      	ldr	r3, [pc, #360]	; (800527c <_dtoa_r+0x2f4>)
 8005112:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	f7fb fcaf 	bl	8000a7c <__aeabi_dcmplt>
 800511e:	2800      	cmp	r0, #0
 8005120:	d04e      	beq.n	80051c0 <_dtoa_r+0x238>
 8005122:	2300      	movs	r3, #0
 8005124:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005128:	930f      	str	r3, [sp, #60]	; 0x3c
 800512a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800512c:	1b1b      	subs	r3, r3, r4
 800512e:	1e5a      	subs	r2, r3, #1
 8005130:	bf46      	itte	mi
 8005132:	f1c3 0901 	rsbmi	r9, r3, #1
 8005136:	2300      	movmi	r3, #0
 8005138:	f04f 0900 	movpl.w	r9, #0
 800513c:	9209      	str	r2, [sp, #36]	; 0x24
 800513e:	bf48      	it	mi
 8005140:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005142:	f1bb 0f00 	cmp.w	fp, #0
 8005146:	db3d      	blt.n	80051c4 <_dtoa_r+0x23c>
 8005148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800514e:	445b      	add	r3, fp
 8005150:	9309      	str	r3, [sp, #36]	; 0x24
 8005152:	2300      	movs	r3, #0
 8005154:	930a      	str	r3, [sp, #40]	; 0x28
 8005156:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005158:	2b09      	cmp	r3, #9
 800515a:	d867      	bhi.n	800522c <_dtoa_r+0x2a4>
 800515c:	2b05      	cmp	r3, #5
 800515e:	bfc4      	itt	gt
 8005160:	3b04      	subgt	r3, #4
 8005162:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005166:	bfc8      	it	gt
 8005168:	2400      	movgt	r4, #0
 800516a:	f1a3 0302 	sub.w	r3, r3, #2
 800516e:	bfd8      	it	le
 8005170:	2401      	movle	r4, #1
 8005172:	2b03      	cmp	r3, #3
 8005174:	f200 8086 	bhi.w	8005284 <_dtoa_r+0x2fc>
 8005178:	e8df f003 	tbb	[pc, r3]
 800517c:	5637392c 	.word	0x5637392c
 8005180:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005184:	441c      	add	r4, r3
 8005186:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800518a:	2b20      	cmp	r3, #32
 800518c:	bfc1      	itttt	gt
 800518e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005192:	fa09 f903 	lslgt.w	r9, r9, r3
 8005196:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800519a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800519e:	bfd6      	itet	le
 80051a0:	f1c3 0320 	rsble	r3, r3, #32
 80051a4:	ea49 0003 	orrgt.w	r0, r9, r3
 80051a8:	fa06 f003 	lslle.w	r0, r6, r3
 80051ac:	f7fb f97a 	bl	80004a4 <__aeabi_ui2d>
 80051b0:	2201      	movs	r2, #1
 80051b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80051b6:	3c01      	subs	r4, #1
 80051b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80051ba:	e76f      	b.n	800509c <_dtoa_r+0x114>
 80051bc:	2301      	movs	r3, #1
 80051be:	e7b3      	b.n	8005128 <_dtoa_r+0x1a0>
 80051c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80051c2:	e7b2      	b.n	800512a <_dtoa_r+0x1a2>
 80051c4:	f1cb 0300 	rsb	r3, fp, #0
 80051c8:	930a      	str	r3, [sp, #40]	; 0x28
 80051ca:	2300      	movs	r3, #0
 80051cc:	eba9 090b 	sub.w	r9, r9, fp
 80051d0:	930e      	str	r3, [sp, #56]	; 0x38
 80051d2:	e7c0      	b.n	8005156 <_dtoa_r+0x1ce>
 80051d4:	2300      	movs	r3, #0
 80051d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	dc55      	bgt.n	800528a <_dtoa_r+0x302>
 80051de:	2301      	movs	r3, #1
 80051e0:	461a      	mov	r2, r3
 80051e2:	9306      	str	r3, [sp, #24]
 80051e4:	9308      	str	r3, [sp, #32]
 80051e6:	9223      	str	r2, [sp, #140]	; 0x8c
 80051e8:	e00b      	b.n	8005202 <_dtoa_r+0x27a>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e7f3      	b.n	80051d6 <_dtoa_r+0x24e>
 80051ee:	2300      	movs	r3, #0
 80051f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051f4:	445b      	add	r3, fp
 80051f6:	9306      	str	r3, [sp, #24]
 80051f8:	3301      	adds	r3, #1
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	9308      	str	r3, [sp, #32]
 80051fe:	bfb8      	it	lt
 8005200:	2301      	movlt	r3, #1
 8005202:	2100      	movs	r1, #0
 8005204:	2204      	movs	r2, #4
 8005206:	69e8      	ldr	r0, [r5, #28]
 8005208:	f102 0614 	add.w	r6, r2, #20
 800520c:	429e      	cmp	r6, r3
 800520e:	d940      	bls.n	8005292 <_dtoa_r+0x30a>
 8005210:	6041      	str	r1, [r0, #4]
 8005212:	4628      	mov	r0, r5
 8005214:	f000 fd98 	bl	8005d48 <_Balloc>
 8005218:	9003      	str	r0, [sp, #12]
 800521a:	2800      	cmp	r0, #0
 800521c:	d13c      	bne.n	8005298 <_dtoa_r+0x310>
 800521e:	4602      	mov	r2, r0
 8005220:	f240 11af 	movw	r1, #431	; 0x1af
 8005224:	4b16      	ldr	r3, [pc, #88]	; (8005280 <_dtoa_r+0x2f8>)
 8005226:	e6c3      	b.n	8004fb0 <_dtoa_r+0x28>
 8005228:	2301      	movs	r3, #1
 800522a:	e7e1      	b.n	80051f0 <_dtoa_r+0x268>
 800522c:	2401      	movs	r4, #1
 800522e:	2300      	movs	r3, #0
 8005230:	940b      	str	r4, [sp, #44]	; 0x2c
 8005232:	9322      	str	r3, [sp, #136]	; 0x88
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
 8005238:	2200      	movs	r2, #0
 800523a:	9306      	str	r3, [sp, #24]
 800523c:	9308      	str	r3, [sp, #32]
 800523e:	2312      	movs	r3, #18
 8005240:	e7d1      	b.n	80051e6 <_dtoa_r+0x25e>
 8005242:	bf00      	nop
 8005244:	f3af 8000 	nop.w
 8005248:	636f4361 	.word	0x636f4361
 800524c:	3fd287a7 	.word	0x3fd287a7
 8005250:	8b60c8b3 	.word	0x8b60c8b3
 8005254:	3fc68a28 	.word	0x3fc68a28
 8005258:	509f79fb 	.word	0x509f79fb
 800525c:	3fd34413 	.word	0x3fd34413
 8005260:	08008642 	.word	0x08008642
 8005264:	08008659 	.word	0x08008659
 8005268:	7ff00000 	.word	0x7ff00000
 800526c:	0800863e 	.word	0x0800863e
 8005270:	08008635 	.word	0x08008635
 8005274:	0800860d 	.word	0x0800860d
 8005278:	3ff80000 	.word	0x3ff80000
 800527c:	08008748 	.word	0x08008748
 8005280:	080086b1 	.word	0x080086b1
 8005284:	2301      	movs	r3, #1
 8005286:	930b      	str	r3, [sp, #44]	; 0x2c
 8005288:	e7d4      	b.n	8005234 <_dtoa_r+0x2ac>
 800528a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800528c:	9306      	str	r3, [sp, #24]
 800528e:	9308      	str	r3, [sp, #32]
 8005290:	e7b7      	b.n	8005202 <_dtoa_r+0x27a>
 8005292:	3101      	adds	r1, #1
 8005294:	0052      	lsls	r2, r2, #1
 8005296:	e7b7      	b.n	8005208 <_dtoa_r+0x280>
 8005298:	69eb      	ldr	r3, [r5, #28]
 800529a:	9a03      	ldr	r2, [sp, #12]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	9b08      	ldr	r3, [sp, #32]
 80052a0:	2b0e      	cmp	r3, #14
 80052a2:	f200 80a8 	bhi.w	80053f6 <_dtoa_r+0x46e>
 80052a6:	2c00      	cmp	r4, #0
 80052a8:	f000 80a5 	beq.w	80053f6 <_dtoa_r+0x46e>
 80052ac:	f1bb 0f00 	cmp.w	fp, #0
 80052b0:	dd34      	ble.n	800531c <_dtoa_r+0x394>
 80052b2:	4b9a      	ldr	r3, [pc, #616]	; (800551c <_dtoa_r+0x594>)
 80052b4:	f00b 020f 	and.w	r2, fp, #15
 80052b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80052c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052c8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80052cc:	d016      	beq.n	80052fc <_dtoa_r+0x374>
 80052ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052d2:	4b93      	ldr	r3, [pc, #588]	; (8005520 <_dtoa_r+0x598>)
 80052d4:	2703      	movs	r7, #3
 80052d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052da:	f7fb fa87 	bl	80007ec <__aeabi_ddiv>
 80052de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052e2:	f004 040f 	and.w	r4, r4, #15
 80052e6:	4e8e      	ldr	r6, [pc, #568]	; (8005520 <_dtoa_r+0x598>)
 80052e8:	b954      	cbnz	r4, 8005300 <_dtoa_r+0x378>
 80052ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f2:	f7fb fa7b 	bl	80007ec <__aeabi_ddiv>
 80052f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052fa:	e029      	b.n	8005350 <_dtoa_r+0x3c8>
 80052fc:	2702      	movs	r7, #2
 80052fe:	e7f2      	b.n	80052e6 <_dtoa_r+0x35e>
 8005300:	07e1      	lsls	r1, r4, #31
 8005302:	d508      	bpl.n	8005316 <_dtoa_r+0x38e>
 8005304:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005308:	e9d6 2300 	ldrd	r2, r3, [r6]
 800530c:	f7fb f944 	bl	8000598 <__aeabi_dmul>
 8005310:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005314:	3701      	adds	r7, #1
 8005316:	1064      	asrs	r4, r4, #1
 8005318:	3608      	adds	r6, #8
 800531a:	e7e5      	b.n	80052e8 <_dtoa_r+0x360>
 800531c:	f000 80a5 	beq.w	800546a <_dtoa_r+0x4e2>
 8005320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005324:	f1cb 0400 	rsb	r4, fp, #0
 8005328:	4b7c      	ldr	r3, [pc, #496]	; (800551c <_dtoa_r+0x594>)
 800532a:	f004 020f 	and.w	r2, r4, #15
 800532e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fb f92f 	bl	8000598 <__aeabi_dmul>
 800533a:	2702      	movs	r7, #2
 800533c:	2300      	movs	r3, #0
 800533e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005342:	4e77      	ldr	r6, [pc, #476]	; (8005520 <_dtoa_r+0x598>)
 8005344:	1124      	asrs	r4, r4, #4
 8005346:	2c00      	cmp	r4, #0
 8005348:	f040 8084 	bne.w	8005454 <_dtoa_r+0x4cc>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1d2      	bne.n	80052f6 <_dtoa_r+0x36e>
 8005350:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005354:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8087 	beq.w	800546e <_dtoa_r+0x4e6>
 8005360:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005364:	2200      	movs	r2, #0
 8005366:	4b6f      	ldr	r3, [pc, #444]	; (8005524 <_dtoa_r+0x59c>)
 8005368:	f7fb fb88 	bl	8000a7c <__aeabi_dcmplt>
 800536c:	2800      	cmp	r0, #0
 800536e:	d07e      	beq.n	800546e <_dtoa_r+0x4e6>
 8005370:	9b08      	ldr	r3, [sp, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d07b      	beq.n	800546e <_dtoa_r+0x4e6>
 8005376:	9b06      	ldr	r3, [sp, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	dd38      	ble.n	80053ee <_dtoa_r+0x466>
 800537c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005380:	2200      	movs	r2, #0
 8005382:	4b69      	ldr	r3, [pc, #420]	; (8005528 <_dtoa_r+0x5a0>)
 8005384:	f7fb f908 	bl	8000598 <__aeabi_dmul>
 8005388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800538c:	9c06      	ldr	r4, [sp, #24]
 800538e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005392:	3701      	adds	r7, #1
 8005394:	4638      	mov	r0, r7
 8005396:	f7fb f895 	bl	80004c4 <__aeabi_i2d>
 800539a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800539e:	f7fb f8fb 	bl	8000598 <__aeabi_dmul>
 80053a2:	2200      	movs	r2, #0
 80053a4:	4b61      	ldr	r3, [pc, #388]	; (800552c <_dtoa_r+0x5a4>)
 80053a6:	f7fa ff41 	bl	800022c <__adddf3>
 80053aa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80053ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053b2:	9611      	str	r6, [sp, #68]	; 0x44
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	d15d      	bne.n	8005474 <_dtoa_r+0x4ec>
 80053b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053bc:	2200      	movs	r2, #0
 80053be:	4b5c      	ldr	r3, [pc, #368]	; (8005530 <_dtoa_r+0x5a8>)
 80053c0:	f7fa ff32 	bl	8000228 <__aeabi_dsub>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053cc:	4633      	mov	r3, r6
 80053ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053d0:	f7fb fb72 	bl	8000ab8 <__aeabi_dcmpgt>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f040 8295 	bne.w	8005904 <_dtoa_r+0x97c>
 80053da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80053e4:	f7fb fb4a 	bl	8000a7c <__aeabi_dcmplt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f040 8289 	bne.w	8005900 <_dtoa_r+0x978>
 80053ee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80053f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f2c0 8151 	blt.w	80056a0 <_dtoa_r+0x718>
 80053fe:	f1bb 0f0e 	cmp.w	fp, #14
 8005402:	f300 814d 	bgt.w	80056a0 <_dtoa_r+0x718>
 8005406:	4b45      	ldr	r3, [pc, #276]	; (800551c <_dtoa_r+0x594>)
 8005408:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800540c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005410:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005414:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005416:	2b00      	cmp	r3, #0
 8005418:	f280 80da 	bge.w	80055d0 <_dtoa_r+0x648>
 800541c:	9b08      	ldr	r3, [sp, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f300 80d6 	bgt.w	80055d0 <_dtoa_r+0x648>
 8005424:	f040 826b 	bne.w	80058fe <_dtoa_r+0x976>
 8005428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800542c:	2200      	movs	r2, #0
 800542e:	4b40      	ldr	r3, [pc, #256]	; (8005530 <_dtoa_r+0x5a8>)
 8005430:	f7fb f8b2 	bl	8000598 <__aeabi_dmul>
 8005434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005438:	f7fb fb34 	bl	8000aa4 <__aeabi_dcmpge>
 800543c:	9c08      	ldr	r4, [sp, #32]
 800543e:	4626      	mov	r6, r4
 8005440:	2800      	cmp	r0, #0
 8005442:	f040 8241 	bne.w	80058c8 <_dtoa_r+0x940>
 8005446:	2331      	movs	r3, #49	; 0x31
 8005448:	9f03      	ldr	r7, [sp, #12]
 800544a:	f10b 0b01 	add.w	fp, fp, #1
 800544e:	f807 3b01 	strb.w	r3, [r7], #1
 8005452:	e23d      	b.n	80058d0 <_dtoa_r+0x948>
 8005454:	07e2      	lsls	r2, r4, #31
 8005456:	d505      	bpl.n	8005464 <_dtoa_r+0x4dc>
 8005458:	e9d6 2300 	ldrd	r2, r3, [r6]
 800545c:	f7fb f89c 	bl	8000598 <__aeabi_dmul>
 8005460:	2301      	movs	r3, #1
 8005462:	3701      	adds	r7, #1
 8005464:	1064      	asrs	r4, r4, #1
 8005466:	3608      	adds	r6, #8
 8005468:	e76d      	b.n	8005346 <_dtoa_r+0x3be>
 800546a:	2702      	movs	r7, #2
 800546c:	e770      	b.n	8005350 <_dtoa_r+0x3c8>
 800546e:	46d8      	mov	r8, fp
 8005470:	9c08      	ldr	r4, [sp, #32]
 8005472:	e78f      	b.n	8005394 <_dtoa_r+0x40c>
 8005474:	9903      	ldr	r1, [sp, #12]
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <_dtoa_r+0x594>)
 8005478:	4421      	add	r1, r4
 800547a:	9112      	str	r1, [sp, #72]	; 0x48
 800547c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800547e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005482:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005486:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800548a:	2900      	cmp	r1, #0
 800548c:	d054      	beq.n	8005538 <_dtoa_r+0x5b0>
 800548e:	2000      	movs	r0, #0
 8005490:	4928      	ldr	r1, [pc, #160]	; (8005534 <_dtoa_r+0x5ac>)
 8005492:	f7fb f9ab 	bl	80007ec <__aeabi_ddiv>
 8005496:	463b      	mov	r3, r7
 8005498:	4632      	mov	r2, r6
 800549a:	f7fa fec5 	bl	8000228 <__aeabi_dsub>
 800549e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054a2:	9f03      	ldr	r7, [sp, #12]
 80054a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054a8:	f7fb fb26 	bl	8000af8 <__aeabi_d2iz>
 80054ac:	4604      	mov	r4, r0
 80054ae:	f7fb f809 	bl	80004c4 <__aeabi_i2d>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ba:	f7fa feb5 	bl	8000228 <__aeabi_dsub>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	3430      	adds	r4, #48	; 0x30
 80054c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054cc:	f807 4b01 	strb.w	r4, [r7], #1
 80054d0:	f7fb fad4 	bl	8000a7c <__aeabi_dcmplt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d173      	bne.n	80055c0 <_dtoa_r+0x638>
 80054d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054dc:	2000      	movs	r0, #0
 80054de:	4911      	ldr	r1, [pc, #68]	; (8005524 <_dtoa_r+0x59c>)
 80054e0:	f7fa fea2 	bl	8000228 <__aeabi_dsub>
 80054e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054e8:	f7fb fac8 	bl	8000a7c <__aeabi_dcmplt>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f040 80b6 	bne.w	800565e <_dtoa_r+0x6d6>
 80054f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054f4:	429f      	cmp	r7, r3
 80054f6:	f43f af7a 	beq.w	80053ee <_dtoa_r+0x466>
 80054fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054fe:	2200      	movs	r2, #0
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <_dtoa_r+0x5a0>)
 8005502:	f7fb f849 	bl	8000598 <__aeabi_dmul>
 8005506:	2200      	movs	r2, #0
 8005508:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800550c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <_dtoa_r+0x5a0>)
 8005512:	f7fb f841 	bl	8000598 <__aeabi_dmul>
 8005516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800551a:	e7c3      	b.n	80054a4 <_dtoa_r+0x51c>
 800551c:	08008748 	.word	0x08008748
 8005520:	08008720 	.word	0x08008720
 8005524:	3ff00000 	.word	0x3ff00000
 8005528:	40240000 	.word	0x40240000
 800552c:	401c0000 	.word	0x401c0000
 8005530:	40140000 	.word	0x40140000
 8005534:	3fe00000 	.word	0x3fe00000
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fb f82c 	bl	8000598 <__aeabi_dmul>
 8005540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005542:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005546:	9c03      	ldr	r4, [sp, #12]
 8005548:	9314      	str	r3, [sp, #80]	; 0x50
 800554a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554e:	f7fb fad3 	bl	8000af8 <__aeabi_d2iz>
 8005552:	9015      	str	r0, [sp, #84]	; 0x54
 8005554:	f7fa ffb6 	bl	80004c4 <__aeabi_i2d>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005560:	f7fa fe62 	bl	8000228 <__aeabi_dsub>
 8005564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005566:	4606      	mov	r6, r0
 8005568:	3330      	adds	r3, #48	; 0x30
 800556a:	f804 3b01 	strb.w	r3, [r4], #1
 800556e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005570:	460f      	mov	r7, r1
 8005572:	429c      	cmp	r4, r3
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	d124      	bne.n	80055c4 <_dtoa_r+0x63c>
 800557a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800557e:	4baf      	ldr	r3, [pc, #700]	; (800583c <_dtoa_r+0x8b4>)
 8005580:	f7fa fe54 	bl	800022c <__adddf3>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4630      	mov	r0, r6
 800558a:	4639      	mov	r1, r7
 800558c:	f7fb fa94 	bl	8000ab8 <__aeabi_dcmpgt>
 8005590:	2800      	cmp	r0, #0
 8005592:	d163      	bne.n	800565c <_dtoa_r+0x6d4>
 8005594:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005598:	2000      	movs	r0, #0
 800559a:	49a8      	ldr	r1, [pc, #672]	; (800583c <_dtoa_r+0x8b4>)
 800559c:	f7fa fe44 	bl	8000228 <__aeabi_dsub>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fb fa68 	bl	8000a7c <__aeabi_dcmplt>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	f43f af1e 	beq.w	80053ee <_dtoa_r+0x466>
 80055b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80055b4:	1e7b      	subs	r3, r7, #1
 80055b6:	9314      	str	r3, [sp, #80]	; 0x50
 80055b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80055bc:	2b30      	cmp	r3, #48	; 0x30
 80055be:	d0f8      	beq.n	80055b2 <_dtoa_r+0x62a>
 80055c0:	46c3      	mov	fp, r8
 80055c2:	e03b      	b.n	800563c <_dtoa_r+0x6b4>
 80055c4:	4b9e      	ldr	r3, [pc, #632]	; (8005840 <_dtoa_r+0x8b8>)
 80055c6:	f7fa ffe7 	bl	8000598 <__aeabi_dmul>
 80055ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055ce:	e7bc      	b.n	800554a <_dtoa_r+0x5c2>
 80055d0:	9f03      	ldr	r7, [sp, #12]
 80055d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80055d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055da:	4640      	mov	r0, r8
 80055dc:	4649      	mov	r1, r9
 80055de:	f7fb f905 	bl	80007ec <__aeabi_ddiv>
 80055e2:	f7fb fa89 	bl	8000af8 <__aeabi_d2iz>
 80055e6:	4604      	mov	r4, r0
 80055e8:	f7fa ff6c 	bl	80004c4 <__aeabi_i2d>
 80055ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055f0:	f7fa ffd2 	bl	8000598 <__aeabi_dmul>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fa fe14 	bl	8000228 <__aeabi_dsub>
 8005600:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005604:	f807 6b01 	strb.w	r6, [r7], #1
 8005608:	9e03      	ldr	r6, [sp, #12]
 800560a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800560e:	1bbe      	subs	r6, r7, r6
 8005610:	45b4      	cmp	ip, r6
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	d136      	bne.n	8005686 <_dtoa_r+0x6fe>
 8005618:	f7fa fe08 	bl	800022c <__adddf3>
 800561c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005620:	4680      	mov	r8, r0
 8005622:	4689      	mov	r9, r1
 8005624:	f7fb fa48 	bl	8000ab8 <__aeabi_dcmpgt>
 8005628:	bb58      	cbnz	r0, 8005682 <_dtoa_r+0x6fa>
 800562a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800562e:	4640      	mov	r0, r8
 8005630:	4649      	mov	r1, r9
 8005632:	f7fb fa19 	bl	8000a68 <__aeabi_dcmpeq>
 8005636:	b108      	cbz	r0, 800563c <_dtoa_r+0x6b4>
 8005638:	07e3      	lsls	r3, r4, #31
 800563a:	d422      	bmi.n	8005682 <_dtoa_r+0x6fa>
 800563c:	4651      	mov	r1, sl
 800563e:	4628      	mov	r0, r5
 8005640:	f000 fbc2 	bl	8005dc8 <_Bfree>
 8005644:	2300      	movs	r3, #0
 8005646:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005648:	703b      	strb	r3, [r7, #0]
 800564a:	f10b 0301 	add.w	r3, fp, #1
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005652:	2b00      	cmp	r3, #0
 8005654:	f43f ace6 	beq.w	8005024 <_dtoa_r+0x9c>
 8005658:	601f      	str	r7, [r3, #0]
 800565a:	e4e3      	b.n	8005024 <_dtoa_r+0x9c>
 800565c:	4627      	mov	r7, r4
 800565e:	463b      	mov	r3, r7
 8005660:	461f      	mov	r7, r3
 8005662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005666:	2a39      	cmp	r2, #57	; 0x39
 8005668:	d107      	bne.n	800567a <_dtoa_r+0x6f2>
 800566a:	9a03      	ldr	r2, [sp, #12]
 800566c:	429a      	cmp	r2, r3
 800566e:	d1f7      	bne.n	8005660 <_dtoa_r+0x6d8>
 8005670:	2230      	movs	r2, #48	; 0x30
 8005672:	9903      	ldr	r1, [sp, #12]
 8005674:	f108 0801 	add.w	r8, r8, #1
 8005678:	700a      	strb	r2, [r1, #0]
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	3201      	adds	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e79e      	b.n	80055c0 <_dtoa_r+0x638>
 8005682:	46d8      	mov	r8, fp
 8005684:	e7eb      	b.n	800565e <_dtoa_r+0x6d6>
 8005686:	2200      	movs	r2, #0
 8005688:	4b6d      	ldr	r3, [pc, #436]	; (8005840 <_dtoa_r+0x8b8>)
 800568a:	f7fa ff85 	bl	8000598 <__aeabi_dmul>
 800568e:	2200      	movs	r2, #0
 8005690:	2300      	movs	r3, #0
 8005692:	4680      	mov	r8, r0
 8005694:	4689      	mov	r9, r1
 8005696:	f7fb f9e7 	bl	8000a68 <__aeabi_dcmpeq>
 800569a:	2800      	cmp	r0, #0
 800569c:	d09b      	beq.n	80055d6 <_dtoa_r+0x64e>
 800569e:	e7cd      	b.n	800563c <_dtoa_r+0x6b4>
 80056a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	f000 80c4 	beq.w	8005830 <_dtoa_r+0x8a8>
 80056a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056aa:	2a01      	cmp	r2, #1
 80056ac:	f300 80a8 	bgt.w	8005800 <_dtoa_r+0x878>
 80056b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	f000 80a0 	beq.w	80057f8 <_dtoa_r+0x870>
 80056b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056bc:	464f      	mov	r7, r9
 80056be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056c2:	2101      	movs	r1, #1
 80056c4:	441a      	add	r2, r3
 80056c6:	4628      	mov	r0, r5
 80056c8:	4499      	add	r9, r3
 80056ca:	9209      	str	r2, [sp, #36]	; 0x24
 80056cc:	f000 fc7c 	bl	8005fc8 <__i2b>
 80056d0:	4606      	mov	r6, r0
 80056d2:	b15f      	cbz	r7, 80056ec <_dtoa_r+0x764>
 80056d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dd08      	ble.n	80056ec <_dtoa_r+0x764>
 80056da:	42bb      	cmp	r3, r7
 80056dc:	bfa8      	it	ge
 80056de:	463b      	movge	r3, r7
 80056e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e2:	eba9 0903 	sub.w	r9, r9, r3
 80056e6:	1aff      	subs	r7, r7, r3
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	9309      	str	r3, [sp, #36]	; 0x24
 80056ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ee:	b1f3      	cbz	r3, 800572e <_dtoa_r+0x7a6>
 80056f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a0 	beq.w	8005838 <_dtoa_r+0x8b0>
 80056f8:	2c00      	cmp	r4, #0
 80056fa:	dd10      	ble.n	800571e <_dtoa_r+0x796>
 80056fc:	4631      	mov	r1, r6
 80056fe:	4622      	mov	r2, r4
 8005700:	4628      	mov	r0, r5
 8005702:	f000 fd1f 	bl	8006144 <__pow5mult>
 8005706:	4652      	mov	r2, sl
 8005708:	4601      	mov	r1, r0
 800570a:	4606      	mov	r6, r0
 800570c:	4628      	mov	r0, r5
 800570e:	f000 fc71 	bl	8005ff4 <__multiply>
 8005712:	4680      	mov	r8, r0
 8005714:	4651      	mov	r1, sl
 8005716:	4628      	mov	r0, r5
 8005718:	f000 fb56 	bl	8005dc8 <_Bfree>
 800571c:	46c2      	mov	sl, r8
 800571e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005720:	1b1a      	subs	r2, r3, r4
 8005722:	d004      	beq.n	800572e <_dtoa_r+0x7a6>
 8005724:	4651      	mov	r1, sl
 8005726:	4628      	mov	r0, r5
 8005728:	f000 fd0c 	bl	8006144 <__pow5mult>
 800572c:	4682      	mov	sl, r0
 800572e:	2101      	movs	r1, #1
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fc49 	bl	8005fc8 <__i2b>
 8005736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005738:	4604      	mov	r4, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	f340 8082 	ble.w	8005844 <_dtoa_r+0x8bc>
 8005740:	461a      	mov	r2, r3
 8005742:	4601      	mov	r1, r0
 8005744:	4628      	mov	r0, r5
 8005746:	f000 fcfd 	bl	8006144 <__pow5mult>
 800574a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800574c:	4604      	mov	r4, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	dd7b      	ble.n	800584a <_dtoa_r+0x8c2>
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800575c:	6918      	ldr	r0, [r3, #16]
 800575e:	f000 fbe5 	bl	8005f2c <__hi0bits>
 8005762:	f1c0 0020 	rsb	r0, r0, #32
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	4418      	add	r0, r3
 800576a:	f010 001f 	ands.w	r0, r0, #31
 800576e:	f000 8092 	beq.w	8005896 <_dtoa_r+0x90e>
 8005772:	f1c0 0320 	rsb	r3, r0, #32
 8005776:	2b04      	cmp	r3, #4
 8005778:	f340 8085 	ble.w	8005886 <_dtoa_r+0x8fe>
 800577c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577e:	f1c0 001c 	rsb	r0, r0, #28
 8005782:	4403      	add	r3, r0
 8005784:	4481      	add	r9, r0
 8005786:	4407      	add	r7, r0
 8005788:	9309      	str	r3, [sp, #36]	; 0x24
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	dd05      	ble.n	800579c <_dtoa_r+0x814>
 8005790:	4651      	mov	r1, sl
 8005792:	464a      	mov	r2, r9
 8005794:	4628      	mov	r0, r5
 8005796:	f000 fd2f 	bl	80061f8 <__lshift>
 800579a:	4682      	mov	sl, r0
 800579c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	dd05      	ble.n	80057ae <_dtoa_r+0x826>
 80057a2:	4621      	mov	r1, r4
 80057a4:	461a      	mov	r2, r3
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 fd26 	bl	80061f8 <__lshift>
 80057ac:	4604      	mov	r4, r0
 80057ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d072      	beq.n	800589a <_dtoa_r+0x912>
 80057b4:	4621      	mov	r1, r4
 80057b6:	4650      	mov	r0, sl
 80057b8:	f000 fd8a 	bl	80062d0 <__mcmp>
 80057bc:	2800      	cmp	r0, #0
 80057be:	da6c      	bge.n	800589a <_dtoa_r+0x912>
 80057c0:	2300      	movs	r3, #0
 80057c2:	4651      	mov	r1, sl
 80057c4:	220a      	movs	r2, #10
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 fb20 	bl	8005e0c <__multadd>
 80057cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ce:	4682      	mov	sl, r0
 80057d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 81ac 	beq.w	8005b32 <_dtoa_r+0xbaa>
 80057da:	2300      	movs	r3, #0
 80057dc:	4631      	mov	r1, r6
 80057de:	220a      	movs	r2, #10
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 fb13 	bl	8005e0c <__multadd>
 80057e6:	9b06      	ldr	r3, [sp, #24]
 80057e8:	4606      	mov	r6, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f300 8093 	bgt.w	8005916 <_dtoa_r+0x98e>
 80057f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	dc59      	bgt.n	80058aa <_dtoa_r+0x922>
 80057f6:	e08e      	b.n	8005916 <_dtoa_r+0x98e>
 80057f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057fe:	e75d      	b.n	80056bc <_dtoa_r+0x734>
 8005800:	9b08      	ldr	r3, [sp, #32]
 8005802:	1e5c      	subs	r4, r3, #1
 8005804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005806:	42a3      	cmp	r3, r4
 8005808:	bfbf      	itttt	lt
 800580a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800580c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800580e:	1ae3      	sublt	r3, r4, r3
 8005810:	18d2      	addlt	r2, r2, r3
 8005812:	bfa8      	it	ge
 8005814:	1b1c      	subge	r4, r3, r4
 8005816:	9b08      	ldr	r3, [sp, #32]
 8005818:	bfbe      	ittt	lt
 800581a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800581c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800581e:	2400      	movlt	r4, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	bfb5      	itete	lt
 8005824:	eba9 0703 	sublt.w	r7, r9, r3
 8005828:	464f      	movge	r7, r9
 800582a:	2300      	movlt	r3, #0
 800582c:	9b08      	ldrge	r3, [sp, #32]
 800582e:	e747      	b.n	80056c0 <_dtoa_r+0x738>
 8005830:	464f      	mov	r7, r9
 8005832:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005834:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005836:	e74c      	b.n	80056d2 <_dtoa_r+0x74a>
 8005838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800583a:	e773      	b.n	8005724 <_dtoa_r+0x79c>
 800583c:	3fe00000 	.word	0x3fe00000
 8005840:	40240000 	.word	0x40240000
 8005844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005846:	2b01      	cmp	r3, #1
 8005848:	dc18      	bgt.n	800587c <_dtoa_r+0x8f4>
 800584a:	9b04      	ldr	r3, [sp, #16]
 800584c:	b9b3      	cbnz	r3, 800587c <_dtoa_r+0x8f4>
 800584e:	9b05      	ldr	r3, [sp, #20]
 8005850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005854:	b993      	cbnz	r3, 800587c <_dtoa_r+0x8f4>
 8005856:	9b05      	ldr	r3, [sp, #20]
 8005858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800585c:	0d1b      	lsrs	r3, r3, #20
 800585e:	051b      	lsls	r3, r3, #20
 8005860:	b17b      	cbz	r3, 8005882 <_dtoa_r+0x8fa>
 8005862:	f04f 0801 	mov.w	r8, #1
 8005866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005868:	f109 0901 	add.w	r9, r9, #1
 800586c:	3301      	adds	r3, #1
 800586e:	9309      	str	r3, [sp, #36]	; 0x24
 8005870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f af6f 	bne.w	8005756 <_dtoa_r+0x7ce>
 8005878:	2001      	movs	r0, #1
 800587a:	e774      	b.n	8005766 <_dtoa_r+0x7de>
 800587c:	f04f 0800 	mov.w	r8, #0
 8005880:	e7f6      	b.n	8005870 <_dtoa_r+0x8e8>
 8005882:	4698      	mov	r8, r3
 8005884:	e7f4      	b.n	8005870 <_dtoa_r+0x8e8>
 8005886:	d080      	beq.n	800578a <_dtoa_r+0x802>
 8005888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800588a:	331c      	adds	r3, #28
 800588c:	441a      	add	r2, r3
 800588e:	4499      	add	r9, r3
 8005890:	441f      	add	r7, r3
 8005892:	9209      	str	r2, [sp, #36]	; 0x24
 8005894:	e779      	b.n	800578a <_dtoa_r+0x802>
 8005896:	4603      	mov	r3, r0
 8005898:	e7f6      	b.n	8005888 <_dtoa_r+0x900>
 800589a:	9b08      	ldr	r3, [sp, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc34      	bgt.n	800590a <_dtoa_r+0x982>
 80058a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	dd31      	ble.n	800590a <_dtoa_r+0x982>
 80058a6:	9b08      	ldr	r3, [sp, #32]
 80058a8:	9306      	str	r3, [sp, #24]
 80058aa:	9b06      	ldr	r3, [sp, #24]
 80058ac:	b963      	cbnz	r3, 80058c8 <_dtoa_r+0x940>
 80058ae:	4621      	mov	r1, r4
 80058b0:	2205      	movs	r2, #5
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 faaa 	bl	8005e0c <__multadd>
 80058b8:	4601      	mov	r1, r0
 80058ba:	4604      	mov	r4, r0
 80058bc:	4650      	mov	r0, sl
 80058be:	f000 fd07 	bl	80062d0 <__mcmp>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f73f adbf 	bgt.w	8005446 <_dtoa_r+0x4be>
 80058c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058ca:	9f03      	ldr	r7, [sp, #12]
 80058cc:	ea6f 0b03 	mvn.w	fp, r3
 80058d0:	f04f 0800 	mov.w	r8, #0
 80058d4:	4621      	mov	r1, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fa76 	bl	8005dc8 <_Bfree>
 80058dc:	2e00      	cmp	r6, #0
 80058de:	f43f aead 	beq.w	800563c <_dtoa_r+0x6b4>
 80058e2:	f1b8 0f00 	cmp.w	r8, #0
 80058e6:	d005      	beq.n	80058f4 <_dtoa_r+0x96c>
 80058e8:	45b0      	cmp	r8, r6
 80058ea:	d003      	beq.n	80058f4 <_dtoa_r+0x96c>
 80058ec:	4641      	mov	r1, r8
 80058ee:	4628      	mov	r0, r5
 80058f0:	f000 fa6a 	bl	8005dc8 <_Bfree>
 80058f4:	4631      	mov	r1, r6
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 fa66 	bl	8005dc8 <_Bfree>
 80058fc:	e69e      	b.n	800563c <_dtoa_r+0x6b4>
 80058fe:	2400      	movs	r4, #0
 8005900:	4626      	mov	r6, r4
 8005902:	e7e1      	b.n	80058c8 <_dtoa_r+0x940>
 8005904:	46c3      	mov	fp, r8
 8005906:	4626      	mov	r6, r4
 8005908:	e59d      	b.n	8005446 <_dtoa_r+0x4be>
 800590a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80c8 	beq.w	8005aa2 <_dtoa_r+0xb1a>
 8005912:	9b08      	ldr	r3, [sp, #32]
 8005914:	9306      	str	r3, [sp, #24]
 8005916:	2f00      	cmp	r7, #0
 8005918:	dd05      	ble.n	8005926 <_dtoa_r+0x99e>
 800591a:	4631      	mov	r1, r6
 800591c:	463a      	mov	r2, r7
 800591e:	4628      	mov	r0, r5
 8005920:	f000 fc6a 	bl	80061f8 <__lshift>
 8005924:	4606      	mov	r6, r0
 8005926:	f1b8 0f00 	cmp.w	r8, #0
 800592a:	d05b      	beq.n	80059e4 <_dtoa_r+0xa5c>
 800592c:	4628      	mov	r0, r5
 800592e:	6871      	ldr	r1, [r6, #4]
 8005930:	f000 fa0a 	bl	8005d48 <_Balloc>
 8005934:	4607      	mov	r7, r0
 8005936:	b928      	cbnz	r0, 8005944 <_dtoa_r+0x9bc>
 8005938:	4602      	mov	r2, r0
 800593a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800593e:	4b81      	ldr	r3, [pc, #516]	; (8005b44 <_dtoa_r+0xbbc>)
 8005940:	f7ff bb36 	b.w	8004fb0 <_dtoa_r+0x28>
 8005944:	6932      	ldr	r2, [r6, #16]
 8005946:	f106 010c 	add.w	r1, r6, #12
 800594a:	3202      	adds	r2, #2
 800594c:	0092      	lsls	r2, r2, #2
 800594e:	300c      	adds	r0, #12
 8005950:	f001 ff72 	bl	8007838 <memcpy>
 8005954:	2201      	movs	r2, #1
 8005956:	4639      	mov	r1, r7
 8005958:	4628      	mov	r0, r5
 800595a:	f000 fc4d 	bl	80061f8 <__lshift>
 800595e:	46b0      	mov	r8, r6
 8005960:	4606      	mov	r6, r0
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	9a03      	ldr	r2, [sp, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	9308      	str	r3, [sp, #32]
 800596a:	9b06      	ldr	r3, [sp, #24]
 800596c:	4413      	add	r3, r2
 800596e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005970:	9b04      	ldr	r3, [sp, #16]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	930a      	str	r3, [sp, #40]	; 0x28
 8005978:	9b08      	ldr	r3, [sp, #32]
 800597a:	4621      	mov	r1, r4
 800597c:	3b01      	subs	r3, #1
 800597e:	4650      	mov	r0, sl
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	f7ff fa77 	bl	8004e74 <quorem>
 8005986:	4641      	mov	r1, r8
 8005988:	9006      	str	r0, [sp, #24]
 800598a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800598e:	4650      	mov	r0, sl
 8005990:	f000 fc9e 	bl	80062d0 <__mcmp>
 8005994:	4632      	mov	r2, r6
 8005996:	9009      	str	r0, [sp, #36]	; 0x24
 8005998:	4621      	mov	r1, r4
 800599a:	4628      	mov	r0, r5
 800599c:	f000 fcb4 	bl	8006308 <__mdiff>
 80059a0:	68c2      	ldr	r2, [r0, #12]
 80059a2:	4607      	mov	r7, r0
 80059a4:	bb02      	cbnz	r2, 80059e8 <_dtoa_r+0xa60>
 80059a6:	4601      	mov	r1, r0
 80059a8:	4650      	mov	r0, sl
 80059aa:	f000 fc91 	bl	80062d0 <__mcmp>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4639      	mov	r1, r7
 80059b2:	4628      	mov	r0, r5
 80059b4:	920c      	str	r2, [sp, #48]	; 0x30
 80059b6:	f000 fa07 	bl	8005dc8 <_Bfree>
 80059ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059be:	9f08      	ldr	r7, [sp, #32]
 80059c0:	ea43 0102 	orr.w	r1, r3, r2
 80059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c6:	4319      	orrs	r1, r3
 80059c8:	d110      	bne.n	80059ec <_dtoa_r+0xa64>
 80059ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059ce:	d029      	beq.n	8005a24 <_dtoa_r+0xa9c>
 80059d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	dd02      	ble.n	80059dc <_dtoa_r+0xa54>
 80059d6:	9b06      	ldr	r3, [sp, #24]
 80059d8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	f883 9000 	strb.w	r9, [r3]
 80059e2:	e777      	b.n	80058d4 <_dtoa_r+0x94c>
 80059e4:	4630      	mov	r0, r6
 80059e6:	e7ba      	b.n	800595e <_dtoa_r+0x9d6>
 80059e8:	2201      	movs	r2, #1
 80059ea:	e7e1      	b.n	80059b0 <_dtoa_r+0xa28>
 80059ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	db04      	blt.n	80059fc <_dtoa_r+0xa74>
 80059f2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80059f4:	430b      	orrs	r3, r1
 80059f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059f8:	430b      	orrs	r3, r1
 80059fa:	d120      	bne.n	8005a3e <_dtoa_r+0xab6>
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	dded      	ble.n	80059dc <_dtoa_r+0xa54>
 8005a00:	4651      	mov	r1, sl
 8005a02:	2201      	movs	r2, #1
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 fbf7 	bl	80061f8 <__lshift>
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4682      	mov	sl, r0
 8005a0e:	f000 fc5f 	bl	80062d0 <__mcmp>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	dc03      	bgt.n	8005a1e <_dtoa_r+0xa96>
 8005a16:	d1e1      	bne.n	80059dc <_dtoa_r+0xa54>
 8005a18:	f019 0f01 	tst.w	r9, #1
 8005a1c:	d0de      	beq.n	80059dc <_dtoa_r+0xa54>
 8005a1e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a22:	d1d8      	bne.n	80059d6 <_dtoa_r+0xa4e>
 8005a24:	2339      	movs	r3, #57	; 0x39
 8005a26:	9a04      	ldr	r2, [sp, #16]
 8005a28:	7013      	strb	r3, [r2, #0]
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	461f      	mov	r7, r3
 8005a2e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	2a39      	cmp	r2, #57	; 0x39
 8005a36:	d06b      	beq.n	8005b10 <_dtoa_r+0xb88>
 8005a38:	3201      	adds	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	e74a      	b.n	80058d4 <_dtoa_r+0x94c>
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	dd07      	ble.n	8005a52 <_dtoa_r+0xaca>
 8005a42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a46:	d0ed      	beq.n	8005a24 <_dtoa_r+0xa9c>
 8005a48:	9a04      	ldr	r2, [sp, #16]
 8005a4a:	f109 0301 	add.w	r3, r9, #1
 8005a4e:	7013      	strb	r3, [r2, #0]
 8005a50:	e740      	b.n	80058d4 <_dtoa_r+0x94c>
 8005a52:	9b08      	ldr	r3, [sp, #32]
 8005a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a56:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d042      	beq.n	8005ae4 <_dtoa_r+0xb5c>
 8005a5e:	4651      	mov	r1, sl
 8005a60:	2300      	movs	r3, #0
 8005a62:	220a      	movs	r2, #10
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f9d1 	bl	8005e0c <__multadd>
 8005a6a:	45b0      	cmp	r8, r6
 8005a6c:	4682      	mov	sl, r0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	f04f 020a 	mov.w	r2, #10
 8005a76:	4641      	mov	r1, r8
 8005a78:	4628      	mov	r0, r5
 8005a7a:	d107      	bne.n	8005a8c <_dtoa_r+0xb04>
 8005a7c:	f000 f9c6 	bl	8005e0c <__multadd>
 8005a80:	4680      	mov	r8, r0
 8005a82:	4606      	mov	r6, r0
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	3301      	adds	r3, #1
 8005a88:	9308      	str	r3, [sp, #32]
 8005a8a:	e775      	b.n	8005978 <_dtoa_r+0x9f0>
 8005a8c:	f000 f9be 	bl	8005e0c <__multadd>
 8005a90:	4631      	mov	r1, r6
 8005a92:	4680      	mov	r8, r0
 8005a94:	2300      	movs	r3, #0
 8005a96:	220a      	movs	r2, #10
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f9b7 	bl	8005e0c <__multadd>
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	e7f0      	b.n	8005a84 <_dtoa_r+0xafc>
 8005aa2:	9b08      	ldr	r3, [sp, #32]
 8005aa4:	9306      	str	r3, [sp, #24]
 8005aa6:	9f03      	ldr	r7, [sp, #12]
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4650      	mov	r0, sl
 8005aac:	f7ff f9e2 	bl	8004e74 <quorem>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ab6:	f807 9b01 	strb.w	r9, [r7], #1
 8005aba:	1afa      	subs	r2, r7, r3
 8005abc:	9b06      	ldr	r3, [sp, #24]
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	dd07      	ble.n	8005ad2 <_dtoa_r+0xb4a>
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	220a      	movs	r2, #10
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f000 f99f 	bl	8005e0c <__multadd>
 8005ace:	4682      	mov	sl, r0
 8005ad0:	e7ea      	b.n	8005aa8 <_dtoa_r+0xb20>
 8005ad2:	9b06      	ldr	r3, [sp, #24]
 8005ad4:	f04f 0800 	mov.w	r8, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bfcc      	ite	gt
 8005adc:	461f      	movgt	r7, r3
 8005ade:	2701      	movle	r7, #1
 8005ae0:	9b03      	ldr	r3, [sp, #12]
 8005ae2:	441f      	add	r7, r3
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 fb85 	bl	80061f8 <__lshift>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4682      	mov	sl, r0
 8005af2:	f000 fbed 	bl	80062d0 <__mcmp>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	dc97      	bgt.n	8005a2a <_dtoa_r+0xaa2>
 8005afa:	d102      	bne.n	8005b02 <_dtoa_r+0xb7a>
 8005afc:	f019 0f01 	tst.w	r9, #1
 8005b00:	d193      	bne.n	8005a2a <_dtoa_r+0xaa2>
 8005b02:	463b      	mov	r3, r7
 8005b04:	461f      	mov	r7, r3
 8005b06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b0a:	2a30      	cmp	r2, #48	; 0x30
 8005b0c:	d0fa      	beq.n	8005b04 <_dtoa_r+0xb7c>
 8005b0e:	e6e1      	b.n	80058d4 <_dtoa_r+0x94c>
 8005b10:	9a03      	ldr	r2, [sp, #12]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d18a      	bne.n	8005a2c <_dtoa_r+0xaa4>
 8005b16:	2331      	movs	r3, #49	; 0x31
 8005b18:	f10b 0b01 	add.w	fp, fp, #1
 8005b1c:	e797      	b.n	8005a4e <_dtoa_r+0xac6>
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <_dtoa_r+0xbc0>)
 8005b20:	f7ff ba9f 	b.w	8005062 <_dtoa_r+0xda>
 8005b24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f47f aa77 	bne.w	800501a <_dtoa_r+0x92>
 8005b2c:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <_dtoa_r+0xbc4>)
 8005b2e:	f7ff ba98 	b.w	8005062 <_dtoa_r+0xda>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dcb6      	bgt.n	8005aa6 <_dtoa_r+0xb1e>
 8005b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	f73f aeb5 	bgt.w	80058aa <_dtoa_r+0x922>
 8005b40:	e7b1      	b.n	8005aa6 <_dtoa_r+0xb1e>
 8005b42:	bf00      	nop
 8005b44:	080086b1 	.word	0x080086b1
 8005b48:	0800860c 	.word	0x0800860c
 8005b4c:	08008635 	.word	0x08008635

08005b50 <_free_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4605      	mov	r5, r0
 8005b54:	2900      	cmp	r1, #0
 8005b56:	d040      	beq.n	8005bda <_free_r+0x8a>
 8005b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5c:	1f0c      	subs	r4, r1, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	bfb8      	it	lt
 8005b62:	18e4      	addlt	r4, r4, r3
 8005b64:	f000 f8e4 	bl	8005d30 <__malloc_lock>
 8005b68:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <_free_r+0x8c>)
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	b933      	cbnz	r3, 8005b7c <_free_r+0x2c>
 8005b6e:	6063      	str	r3, [r4, #4]
 8005b70:	6014      	str	r4, [r2, #0]
 8005b72:	4628      	mov	r0, r5
 8005b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b78:	f000 b8e0 	b.w	8005d3c <__malloc_unlock>
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	d908      	bls.n	8005b92 <_free_r+0x42>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	1821      	adds	r1, r4, r0
 8005b84:	428b      	cmp	r3, r1
 8005b86:	bf01      	itttt	eq
 8005b88:	6819      	ldreq	r1, [r3, #0]
 8005b8a:	685b      	ldreq	r3, [r3, #4]
 8005b8c:	1809      	addeq	r1, r1, r0
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	e7ed      	b.n	8005b6e <_free_r+0x1e>
 8005b92:	461a      	mov	r2, r3
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	b10b      	cbz	r3, 8005b9c <_free_r+0x4c>
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d9fa      	bls.n	8005b92 <_free_r+0x42>
 8005b9c:	6811      	ldr	r1, [r2, #0]
 8005b9e:	1850      	adds	r0, r2, r1
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	d10b      	bne.n	8005bbc <_free_r+0x6c>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	4401      	add	r1, r0
 8005ba8:	1850      	adds	r0, r2, r1
 8005baa:	4283      	cmp	r3, r0
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	d1e0      	bne.n	8005b72 <_free_r+0x22>
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4408      	add	r0, r1
 8005bb6:	6010      	str	r0, [r2, #0]
 8005bb8:	6053      	str	r3, [r2, #4]
 8005bba:	e7da      	b.n	8005b72 <_free_r+0x22>
 8005bbc:	d902      	bls.n	8005bc4 <_free_r+0x74>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	602b      	str	r3, [r5, #0]
 8005bc2:	e7d6      	b.n	8005b72 <_free_r+0x22>
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	1821      	adds	r1, r4, r0
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf01      	itttt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	1809      	addeq	r1, r1, r0
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	6063      	str	r3, [r4, #4]
 8005bd6:	6054      	str	r4, [r2, #4]
 8005bd8:	e7cb      	b.n	8005b72 <_free_r+0x22>
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	200003f4 	.word	0x200003f4

08005be0 <malloc>:
 8005be0:	4b02      	ldr	r3, [pc, #8]	; (8005bec <malloc+0xc>)
 8005be2:	4601      	mov	r1, r0
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	f000 b823 	b.w	8005c30 <_malloc_r>
 8005bea:	bf00      	nop
 8005bec:	20000068 	.word	0x20000068

08005bf0 <sbrk_aligned>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4e0e      	ldr	r6, [pc, #56]	; (8005c2c <sbrk_aligned+0x3c>)
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	6831      	ldr	r1, [r6, #0]
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	b911      	cbnz	r1, 8005c02 <sbrk_aligned+0x12>
 8005bfc:	f001 fe0c 	bl	8007818 <_sbrk_r>
 8005c00:	6030      	str	r0, [r6, #0]
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f001 fe07 	bl	8007818 <_sbrk_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d00a      	beq.n	8005c24 <sbrk_aligned+0x34>
 8005c0e:	1cc4      	adds	r4, r0, #3
 8005c10:	f024 0403 	bic.w	r4, r4, #3
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d007      	beq.n	8005c28 <sbrk_aligned+0x38>
 8005c18:	1a21      	subs	r1, r4, r0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f001 fdfc 	bl	8007818 <_sbrk_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d101      	bne.n	8005c28 <sbrk_aligned+0x38>
 8005c24:	f04f 34ff 	mov.w	r4, #4294967295
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	200003f8 	.word	0x200003f8

08005c30 <_malloc_r>:
 8005c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c34:	1ccd      	adds	r5, r1, #3
 8005c36:	f025 0503 	bic.w	r5, r5, #3
 8005c3a:	3508      	adds	r5, #8
 8005c3c:	2d0c      	cmp	r5, #12
 8005c3e:	bf38      	it	cc
 8005c40:	250c      	movcc	r5, #12
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	4607      	mov	r7, r0
 8005c46:	db01      	blt.n	8005c4c <_malloc_r+0x1c>
 8005c48:	42a9      	cmp	r1, r5
 8005c4a:	d905      	bls.n	8005c58 <_malloc_r+0x28>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	2600      	movs	r6, #0
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4630      	mov	r0, r6
 8005c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d2c <_malloc_r+0xfc>
 8005c5c:	f000 f868 	bl	8005d30 <__malloc_lock>
 8005c60:	f8d8 3000 	ldr.w	r3, [r8]
 8005c64:	461c      	mov	r4, r3
 8005c66:	bb5c      	cbnz	r4, 8005cc0 <_malloc_r+0x90>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f7ff ffc0 	bl	8005bf0 <sbrk_aligned>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	4604      	mov	r4, r0
 8005c74:	d155      	bne.n	8005d22 <_malloc_r+0xf2>
 8005c76:	f8d8 4000 	ldr.w	r4, [r8]
 8005c7a:	4626      	mov	r6, r4
 8005c7c:	2e00      	cmp	r6, #0
 8005c7e:	d145      	bne.n	8005d0c <_malloc_r+0xdc>
 8005c80:	2c00      	cmp	r4, #0
 8005c82:	d048      	beq.n	8005d16 <_malloc_r+0xe6>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	4631      	mov	r1, r6
 8005c88:	4638      	mov	r0, r7
 8005c8a:	eb04 0903 	add.w	r9, r4, r3
 8005c8e:	f001 fdc3 	bl	8007818 <_sbrk_r>
 8005c92:	4581      	cmp	r9, r0
 8005c94:	d13f      	bne.n	8005d16 <_malloc_r+0xe6>
 8005c96:	6821      	ldr	r1, [r4, #0]
 8005c98:	4638      	mov	r0, r7
 8005c9a:	1a6d      	subs	r5, r5, r1
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	f7ff ffa7 	bl	8005bf0 <sbrk_aligned>
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d037      	beq.n	8005d16 <_malloc_r+0xe6>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	442b      	add	r3, r5
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d038      	beq.n	8005d26 <_malloc_r+0xf6>
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	42a2      	cmp	r2, r4
 8005cb8:	d12b      	bne.n	8005d12 <_malloc_r+0xe2>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	e00f      	b.n	8005ce0 <_malloc_r+0xb0>
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	1b52      	subs	r2, r2, r5
 8005cc4:	d41f      	bmi.n	8005d06 <_malloc_r+0xd6>
 8005cc6:	2a0b      	cmp	r2, #11
 8005cc8:	d917      	bls.n	8005cfa <_malloc_r+0xca>
 8005cca:	1961      	adds	r1, r4, r5
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	6025      	str	r5, [r4, #0]
 8005cd0:	bf18      	it	ne
 8005cd2:	6059      	strne	r1, [r3, #4]
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	bf08      	it	eq
 8005cd8:	f8c8 1000 	streq.w	r1, [r8]
 8005cdc:	5162      	str	r2, [r4, r5]
 8005cde:	604b      	str	r3, [r1, #4]
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f104 060b 	add.w	r6, r4, #11
 8005ce6:	f000 f829 	bl	8005d3c <__malloc_unlock>
 8005cea:	f026 0607 	bic.w	r6, r6, #7
 8005cee:	1d23      	adds	r3, r4, #4
 8005cf0:	1af2      	subs	r2, r6, r3
 8005cf2:	d0ae      	beq.n	8005c52 <_malloc_r+0x22>
 8005cf4:	1b9b      	subs	r3, r3, r6
 8005cf6:	50a3      	str	r3, [r4, r2]
 8005cf8:	e7ab      	b.n	8005c52 <_malloc_r+0x22>
 8005cfa:	42a3      	cmp	r3, r4
 8005cfc:	6862      	ldr	r2, [r4, #4]
 8005cfe:	d1dd      	bne.n	8005cbc <_malloc_r+0x8c>
 8005d00:	f8c8 2000 	str.w	r2, [r8]
 8005d04:	e7ec      	b.n	8005ce0 <_malloc_r+0xb0>
 8005d06:	4623      	mov	r3, r4
 8005d08:	6864      	ldr	r4, [r4, #4]
 8005d0a:	e7ac      	b.n	8005c66 <_malloc_r+0x36>
 8005d0c:	4634      	mov	r4, r6
 8005d0e:	6876      	ldr	r6, [r6, #4]
 8005d10:	e7b4      	b.n	8005c7c <_malloc_r+0x4c>
 8005d12:	4613      	mov	r3, r2
 8005d14:	e7cc      	b.n	8005cb0 <_malloc_r+0x80>
 8005d16:	230c      	movs	r3, #12
 8005d18:	4638      	mov	r0, r7
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	f000 f80e 	bl	8005d3c <__malloc_unlock>
 8005d20:	e797      	b.n	8005c52 <_malloc_r+0x22>
 8005d22:	6025      	str	r5, [r4, #0]
 8005d24:	e7dc      	b.n	8005ce0 <_malloc_r+0xb0>
 8005d26:	605b      	str	r3, [r3, #4]
 8005d28:	deff      	udf	#255	; 0xff
 8005d2a:	bf00      	nop
 8005d2c:	200003f4 	.word	0x200003f4

08005d30 <__malloc_lock>:
 8005d30:	4801      	ldr	r0, [pc, #4]	; (8005d38 <__malloc_lock+0x8>)
 8005d32:	f7ff b88a 	b.w	8004e4a <__retarget_lock_acquire_recursive>
 8005d36:	bf00      	nop
 8005d38:	200003f0 	.word	0x200003f0

08005d3c <__malloc_unlock>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	; (8005d44 <__malloc_unlock+0x8>)
 8005d3e:	f7ff b885 	b.w	8004e4c <__retarget_lock_release_recursive>
 8005d42:	bf00      	nop
 8005d44:	200003f0 	.word	0x200003f0

08005d48 <_Balloc>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	69c6      	ldr	r6, [r0, #28]
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	460d      	mov	r5, r1
 8005d50:	b976      	cbnz	r6, 8005d70 <_Balloc+0x28>
 8005d52:	2010      	movs	r0, #16
 8005d54:	f7ff ff44 	bl	8005be0 <malloc>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	61e0      	str	r0, [r4, #28]
 8005d5c:	b920      	cbnz	r0, 8005d68 <_Balloc+0x20>
 8005d5e:	216b      	movs	r1, #107	; 0x6b
 8005d60:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <_Balloc+0x78>)
 8005d62:	4818      	ldr	r0, [pc, #96]	; (8005dc4 <_Balloc+0x7c>)
 8005d64:	f001 fd7c 	bl	8007860 <__assert_func>
 8005d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d6c:	6006      	str	r6, [r0, #0]
 8005d6e:	60c6      	str	r6, [r0, #12]
 8005d70:	69e6      	ldr	r6, [r4, #28]
 8005d72:	68f3      	ldr	r3, [r6, #12]
 8005d74:	b183      	cbz	r3, 8005d98 <_Balloc+0x50>
 8005d76:	69e3      	ldr	r3, [r4, #28]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d7e:	b9b8      	cbnz	r0, 8005db0 <_Balloc+0x68>
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f605 	lsl.w	r6, r1, r5
 8005d86:	1d72      	adds	r2, r6, #5
 8005d88:	4620      	mov	r0, r4
 8005d8a:	0092      	lsls	r2, r2, #2
 8005d8c:	f001 fd86 	bl	800789c <_calloc_r>
 8005d90:	b160      	cbz	r0, 8005dac <_Balloc+0x64>
 8005d92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d96:	e00e      	b.n	8005db6 <_Balloc+0x6e>
 8005d98:	2221      	movs	r2, #33	; 0x21
 8005d9a:	2104      	movs	r1, #4
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f001 fd7d 	bl	800789c <_calloc_r>
 8005da2:	69e3      	ldr	r3, [r4, #28]
 8005da4:	60f0      	str	r0, [r6, #12]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e4      	bne.n	8005d76 <_Balloc+0x2e>
 8005dac:	2000      	movs	r0, #0
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	6802      	ldr	r2, [r0, #0]
 8005db2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005db6:	2300      	movs	r3, #0
 8005db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dbc:	e7f7      	b.n	8005dae <_Balloc+0x66>
 8005dbe:	bf00      	nop
 8005dc0:	08008642 	.word	0x08008642
 8005dc4:	080086c2 	.word	0x080086c2

08005dc8 <_Bfree>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	69c6      	ldr	r6, [r0, #28]
 8005dcc:	4605      	mov	r5, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	b976      	cbnz	r6, 8005df0 <_Bfree+0x28>
 8005dd2:	2010      	movs	r0, #16
 8005dd4:	f7ff ff04 	bl	8005be0 <malloc>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	61e8      	str	r0, [r5, #28]
 8005ddc:	b920      	cbnz	r0, 8005de8 <_Bfree+0x20>
 8005dde:	218f      	movs	r1, #143	; 0x8f
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <_Bfree+0x3c>)
 8005de2:	4809      	ldr	r0, [pc, #36]	; (8005e08 <_Bfree+0x40>)
 8005de4:	f001 fd3c 	bl	8007860 <__assert_func>
 8005de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dec:	6006      	str	r6, [r0, #0]
 8005dee:	60c6      	str	r6, [r0, #12]
 8005df0:	b13c      	cbz	r4, 8005e02 <_Bfree+0x3a>
 8005df2:	69eb      	ldr	r3, [r5, #28]
 8005df4:	6862      	ldr	r2, [r4, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dfc:	6021      	str	r1, [r4, #0]
 8005dfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	08008642 	.word	0x08008642
 8005e08:	080086c2 	.word	0x080086c2

08005e0c <__multadd>:
 8005e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	4607      	mov	r7, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	461e      	mov	r6, r3
 8005e16:	2000      	movs	r0, #0
 8005e18:	690d      	ldr	r5, [r1, #16]
 8005e1a:	f101 0c14 	add.w	ip, r1, #20
 8005e1e:	f8dc 3000 	ldr.w	r3, [ip]
 8005e22:	3001      	adds	r0, #1
 8005e24:	b299      	uxth	r1, r3
 8005e26:	fb02 6101 	mla	r1, r2, r1, r6
 8005e2a:	0c1e      	lsrs	r6, r3, #16
 8005e2c:	0c0b      	lsrs	r3, r1, #16
 8005e2e:	fb02 3306 	mla	r3, r2, r6, r3
 8005e32:	b289      	uxth	r1, r1
 8005e34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e38:	4285      	cmp	r5, r0
 8005e3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8005e42:	dcec      	bgt.n	8005e1e <__multadd+0x12>
 8005e44:	b30e      	cbz	r6, 8005e8a <__multadd+0x7e>
 8005e46:	68a3      	ldr	r3, [r4, #8]
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dc19      	bgt.n	8005e80 <__multadd+0x74>
 8005e4c:	6861      	ldr	r1, [r4, #4]
 8005e4e:	4638      	mov	r0, r7
 8005e50:	3101      	adds	r1, #1
 8005e52:	f7ff ff79 	bl	8005d48 <_Balloc>
 8005e56:	4680      	mov	r8, r0
 8005e58:	b928      	cbnz	r0, 8005e66 <__multadd+0x5a>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	21ba      	movs	r1, #186	; 0xba
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <__multadd+0x84>)
 8005e60:	480c      	ldr	r0, [pc, #48]	; (8005e94 <__multadd+0x88>)
 8005e62:	f001 fcfd 	bl	8007860 <__assert_func>
 8005e66:	6922      	ldr	r2, [r4, #16]
 8005e68:	f104 010c 	add.w	r1, r4, #12
 8005e6c:	3202      	adds	r2, #2
 8005e6e:	0092      	lsls	r2, r2, #2
 8005e70:	300c      	adds	r0, #12
 8005e72:	f001 fce1 	bl	8007838 <memcpy>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7ff ffa5 	bl	8005dc8 <_Bfree>
 8005e7e:	4644      	mov	r4, r8
 8005e80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e84:	3501      	adds	r5, #1
 8005e86:	615e      	str	r6, [r3, #20]
 8005e88:	6125      	str	r5, [r4, #16]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e90:	080086b1 	.word	0x080086b1
 8005e94:	080086c2 	.word	0x080086c2

08005e98 <__s2b>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	4615      	mov	r5, r2
 8005e9e:	2209      	movs	r2, #9
 8005ea0:	461f      	mov	r7, r3
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eaa:	4606      	mov	r6, r0
 8005eac:	2201      	movs	r2, #1
 8005eae:	2100      	movs	r1, #0
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	db09      	blt.n	8005ec8 <__s2b+0x30>
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff ff47 	bl	8005d48 <_Balloc>
 8005eba:	b940      	cbnz	r0, 8005ece <__s2b+0x36>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	21d3      	movs	r1, #211	; 0xd3
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <__s2b+0x8c>)
 8005ec2:	4819      	ldr	r0, [pc, #100]	; (8005f28 <__s2b+0x90>)
 8005ec4:	f001 fccc 	bl	8007860 <__assert_func>
 8005ec8:	0052      	lsls	r2, r2, #1
 8005eca:	3101      	adds	r1, #1
 8005ecc:	e7f0      	b.n	8005eb0 <__s2b+0x18>
 8005ece:	9b08      	ldr	r3, [sp, #32]
 8005ed0:	2d09      	cmp	r5, #9
 8005ed2:	6143      	str	r3, [r0, #20]
 8005ed4:	f04f 0301 	mov.w	r3, #1
 8005ed8:	6103      	str	r3, [r0, #16]
 8005eda:	dd16      	ble.n	8005f0a <__s2b+0x72>
 8005edc:	f104 0909 	add.w	r9, r4, #9
 8005ee0:	46c8      	mov	r8, r9
 8005ee2:	442c      	add	r4, r5
 8005ee4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ee8:	4601      	mov	r1, r0
 8005eea:	220a      	movs	r2, #10
 8005eec:	4630      	mov	r0, r6
 8005eee:	3b30      	subs	r3, #48	; 0x30
 8005ef0:	f7ff ff8c 	bl	8005e0c <__multadd>
 8005ef4:	45a0      	cmp	r8, r4
 8005ef6:	d1f5      	bne.n	8005ee4 <__s2b+0x4c>
 8005ef8:	f1a5 0408 	sub.w	r4, r5, #8
 8005efc:	444c      	add	r4, r9
 8005efe:	1b2d      	subs	r5, r5, r4
 8005f00:	1963      	adds	r3, r4, r5
 8005f02:	42bb      	cmp	r3, r7
 8005f04:	db04      	blt.n	8005f10 <__s2b+0x78>
 8005f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0a:	2509      	movs	r5, #9
 8005f0c:	340a      	adds	r4, #10
 8005f0e:	e7f6      	b.n	8005efe <__s2b+0x66>
 8005f10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f14:	4601      	mov	r1, r0
 8005f16:	220a      	movs	r2, #10
 8005f18:	4630      	mov	r0, r6
 8005f1a:	3b30      	subs	r3, #48	; 0x30
 8005f1c:	f7ff ff76 	bl	8005e0c <__multadd>
 8005f20:	e7ee      	b.n	8005f00 <__s2b+0x68>
 8005f22:	bf00      	nop
 8005f24:	080086b1 	.word	0x080086b1
 8005f28:	080086c2 	.word	0x080086c2

08005f2c <__hi0bits>:
 8005f2c:	0c02      	lsrs	r2, r0, #16
 8005f2e:	0412      	lsls	r2, r2, #16
 8005f30:	4603      	mov	r3, r0
 8005f32:	b9ca      	cbnz	r2, 8005f68 <__hi0bits+0x3c>
 8005f34:	0403      	lsls	r3, r0, #16
 8005f36:	2010      	movs	r0, #16
 8005f38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f3c:	bf04      	itt	eq
 8005f3e:	021b      	lsleq	r3, r3, #8
 8005f40:	3008      	addeq	r0, #8
 8005f42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f46:	bf04      	itt	eq
 8005f48:	011b      	lsleq	r3, r3, #4
 8005f4a:	3004      	addeq	r0, #4
 8005f4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f50:	bf04      	itt	eq
 8005f52:	009b      	lsleq	r3, r3, #2
 8005f54:	3002      	addeq	r0, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db05      	blt.n	8005f66 <__hi0bits+0x3a>
 8005f5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005f5e:	f100 0001 	add.w	r0, r0, #1
 8005f62:	bf08      	it	eq
 8005f64:	2020      	moveq	r0, #32
 8005f66:	4770      	bx	lr
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7e5      	b.n	8005f38 <__hi0bits+0xc>

08005f6c <__lo0bits>:
 8005f6c:	6803      	ldr	r3, [r0, #0]
 8005f6e:	4602      	mov	r2, r0
 8005f70:	f013 0007 	ands.w	r0, r3, #7
 8005f74:	d00b      	beq.n	8005f8e <__lo0bits+0x22>
 8005f76:	07d9      	lsls	r1, r3, #31
 8005f78:	d421      	bmi.n	8005fbe <__lo0bits+0x52>
 8005f7a:	0798      	lsls	r0, r3, #30
 8005f7c:	bf49      	itett	mi
 8005f7e:	085b      	lsrmi	r3, r3, #1
 8005f80:	089b      	lsrpl	r3, r3, #2
 8005f82:	2001      	movmi	r0, #1
 8005f84:	6013      	strmi	r3, [r2, #0]
 8005f86:	bf5c      	itt	pl
 8005f88:	2002      	movpl	r0, #2
 8005f8a:	6013      	strpl	r3, [r2, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	b299      	uxth	r1, r3
 8005f90:	b909      	cbnz	r1, 8005f96 <__lo0bits+0x2a>
 8005f92:	2010      	movs	r0, #16
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	b2d9      	uxtb	r1, r3
 8005f98:	b909      	cbnz	r1, 8005f9e <__lo0bits+0x32>
 8005f9a:	3008      	adds	r0, #8
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	0719      	lsls	r1, r3, #28
 8005fa0:	bf04      	itt	eq
 8005fa2:	091b      	lsreq	r3, r3, #4
 8005fa4:	3004      	addeq	r0, #4
 8005fa6:	0799      	lsls	r1, r3, #30
 8005fa8:	bf04      	itt	eq
 8005faa:	089b      	lsreq	r3, r3, #2
 8005fac:	3002      	addeq	r0, #2
 8005fae:	07d9      	lsls	r1, r3, #31
 8005fb0:	d403      	bmi.n	8005fba <__lo0bits+0x4e>
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	f100 0001 	add.w	r0, r0, #1
 8005fb8:	d003      	beq.n	8005fc2 <__lo0bits+0x56>
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4770      	bx	lr
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	4770      	bx	lr
 8005fc2:	2020      	movs	r0, #32
 8005fc4:	4770      	bx	lr
	...

08005fc8 <__i2b>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	460c      	mov	r4, r1
 8005fcc:	2101      	movs	r1, #1
 8005fce:	f7ff febb 	bl	8005d48 <_Balloc>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	b928      	cbnz	r0, 8005fe2 <__i2b+0x1a>
 8005fd6:	f240 1145 	movw	r1, #325	; 0x145
 8005fda:	4b04      	ldr	r3, [pc, #16]	; (8005fec <__i2b+0x24>)
 8005fdc:	4804      	ldr	r0, [pc, #16]	; (8005ff0 <__i2b+0x28>)
 8005fde:	f001 fc3f 	bl	8007860 <__assert_func>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	6144      	str	r4, [r0, #20]
 8005fe6:	6103      	str	r3, [r0, #16]
 8005fe8:	bd10      	pop	{r4, pc}
 8005fea:	bf00      	nop
 8005fec:	080086b1 	.word	0x080086b1
 8005ff0:	080086c2 	.word	0x080086c2

08005ff4 <__multiply>:
 8005ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	4691      	mov	r9, r2
 8005ffa:	690a      	ldr	r2, [r1, #16]
 8005ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006000:	460c      	mov	r4, r1
 8006002:	429a      	cmp	r2, r3
 8006004:	bfbe      	ittt	lt
 8006006:	460b      	movlt	r3, r1
 8006008:	464c      	movlt	r4, r9
 800600a:	4699      	movlt	r9, r3
 800600c:	6927      	ldr	r7, [r4, #16]
 800600e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	6861      	ldr	r1, [r4, #4]
 8006016:	eb07 060a 	add.w	r6, r7, sl
 800601a:	42b3      	cmp	r3, r6
 800601c:	b085      	sub	sp, #20
 800601e:	bfb8      	it	lt
 8006020:	3101      	addlt	r1, #1
 8006022:	f7ff fe91 	bl	8005d48 <_Balloc>
 8006026:	b930      	cbnz	r0, 8006036 <__multiply+0x42>
 8006028:	4602      	mov	r2, r0
 800602a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800602e:	4b43      	ldr	r3, [pc, #268]	; (800613c <__multiply+0x148>)
 8006030:	4843      	ldr	r0, [pc, #268]	; (8006140 <__multiply+0x14c>)
 8006032:	f001 fc15 	bl	8007860 <__assert_func>
 8006036:	f100 0514 	add.w	r5, r0, #20
 800603a:	462b      	mov	r3, r5
 800603c:	2200      	movs	r2, #0
 800603e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006042:	4543      	cmp	r3, r8
 8006044:	d321      	bcc.n	800608a <__multiply+0x96>
 8006046:	f104 0314 	add.w	r3, r4, #20
 800604a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800604e:	f109 0314 	add.w	r3, r9, #20
 8006052:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006056:	9202      	str	r2, [sp, #8]
 8006058:	1b3a      	subs	r2, r7, r4
 800605a:	3a15      	subs	r2, #21
 800605c:	f022 0203 	bic.w	r2, r2, #3
 8006060:	3204      	adds	r2, #4
 8006062:	f104 0115 	add.w	r1, r4, #21
 8006066:	428f      	cmp	r7, r1
 8006068:	bf38      	it	cc
 800606a:	2204      	movcc	r2, #4
 800606c:	9201      	str	r2, [sp, #4]
 800606e:	9a02      	ldr	r2, [sp, #8]
 8006070:	9303      	str	r3, [sp, #12]
 8006072:	429a      	cmp	r2, r3
 8006074:	d80c      	bhi.n	8006090 <__multiply+0x9c>
 8006076:	2e00      	cmp	r6, #0
 8006078:	dd03      	ble.n	8006082 <__multiply+0x8e>
 800607a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800607e:	2b00      	cmp	r3, #0
 8006080:	d05a      	beq.n	8006138 <__multiply+0x144>
 8006082:	6106      	str	r6, [r0, #16]
 8006084:	b005      	add	sp, #20
 8006086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608a:	f843 2b04 	str.w	r2, [r3], #4
 800608e:	e7d8      	b.n	8006042 <__multiply+0x4e>
 8006090:	f8b3 a000 	ldrh.w	sl, [r3]
 8006094:	f1ba 0f00 	cmp.w	sl, #0
 8006098:	d023      	beq.n	80060e2 <__multiply+0xee>
 800609a:	46a9      	mov	r9, r5
 800609c:	f04f 0c00 	mov.w	ip, #0
 80060a0:	f104 0e14 	add.w	lr, r4, #20
 80060a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80060a8:	f8d9 1000 	ldr.w	r1, [r9]
 80060ac:	fa1f fb82 	uxth.w	fp, r2
 80060b0:	b289      	uxth	r1, r1
 80060b2:	fb0a 110b 	mla	r1, sl, fp, r1
 80060b6:	4461      	add	r1, ip
 80060b8:	f8d9 c000 	ldr.w	ip, [r9]
 80060bc:	0c12      	lsrs	r2, r2, #16
 80060be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80060c2:	fb0a c202 	mla	r2, sl, r2, ip
 80060c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060ca:	b289      	uxth	r1, r1
 80060cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060d0:	4577      	cmp	r7, lr
 80060d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80060d6:	f849 1b04 	str.w	r1, [r9], #4
 80060da:	d8e3      	bhi.n	80060a4 <__multiply+0xb0>
 80060dc:	9a01      	ldr	r2, [sp, #4]
 80060de:	f845 c002 	str.w	ip, [r5, r2]
 80060e2:	9a03      	ldr	r2, [sp, #12]
 80060e4:	3304      	adds	r3, #4
 80060e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060ea:	f1b9 0f00 	cmp.w	r9, #0
 80060ee:	d021      	beq.n	8006134 <__multiply+0x140>
 80060f0:	46ae      	mov	lr, r5
 80060f2:	f04f 0a00 	mov.w	sl, #0
 80060f6:	6829      	ldr	r1, [r5, #0]
 80060f8:	f104 0c14 	add.w	ip, r4, #20
 80060fc:	f8bc b000 	ldrh.w	fp, [ip]
 8006100:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006104:	b289      	uxth	r1, r1
 8006106:	fb09 220b 	mla	r2, r9, fp, r2
 800610a:	4452      	add	r2, sl
 800610c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006110:	f84e 1b04 	str.w	r1, [lr], #4
 8006114:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006118:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800611c:	f8be 1000 	ldrh.w	r1, [lr]
 8006120:	4567      	cmp	r7, ip
 8006122:	fb09 110a 	mla	r1, r9, sl, r1
 8006126:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800612a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800612e:	d8e5      	bhi.n	80060fc <__multiply+0x108>
 8006130:	9a01      	ldr	r2, [sp, #4]
 8006132:	50a9      	str	r1, [r5, r2]
 8006134:	3504      	adds	r5, #4
 8006136:	e79a      	b.n	800606e <__multiply+0x7a>
 8006138:	3e01      	subs	r6, #1
 800613a:	e79c      	b.n	8006076 <__multiply+0x82>
 800613c:	080086b1 	.word	0x080086b1
 8006140:	080086c2 	.word	0x080086c2

08006144 <__pow5mult>:
 8006144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006148:	4615      	mov	r5, r2
 800614a:	f012 0203 	ands.w	r2, r2, #3
 800614e:	4606      	mov	r6, r0
 8006150:	460f      	mov	r7, r1
 8006152:	d007      	beq.n	8006164 <__pow5mult+0x20>
 8006154:	4c25      	ldr	r4, [pc, #148]	; (80061ec <__pow5mult+0xa8>)
 8006156:	3a01      	subs	r2, #1
 8006158:	2300      	movs	r3, #0
 800615a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800615e:	f7ff fe55 	bl	8005e0c <__multadd>
 8006162:	4607      	mov	r7, r0
 8006164:	10ad      	asrs	r5, r5, #2
 8006166:	d03d      	beq.n	80061e4 <__pow5mult+0xa0>
 8006168:	69f4      	ldr	r4, [r6, #28]
 800616a:	b97c      	cbnz	r4, 800618c <__pow5mult+0x48>
 800616c:	2010      	movs	r0, #16
 800616e:	f7ff fd37 	bl	8005be0 <malloc>
 8006172:	4602      	mov	r2, r0
 8006174:	61f0      	str	r0, [r6, #28]
 8006176:	b928      	cbnz	r0, 8006184 <__pow5mult+0x40>
 8006178:	f240 11b3 	movw	r1, #435	; 0x1b3
 800617c:	4b1c      	ldr	r3, [pc, #112]	; (80061f0 <__pow5mult+0xac>)
 800617e:	481d      	ldr	r0, [pc, #116]	; (80061f4 <__pow5mult+0xb0>)
 8006180:	f001 fb6e 	bl	8007860 <__assert_func>
 8006184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006188:	6004      	str	r4, [r0, #0]
 800618a:	60c4      	str	r4, [r0, #12]
 800618c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006194:	b94c      	cbnz	r4, 80061aa <__pow5mult+0x66>
 8006196:	f240 2171 	movw	r1, #625	; 0x271
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff ff14 	bl	8005fc8 <__i2b>
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80061a8:	6003      	str	r3, [r0, #0]
 80061aa:	f04f 0900 	mov.w	r9, #0
 80061ae:	07eb      	lsls	r3, r5, #31
 80061b0:	d50a      	bpl.n	80061c8 <__pow5mult+0x84>
 80061b2:	4639      	mov	r1, r7
 80061b4:	4622      	mov	r2, r4
 80061b6:	4630      	mov	r0, r6
 80061b8:	f7ff ff1c 	bl	8005ff4 <__multiply>
 80061bc:	4680      	mov	r8, r0
 80061be:	4639      	mov	r1, r7
 80061c0:	4630      	mov	r0, r6
 80061c2:	f7ff fe01 	bl	8005dc8 <_Bfree>
 80061c6:	4647      	mov	r7, r8
 80061c8:	106d      	asrs	r5, r5, #1
 80061ca:	d00b      	beq.n	80061e4 <__pow5mult+0xa0>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	b938      	cbnz	r0, 80061e0 <__pow5mult+0x9c>
 80061d0:	4622      	mov	r2, r4
 80061d2:	4621      	mov	r1, r4
 80061d4:	4630      	mov	r0, r6
 80061d6:	f7ff ff0d 	bl	8005ff4 <__multiply>
 80061da:	6020      	str	r0, [r4, #0]
 80061dc:	f8c0 9000 	str.w	r9, [r0]
 80061e0:	4604      	mov	r4, r0
 80061e2:	e7e4      	b.n	80061ae <__pow5mult+0x6a>
 80061e4:	4638      	mov	r0, r7
 80061e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ea:	bf00      	nop
 80061ec:	08008810 	.word	0x08008810
 80061f0:	08008642 	.word	0x08008642
 80061f4:	080086c2 	.word	0x080086c2

080061f8 <__lshift>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	460c      	mov	r4, r1
 80061fe:	4607      	mov	r7, r0
 8006200:	4691      	mov	r9, r2
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	6849      	ldr	r1, [r1, #4]
 8006206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006210:	f108 0601 	add.w	r6, r8, #1
 8006214:	42b3      	cmp	r3, r6
 8006216:	db0b      	blt.n	8006230 <__lshift+0x38>
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff fd95 	bl	8005d48 <_Balloc>
 800621e:	4605      	mov	r5, r0
 8006220:	b948      	cbnz	r0, 8006236 <__lshift+0x3e>
 8006222:	4602      	mov	r2, r0
 8006224:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006228:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <__lshift+0xd0>)
 800622a:	4828      	ldr	r0, [pc, #160]	; (80062cc <__lshift+0xd4>)
 800622c:	f001 fb18 	bl	8007860 <__assert_func>
 8006230:	3101      	adds	r1, #1
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	e7ee      	b.n	8006214 <__lshift+0x1c>
 8006236:	2300      	movs	r3, #0
 8006238:	f100 0114 	add.w	r1, r0, #20
 800623c:	f100 0210 	add.w	r2, r0, #16
 8006240:	4618      	mov	r0, r3
 8006242:	4553      	cmp	r3, sl
 8006244:	db33      	blt.n	80062ae <__lshift+0xb6>
 8006246:	6920      	ldr	r0, [r4, #16]
 8006248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800624c:	f104 0314 	add.w	r3, r4, #20
 8006250:	f019 091f 	ands.w	r9, r9, #31
 8006254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800625c:	d02b      	beq.n	80062b6 <__lshift+0xbe>
 800625e:	468a      	mov	sl, r1
 8006260:	2200      	movs	r2, #0
 8006262:	f1c9 0e20 	rsb	lr, r9, #32
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	fa00 f009 	lsl.w	r0, r0, r9
 800626c:	4310      	orrs	r0, r2
 800626e:	f84a 0b04 	str.w	r0, [sl], #4
 8006272:	f853 2b04 	ldr.w	r2, [r3], #4
 8006276:	459c      	cmp	ip, r3
 8006278:	fa22 f20e 	lsr.w	r2, r2, lr
 800627c:	d8f3      	bhi.n	8006266 <__lshift+0x6e>
 800627e:	ebac 0304 	sub.w	r3, ip, r4
 8006282:	3b15      	subs	r3, #21
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	3304      	adds	r3, #4
 800628a:	f104 0015 	add.w	r0, r4, #21
 800628e:	4584      	cmp	ip, r0
 8006290:	bf38      	it	cc
 8006292:	2304      	movcc	r3, #4
 8006294:	50ca      	str	r2, [r1, r3]
 8006296:	b10a      	cbz	r2, 800629c <__lshift+0xa4>
 8006298:	f108 0602 	add.w	r6, r8, #2
 800629c:	3e01      	subs	r6, #1
 800629e:	4638      	mov	r0, r7
 80062a0:	4621      	mov	r1, r4
 80062a2:	612e      	str	r6, [r5, #16]
 80062a4:	f7ff fd90 	bl	8005dc8 <_Bfree>
 80062a8:	4628      	mov	r0, r5
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80062b2:	3301      	adds	r3, #1
 80062b4:	e7c5      	b.n	8006242 <__lshift+0x4a>
 80062b6:	3904      	subs	r1, #4
 80062b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062bc:	459c      	cmp	ip, r3
 80062be:	f841 2f04 	str.w	r2, [r1, #4]!
 80062c2:	d8f9      	bhi.n	80062b8 <__lshift+0xc0>
 80062c4:	e7ea      	b.n	800629c <__lshift+0xa4>
 80062c6:	bf00      	nop
 80062c8:	080086b1 	.word	0x080086b1
 80062cc:	080086c2 	.word	0x080086c2

080062d0 <__mcmp>:
 80062d0:	4603      	mov	r3, r0
 80062d2:	690a      	ldr	r2, [r1, #16]
 80062d4:	6900      	ldr	r0, [r0, #16]
 80062d6:	b530      	push	{r4, r5, lr}
 80062d8:	1a80      	subs	r0, r0, r2
 80062da:	d10d      	bne.n	80062f8 <__mcmp+0x28>
 80062dc:	3314      	adds	r3, #20
 80062de:	3114      	adds	r1, #20
 80062e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062f0:	4295      	cmp	r5, r2
 80062f2:	d002      	beq.n	80062fa <__mcmp+0x2a>
 80062f4:	d304      	bcc.n	8006300 <__mcmp+0x30>
 80062f6:	2001      	movs	r0, #1
 80062f8:	bd30      	pop	{r4, r5, pc}
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	d3f4      	bcc.n	80062e8 <__mcmp+0x18>
 80062fe:	e7fb      	b.n	80062f8 <__mcmp+0x28>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	e7f8      	b.n	80062f8 <__mcmp+0x28>
	...

08006308 <__mdiff>:
 8006308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	460d      	mov	r5, r1
 800630e:	4607      	mov	r7, r0
 8006310:	4611      	mov	r1, r2
 8006312:	4628      	mov	r0, r5
 8006314:	4614      	mov	r4, r2
 8006316:	f7ff ffdb 	bl	80062d0 <__mcmp>
 800631a:	1e06      	subs	r6, r0, #0
 800631c:	d111      	bne.n	8006342 <__mdiff+0x3a>
 800631e:	4631      	mov	r1, r6
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff fd11 	bl	8005d48 <_Balloc>
 8006326:	4602      	mov	r2, r0
 8006328:	b928      	cbnz	r0, 8006336 <__mdiff+0x2e>
 800632a:	f240 2137 	movw	r1, #567	; 0x237
 800632e:	4b3a      	ldr	r3, [pc, #232]	; (8006418 <__mdiff+0x110>)
 8006330:	483a      	ldr	r0, [pc, #232]	; (800641c <__mdiff+0x114>)
 8006332:	f001 fa95 	bl	8007860 <__assert_func>
 8006336:	2301      	movs	r3, #1
 8006338:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800633c:	4610      	mov	r0, r2
 800633e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006342:	bfa4      	itt	ge
 8006344:	4623      	movge	r3, r4
 8006346:	462c      	movge	r4, r5
 8006348:	4638      	mov	r0, r7
 800634a:	6861      	ldr	r1, [r4, #4]
 800634c:	bfa6      	itte	ge
 800634e:	461d      	movge	r5, r3
 8006350:	2600      	movge	r6, #0
 8006352:	2601      	movlt	r6, #1
 8006354:	f7ff fcf8 	bl	8005d48 <_Balloc>
 8006358:	4602      	mov	r2, r0
 800635a:	b918      	cbnz	r0, 8006364 <__mdiff+0x5c>
 800635c:	f240 2145 	movw	r1, #581	; 0x245
 8006360:	4b2d      	ldr	r3, [pc, #180]	; (8006418 <__mdiff+0x110>)
 8006362:	e7e5      	b.n	8006330 <__mdiff+0x28>
 8006364:	f102 0814 	add.w	r8, r2, #20
 8006368:	46c2      	mov	sl, r8
 800636a:	f04f 0c00 	mov.w	ip, #0
 800636e:	6927      	ldr	r7, [r4, #16]
 8006370:	60c6      	str	r6, [r0, #12]
 8006372:	692e      	ldr	r6, [r5, #16]
 8006374:	f104 0014 	add.w	r0, r4, #20
 8006378:	f105 0914 	add.w	r9, r5, #20
 800637c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006384:	3410      	adds	r4, #16
 8006386:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800638a:	f859 3b04 	ldr.w	r3, [r9], #4
 800638e:	fa1f f18b 	uxth.w	r1, fp
 8006392:	4461      	add	r1, ip
 8006394:	fa1f fc83 	uxth.w	ip, r3
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	eba1 010c 	sub.w	r1, r1, ip
 800639e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80063a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063a6:	b289      	uxth	r1, r1
 80063a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80063ac:	454e      	cmp	r6, r9
 80063ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80063b2:	f84a 1b04 	str.w	r1, [sl], #4
 80063b6:	d8e6      	bhi.n	8006386 <__mdiff+0x7e>
 80063b8:	1b73      	subs	r3, r6, r5
 80063ba:	3b15      	subs	r3, #21
 80063bc:	f023 0303 	bic.w	r3, r3, #3
 80063c0:	3515      	adds	r5, #21
 80063c2:	3304      	adds	r3, #4
 80063c4:	42ae      	cmp	r6, r5
 80063c6:	bf38      	it	cc
 80063c8:	2304      	movcc	r3, #4
 80063ca:	4418      	add	r0, r3
 80063cc:	4443      	add	r3, r8
 80063ce:	461e      	mov	r6, r3
 80063d0:	4605      	mov	r5, r0
 80063d2:	4575      	cmp	r5, lr
 80063d4:	d30e      	bcc.n	80063f4 <__mdiff+0xec>
 80063d6:	f10e 0103 	add.w	r1, lr, #3
 80063da:	1a09      	subs	r1, r1, r0
 80063dc:	f021 0103 	bic.w	r1, r1, #3
 80063e0:	3803      	subs	r0, #3
 80063e2:	4586      	cmp	lr, r0
 80063e4:	bf38      	it	cc
 80063e6:	2100      	movcc	r1, #0
 80063e8:	440b      	add	r3, r1
 80063ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063ee:	b189      	cbz	r1, 8006414 <__mdiff+0x10c>
 80063f0:	6117      	str	r7, [r2, #16]
 80063f2:	e7a3      	b.n	800633c <__mdiff+0x34>
 80063f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80063f8:	fa1f f188 	uxth.w	r1, r8
 80063fc:	4461      	add	r1, ip
 80063fe:	140c      	asrs	r4, r1, #16
 8006400:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006404:	b289      	uxth	r1, r1
 8006406:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800640a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800640e:	f846 1b04 	str.w	r1, [r6], #4
 8006412:	e7de      	b.n	80063d2 <__mdiff+0xca>
 8006414:	3f01      	subs	r7, #1
 8006416:	e7e8      	b.n	80063ea <__mdiff+0xe2>
 8006418:	080086b1 	.word	0x080086b1
 800641c:	080086c2 	.word	0x080086c2

08006420 <__ulp>:
 8006420:	4b0e      	ldr	r3, [pc, #56]	; (800645c <__ulp+0x3c>)
 8006422:	400b      	ands	r3, r1
 8006424:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006428:	2b00      	cmp	r3, #0
 800642a:	dc08      	bgt.n	800643e <__ulp+0x1e>
 800642c:	425b      	negs	r3, r3
 800642e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006432:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006436:	da04      	bge.n	8006442 <__ulp+0x22>
 8006438:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800643c:	4113      	asrs	r3, r2
 800643e:	2200      	movs	r2, #0
 8006440:	e008      	b.n	8006454 <__ulp+0x34>
 8006442:	f1a2 0314 	sub.w	r3, r2, #20
 8006446:	2b1e      	cmp	r3, #30
 8006448:	bfd6      	itet	le
 800644a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800644e:	2201      	movgt	r2, #1
 8006450:	40da      	lsrle	r2, r3
 8006452:	2300      	movs	r3, #0
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	7ff00000 	.word	0x7ff00000

08006460 <__b2d>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	6905      	ldr	r5, [r0, #16]
 8006464:	f100 0714 	add.w	r7, r0, #20
 8006468:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800646c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006470:	1f2e      	subs	r6, r5, #4
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff fd5a 	bl	8005f2c <__hi0bits>
 8006478:	f1c0 0220 	rsb	r2, r0, #32
 800647c:	280a      	cmp	r0, #10
 800647e:	4603      	mov	r3, r0
 8006480:	f8df c068 	ldr.w	ip, [pc, #104]	; 80064ec <__b2d+0x8c>
 8006484:	600a      	str	r2, [r1, #0]
 8006486:	dc12      	bgt.n	80064ae <__b2d+0x4e>
 8006488:	f1c0 0e0b 	rsb	lr, r0, #11
 800648c:	fa24 f20e 	lsr.w	r2, r4, lr
 8006490:	42b7      	cmp	r7, r6
 8006492:	ea42 010c 	orr.w	r1, r2, ip
 8006496:	bf2c      	ite	cs
 8006498:	2200      	movcs	r2, #0
 800649a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800649e:	3315      	adds	r3, #21
 80064a0:	fa04 f303 	lsl.w	r3, r4, r3
 80064a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80064a8:	431a      	orrs	r2, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ae:	42b7      	cmp	r7, r6
 80064b0:	bf2e      	itee	cs
 80064b2:	2200      	movcs	r2, #0
 80064b4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80064b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80064bc:	3b0b      	subs	r3, #11
 80064be:	d012      	beq.n	80064e6 <__b2d+0x86>
 80064c0:	f1c3 0520 	rsb	r5, r3, #32
 80064c4:	fa22 f105 	lsr.w	r1, r2, r5
 80064c8:	409c      	lsls	r4, r3
 80064ca:	430c      	orrs	r4, r1
 80064cc:	42be      	cmp	r6, r7
 80064ce:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80064d2:	bf94      	ite	ls
 80064d4:	2400      	movls	r4, #0
 80064d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80064da:	409a      	lsls	r2, r3
 80064dc:	40ec      	lsrs	r4, r5
 80064de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80064e2:	4322      	orrs	r2, r4
 80064e4:	e7e1      	b.n	80064aa <__b2d+0x4a>
 80064e6:	ea44 010c 	orr.w	r1, r4, ip
 80064ea:	e7de      	b.n	80064aa <__b2d+0x4a>
 80064ec:	3ff00000 	.word	0x3ff00000

080064f0 <__d2b>:
 80064f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f2:	2101      	movs	r1, #1
 80064f4:	4617      	mov	r7, r2
 80064f6:	461c      	mov	r4, r3
 80064f8:	9e08      	ldr	r6, [sp, #32]
 80064fa:	f7ff fc25 	bl	8005d48 <_Balloc>
 80064fe:	4605      	mov	r5, r0
 8006500:	b930      	cbnz	r0, 8006510 <__d2b+0x20>
 8006502:	4602      	mov	r2, r0
 8006504:	f240 310f 	movw	r1, #783	; 0x30f
 8006508:	4b22      	ldr	r3, [pc, #136]	; (8006594 <__d2b+0xa4>)
 800650a:	4823      	ldr	r0, [pc, #140]	; (8006598 <__d2b+0xa8>)
 800650c:	f001 f9a8 	bl	8007860 <__assert_func>
 8006510:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006514:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006518:	bb24      	cbnz	r4, 8006564 <__d2b+0x74>
 800651a:	2f00      	cmp	r7, #0
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	d026      	beq.n	800656e <__d2b+0x7e>
 8006520:	4668      	mov	r0, sp
 8006522:	9700      	str	r7, [sp, #0]
 8006524:	f7ff fd22 	bl	8005f6c <__lo0bits>
 8006528:	e9dd 1200 	ldrd	r1, r2, [sp]
 800652c:	b1e8      	cbz	r0, 800656a <__d2b+0x7a>
 800652e:	f1c0 0320 	rsb	r3, r0, #32
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	430b      	orrs	r3, r1
 8006538:	40c2      	lsrs	r2, r0
 800653a:	616b      	str	r3, [r5, #20]
 800653c:	9201      	str	r2, [sp, #4]
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf14      	ite	ne
 8006544:	2102      	movne	r1, #2
 8006546:	2101      	moveq	r1, #1
 8006548:	61ab      	str	r3, [r5, #24]
 800654a:	6129      	str	r1, [r5, #16]
 800654c:	b1bc      	cbz	r4, 800657e <__d2b+0x8e>
 800654e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006552:	4404      	add	r4, r0
 8006554:	6034      	str	r4, [r6, #0]
 8006556:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800655a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655c:	6018      	str	r0, [r3, #0]
 800655e:	4628      	mov	r0, r5
 8006560:	b003      	add	sp, #12
 8006562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006568:	e7d7      	b.n	800651a <__d2b+0x2a>
 800656a:	6169      	str	r1, [r5, #20]
 800656c:	e7e7      	b.n	800653e <__d2b+0x4e>
 800656e:	a801      	add	r0, sp, #4
 8006570:	f7ff fcfc 	bl	8005f6c <__lo0bits>
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	2101      	movs	r1, #1
 8006578:	616b      	str	r3, [r5, #20]
 800657a:	3020      	adds	r0, #32
 800657c:	e7e5      	b.n	800654a <__d2b+0x5a>
 800657e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006582:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006586:	6030      	str	r0, [r6, #0]
 8006588:	6918      	ldr	r0, [r3, #16]
 800658a:	f7ff fccf 	bl	8005f2c <__hi0bits>
 800658e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006592:	e7e2      	b.n	800655a <__d2b+0x6a>
 8006594:	080086b1 	.word	0x080086b1
 8006598:	080086c2 	.word	0x080086c2

0800659c <__ratio>:
 800659c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	4688      	mov	r8, r1
 80065a2:	4669      	mov	r1, sp
 80065a4:	4681      	mov	r9, r0
 80065a6:	f7ff ff5b 	bl	8006460 <__b2d>
 80065aa:	460f      	mov	r7, r1
 80065ac:	4604      	mov	r4, r0
 80065ae:	460d      	mov	r5, r1
 80065b0:	4640      	mov	r0, r8
 80065b2:	a901      	add	r1, sp, #4
 80065b4:	f7ff ff54 	bl	8006460 <__b2d>
 80065b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80065c0:	468b      	mov	fp, r1
 80065c2:	eba3 0c02 	sub.w	ip, r3, r2
 80065c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bfd5      	itete	le
 80065d4:	460a      	movle	r2, r1
 80065d6:	462a      	movgt	r2, r5
 80065d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065dc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80065e0:	bfd8      	it	le
 80065e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80065e6:	465b      	mov	r3, fp
 80065e8:	4602      	mov	r2, r0
 80065ea:	4639      	mov	r1, r7
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7fa f8fd 	bl	80007ec <__aeabi_ddiv>
 80065f2:	b003      	add	sp, #12
 80065f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065f8 <__copybits>:
 80065f8:	3901      	subs	r1, #1
 80065fa:	b570      	push	{r4, r5, r6, lr}
 80065fc:	1149      	asrs	r1, r1, #5
 80065fe:	6914      	ldr	r4, [r2, #16]
 8006600:	3101      	adds	r1, #1
 8006602:	f102 0314 	add.w	r3, r2, #20
 8006606:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800660a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800660e:	1f05      	subs	r5, r0, #4
 8006610:	42a3      	cmp	r3, r4
 8006612:	d30c      	bcc.n	800662e <__copybits+0x36>
 8006614:	1aa3      	subs	r3, r4, r2
 8006616:	3b11      	subs	r3, #17
 8006618:	f023 0303 	bic.w	r3, r3, #3
 800661c:	3211      	adds	r2, #17
 800661e:	42a2      	cmp	r2, r4
 8006620:	bf88      	it	hi
 8006622:	2300      	movhi	r3, #0
 8006624:	4418      	add	r0, r3
 8006626:	2300      	movs	r3, #0
 8006628:	4288      	cmp	r0, r1
 800662a:	d305      	bcc.n	8006638 <__copybits+0x40>
 800662c:	bd70      	pop	{r4, r5, r6, pc}
 800662e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006632:	f845 6f04 	str.w	r6, [r5, #4]!
 8006636:	e7eb      	b.n	8006610 <__copybits+0x18>
 8006638:	f840 3b04 	str.w	r3, [r0], #4
 800663c:	e7f4      	b.n	8006628 <__copybits+0x30>

0800663e <__any_on>:
 800663e:	f100 0214 	add.w	r2, r0, #20
 8006642:	6900      	ldr	r0, [r0, #16]
 8006644:	114b      	asrs	r3, r1, #5
 8006646:	4298      	cmp	r0, r3
 8006648:	b510      	push	{r4, lr}
 800664a:	db11      	blt.n	8006670 <__any_on+0x32>
 800664c:	dd0a      	ble.n	8006664 <__any_on+0x26>
 800664e:	f011 011f 	ands.w	r1, r1, #31
 8006652:	d007      	beq.n	8006664 <__any_on+0x26>
 8006654:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006658:	fa24 f001 	lsr.w	r0, r4, r1
 800665c:	fa00 f101 	lsl.w	r1, r0, r1
 8006660:	428c      	cmp	r4, r1
 8006662:	d10b      	bne.n	800667c <__any_on+0x3e>
 8006664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006668:	4293      	cmp	r3, r2
 800666a:	d803      	bhi.n	8006674 <__any_on+0x36>
 800666c:	2000      	movs	r0, #0
 800666e:	bd10      	pop	{r4, pc}
 8006670:	4603      	mov	r3, r0
 8006672:	e7f7      	b.n	8006664 <__any_on+0x26>
 8006674:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006678:	2900      	cmp	r1, #0
 800667a:	d0f5      	beq.n	8006668 <__any_on+0x2a>
 800667c:	2001      	movs	r0, #1
 800667e:	e7f6      	b.n	800666e <__any_on+0x30>

08006680 <sulp>:
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006684:	460f      	mov	r7, r1
 8006686:	4690      	mov	r8, r2
 8006688:	f7ff feca 	bl	8006420 <__ulp>
 800668c:	4604      	mov	r4, r0
 800668e:	460d      	mov	r5, r1
 8006690:	f1b8 0f00 	cmp.w	r8, #0
 8006694:	d011      	beq.n	80066ba <sulp+0x3a>
 8006696:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800669a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dd0b      	ble.n	80066ba <sulp+0x3a>
 80066a2:	2400      	movs	r4, #0
 80066a4:	051b      	lsls	r3, r3, #20
 80066a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80066aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80066ae:	4622      	mov	r2, r4
 80066b0:	462b      	mov	r3, r5
 80066b2:	f7f9 ff71 	bl	8000598 <__aeabi_dmul>
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c2:	0000      	movs	r0, r0
 80066c4:	0000      	movs	r0, r0
	...

080066c8 <_strtod_l>:
 80066c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	b09f      	sub	sp, #124	; 0x7c
 80066ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80066d0:	2200      	movs	r2, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	921a      	str	r2, [sp, #104]	; 0x68
 80066d6:	460d      	mov	r5, r1
 80066d8:	f04f 0800 	mov.w	r8, #0
 80066dc:	f04f 0900 	mov.w	r9, #0
 80066e0:	460a      	mov	r2, r1
 80066e2:	9219      	str	r2, [sp, #100]	; 0x64
 80066e4:	7811      	ldrb	r1, [r2, #0]
 80066e6:	292b      	cmp	r1, #43	; 0x2b
 80066e8:	d04a      	beq.n	8006780 <_strtod_l+0xb8>
 80066ea:	d838      	bhi.n	800675e <_strtod_l+0x96>
 80066ec:	290d      	cmp	r1, #13
 80066ee:	d832      	bhi.n	8006756 <_strtod_l+0x8e>
 80066f0:	2908      	cmp	r1, #8
 80066f2:	d832      	bhi.n	800675a <_strtod_l+0x92>
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d03b      	beq.n	8006770 <_strtod_l+0xa8>
 80066f8:	2200      	movs	r2, #0
 80066fa:	920e      	str	r2, [sp, #56]	; 0x38
 80066fc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80066fe:	7832      	ldrb	r2, [r6, #0]
 8006700:	2a30      	cmp	r2, #48	; 0x30
 8006702:	f040 80b2 	bne.w	800686a <_strtod_l+0x1a2>
 8006706:	7872      	ldrb	r2, [r6, #1]
 8006708:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800670c:	2a58      	cmp	r2, #88	; 0x58
 800670e:	d16e      	bne.n	80067ee <_strtod_l+0x126>
 8006710:	9302      	str	r3, [sp, #8]
 8006712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006714:	4620      	mov	r0, r4
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	ab1a      	add	r3, sp, #104	; 0x68
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	4a8c      	ldr	r2, [pc, #560]	; (8006950 <_strtod_l+0x288>)
 800671e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006720:	a919      	add	r1, sp, #100	; 0x64
 8006722:	f001 f937 	bl	8007994 <__gethex>
 8006726:	f010 070f 	ands.w	r7, r0, #15
 800672a:	4605      	mov	r5, r0
 800672c:	d005      	beq.n	800673a <_strtod_l+0x72>
 800672e:	2f06      	cmp	r7, #6
 8006730:	d128      	bne.n	8006784 <_strtod_l+0xbc>
 8006732:	2300      	movs	r3, #0
 8006734:	3601      	adds	r6, #1
 8006736:	9619      	str	r6, [sp, #100]	; 0x64
 8006738:	930e      	str	r3, [sp, #56]	; 0x38
 800673a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 85a0 	bne.w	8007282 <_strtod_l+0xbba>
 8006742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006744:	b1cb      	cbz	r3, 800677a <_strtod_l+0xb2>
 8006746:	4642      	mov	r2, r8
 8006748:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800674c:	4610      	mov	r0, r2
 800674e:	4619      	mov	r1, r3
 8006750:	b01f      	add	sp, #124	; 0x7c
 8006752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006756:	2920      	cmp	r1, #32
 8006758:	d1ce      	bne.n	80066f8 <_strtod_l+0x30>
 800675a:	3201      	adds	r2, #1
 800675c:	e7c1      	b.n	80066e2 <_strtod_l+0x1a>
 800675e:	292d      	cmp	r1, #45	; 0x2d
 8006760:	d1ca      	bne.n	80066f8 <_strtod_l+0x30>
 8006762:	2101      	movs	r1, #1
 8006764:	910e      	str	r1, [sp, #56]	; 0x38
 8006766:	1c51      	adds	r1, r2, #1
 8006768:	9119      	str	r1, [sp, #100]	; 0x64
 800676a:	7852      	ldrb	r2, [r2, #1]
 800676c:	2a00      	cmp	r2, #0
 800676e:	d1c5      	bne.n	80066fc <_strtod_l+0x34>
 8006770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006772:	9519      	str	r5, [sp, #100]	; 0x64
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 8582 	bne.w	800727e <_strtod_l+0xbb6>
 800677a:	4642      	mov	r2, r8
 800677c:	464b      	mov	r3, r9
 800677e:	e7e5      	b.n	800674c <_strtod_l+0x84>
 8006780:	2100      	movs	r1, #0
 8006782:	e7ef      	b.n	8006764 <_strtod_l+0x9c>
 8006784:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006786:	b13a      	cbz	r2, 8006798 <_strtod_l+0xd0>
 8006788:	2135      	movs	r1, #53	; 0x35
 800678a:	a81c      	add	r0, sp, #112	; 0x70
 800678c:	f7ff ff34 	bl	80065f8 <__copybits>
 8006790:	4620      	mov	r0, r4
 8006792:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006794:	f7ff fb18 	bl	8005dc8 <_Bfree>
 8006798:	3f01      	subs	r7, #1
 800679a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800679c:	2f04      	cmp	r7, #4
 800679e:	d806      	bhi.n	80067ae <_strtod_l+0xe6>
 80067a0:	e8df f007 	tbb	[pc, r7]
 80067a4:	201d0314 	.word	0x201d0314
 80067a8:	14          	.byte	0x14
 80067a9:	00          	.byte	0x00
 80067aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80067ae:	05e9      	lsls	r1, r5, #23
 80067b0:	bf48      	it	mi
 80067b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80067b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067ba:	0d1b      	lsrs	r3, r3, #20
 80067bc:	051b      	lsls	r3, r3, #20
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1bb      	bne.n	800673a <_strtod_l+0x72>
 80067c2:	f7fe fb17 	bl	8004df4 <__errno>
 80067c6:	2322      	movs	r3, #34	; 0x22
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	e7b6      	b.n	800673a <_strtod_l+0x72>
 80067cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80067d0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80067d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80067dc:	e7e7      	b.n	80067ae <_strtod_l+0xe6>
 80067de:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006954 <_strtod_l+0x28c>
 80067e2:	e7e4      	b.n	80067ae <_strtod_l+0xe6>
 80067e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80067e8:	f04f 38ff 	mov.w	r8, #4294967295
 80067ec:	e7df      	b.n	80067ae <_strtod_l+0xe6>
 80067ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	9219      	str	r2, [sp, #100]	; 0x64
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d0f9      	beq.n	80067ee <_strtod_l+0x126>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d09d      	beq.n	800673a <_strtod_l+0x72>
 80067fe:	2301      	movs	r3, #1
 8006800:	f04f 0a00 	mov.w	sl, #0
 8006804:	220a      	movs	r2, #10
 8006806:	46d3      	mov	fp, sl
 8006808:	9305      	str	r3, [sp, #20]
 800680a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800680c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006810:	930b      	str	r3, [sp, #44]	; 0x2c
 8006812:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006814:	7806      	ldrb	r6, [r0, #0]
 8006816:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800681a:	b2d9      	uxtb	r1, r3
 800681c:	2909      	cmp	r1, #9
 800681e:	d926      	bls.n	800686e <_strtod_l+0x1a6>
 8006820:	2201      	movs	r2, #1
 8006822:	494d      	ldr	r1, [pc, #308]	; (8006958 <_strtod_l+0x290>)
 8006824:	f000 ffe6 	bl	80077f4 <strncmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	d030      	beq.n	800688e <_strtod_l+0x1c6>
 800682c:	2000      	movs	r0, #0
 800682e:	4632      	mov	r2, r6
 8006830:	4603      	mov	r3, r0
 8006832:	465e      	mov	r6, fp
 8006834:	9008      	str	r0, [sp, #32]
 8006836:	2a65      	cmp	r2, #101	; 0x65
 8006838:	d001      	beq.n	800683e <_strtod_l+0x176>
 800683a:	2a45      	cmp	r2, #69	; 0x45
 800683c:	d113      	bne.n	8006866 <_strtod_l+0x19e>
 800683e:	b91e      	cbnz	r6, 8006848 <_strtod_l+0x180>
 8006840:	9a05      	ldr	r2, [sp, #20]
 8006842:	4302      	orrs	r2, r0
 8006844:	d094      	beq.n	8006770 <_strtod_l+0xa8>
 8006846:	2600      	movs	r6, #0
 8006848:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800684a:	1c6a      	adds	r2, r5, #1
 800684c:	9219      	str	r2, [sp, #100]	; 0x64
 800684e:	786a      	ldrb	r2, [r5, #1]
 8006850:	2a2b      	cmp	r2, #43	; 0x2b
 8006852:	d074      	beq.n	800693e <_strtod_l+0x276>
 8006854:	2a2d      	cmp	r2, #45	; 0x2d
 8006856:	d078      	beq.n	800694a <_strtod_l+0x282>
 8006858:	f04f 0c00 	mov.w	ip, #0
 800685c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006860:	2909      	cmp	r1, #9
 8006862:	d97f      	bls.n	8006964 <_strtod_l+0x29c>
 8006864:	9519      	str	r5, [sp, #100]	; 0x64
 8006866:	2700      	movs	r7, #0
 8006868:	e09e      	b.n	80069a8 <_strtod_l+0x2e0>
 800686a:	2300      	movs	r3, #0
 800686c:	e7c8      	b.n	8006800 <_strtod_l+0x138>
 800686e:	f1bb 0f08 	cmp.w	fp, #8
 8006872:	bfd8      	it	le
 8006874:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006876:	f100 0001 	add.w	r0, r0, #1
 800687a:	bfd6      	itet	le
 800687c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006880:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006884:	930a      	strle	r3, [sp, #40]	; 0x28
 8006886:	f10b 0b01 	add.w	fp, fp, #1
 800688a:	9019      	str	r0, [sp, #100]	; 0x64
 800688c:	e7c1      	b.n	8006812 <_strtod_l+0x14a>
 800688e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	9219      	str	r2, [sp, #100]	; 0x64
 8006894:	785a      	ldrb	r2, [r3, #1]
 8006896:	f1bb 0f00 	cmp.w	fp, #0
 800689a:	d037      	beq.n	800690c <_strtod_l+0x244>
 800689c:	465e      	mov	r6, fp
 800689e:	9008      	str	r0, [sp, #32]
 80068a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80068a4:	2b09      	cmp	r3, #9
 80068a6:	d912      	bls.n	80068ce <_strtod_l+0x206>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7c4      	b.n	8006836 <_strtod_l+0x16e>
 80068ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068ae:	3001      	adds	r0, #1
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	9219      	str	r2, [sp, #100]	; 0x64
 80068b4:	785a      	ldrb	r2, [r3, #1]
 80068b6:	2a30      	cmp	r2, #48	; 0x30
 80068b8:	d0f8      	beq.n	80068ac <_strtod_l+0x1e4>
 80068ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80068be:	2b08      	cmp	r3, #8
 80068c0:	f200 84e4 	bhi.w	800728c <_strtod_l+0xbc4>
 80068c4:	9008      	str	r0, [sp, #32]
 80068c6:	2000      	movs	r0, #0
 80068c8:	4606      	mov	r6, r0
 80068ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80068ce:	3a30      	subs	r2, #48	; 0x30
 80068d0:	f100 0301 	add.w	r3, r0, #1
 80068d4:	d014      	beq.n	8006900 <_strtod_l+0x238>
 80068d6:	9908      	ldr	r1, [sp, #32]
 80068d8:	eb00 0c06 	add.w	ip, r0, r6
 80068dc:	4419      	add	r1, r3
 80068de:	9108      	str	r1, [sp, #32]
 80068e0:	4633      	mov	r3, r6
 80068e2:	210a      	movs	r1, #10
 80068e4:	4563      	cmp	r3, ip
 80068e6:	d113      	bne.n	8006910 <_strtod_l+0x248>
 80068e8:	1833      	adds	r3, r6, r0
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	f106 0601 	add.w	r6, r6, #1
 80068f0:	4406      	add	r6, r0
 80068f2:	dc1a      	bgt.n	800692a <_strtod_l+0x262>
 80068f4:	230a      	movs	r3, #10
 80068f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068f8:	fb03 2301 	mla	r3, r3, r1, r2
 80068fc:	930a      	str	r3, [sp, #40]	; 0x28
 80068fe:	2300      	movs	r3, #0
 8006900:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006902:	4618      	mov	r0, r3
 8006904:	1c51      	adds	r1, r2, #1
 8006906:	9119      	str	r1, [sp, #100]	; 0x64
 8006908:	7852      	ldrb	r2, [r2, #1]
 800690a:	e7c9      	b.n	80068a0 <_strtod_l+0x1d8>
 800690c:	4658      	mov	r0, fp
 800690e:	e7d2      	b.n	80068b6 <_strtod_l+0x1ee>
 8006910:	2b08      	cmp	r3, #8
 8006912:	f103 0301 	add.w	r3, r3, #1
 8006916:	dc03      	bgt.n	8006920 <_strtod_l+0x258>
 8006918:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800691a:	434f      	muls	r7, r1
 800691c:	970a      	str	r7, [sp, #40]	; 0x28
 800691e:	e7e1      	b.n	80068e4 <_strtod_l+0x21c>
 8006920:	2b10      	cmp	r3, #16
 8006922:	bfd8      	it	le
 8006924:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006928:	e7dc      	b.n	80068e4 <_strtod_l+0x21c>
 800692a:	2e10      	cmp	r6, #16
 800692c:	bfdc      	itt	le
 800692e:	230a      	movle	r3, #10
 8006930:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006934:	e7e3      	b.n	80068fe <_strtod_l+0x236>
 8006936:	2300      	movs	r3, #0
 8006938:	9308      	str	r3, [sp, #32]
 800693a:	2301      	movs	r3, #1
 800693c:	e780      	b.n	8006840 <_strtod_l+0x178>
 800693e:	f04f 0c00 	mov.w	ip, #0
 8006942:	1caa      	adds	r2, r5, #2
 8006944:	9219      	str	r2, [sp, #100]	; 0x64
 8006946:	78aa      	ldrb	r2, [r5, #2]
 8006948:	e788      	b.n	800685c <_strtod_l+0x194>
 800694a:	f04f 0c01 	mov.w	ip, #1
 800694e:	e7f8      	b.n	8006942 <_strtod_l+0x27a>
 8006950:	08008820 	.word	0x08008820
 8006954:	7ff00000 	.word	0x7ff00000
 8006958:	0800881c 	.word	0x0800881c
 800695c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800695e:	1c51      	adds	r1, r2, #1
 8006960:	9119      	str	r1, [sp, #100]	; 0x64
 8006962:	7852      	ldrb	r2, [r2, #1]
 8006964:	2a30      	cmp	r2, #48	; 0x30
 8006966:	d0f9      	beq.n	800695c <_strtod_l+0x294>
 8006968:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800696c:	2908      	cmp	r1, #8
 800696e:	f63f af7a 	bhi.w	8006866 <_strtod_l+0x19e>
 8006972:	3a30      	subs	r2, #48	; 0x30
 8006974:	9209      	str	r2, [sp, #36]	; 0x24
 8006976:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006978:	920c      	str	r2, [sp, #48]	; 0x30
 800697a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800697c:	1c57      	adds	r7, r2, #1
 800697e:	9719      	str	r7, [sp, #100]	; 0x64
 8006980:	7852      	ldrb	r2, [r2, #1]
 8006982:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006986:	f1be 0f09 	cmp.w	lr, #9
 800698a:	d938      	bls.n	80069fe <_strtod_l+0x336>
 800698c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800698e:	1a7f      	subs	r7, r7, r1
 8006990:	2f08      	cmp	r7, #8
 8006992:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006996:	dc03      	bgt.n	80069a0 <_strtod_l+0x2d8>
 8006998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800699a:	428f      	cmp	r7, r1
 800699c:	bfa8      	it	ge
 800699e:	460f      	movge	r7, r1
 80069a0:	f1bc 0f00 	cmp.w	ip, #0
 80069a4:	d000      	beq.n	80069a8 <_strtod_l+0x2e0>
 80069a6:	427f      	negs	r7, r7
 80069a8:	2e00      	cmp	r6, #0
 80069aa:	d14f      	bne.n	8006a4c <_strtod_l+0x384>
 80069ac:	9905      	ldr	r1, [sp, #20]
 80069ae:	4301      	orrs	r1, r0
 80069b0:	f47f aec3 	bne.w	800673a <_strtod_l+0x72>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f47f aedb 	bne.w	8006770 <_strtod_l+0xa8>
 80069ba:	2a69      	cmp	r2, #105	; 0x69
 80069bc:	d029      	beq.n	8006a12 <_strtod_l+0x34a>
 80069be:	dc26      	bgt.n	8006a0e <_strtod_l+0x346>
 80069c0:	2a49      	cmp	r2, #73	; 0x49
 80069c2:	d026      	beq.n	8006a12 <_strtod_l+0x34a>
 80069c4:	2a4e      	cmp	r2, #78	; 0x4e
 80069c6:	f47f aed3 	bne.w	8006770 <_strtod_l+0xa8>
 80069ca:	499a      	ldr	r1, [pc, #616]	; (8006c34 <_strtod_l+0x56c>)
 80069cc:	a819      	add	r0, sp, #100	; 0x64
 80069ce:	f001 fa23 	bl	8007e18 <__match>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f43f aecc 	beq.w	8006770 <_strtod_l+0xa8>
 80069d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b28      	cmp	r3, #40	; 0x28
 80069de:	d12f      	bne.n	8006a40 <_strtod_l+0x378>
 80069e0:	4995      	ldr	r1, [pc, #596]	; (8006c38 <_strtod_l+0x570>)
 80069e2:	aa1c      	add	r2, sp, #112	; 0x70
 80069e4:	a819      	add	r0, sp, #100	; 0x64
 80069e6:	f001 fa2b 	bl	8007e40 <__hexnan>
 80069ea:	2805      	cmp	r0, #5
 80069ec:	d128      	bne.n	8006a40 <_strtod_l+0x378>
 80069ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069f0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80069f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80069f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80069fc:	e69d      	b.n	800673a <_strtod_l+0x72>
 80069fe:	210a      	movs	r1, #10
 8006a00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a02:	fb01 2107 	mla	r1, r1, r7, r2
 8006a06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a0c:	e7b5      	b.n	800697a <_strtod_l+0x2b2>
 8006a0e:	2a6e      	cmp	r2, #110	; 0x6e
 8006a10:	e7d9      	b.n	80069c6 <_strtod_l+0x2fe>
 8006a12:	498a      	ldr	r1, [pc, #552]	; (8006c3c <_strtod_l+0x574>)
 8006a14:	a819      	add	r0, sp, #100	; 0x64
 8006a16:	f001 f9ff 	bl	8007e18 <__match>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f43f aea8 	beq.w	8006770 <_strtod_l+0xa8>
 8006a20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a22:	4987      	ldr	r1, [pc, #540]	; (8006c40 <_strtod_l+0x578>)
 8006a24:	3b01      	subs	r3, #1
 8006a26:	a819      	add	r0, sp, #100	; 0x64
 8006a28:	9319      	str	r3, [sp, #100]	; 0x64
 8006a2a:	f001 f9f5 	bl	8007e18 <__match>
 8006a2e:	b910      	cbnz	r0, 8006a36 <_strtod_l+0x36e>
 8006a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a32:	3301      	adds	r3, #1
 8006a34:	9319      	str	r3, [sp, #100]	; 0x64
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006c44 <_strtod_l+0x57c>
 8006a3e:	e67c      	b.n	800673a <_strtod_l+0x72>
 8006a40:	4881      	ldr	r0, [pc, #516]	; (8006c48 <_strtod_l+0x580>)
 8006a42:	f000 ff07 	bl	8007854 <nan>
 8006a46:	4680      	mov	r8, r0
 8006a48:	4689      	mov	r9, r1
 8006a4a:	e676      	b.n	800673a <_strtod_l+0x72>
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	f1bb 0f00 	cmp.w	fp, #0
 8006a52:	bf08      	it	eq
 8006a54:	46b3      	moveq	fp, r6
 8006a56:	1afb      	subs	r3, r7, r3
 8006a58:	2e10      	cmp	r6, #16
 8006a5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a5c:	4635      	mov	r5, r6
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	bfa8      	it	ge
 8006a62:	2510      	movge	r5, #16
 8006a64:	f7f9 fd1e 	bl	80004a4 <__aeabi_ui2d>
 8006a68:	2e09      	cmp	r6, #9
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	4689      	mov	r9, r1
 8006a6e:	dd13      	ble.n	8006a98 <_strtod_l+0x3d0>
 8006a70:	4b76      	ldr	r3, [pc, #472]	; (8006c4c <_strtod_l+0x584>)
 8006a72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006a76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a7a:	f7f9 fd8d 	bl	8000598 <__aeabi_dmul>
 8006a7e:	4680      	mov	r8, r0
 8006a80:	4650      	mov	r0, sl
 8006a82:	4689      	mov	r9, r1
 8006a84:	f7f9 fd0e 	bl	80004a4 <__aeabi_ui2d>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	4649      	mov	r1, r9
 8006a90:	f7f9 fbcc 	bl	800022c <__adddf3>
 8006a94:	4680      	mov	r8, r0
 8006a96:	4689      	mov	r9, r1
 8006a98:	2e0f      	cmp	r6, #15
 8006a9a:	dc36      	bgt.n	8006b0a <_strtod_l+0x442>
 8006a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f43f ae4b 	beq.w	800673a <_strtod_l+0x72>
 8006aa4:	dd22      	ble.n	8006aec <_strtod_l+0x424>
 8006aa6:	2b16      	cmp	r3, #22
 8006aa8:	dc09      	bgt.n	8006abe <_strtod_l+0x3f6>
 8006aaa:	4968      	ldr	r1, [pc, #416]	; (8006c4c <_strtod_l+0x584>)
 8006aac:	4642      	mov	r2, r8
 8006aae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab8:	f7f9 fd6e 	bl	8000598 <__aeabi_dmul>
 8006abc:	e7c3      	b.n	8006a46 <_strtod_l+0x37e>
 8006abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ac0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	db20      	blt.n	8006b0a <_strtod_l+0x442>
 8006ac8:	4c60      	ldr	r4, [pc, #384]	; (8006c4c <_strtod_l+0x584>)
 8006aca:	f1c6 060f 	rsb	r6, r6, #15
 8006ace:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ad8:	464b      	mov	r3, r9
 8006ada:	f7f9 fd5d 	bl	8000598 <__aeabi_dmul>
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	1b9e      	subs	r6, r3, r6
 8006ae2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006ae6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006aea:	e7e5      	b.n	8006ab8 <_strtod_l+0x3f0>
 8006aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aee:	3316      	adds	r3, #22
 8006af0:	db0b      	blt.n	8006b0a <_strtod_l+0x442>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	4640      	mov	r0, r8
 8006af6:	1bdf      	subs	r7, r3, r7
 8006af8:	4b54      	ldr	r3, [pc, #336]	; (8006c4c <_strtod_l+0x584>)
 8006afa:	4649      	mov	r1, r9
 8006afc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b04:	f7f9 fe72 	bl	80007ec <__aeabi_ddiv>
 8006b08:	e79d      	b.n	8006a46 <_strtod_l+0x37e>
 8006b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0c:	1b75      	subs	r5, r6, r5
 8006b0e:	441d      	add	r5, r3
 8006b10:	2d00      	cmp	r5, #0
 8006b12:	dd70      	ble.n	8006bf6 <_strtod_l+0x52e>
 8006b14:	f015 030f 	ands.w	r3, r5, #15
 8006b18:	d00a      	beq.n	8006b30 <_strtod_l+0x468>
 8006b1a:	494c      	ldr	r1, [pc, #304]	; (8006c4c <_strtod_l+0x584>)
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b26:	464b      	mov	r3, r9
 8006b28:	f7f9 fd36 	bl	8000598 <__aeabi_dmul>
 8006b2c:	4680      	mov	r8, r0
 8006b2e:	4689      	mov	r9, r1
 8006b30:	f035 050f 	bics.w	r5, r5, #15
 8006b34:	d04d      	beq.n	8006bd2 <_strtod_l+0x50a>
 8006b36:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006b3a:	dd22      	ble.n	8006b82 <_strtod_l+0x4ba>
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	46b3      	mov	fp, r6
 8006b40:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b42:	9608      	str	r6, [sp, #32]
 8006b44:	2322      	movs	r3, #34	; 0x22
 8006b46:	f04f 0800 	mov.w	r8, #0
 8006b4a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006c44 <_strtod_l+0x57c>
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f43f adf1 	beq.w	800673a <_strtod_l+0x72>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b5c:	f7ff f934 	bl	8005dc8 <_Bfree>
 8006b60:	4620      	mov	r0, r4
 8006b62:	9908      	ldr	r1, [sp, #32]
 8006b64:	f7ff f930 	bl	8005dc8 <_Bfree>
 8006b68:	4659      	mov	r1, fp
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff f92c 	bl	8005dc8 <_Bfree>
 8006b70:	4620      	mov	r0, r4
 8006b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b74:	f7ff f928 	bl	8005dc8 <_Bfree>
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f7ff f924 	bl	8005dc8 <_Bfree>
 8006b80:	e5db      	b.n	800673a <_strtod_l+0x72>
 8006b82:	4b33      	ldr	r3, [pc, #204]	; (8006c50 <_strtod_l+0x588>)
 8006b84:	4640      	mov	r0, r8
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	469a      	mov	sl, r3
 8006b8e:	112d      	asrs	r5, r5, #4
 8006b90:	2d01      	cmp	r5, #1
 8006b92:	dc21      	bgt.n	8006bd8 <_strtod_l+0x510>
 8006b94:	b10b      	cbz	r3, 8006b9a <_strtod_l+0x4d2>
 8006b96:	4680      	mov	r8, r0
 8006b98:	4689      	mov	r9, r1
 8006b9a:	492d      	ldr	r1, [pc, #180]	; (8006c50 <_strtod_l+0x588>)
 8006b9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006ba0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006baa:	464b      	mov	r3, r9
 8006bac:	f7f9 fcf4 	bl	8000598 <__aeabi_dmul>
 8006bb0:	4b24      	ldr	r3, [pc, #144]	; (8006c44 <_strtod_l+0x57c>)
 8006bb2:	460a      	mov	r2, r1
 8006bb4:	400b      	ands	r3, r1
 8006bb6:	4927      	ldr	r1, [pc, #156]	; (8006c54 <_strtod_l+0x58c>)
 8006bb8:	4680      	mov	r8, r0
 8006bba:	428b      	cmp	r3, r1
 8006bbc:	d8be      	bhi.n	8006b3c <_strtod_l+0x474>
 8006bbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006bc2:	428b      	cmp	r3, r1
 8006bc4:	bf86      	itte	hi
 8006bc6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006bca:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006c58 <_strtod_l+0x590>
 8006bce:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9305      	str	r3, [sp, #20]
 8006bd6:	e07b      	b.n	8006cd0 <_strtod_l+0x608>
 8006bd8:	07ea      	lsls	r2, r5, #31
 8006bda:	d505      	bpl.n	8006be8 <_strtod_l+0x520>
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fcd9 	bl	8000598 <__aeabi_dmul>
 8006be6:	2301      	movs	r3, #1
 8006be8:	9a05      	ldr	r2, [sp, #20]
 8006bea:	f10a 0a01 	add.w	sl, sl, #1
 8006bee:	3208      	adds	r2, #8
 8006bf0:	106d      	asrs	r5, r5, #1
 8006bf2:	9205      	str	r2, [sp, #20]
 8006bf4:	e7cc      	b.n	8006b90 <_strtod_l+0x4c8>
 8006bf6:	d0ec      	beq.n	8006bd2 <_strtod_l+0x50a>
 8006bf8:	426d      	negs	r5, r5
 8006bfa:	f015 020f 	ands.w	r2, r5, #15
 8006bfe:	d00a      	beq.n	8006c16 <_strtod_l+0x54e>
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <_strtod_l+0x584>)
 8006c02:	4640      	mov	r0, r8
 8006c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c08:	4649      	mov	r1, r9
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 fded 	bl	80007ec <__aeabi_ddiv>
 8006c12:	4680      	mov	r8, r0
 8006c14:	4689      	mov	r9, r1
 8006c16:	112d      	asrs	r5, r5, #4
 8006c18:	d0db      	beq.n	8006bd2 <_strtod_l+0x50a>
 8006c1a:	2d1f      	cmp	r5, #31
 8006c1c:	dd1e      	ble.n	8006c5c <_strtod_l+0x594>
 8006c1e:	2600      	movs	r6, #0
 8006c20:	46b3      	mov	fp, r6
 8006c22:	960b      	str	r6, [sp, #44]	; 0x2c
 8006c24:	9608      	str	r6, [sp, #32]
 8006c26:	2322      	movs	r3, #34	; 0x22
 8006c28:	f04f 0800 	mov.w	r8, #0
 8006c2c:	f04f 0900 	mov.w	r9, #0
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	e78d      	b.n	8006b50 <_strtod_l+0x488>
 8006c34:	08008609 	.word	0x08008609
 8006c38:	08008834 	.word	0x08008834
 8006c3c:	08008601 	.word	0x08008601
 8006c40:	08008638 	.word	0x08008638
 8006c44:	7ff00000 	.word	0x7ff00000
 8006c48:	080089c5 	.word	0x080089c5
 8006c4c:	08008748 	.word	0x08008748
 8006c50:	08008720 	.word	0x08008720
 8006c54:	7ca00000 	.word	0x7ca00000
 8006c58:	7fefffff 	.word	0x7fefffff
 8006c5c:	f015 0310 	ands.w	r3, r5, #16
 8006c60:	bf18      	it	ne
 8006c62:	236a      	movne	r3, #106	; 0x6a
 8006c64:	4640      	mov	r0, r8
 8006c66:	9305      	str	r3, [sp, #20]
 8006c68:	4649      	mov	r1, r9
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006f38 <_strtod_l+0x870>
 8006c70:	07ea      	lsls	r2, r5, #31
 8006c72:	d504      	bpl.n	8006c7e <_strtod_l+0x5b6>
 8006c74:	e9da 2300 	ldrd	r2, r3, [sl]
 8006c78:	f7f9 fc8e 	bl	8000598 <__aeabi_dmul>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	106d      	asrs	r5, r5, #1
 8006c80:	f10a 0a08 	add.w	sl, sl, #8
 8006c84:	d1f4      	bne.n	8006c70 <_strtod_l+0x5a8>
 8006c86:	b10b      	cbz	r3, 8006c8c <_strtod_l+0x5c4>
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4689      	mov	r9, r1
 8006c8c:	9b05      	ldr	r3, [sp, #20]
 8006c8e:	b1bb      	cbz	r3, 8006cc0 <_strtod_l+0x5f8>
 8006c90:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006c94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	dd10      	ble.n	8006cc0 <_strtod_l+0x5f8>
 8006c9e:	2b1f      	cmp	r3, #31
 8006ca0:	f340 8128 	ble.w	8006ef4 <_strtod_l+0x82c>
 8006ca4:	2b34      	cmp	r3, #52	; 0x34
 8006ca6:	bfd8      	it	le
 8006ca8:	f04f 33ff 	movle.w	r3, #4294967295
 8006cac:	f04f 0800 	mov.w	r8, #0
 8006cb0:	bfcf      	iteee	gt
 8006cb2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006cb6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006cba:	4093      	lslle	r3, r2
 8006cbc:	ea03 0901 	andle.w	r9, r3, r1
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	f7f9 fece 	bl	8000a68 <__aeabi_dcmpeq>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d1a6      	bne.n	8006c1e <_strtod_l+0x556>
 8006cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd2:	465a      	mov	r2, fp
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4633      	mov	r3, r6
 8006cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cdc:	f7ff f8dc 	bl	8005e98 <__s2b>
 8006ce0:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	f43f af2a 	beq.w	8006b3c <_strtod_l+0x474>
 8006ce8:	2600      	movs	r6, #0
 8006cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cec:	9b08      	ldr	r3, [sp, #32]
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	eba3 0307 	sub.w	r3, r3, r7
 8006cf4:	bfa8      	it	ge
 8006cf6:	2300      	movge	r3, #0
 8006cf8:	46b3      	mov	fp, r6
 8006cfa:	9312      	str	r3, [sp, #72]	; 0x48
 8006cfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d00:	9316      	str	r3, [sp, #88]	; 0x58
 8006d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d04:	4620      	mov	r0, r4
 8006d06:	6859      	ldr	r1, [r3, #4]
 8006d08:	f7ff f81e 	bl	8005d48 <_Balloc>
 8006d0c:	9008      	str	r0, [sp, #32]
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f43f af18 	beq.w	8006b44 <_strtod_l+0x47c>
 8006d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d16:	300c      	adds	r0, #12
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	f103 010c 	add.w	r1, r3, #12
 8006d1e:	3202      	adds	r2, #2
 8006d20:	0092      	lsls	r2, r2, #2
 8006d22:	f000 fd89 	bl	8007838 <memcpy>
 8006d26:	ab1c      	add	r3, sp, #112	; 0x70
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4642      	mov	r2, r8
 8006d30:	464b      	mov	r3, r9
 8006d32:	4620      	mov	r0, r4
 8006d34:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006d38:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006d3c:	f7ff fbd8 	bl	80064f0 <__d2b>
 8006d40:	901a      	str	r0, [sp, #104]	; 0x68
 8006d42:	2800      	cmp	r0, #0
 8006d44:	f43f aefe 	beq.w	8006b44 <_strtod_l+0x47c>
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7ff f93c 	bl	8005fc8 <__i2b>
 8006d50:	4683      	mov	fp, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	f43f aef6 	beq.w	8006b44 <_strtod_l+0x47c>
 8006d58:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006d5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d5c:	2f00      	cmp	r7, #0
 8006d5e:	bfab      	itete	ge
 8006d60:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006d62:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006d64:	eb07 0a03 	addge.w	sl, r7, r3
 8006d68:	1bdd      	sublt	r5, r3, r7
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	bfa8      	it	ge
 8006d6e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006d70:	eba7 0703 	sub.w	r7, r7, r3
 8006d74:	4417      	add	r7, r2
 8006d76:	4b71      	ldr	r3, [pc, #452]	; (8006f3c <_strtod_l+0x874>)
 8006d78:	f107 37ff 	add.w	r7, r7, #4294967295
 8006d7c:	bfb8      	it	lt
 8006d7e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006d82:	429f      	cmp	r7, r3
 8006d84:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d88:	f280 80c7 	bge.w	8006f1a <_strtod_l+0x852>
 8006d8c:	1bdb      	subs	r3, r3, r7
 8006d8e:	2b1f      	cmp	r3, #31
 8006d90:	f04f 0101 	mov.w	r1, #1
 8006d94:	eba2 0203 	sub.w	r2, r2, r3
 8006d98:	f300 80b3 	bgt.w	8006f02 <_strtod_l+0x83a>
 8006d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006da0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006da2:	2300      	movs	r3, #0
 8006da4:	9310      	str	r3, [sp, #64]	; 0x40
 8006da6:	eb0a 0702 	add.w	r7, sl, r2
 8006daa:	9b05      	ldr	r3, [sp, #20]
 8006dac:	45ba      	cmp	sl, r7
 8006dae:	4415      	add	r5, r2
 8006db0:	441d      	add	r5, r3
 8006db2:	4653      	mov	r3, sl
 8006db4:	bfa8      	it	ge
 8006db6:	463b      	movge	r3, r7
 8006db8:	42ab      	cmp	r3, r5
 8006dba:	bfa8      	it	ge
 8006dbc:	462b      	movge	r3, r5
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfc2      	ittt	gt
 8006dc2:	1aff      	subgt	r7, r7, r3
 8006dc4:	1aed      	subgt	r5, r5, r3
 8006dc6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006dca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dd17      	ble.n	8006e00 <_strtod_l+0x738>
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff f9b5 	bl	8006144 <__pow5mult>
 8006dda:	4683      	mov	fp, r0
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f43f aeb1 	beq.w	8006b44 <_strtod_l+0x47c>
 8006de2:	4601      	mov	r1, r0
 8006de4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff f904 	bl	8005ff4 <__multiply>
 8006dec:	900a      	str	r0, [sp, #40]	; 0x28
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f43f aea8 	beq.w	8006b44 <_strtod_l+0x47c>
 8006df4:	4620      	mov	r0, r4
 8006df6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006df8:	f7fe ffe6 	bl	8005dc8 <_Bfree>
 8006dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8006e00:	2f00      	cmp	r7, #0
 8006e02:	f300 808f 	bgt.w	8006f24 <_strtod_l+0x85c>
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dd08      	ble.n	8006e1e <_strtod_l+0x756>
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e10:	9908      	ldr	r1, [sp, #32]
 8006e12:	f7ff f997 	bl	8006144 <__pow5mult>
 8006e16:	9008      	str	r0, [sp, #32]
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f43f ae93 	beq.w	8006b44 <_strtod_l+0x47c>
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	dd08      	ble.n	8006e34 <_strtod_l+0x76c>
 8006e22:	462a      	mov	r2, r5
 8006e24:	4620      	mov	r0, r4
 8006e26:	9908      	ldr	r1, [sp, #32]
 8006e28:	f7ff f9e6 	bl	80061f8 <__lshift>
 8006e2c:	9008      	str	r0, [sp, #32]
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f ae88 	beq.w	8006b44 <_strtod_l+0x47c>
 8006e34:	f1ba 0f00 	cmp.w	sl, #0
 8006e38:	dd08      	ble.n	8006e4c <_strtod_l+0x784>
 8006e3a:	4659      	mov	r1, fp
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff f9da 	bl	80061f8 <__lshift>
 8006e44:	4683      	mov	fp, r0
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f43f ae7c 	beq.w	8006b44 <_strtod_l+0x47c>
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	9a08      	ldr	r2, [sp, #32]
 8006e50:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e52:	f7ff fa59 	bl	8006308 <__mdiff>
 8006e56:	4606      	mov	r6, r0
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f43f ae73 	beq.w	8006b44 <_strtod_l+0x47c>
 8006e5e:	2500      	movs	r5, #0
 8006e60:	68c3      	ldr	r3, [r0, #12]
 8006e62:	4659      	mov	r1, fp
 8006e64:	60c5      	str	r5, [r0, #12]
 8006e66:	930a      	str	r3, [sp, #40]	; 0x28
 8006e68:	f7ff fa32 	bl	80062d0 <__mcmp>
 8006e6c:	42a8      	cmp	r0, r5
 8006e6e:	da6b      	bge.n	8006f48 <_strtod_l+0x880>
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	ea53 0308 	orrs.w	r3, r3, r8
 8006e76:	f040 808f 	bne.w	8006f98 <_strtod_l+0x8d0>
 8006e7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f040 808a 	bne.w	8006f98 <_strtod_l+0x8d0>
 8006e84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e88:	0d1b      	lsrs	r3, r3, #20
 8006e8a:	051b      	lsls	r3, r3, #20
 8006e8c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e90:	f240 8082 	bls.w	8006f98 <_strtod_l+0x8d0>
 8006e94:	6973      	ldr	r3, [r6, #20]
 8006e96:	b913      	cbnz	r3, 8006e9e <_strtod_l+0x7d6>
 8006e98:	6933      	ldr	r3, [r6, #16]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	dd7c      	ble.n	8006f98 <_strtod_l+0x8d0>
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7ff f9a8 	bl	80061f8 <__lshift>
 8006ea8:	4659      	mov	r1, fp
 8006eaa:	4606      	mov	r6, r0
 8006eac:	f7ff fa10 	bl	80062d0 <__mcmp>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	dd71      	ble.n	8006f98 <_strtod_l+0x8d0>
 8006eb4:	9905      	ldr	r1, [sp, #20]
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <_strtod_l+0x878>)
 8006eba:	2900      	cmp	r1, #0
 8006ebc:	f000 808d 	beq.w	8006fda <_strtod_l+0x912>
 8006ec0:	ea02 0109 	and.w	r1, r2, r9
 8006ec4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006ec8:	f300 8087 	bgt.w	8006fda <_strtod_l+0x912>
 8006ecc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ed0:	f77f aea9 	ble.w	8006c26 <_strtod_l+0x55e>
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <_strtod_l+0x87c>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	f7f9 fb5c 	bl	8000598 <__aeabi_dmul>
 8006ee0:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <_strtod_l+0x878>)
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	400b      	ands	r3, r1
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f47f ae35 	bne.w	8006b58 <_strtod_l+0x490>
 8006eee:	2322      	movs	r3, #34	; 0x22
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	e631      	b.n	8006b58 <_strtod_l+0x490>
 8006ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	ea03 0808 	and.w	r8, r3, r8
 8006f00:	e6de      	b.n	8006cc0 <_strtod_l+0x5f8>
 8006f02:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006f06:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006f0a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006f0e:	37e2      	adds	r7, #226	; 0xe2
 8006f10:	fa01 f307 	lsl.w	r3, r1, r7
 8006f14:	9310      	str	r3, [sp, #64]	; 0x40
 8006f16:	9113      	str	r1, [sp, #76]	; 0x4c
 8006f18:	e745      	b.n	8006da6 <_strtod_l+0x6de>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9310      	str	r3, [sp, #64]	; 0x40
 8006f1e:	2301      	movs	r3, #1
 8006f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f22:	e740      	b.n	8006da6 <_strtod_l+0x6de>
 8006f24:	463a      	mov	r2, r7
 8006f26:	4620      	mov	r0, r4
 8006f28:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f2a:	f7ff f965 	bl	80061f8 <__lshift>
 8006f2e:	901a      	str	r0, [sp, #104]	; 0x68
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f47f af68 	bne.w	8006e06 <_strtod_l+0x73e>
 8006f36:	e605      	b.n	8006b44 <_strtod_l+0x47c>
 8006f38:	08008848 	.word	0x08008848
 8006f3c:	fffffc02 	.word	0xfffffc02
 8006f40:	7ff00000 	.word	0x7ff00000
 8006f44:	39500000 	.word	0x39500000
 8006f48:	46ca      	mov	sl, r9
 8006f4a:	d165      	bne.n	8007018 <_strtod_l+0x950>
 8006f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f52:	b352      	cbz	r2, 8006faa <_strtod_l+0x8e2>
 8006f54:	4a9e      	ldr	r2, [pc, #632]	; (80071d0 <_strtod_l+0xb08>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d12a      	bne.n	8006fb0 <_strtod_l+0x8e8>
 8006f5a:	9b05      	ldr	r3, [sp, #20]
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	b1fb      	cbz	r3, 8006fa0 <_strtod_l+0x8d8>
 8006f60:	4b9c      	ldr	r3, [pc, #624]	; (80071d4 <_strtod_l+0xb0c>)
 8006f62:	f04f 32ff 	mov.w	r2, #4294967295
 8006f66:	ea09 0303 	and.w	r3, r9, r3
 8006f6a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f6e:	d81a      	bhi.n	8006fa6 <_strtod_l+0x8de>
 8006f70:	0d1b      	lsrs	r3, r3, #20
 8006f72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	4299      	cmp	r1, r3
 8006f7c:	d118      	bne.n	8006fb0 <_strtod_l+0x8e8>
 8006f7e:	4b96      	ldr	r3, [pc, #600]	; (80071d8 <_strtod_l+0xb10>)
 8006f80:	459a      	cmp	sl, r3
 8006f82:	d102      	bne.n	8006f8a <_strtod_l+0x8c2>
 8006f84:	3101      	adds	r1, #1
 8006f86:	f43f addd 	beq.w	8006b44 <_strtod_l+0x47c>
 8006f8a:	f04f 0800 	mov.w	r8, #0
 8006f8e:	4b91      	ldr	r3, [pc, #580]	; (80071d4 <_strtod_l+0xb0c>)
 8006f90:	ea0a 0303 	and.w	r3, sl, r3
 8006f94:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006f98:	9b05      	ldr	r3, [sp, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d19a      	bne.n	8006ed4 <_strtod_l+0x80c>
 8006f9e:	e5db      	b.n	8006b58 <_strtod_l+0x490>
 8006fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa4:	e7e9      	b.n	8006f7a <_strtod_l+0x8b2>
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	e7e7      	b.n	8006f7a <_strtod_l+0x8b2>
 8006faa:	ea53 0308 	orrs.w	r3, r3, r8
 8006fae:	d081      	beq.n	8006eb4 <_strtod_l+0x7ec>
 8006fb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fb2:	b1e3      	cbz	r3, 8006fee <_strtod_l+0x926>
 8006fb4:	ea13 0f0a 	tst.w	r3, sl
 8006fb8:	d0ee      	beq.n	8006f98 <_strtod_l+0x8d0>
 8006fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	9a05      	ldr	r2, [sp, #20]
 8006fc2:	b1c3      	cbz	r3, 8006ff6 <_strtod_l+0x92e>
 8006fc4:	f7ff fb5c 	bl	8006680 <sulp>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006fce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fd0:	f7f9 f92c 	bl	800022c <__adddf3>
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	4689      	mov	r9, r1
 8006fd8:	e7de      	b.n	8006f98 <_strtod_l+0x8d0>
 8006fda:	4013      	ands	r3, r2
 8006fdc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006fe0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006fe4:	f04f 38ff 	mov.w	r8, #4294967295
 8006fe8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006fec:	e7d4      	b.n	8006f98 <_strtod_l+0x8d0>
 8006fee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ff0:	ea13 0f08 	tst.w	r3, r8
 8006ff4:	e7e0      	b.n	8006fb8 <_strtod_l+0x8f0>
 8006ff6:	f7ff fb43 	bl	8006680 <sulp>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007000:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007002:	f7f9 f911 	bl	8000228 <__aeabi_dsub>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4680      	mov	r8, r0
 800700c:	4689      	mov	r9, r1
 800700e:	f7f9 fd2b 	bl	8000a68 <__aeabi_dcmpeq>
 8007012:	2800      	cmp	r0, #0
 8007014:	d0c0      	beq.n	8006f98 <_strtod_l+0x8d0>
 8007016:	e606      	b.n	8006c26 <_strtod_l+0x55e>
 8007018:	4659      	mov	r1, fp
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff fabe 	bl	800659c <__ratio>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007028:	2200      	movs	r2, #0
 800702a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800702e:	f7f9 fd2f 	bl	8000a90 <__aeabi_dcmple>
 8007032:	2800      	cmp	r0, #0
 8007034:	d06f      	beq.n	8007116 <_strtod_l+0xa4e>
 8007036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d17c      	bne.n	8007136 <_strtod_l+0xa6e>
 800703c:	f1b8 0f00 	cmp.w	r8, #0
 8007040:	d159      	bne.n	80070f6 <_strtod_l+0xa2e>
 8007042:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007046:	2b00      	cmp	r3, #0
 8007048:	d17b      	bne.n	8007142 <_strtod_l+0xa7a>
 800704a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800704e:	2200      	movs	r2, #0
 8007050:	4b62      	ldr	r3, [pc, #392]	; (80071dc <_strtod_l+0xb14>)
 8007052:	f7f9 fd13 	bl	8000a7c <__aeabi_dcmplt>
 8007056:	2800      	cmp	r0, #0
 8007058:	d15a      	bne.n	8007110 <_strtod_l+0xa48>
 800705a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800705e:	2200      	movs	r2, #0
 8007060:	4b5f      	ldr	r3, [pc, #380]	; (80071e0 <_strtod_l+0xb18>)
 8007062:	f7f9 fa99 	bl	8000598 <__aeabi_dmul>
 8007066:	4605      	mov	r5, r0
 8007068:	460f      	mov	r7, r1
 800706a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800706e:	9506      	str	r5, [sp, #24]
 8007070:	9307      	str	r3, [sp, #28]
 8007072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007076:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800707a:	4b56      	ldr	r3, [pc, #344]	; (80071d4 <_strtod_l+0xb0c>)
 800707c:	4a55      	ldr	r2, [pc, #340]	; (80071d4 <_strtod_l+0xb0c>)
 800707e:	ea0a 0303 	and.w	r3, sl, r3
 8007082:	9313      	str	r3, [sp, #76]	; 0x4c
 8007084:	4b57      	ldr	r3, [pc, #348]	; (80071e4 <_strtod_l+0xb1c>)
 8007086:	ea0a 0202 	and.w	r2, sl, r2
 800708a:	429a      	cmp	r2, r3
 800708c:	f040 80b0 	bne.w	80071f0 <_strtod_l+0xb28>
 8007090:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007094:	4640      	mov	r0, r8
 8007096:	4649      	mov	r1, r9
 8007098:	f7ff f9c2 	bl	8006420 <__ulp>
 800709c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070a0:	f7f9 fa7a 	bl	8000598 <__aeabi_dmul>
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	f7f9 f8c0 	bl	800022c <__adddf3>
 80070ac:	f8df a124 	ldr.w	sl, [pc, #292]	; 80071d4 <_strtod_l+0xb0c>
 80070b0:	4a4d      	ldr	r2, [pc, #308]	; (80071e8 <_strtod_l+0xb20>)
 80070b2:	ea01 0a0a 	and.w	sl, r1, sl
 80070b6:	4592      	cmp	sl, r2
 80070b8:	4680      	mov	r8, r0
 80070ba:	d948      	bls.n	800714e <_strtod_l+0xa86>
 80070bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070be:	4b46      	ldr	r3, [pc, #280]	; (80071d8 <_strtod_l+0xb10>)
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d103      	bne.n	80070cc <_strtod_l+0xa04>
 80070c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070c6:	3301      	adds	r3, #1
 80070c8:	f43f ad3c 	beq.w	8006b44 <_strtod_l+0x47c>
 80070cc:	f04f 38ff 	mov.w	r8, #4294967295
 80070d0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80071d8 <_strtod_l+0xb10>
 80070d4:	4620      	mov	r0, r4
 80070d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80070d8:	f7fe fe76 	bl	8005dc8 <_Bfree>
 80070dc:	4620      	mov	r0, r4
 80070de:	9908      	ldr	r1, [sp, #32]
 80070e0:	f7fe fe72 	bl	8005dc8 <_Bfree>
 80070e4:	4659      	mov	r1, fp
 80070e6:	4620      	mov	r0, r4
 80070e8:	f7fe fe6e 	bl	8005dc8 <_Bfree>
 80070ec:	4631      	mov	r1, r6
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7fe fe6a 	bl	8005dc8 <_Bfree>
 80070f4:	e605      	b.n	8006d02 <_strtod_l+0x63a>
 80070f6:	f1b8 0f01 	cmp.w	r8, #1
 80070fa:	d103      	bne.n	8007104 <_strtod_l+0xa3c>
 80070fc:	f1b9 0f00 	cmp.w	r9, #0
 8007100:	f43f ad91 	beq.w	8006c26 <_strtod_l+0x55e>
 8007104:	2200      	movs	r2, #0
 8007106:	4b39      	ldr	r3, [pc, #228]	; (80071ec <_strtod_l+0xb24>)
 8007108:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800710a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800710e:	e016      	b.n	800713e <_strtod_l+0xa76>
 8007110:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007112:	4f33      	ldr	r7, [pc, #204]	; (80071e0 <_strtod_l+0xb18>)
 8007114:	e7a9      	b.n	800706a <_strtod_l+0x9a2>
 8007116:	4b32      	ldr	r3, [pc, #200]	; (80071e0 <_strtod_l+0xb18>)
 8007118:	2200      	movs	r2, #0
 800711a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800711e:	f7f9 fa3b 	bl	8000598 <__aeabi_dmul>
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	4605      	mov	r5, r0
 8007126:	460f      	mov	r7, r1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d09e      	beq.n	800706a <_strtod_l+0x9a2>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007134:	e79d      	b.n	8007072 <_strtod_l+0x9aa>
 8007136:	2200      	movs	r2, #0
 8007138:	4b28      	ldr	r3, [pc, #160]	; (80071dc <_strtod_l+0xb14>)
 800713a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800713e:	4f27      	ldr	r7, [pc, #156]	; (80071dc <_strtod_l+0xb14>)
 8007140:	e797      	b.n	8007072 <_strtod_l+0x9aa>
 8007142:	2200      	movs	r2, #0
 8007144:	4b29      	ldr	r3, [pc, #164]	; (80071ec <_strtod_l+0xb24>)
 8007146:	4645      	mov	r5, r8
 8007148:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800714c:	e7f7      	b.n	800713e <_strtod_l+0xa76>
 800714e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007152:	9b05      	ldr	r3, [sp, #20]
 8007154:	46ca      	mov	sl, r9
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1bc      	bne.n	80070d4 <_strtod_l+0xa0c>
 800715a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800715e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007160:	0d1b      	lsrs	r3, r3, #20
 8007162:	051b      	lsls	r3, r3, #20
 8007164:	429a      	cmp	r2, r3
 8007166:	d1b5      	bne.n	80070d4 <_strtod_l+0xa0c>
 8007168:	4628      	mov	r0, r5
 800716a:	4639      	mov	r1, r7
 800716c:	f7f9 fd5c 	bl	8000c28 <__aeabi_d2lz>
 8007170:	f7f9 f9e4 	bl	800053c <__aeabi_l2d>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4628      	mov	r0, r5
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 f854 	bl	8000228 <__aeabi_dsub>
 8007180:	460b      	mov	r3, r1
 8007182:	4602      	mov	r2, r0
 8007184:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007188:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800718c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007192:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007196:	d06c      	beq.n	8007272 <_strtod_l+0xbaa>
 8007198:	a309      	add	r3, pc, #36	; (adr r3, 80071c0 <_strtod_l+0xaf8>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 fc6d 	bl	8000a7c <__aeabi_dcmplt>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	f47f acd8 	bne.w	8006b58 <_strtod_l+0x490>
 80071a8:	a307      	add	r3, pc, #28	; (adr r3, 80071c8 <_strtod_l+0xb00>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b2:	f7f9 fc81 	bl	8000ab8 <__aeabi_dcmpgt>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d08c      	beq.n	80070d4 <_strtod_l+0xa0c>
 80071ba:	e4cd      	b.n	8006b58 <_strtod_l+0x490>
 80071bc:	f3af 8000 	nop.w
 80071c0:	94a03595 	.word	0x94a03595
 80071c4:	3fdfffff 	.word	0x3fdfffff
 80071c8:	35afe535 	.word	0x35afe535
 80071cc:	3fe00000 	.word	0x3fe00000
 80071d0:	000fffff 	.word	0x000fffff
 80071d4:	7ff00000 	.word	0x7ff00000
 80071d8:	7fefffff 	.word	0x7fefffff
 80071dc:	3ff00000 	.word	0x3ff00000
 80071e0:	3fe00000 	.word	0x3fe00000
 80071e4:	7fe00000 	.word	0x7fe00000
 80071e8:	7c9fffff 	.word	0x7c9fffff
 80071ec:	bff00000 	.word	0xbff00000
 80071f0:	9b05      	ldr	r3, [sp, #20]
 80071f2:	b333      	cbz	r3, 8007242 <_strtod_l+0xb7a>
 80071f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071fa:	d822      	bhi.n	8007242 <_strtod_l+0xb7a>
 80071fc:	a328      	add	r3, pc, #160	; (adr r3, 80072a0 <_strtod_l+0xbd8>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	4628      	mov	r0, r5
 8007204:	4639      	mov	r1, r7
 8007206:	f7f9 fc43 	bl	8000a90 <__aeabi_dcmple>
 800720a:	b1a0      	cbz	r0, 8007236 <_strtod_l+0xb6e>
 800720c:	4639      	mov	r1, r7
 800720e:	4628      	mov	r0, r5
 8007210:	f7f9 fc9a 	bl	8000b48 <__aeabi_d2uiz>
 8007214:	2801      	cmp	r0, #1
 8007216:	bf38      	it	cc
 8007218:	2001      	movcc	r0, #1
 800721a:	f7f9 f943 	bl	80004a4 <__aeabi_ui2d>
 800721e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007220:	4605      	mov	r5, r0
 8007222:	460f      	mov	r7, r1
 8007224:	bb03      	cbnz	r3, 8007268 <_strtod_l+0xba0>
 8007226:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800722a:	9014      	str	r0, [sp, #80]	; 0x50
 800722c:	9315      	str	r3, [sp, #84]	; 0x54
 800722e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007232:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800723a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	9311      	str	r3, [sp, #68]	; 0x44
 8007242:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007244:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007246:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800724a:	f7ff f8e9 	bl	8006420 <__ulp>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4640      	mov	r0, r8
 8007254:	4649      	mov	r1, r9
 8007256:	f7f9 f99f 	bl	8000598 <__aeabi_dmul>
 800725a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800725c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800725e:	f7f8 ffe5 	bl	800022c <__adddf3>
 8007262:	4680      	mov	r8, r0
 8007264:	4689      	mov	r9, r1
 8007266:	e774      	b.n	8007152 <_strtod_l+0xa8a>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007270:	e7dd      	b.n	800722e <_strtod_l+0xb66>
 8007272:	a30d      	add	r3, pc, #52	; (adr r3, 80072a8 <_strtod_l+0xbe0>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 fc00 	bl	8000a7c <__aeabi_dcmplt>
 800727c:	e79b      	b.n	80071b6 <_strtod_l+0xaee>
 800727e:	2300      	movs	r3, #0
 8007280:	930e      	str	r3, [sp, #56]	; 0x38
 8007282:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007284:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	f7ff ba5b 	b.w	8006742 <_strtod_l+0x7a>
 800728c:	2a65      	cmp	r2, #101	; 0x65
 800728e:	f43f ab52 	beq.w	8006936 <_strtod_l+0x26e>
 8007292:	2a45      	cmp	r2, #69	; 0x45
 8007294:	f43f ab4f 	beq.w	8006936 <_strtod_l+0x26e>
 8007298:	2301      	movs	r3, #1
 800729a:	f7ff bb87 	b.w	80069ac <_strtod_l+0x2e4>
 800729e:	bf00      	nop
 80072a0:	ffc00000 	.word	0xffc00000
 80072a4:	41dfffff 	.word	0x41dfffff
 80072a8:	94a03595 	.word	0x94a03595
 80072ac:	3fcfffff 	.word	0x3fcfffff

080072b0 <_strtod_r>:
 80072b0:	4b01      	ldr	r3, [pc, #4]	; (80072b8 <_strtod_r+0x8>)
 80072b2:	f7ff ba09 	b.w	80066c8 <_strtod_l>
 80072b6:	bf00      	nop
 80072b8:	2000006c 	.word	0x2000006c

080072bc <_strtol_l.constprop.0>:
 80072bc:	2b01      	cmp	r3, #1
 80072be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c2:	4686      	mov	lr, r0
 80072c4:	4690      	mov	r8, r2
 80072c6:	d001      	beq.n	80072cc <_strtol_l.constprop.0+0x10>
 80072c8:	2b24      	cmp	r3, #36	; 0x24
 80072ca:	d906      	bls.n	80072da <_strtol_l.constprop.0+0x1e>
 80072cc:	f7fd fd92 	bl	8004df4 <__errno>
 80072d0:	2316      	movs	r3, #22
 80072d2:	6003      	str	r3, [r0, #0]
 80072d4:	2000      	movs	r0, #0
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	460d      	mov	r5, r1
 80072dc:	4835      	ldr	r0, [pc, #212]	; (80073b4 <_strtol_l.constprop.0+0xf8>)
 80072de:	462a      	mov	r2, r5
 80072e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072e4:	5d06      	ldrb	r6, [r0, r4]
 80072e6:	f016 0608 	ands.w	r6, r6, #8
 80072ea:	d1f8      	bne.n	80072de <_strtol_l.constprop.0+0x22>
 80072ec:	2c2d      	cmp	r4, #45	; 0x2d
 80072ee:	d12e      	bne.n	800734e <_strtol_l.constprop.0+0x92>
 80072f0:	2601      	movs	r6, #1
 80072f2:	782c      	ldrb	r4, [r5, #0]
 80072f4:	1c95      	adds	r5, r2, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d057      	beq.n	80073aa <_strtol_l.constprop.0+0xee>
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d109      	bne.n	8007312 <_strtol_l.constprop.0+0x56>
 80072fe:	2c30      	cmp	r4, #48	; 0x30
 8007300:	d107      	bne.n	8007312 <_strtol_l.constprop.0+0x56>
 8007302:	782a      	ldrb	r2, [r5, #0]
 8007304:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007308:	2a58      	cmp	r2, #88	; 0x58
 800730a:	d149      	bne.n	80073a0 <_strtol_l.constprop.0+0xe4>
 800730c:	2310      	movs	r3, #16
 800730e:	786c      	ldrb	r4, [r5, #1]
 8007310:	3502      	adds	r5, #2
 8007312:	2200      	movs	r2, #0
 8007314:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007318:	f10c 3cff 	add.w	ip, ip, #4294967295
 800731c:	fbbc f9f3 	udiv	r9, ip, r3
 8007320:	4610      	mov	r0, r2
 8007322:	fb03 ca19 	mls	sl, r3, r9, ip
 8007326:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800732a:	2f09      	cmp	r7, #9
 800732c:	d814      	bhi.n	8007358 <_strtol_l.constprop.0+0x9c>
 800732e:	463c      	mov	r4, r7
 8007330:	42a3      	cmp	r3, r4
 8007332:	dd20      	ble.n	8007376 <_strtol_l.constprop.0+0xba>
 8007334:	1c57      	adds	r7, r2, #1
 8007336:	d007      	beq.n	8007348 <_strtol_l.constprop.0+0x8c>
 8007338:	4581      	cmp	r9, r0
 800733a:	d319      	bcc.n	8007370 <_strtol_l.constprop.0+0xb4>
 800733c:	d101      	bne.n	8007342 <_strtol_l.constprop.0+0x86>
 800733e:	45a2      	cmp	sl, r4
 8007340:	db16      	blt.n	8007370 <_strtol_l.constprop.0+0xb4>
 8007342:	2201      	movs	r2, #1
 8007344:	fb00 4003 	mla	r0, r0, r3, r4
 8007348:	f815 4b01 	ldrb.w	r4, [r5], #1
 800734c:	e7eb      	b.n	8007326 <_strtol_l.constprop.0+0x6a>
 800734e:	2c2b      	cmp	r4, #43	; 0x2b
 8007350:	bf04      	itt	eq
 8007352:	782c      	ldrbeq	r4, [r5, #0]
 8007354:	1c95      	addeq	r5, r2, #2
 8007356:	e7ce      	b.n	80072f6 <_strtol_l.constprop.0+0x3a>
 8007358:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800735c:	2f19      	cmp	r7, #25
 800735e:	d801      	bhi.n	8007364 <_strtol_l.constprop.0+0xa8>
 8007360:	3c37      	subs	r4, #55	; 0x37
 8007362:	e7e5      	b.n	8007330 <_strtol_l.constprop.0+0x74>
 8007364:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007368:	2f19      	cmp	r7, #25
 800736a:	d804      	bhi.n	8007376 <_strtol_l.constprop.0+0xba>
 800736c:	3c57      	subs	r4, #87	; 0x57
 800736e:	e7df      	b.n	8007330 <_strtol_l.constprop.0+0x74>
 8007370:	f04f 32ff 	mov.w	r2, #4294967295
 8007374:	e7e8      	b.n	8007348 <_strtol_l.constprop.0+0x8c>
 8007376:	1c53      	adds	r3, r2, #1
 8007378:	d108      	bne.n	800738c <_strtol_l.constprop.0+0xd0>
 800737a:	2322      	movs	r3, #34	; 0x22
 800737c:	4660      	mov	r0, ip
 800737e:	f8ce 3000 	str.w	r3, [lr]
 8007382:	f1b8 0f00 	cmp.w	r8, #0
 8007386:	d0a6      	beq.n	80072d6 <_strtol_l.constprop.0+0x1a>
 8007388:	1e69      	subs	r1, r5, #1
 800738a:	e006      	b.n	800739a <_strtol_l.constprop.0+0xde>
 800738c:	b106      	cbz	r6, 8007390 <_strtol_l.constprop.0+0xd4>
 800738e:	4240      	negs	r0, r0
 8007390:	f1b8 0f00 	cmp.w	r8, #0
 8007394:	d09f      	beq.n	80072d6 <_strtol_l.constprop.0+0x1a>
 8007396:	2a00      	cmp	r2, #0
 8007398:	d1f6      	bne.n	8007388 <_strtol_l.constprop.0+0xcc>
 800739a:	f8c8 1000 	str.w	r1, [r8]
 800739e:	e79a      	b.n	80072d6 <_strtol_l.constprop.0+0x1a>
 80073a0:	2430      	movs	r4, #48	; 0x30
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1b5      	bne.n	8007312 <_strtol_l.constprop.0+0x56>
 80073a6:	2308      	movs	r3, #8
 80073a8:	e7b3      	b.n	8007312 <_strtol_l.constprop.0+0x56>
 80073aa:	2c30      	cmp	r4, #48	; 0x30
 80073ac:	d0a9      	beq.n	8007302 <_strtol_l.constprop.0+0x46>
 80073ae:	230a      	movs	r3, #10
 80073b0:	e7af      	b.n	8007312 <_strtol_l.constprop.0+0x56>
 80073b2:	bf00      	nop
 80073b4:	08008871 	.word	0x08008871

080073b8 <_strtol_r>:
 80073b8:	f7ff bf80 	b.w	80072bc <_strtol_l.constprop.0>

080073bc <__ssputs_r>:
 80073bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	461f      	mov	r7, r3
 80073c2:	688e      	ldr	r6, [r1, #8]
 80073c4:	4682      	mov	sl, r0
 80073c6:	42be      	cmp	r6, r7
 80073c8:	460c      	mov	r4, r1
 80073ca:	4690      	mov	r8, r2
 80073cc:	680b      	ldr	r3, [r1, #0]
 80073ce:	d82c      	bhi.n	800742a <__ssputs_r+0x6e>
 80073d0:	898a      	ldrh	r2, [r1, #12]
 80073d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073d6:	d026      	beq.n	8007426 <__ssputs_r+0x6a>
 80073d8:	6965      	ldr	r5, [r4, #20]
 80073da:	6909      	ldr	r1, [r1, #16]
 80073dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e0:	eba3 0901 	sub.w	r9, r3, r1
 80073e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073e8:	1c7b      	adds	r3, r7, #1
 80073ea:	444b      	add	r3, r9
 80073ec:	106d      	asrs	r5, r5, #1
 80073ee:	429d      	cmp	r5, r3
 80073f0:	bf38      	it	cc
 80073f2:	461d      	movcc	r5, r3
 80073f4:	0553      	lsls	r3, r2, #21
 80073f6:	d527      	bpl.n	8007448 <__ssputs_r+0x8c>
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7fe fc19 	bl	8005c30 <_malloc_r>
 80073fe:	4606      	mov	r6, r0
 8007400:	b360      	cbz	r0, 800745c <__ssputs_r+0xa0>
 8007402:	464a      	mov	r2, r9
 8007404:	6921      	ldr	r1, [r4, #16]
 8007406:	f000 fa17 	bl	8007838 <memcpy>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	6126      	str	r6, [r4, #16]
 8007418:	444e      	add	r6, r9
 800741a:	6026      	str	r6, [r4, #0]
 800741c:	463e      	mov	r6, r7
 800741e:	6165      	str	r5, [r4, #20]
 8007420:	eba5 0509 	sub.w	r5, r5, r9
 8007424:	60a5      	str	r5, [r4, #8]
 8007426:	42be      	cmp	r6, r7
 8007428:	d900      	bls.n	800742c <__ssputs_r+0x70>
 800742a:	463e      	mov	r6, r7
 800742c:	4632      	mov	r2, r6
 800742e:	4641      	mov	r1, r8
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	f000 f9c5 	bl	80077c0 <memmove>
 8007436:	2000      	movs	r0, #0
 8007438:	68a3      	ldr	r3, [r4, #8]
 800743a:	1b9b      	subs	r3, r3, r6
 800743c:	60a3      	str	r3, [r4, #8]
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	4433      	add	r3, r6
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	462a      	mov	r2, r5
 800744a:	f000 fda6 	bl	8007f9a <_realloc_r>
 800744e:	4606      	mov	r6, r0
 8007450:	2800      	cmp	r0, #0
 8007452:	d1e0      	bne.n	8007416 <__ssputs_r+0x5a>
 8007454:	4650      	mov	r0, sl
 8007456:	6921      	ldr	r1, [r4, #16]
 8007458:	f7fe fb7a 	bl	8005b50 <_free_r>
 800745c:	230c      	movs	r3, #12
 800745e:	f8ca 3000 	str.w	r3, [sl]
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	e7e9      	b.n	8007444 <__ssputs_r+0x88>

08007470 <_svfiprintf_r>:
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	4698      	mov	r8, r3
 8007476:	898b      	ldrh	r3, [r1, #12]
 8007478:	4607      	mov	r7, r0
 800747a:	061b      	lsls	r3, r3, #24
 800747c:	460d      	mov	r5, r1
 800747e:	4614      	mov	r4, r2
 8007480:	b09d      	sub	sp, #116	; 0x74
 8007482:	d50e      	bpl.n	80074a2 <_svfiprintf_r+0x32>
 8007484:	690b      	ldr	r3, [r1, #16]
 8007486:	b963      	cbnz	r3, 80074a2 <_svfiprintf_r+0x32>
 8007488:	2140      	movs	r1, #64	; 0x40
 800748a:	f7fe fbd1 	bl	8005c30 <_malloc_r>
 800748e:	6028      	str	r0, [r5, #0]
 8007490:	6128      	str	r0, [r5, #16]
 8007492:	b920      	cbnz	r0, 800749e <_svfiprintf_r+0x2e>
 8007494:	230c      	movs	r3, #12
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
 800749c:	e0d0      	b.n	8007640 <_svfiprintf_r+0x1d0>
 800749e:	2340      	movs	r3, #64	; 0x40
 80074a0:	616b      	str	r3, [r5, #20]
 80074a2:	2300      	movs	r3, #0
 80074a4:	9309      	str	r3, [sp, #36]	; 0x24
 80074a6:	2320      	movs	r3, #32
 80074a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ac:	2330      	movs	r3, #48	; 0x30
 80074ae:	f04f 0901 	mov.w	r9, #1
 80074b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007658 <_svfiprintf_r+0x1e8>
 80074ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074be:	4623      	mov	r3, r4
 80074c0:	469a      	mov	sl, r3
 80074c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c6:	b10a      	cbz	r2, 80074cc <_svfiprintf_r+0x5c>
 80074c8:	2a25      	cmp	r2, #37	; 0x25
 80074ca:	d1f9      	bne.n	80074c0 <_svfiprintf_r+0x50>
 80074cc:	ebba 0b04 	subs.w	fp, sl, r4
 80074d0:	d00b      	beq.n	80074ea <_svfiprintf_r+0x7a>
 80074d2:	465b      	mov	r3, fp
 80074d4:	4622      	mov	r2, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	4638      	mov	r0, r7
 80074da:	f7ff ff6f 	bl	80073bc <__ssputs_r>
 80074de:	3001      	adds	r0, #1
 80074e0:	f000 80a9 	beq.w	8007636 <_svfiprintf_r+0x1c6>
 80074e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e6:	445a      	add	r2, fp
 80074e8:	9209      	str	r2, [sp, #36]	; 0x24
 80074ea:	f89a 3000 	ldrb.w	r3, [sl]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80a1 	beq.w	8007636 <_svfiprintf_r+0x1c6>
 80074f4:	2300      	movs	r3, #0
 80074f6:	f04f 32ff 	mov.w	r2, #4294967295
 80074fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074fe:	f10a 0a01 	add.w	sl, sl, #1
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	9307      	str	r3, [sp, #28]
 8007506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800750a:	931a      	str	r3, [sp, #104]	; 0x68
 800750c:	4654      	mov	r4, sl
 800750e:	2205      	movs	r2, #5
 8007510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007514:	4850      	ldr	r0, [pc, #320]	; (8007658 <_svfiprintf_r+0x1e8>)
 8007516:	f7fd fc9a 	bl	8004e4e <memchr>
 800751a:	9a04      	ldr	r2, [sp, #16]
 800751c:	b9d8      	cbnz	r0, 8007556 <_svfiprintf_r+0xe6>
 800751e:	06d0      	lsls	r0, r2, #27
 8007520:	bf44      	itt	mi
 8007522:	2320      	movmi	r3, #32
 8007524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007528:	0711      	lsls	r1, r2, #28
 800752a:	bf44      	itt	mi
 800752c:	232b      	movmi	r3, #43	; 0x2b
 800752e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007532:	f89a 3000 	ldrb.w	r3, [sl]
 8007536:	2b2a      	cmp	r3, #42	; 0x2a
 8007538:	d015      	beq.n	8007566 <_svfiprintf_r+0xf6>
 800753a:	4654      	mov	r4, sl
 800753c:	2000      	movs	r0, #0
 800753e:	f04f 0c0a 	mov.w	ip, #10
 8007542:	9a07      	ldr	r2, [sp, #28]
 8007544:	4621      	mov	r1, r4
 8007546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754a:	3b30      	subs	r3, #48	; 0x30
 800754c:	2b09      	cmp	r3, #9
 800754e:	d94d      	bls.n	80075ec <_svfiprintf_r+0x17c>
 8007550:	b1b0      	cbz	r0, 8007580 <_svfiprintf_r+0x110>
 8007552:	9207      	str	r2, [sp, #28]
 8007554:	e014      	b.n	8007580 <_svfiprintf_r+0x110>
 8007556:	eba0 0308 	sub.w	r3, r0, r8
 800755a:	fa09 f303 	lsl.w	r3, r9, r3
 800755e:	4313      	orrs	r3, r2
 8007560:	46a2      	mov	sl, r4
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	e7d2      	b.n	800750c <_svfiprintf_r+0x9c>
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	1d19      	adds	r1, r3, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	9103      	str	r1, [sp, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfbb      	ittet	lt
 8007572:	425b      	neglt	r3, r3
 8007574:	f042 0202 	orrlt.w	r2, r2, #2
 8007578:	9307      	strge	r3, [sp, #28]
 800757a:	9307      	strlt	r3, [sp, #28]
 800757c:	bfb8      	it	lt
 800757e:	9204      	strlt	r2, [sp, #16]
 8007580:	7823      	ldrb	r3, [r4, #0]
 8007582:	2b2e      	cmp	r3, #46	; 0x2e
 8007584:	d10c      	bne.n	80075a0 <_svfiprintf_r+0x130>
 8007586:	7863      	ldrb	r3, [r4, #1]
 8007588:	2b2a      	cmp	r3, #42	; 0x2a
 800758a:	d134      	bne.n	80075f6 <_svfiprintf_r+0x186>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	3402      	adds	r4, #2
 8007590:	1d1a      	adds	r2, r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	9203      	str	r2, [sp, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfb8      	it	lt
 800759a:	f04f 33ff 	movlt.w	r3, #4294967295
 800759e:	9305      	str	r3, [sp, #20]
 80075a0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800765c <_svfiprintf_r+0x1ec>
 80075a4:	2203      	movs	r2, #3
 80075a6:	4650      	mov	r0, sl
 80075a8:	7821      	ldrb	r1, [r4, #0]
 80075aa:	f7fd fc50 	bl	8004e4e <memchr>
 80075ae:	b138      	cbz	r0, 80075c0 <_svfiprintf_r+0x150>
 80075b0:	2240      	movs	r2, #64	; 0x40
 80075b2:	9b04      	ldr	r3, [sp, #16]
 80075b4:	eba0 000a 	sub.w	r0, r0, sl
 80075b8:	4082      	lsls	r2, r0
 80075ba:	4313      	orrs	r3, r2
 80075bc:	3401      	adds	r4, #1
 80075be:	9304      	str	r3, [sp, #16]
 80075c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c4:	2206      	movs	r2, #6
 80075c6:	4826      	ldr	r0, [pc, #152]	; (8007660 <_svfiprintf_r+0x1f0>)
 80075c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075cc:	f7fd fc3f 	bl	8004e4e <memchr>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d038      	beq.n	8007646 <_svfiprintf_r+0x1d6>
 80075d4:	4b23      	ldr	r3, [pc, #140]	; (8007664 <_svfiprintf_r+0x1f4>)
 80075d6:	bb1b      	cbnz	r3, 8007620 <_svfiprintf_r+0x1b0>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	3307      	adds	r3, #7
 80075dc:	f023 0307 	bic.w	r3, r3, #7
 80075e0:	3308      	adds	r3, #8
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e6:	4433      	add	r3, r6
 80075e8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ea:	e768      	b.n	80074be <_svfiprintf_r+0x4e>
 80075ec:	460c      	mov	r4, r1
 80075ee:	2001      	movs	r0, #1
 80075f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f4:	e7a6      	b.n	8007544 <_svfiprintf_r+0xd4>
 80075f6:	2300      	movs	r3, #0
 80075f8:	f04f 0c0a 	mov.w	ip, #10
 80075fc:	4619      	mov	r1, r3
 80075fe:	3401      	adds	r4, #1
 8007600:	9305      	str	r3, [sp, #20]
 8007602:	4620      	mov	r0, r4
 8007604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007608:	3a30      	subs	r2, #48	; 0x30
 800760a:	2a09      	cmp	r2, #9
 800760c:	d903      	bls.n	8007616 <_svfiprintf_r+0x1a6>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0c6      	beq.n	80075a0 <_svfiprintf_r+0x130>
 8007612:	9105      	str	r1, [sp, #20]
 8007614:	e7c4      	b.n	80075a0 <_svfiprintf_r+0x130>
 8007616:	4604      	mov	r4, r0
 8007618:	2301      	movs	r3, #1
 800761a:	fb0c 2101 	mla	r1, ip, r1, r2
 800761e:	e7f0      	b.n	8007602 <_svfiprintf_r+0x192>
 8007620:	ab03      	add	r3, sp, #12
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	462a      	mov	r2, r5
 8007626:	4638      	mov	r0, r7
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <_svfiprintf_r+0x1f8>)
 800762a:	a904      	add	r1, sp, #16
 800762c:	f7fc fc9a 	bl	8003f64 <_printf_float>
 8007630:	1c42      	adds	r2, r0, #1
 8007632:	4606      	mov	r6, r0
 8007634:	d1d6      	bne.n	80075e4 <_svfiprintf_r+0x174>
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	065b      	lsls	r3, r3, #25
 800763a:	f53f af2d 	bmi.w	8007498 <_svfiprintf_r+0x28>
 800763e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007640:	b01d      	add	sp, #116	; 0x74
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	ab03      	add	r3, sp, #12
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	462a      	mov	r2, r5
 800764c:	4638      	mov	r0, r7
 800764e:	4b06      	ldr	r3, [pc, #24]	; (8007668 <_svfiprintf_r+0x1f8>)
 8007650:	a904      	add	r1, sp, #16
 8007652:	f7fc ff27 	bl	80044a4 <_printf_i>
 8007656:	e7eb      	b.n	8007630 <_svfiprintf_r+0x1c0>
 8007658:	08008971 	.word	0x08008971
 800765c:	08008977 	.word	0x08008977
 8007660:	0800897b 	.word	0x0800897b
 8007664:	08003f65 	.word	0x08003f65
 8007668:	080073bd 	.word	0x080073bd

0800766c <__sflush_r>:
 800766c:	898a      	ldrh	r2, [r1, #12]
 800766e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007670:	4605      	mov	r5, r0
 8007672:	0710      	lsls	r0, r2, #28
 8007674:	460c      	mov	r4, r1
 8007676:	d457      	bmi.n	8007728 <__sflush_r+0xbc>
 8007678:	684b      	ldr	r3, [r1, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	dc04      	bgt.n	8007688 <__sflush_r+0x1c>
 800767e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	dc01      	bgt.n	8007688 <__sflush_r+0x1c>
 8007684:	2000      	movs	r0, #0
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800768a:	2e00      	cmp	r6, #0
 800768c:	d0fa      	beq.n	8007684 <__sflush_r+0x18>
 800768e:	2300      	movs	r3, #0
 8007690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007694:	682f      	ldr	r7, [r5, #0]
 8007696:	6a21      	ldr	r1, [r4, #32]
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	d032      	beq.n	8007702 <__sflush_r+0x96>
 800769c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	075a      	lsls	r2, r3, #29
 80076a2:	d505      	bpl.n	80076b0 <__sflush_r+0x44>
 80076a4:	6863      	ldr	r3, [r4, #4]
 80076a6:	1ac0      	subs	r0, r0, r3
 80076a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076aa:	b10b      	cbz	r3, 80076b0 <__sflush_r+0x44>
 80076ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076ae:	1ac0      	subs	r0, r0, r3
 80076b0:	2300      	movs	r3, #0
 80076b2:	4602      	mov	r2, r0
 80076b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076b6:	4628      	mov	r0, r5
 80076b8:	6a21      	ldr	r1, [r4, #32]
 80076ba:	47b0      	blx	r6
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	d106      	bne.n	80076d0 <__sflush_r+0x64>
 80076c2:	6829      	ldr	r1, [r5, #0]
 80076c4:	291d      	cmp	r1, #29
 80076c6:	d82b      	bhi.n	8007720 <__sflush_r+0xb4>
 80076c8:	4a28      	ldr	r2, [pc, #160]	; (800776c <__sflush_r+0x100>)
 80076ca:	410a      	asrs	r2, r1
 80076cc:	07d6      	lsls	r6, r2, #31
 80076ce:	d427      	bmi.n	8007720 <__sflush_r+0xb4>
 80076d0:	2200      	movs	r2, #0
 80076d2:	6062      	str	r2, [r4, #4]
 80076d4:	6922      	ldr	r2, [r4, #16]
 80076d6:	04d9      	lsls	r1, r3, #19
 80076d8:	6022      	str	r2, [r4, #0]
 80076da:	d504      	bpl.n	80076e6 <__sflush_r+0x7a>
 80076dc:	1c42      	adds	r2, r0, #1
 80076de:	d101      	bne.n	80076e4 <__sflush_r+0x78>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b903      	cbnz	r3, 80076e6 <__sflush_r+0x7a>
 80076e4:	6560      	str	r0, [r4, #84]	; 0x54
 80076e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076e8:	602f      	str	r7, [r5, #0]
 80076ea:	2900      	cmp	r1, #0
 80076ec:	d0ca      	beq.n	8007684 <__sflush_r+0x18>
 80076ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076f2:	4299      	cmp	r1, r3
 80076f4:	d002      	beq.n	80076fc <__sflush_r+0x90>
 80076f6:	4628      	mov	r0, r5
 80076f8:	f7fe fa2a 	bl	8005b50 <_free_r>
 80076fc:	2000      	movs	r0, #0
 80076fe:	6360      	str	r0, [r4, #52]	; 0x34
 8007700:	e7c1      	b.n	8007686 <__sflush_r+0x1a>
 8007702:	2301      	movs	r3, #1
 8007704:	4628      	mov	r0, r5
 8007706:	47b0      	blx	r6
 8007708:	1c41      	adds	r1, r0, #1
 800770a:	d1c8      	bne.n	800769e <__sflush_r+0x32>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0c5      	beq.n	800769e <__sflush_r+0x32>
 8007712:	2b1d      	cmp	r3, #29
 8007714:	d001      	beq.n	800771a <__sflush_r+0xae>
 8007716:	2b16      	cmp	r3, #22
 8007718:	d101      	bne.n	800771e <__sflush_r+0xb2>
 800771a:	602f      	str	r7, [r5, #0]
 800771c:	e7b2      	b.n	8007684 <__sflush_r+0x18>
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	e7ae      	b.n	8007686 <__sflush_r+0x1a>
 8007728:	690f      	ldr	r7, [r1, #16]
 800772a:	2f00      	cmp	r7, #0
 800772c:	d0aa      	beq.n	8007684 <__sflush_r+0x18>
 800772e:	0793      	lsls	r3, r2, #30
 8007730:	bf18      	it	ne
 8007732:	2300      	movne	r3, #0
 8007734:	680e      	ldr	r6, [r1, #0]
 8007736:	bf08      	it	eq
 8007738:	694b      	ldreq	r3, [r1, #20]
 800773a:	1bf6      	subs	r6, r6, r7
 800773c:	600f      	str	r7, [r1, #0]
 800773e:	608b      	str	r3, [r1, #8]
 8007740:	2e00      	cmp	r6, #0
 8007742:	dd9f      	ble.n	8007684 <__sflush_r+0x18>
 8007744:	4633      	mov	r3, r6
 8007746:	463a      	mov	r2, r7
 8007748:	4628      	mov	r0, r5
 800774a:	6a21      	ldr	r1, [r4, #32]
 800774c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007750:	47e0      	blx	ip
 8007752:	2800      	cmp	r0, #0
 8007754:	dc06      	bgt.n	8007764 <__sflush_r+0xf8>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007760:	81a3      	strh	r3, [r4, #12]
 8007762:	e790      	b.n	8007686 <__sflush_r+0x1a>
 8007764:	4407      	add	r7, r0
 8007766:	1a36      	subs	r6, r6, r0
 8007768:	e7ea      	b.n	8007740 <__sflush_r+0xd4>
 800776a:	bf00      	nop
 800776c:	dfbffffe 	.word	0xdfbffffe

08007770 <_fflush_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	690b      	ldr	r3, [r1, #16]
 8007774:	4605      	mov	r5, r0
 8007776:	460c      	mov	r4, r1
 8007778:	b913      	cbnz	r3, 8007780 <_fflush_r+0x10>
 800777a:	2500      	movs	r5, #0
 800777c:	4628      	mov	r0, r5
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	b118      	cbz	r0, 800778a <_fflush_r+0x1a>
 8007782:	6a03      	ldr	r3, [r0, #32]
 8007784:	b90b      	cbnz	r3, 800778a <_fflush_r+0x1a>
 8007786:	f7fd fa49 	bl	8004c1c <__sinit>
 800778a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f3      	beq.n	800777a <_fflush_r+0xa>
 8007792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007794:	07d0      	lsls	r0, r2, #31
 8007796:	d404      	bmi.n	80077a2 <_fflush_r+0x32>
 8007798:	0599      	lsls	r1, r3, #22
 800779a:	d402      	bmi.n	80077a2 <_fflush_r+0x32>
 800779c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779e:	f7fd fb54 	bl	8004e4a <__retarget_lock_acquire_recursive>
 80077a2:	4628      	mov	r0, r5
 80077a4:	4621      	mov	r1, r4
 80077a6:	f7ff ff61 	bl	800766c <__sflush_r>
 80077aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077ac:	4605      	mov	r5, r0
 80077ae:	07da      	lsls	r2, r3, #31
 80077b0:	d4e4      	bmi.n	800777c <_fflush_r+0xc>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	059b      	lsls	r3, r3, #22
 80077b6:	d4e1      	bmi.n	800777c <_fflush_r+0xc>
 80077b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ba:	f7fd fb47 	bl	8004e4c <__retarget_lock_release_recursive>
 80077be:	e7dd      	b.n	800777c <_fflush_r+0xc>

080077c0 <memmove>:
 80077c0:	4288      	cmp	r0, r1
 80077c2:	b510      	push	{r4, lr}
 80077c4:	eb01 0402 	add.w	r4, r1, r2
 80077c8:	d902      	bls.n	80077d0 <memmove+0x10>
 80077ca:	4284      	cmp	r4, r0
 80077cc:	4623      	mov	r3, r4
 80077ce:	d807      	bhi.n	80077e0 <memmove+0x20>
 80077d0:	1e43      	subs	r3, r0, #1
 80077d2:	42a1      	cmp	r1, r4
 80077d4:	d008      	beq.n	80077e8 <memmove+0x28>
 80077d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077de:	e7f8      	b.n	80077d2 <memmove+0x12>
 80077e0:	4601      	mov	r1, r0
 80077e2:	4402      	add	r2, r0
 80077e4:	428a      	cmp	r2, r1
 80077e6:	d100      	bne.n	80077ea <memmove+0x2a>
 80077e8:	bd10      	pop	{r4, pc}
 80077ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077f2:	e7f7      	b.n	80077e4 <memmove+0x24>

080077f4 <strncmp>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	b16a      	cbz	r2, 8007814 <strncmp+0x20>
 80077f8:	3901      	subs	r1, #1
 80077fa:	1884      	adds	r4, r0, r2
 80077fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007800:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007804:	429a      	cmp	r2, r3
 8007806:	d103      	bne.n	8007810 <strncmp+0x1c>
 8007808:	42a0      	cmp	r0, r4
 800780a:	d001      	beq.n	8007810 <strncmp+0x1c>
 800780c:	2a00      	cmp	r2, #0
 800780e:	d1f5      	bne.n	80077fc <strncmp+0x8>
 8007810:	1ad0      	subs	r0, r2, r3
 8007812:	bd10      	pop	{r4, pc}
 8007814:	4610      	mov	r0, r2
 8007816:	e7fc      	b.n	8007812 <strncmp+0x1e>

08007818 <_sbrk_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	2300      	movs	r3, #0
 800781c:	4d05      	ldr	r5, [pc, #20]	; (8007834 <_sbrk_r+0x1c>)
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	602b      	str	r3, [r5, #0]
 8007824:	f7fa f81e 	bl	8001864 <_sbrk>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_sbrk_r+0x1a>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	b103      	cbz	r3, 8007832 <_sbrk_r+0x1a>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	200003ec 	.word	0x200003ec

08007838 <memcpy>:
 8007838:	440a      	add	r2, r1
 800783a:	4291      	cmp	r1, r2
 800783c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007840:	d100      	bne.n	8007844 <memcpy+0xc>
 8007842:	4770      	bx	lr
 8007844:	b510      	push	{r4, lr}
 8007846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800784a:	4291      	cmp	r1, r2
 800784c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007850:	d1f9      	bne.n	8007846 <memcpy+0xe>
 8007852:	bd10      	pop	{r4, pc}

08007854 <nan>:
 8007854:	2000      	movs	r0, #0
 8007856:	4901      	ldr	r1, [pc, #4]	; (800785c <nan+0x8>)
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	7ff80000 	.word	0x7ff80000

08007860 <__assert_func>:
 8007860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007862:	4614      	mov	r4, r2
 8007864:	461a      	mov	r2, r3
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <__assert_func+0x2c>)
 8007868:	4605      	mov	r5, r0
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68d8      	ldr	r0, [r3, #12]
 800786e:	b14c      	cbz	r4, 8007884 <__assert_func+0x24>
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <__assert_func+0x30>)
 8007872:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007876:	9100      	str	r1, [sp, #0]
 8007878:	462b      	mov	r3, r5
 800787a:	4906      	ldr	r1, [pc, #24]	; (8007894 <__assert_func+0x34>)
 800787c:	f000 fbca 	bl	8008014 <fiprintf>
 8007880:	f000 fbda 	bl	8008038 <abort>
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <__assert_func+0x38>)
 8007886:	461c      	mov	r4, r3
 8007888:	e7f3      	b.n	8007872 <__assert_func+0x12>
 800788a:	bf00      	nop
 800788c:	20000068 	.word	0x20000068
 8007890:	0800898a 	.word	0x0800898a
 8007894:	08008997 	.word	0x08008997
 8007898:	080089c5 	.word	0x080089c5

0800789c <_calloc_r>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	fba1 5402 	umull	r5, r4, r1, r2
 80078a2:	b934      	cbnz	r4, 80078b2 <_calloc_r+0x16>
 80078a4:	4629      	mov	r1, r5
 80078a6:	f7fe f9c3 	bl	8005c30 <_malloc_r>
 80078aa:	4606      	mov	r6, r0
 80078ac:	b928      	cbnz	r0, 80078ba <_calloc_r+0x1e>
 80078ae:	4630      	mov	r0, r6
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
 80078b2:	220c      	movs	r2, #12
 80078b4:	2600      	movs	r6, #0
 80078b6:	6002      	str	r2, [r0, #0]
 80078b8:	e7f9      	b.n	80078ae <_calloc_r+0x12>
 80078ba:	462a      	mov	r2, r5
 80078bc:	4621      	mov	r1, r4
 80078be:	f7fd fa46 	bl	8004d4e <memset>
 80078c2:	e7f4      	b.n	80078ae <_calloc_r+0x12>

080078c4 <rshift>:
 80078c4:	6903      	ldr	r3, [r0, #16]
 80078c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80078ce:	f100 0414 	add.w	r4, r0, #20
 80078d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80078d6:	dd46      	ble.n	8007966 <rshift+0xa2>
 80078d8:	f011 011f 	ands.w	r1, r1, #31
 80078dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078e4:	d10c      	bne.n	8007900 <rshift+0x3c>
 80078e6:	4629      	mov	r1, r5
 80078e8:	f100 0710 	add.w	r7, r0, #16
 80078ec:	42b1      	cmp	r1, r6
 80078ee:	d335      	bcc.n	800795c <rshift+0x98>
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	1eea      	subs	r2, r5, #3
 80078f6:	4296      	cmp	r6, r2
 80078f8:	bf38      	it	cc
 80078fa:	2300      	movcc	r3, #0
 80078fc:	4423      	add	r3, r4
 80078fe:	e015      	b.n	800792c <rshift+0x68>
 8007900:	46a1      	mov	r9, r4
 8007902:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007906:	f1c1 0820 	rsb	r8, r1, #32
 800790a:	40cf      	lsrs	r7, r1
 800790c:	f105 0e04 	add.w	lr, r5, #4
 8007910:	4576      	cmp	r6, lr
 8007912:	46f4      	mov	ip, lr
 8007914:	d816      	bhi.n	8007944 <rshift+0x80>
 8007916:	1a9a      	subs	r2, r3, r2
 8007918:	0092      	lsls	r2, r2, #2
 800791a:	3a04      	subs	r2, #4
 800791c:	3501      	adds	r5, #1
 800791e:	42ae      	cmp	r6, r5
 8007920:	bf38      	it	cc
 8007922:	2200      	movcc	r2, #0
 8007924:	18a3      	adds	r3, r4, r2
 8007926:	50a7      	str	r7, [r4, r2]
 8007928:	b107      	cbz	r7, 800792c <rshift+0x68>
 800792a:	3304      	adds	r3, #4
 800792c:	42a3      	cmp	r3, r4
 800792e:	eba3 0204 	sub.w	r2, r3, r4
 8007932:	bf08      	it	eq
 8007934:	2300      	moveq	r3, #0
 8007936:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800793a:	6102      	str	r2, [r0, #16]
 800793c:	bf08      	it	eq
 800793e:	6143      	streq	r3, [r0, #20]
 8007940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007944:	f8dc c000 	ldr.w	ip, [ip]
 8007948:	fa0c fc08 	lsl.w	ip, ip, r8
 800794c:	ea4c 0707 	orr.w	r7, ip, r7
 8007950:	f849 7b04 	str.w	r7, [r9], #4
 8007954:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007958:	40cf      	lsrs	r7, r1
 800795a:	e7d9      	b.n	8007910 <rshift+0x4c>
 800795c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007960:	f847 cf04 	str.w	ip, [r7, #4]!
 8007964:	e7c2      	b.n	80078ec <rshift+0x28>
 8007966:	4623      	mov	r3, r4
 8007968:	e7e0      	b.n	800792c <rshift+0x68>

0800796a <__hexdig_fun>:
 800796a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800796e:	2b09      	cmp	r3, #9
 8007970:	d802      	bhi.n	8007978 <__hexdig_fun+0xe>
 8007972:	3820      	subs	r0, #32
 8007974:	b2c0      	uxtb	r0, r0
 8007976:	4770      	bx	lr
 8007978:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800797c:	2b05      	cmp	r3, #5
 800797e:	d801      	bhi.n	8007984 <__hexdig_fun+0x1a>
 8007980:	3847      	subs	r0, #71	; 0x47
 8007982:	e7f7      	b.n	8007974 <__hexdig_fun+0xa>
 8007984:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007988:	2b05      	cmp	r3, #5
 800798a:	d801      	bhi.n	8007990 <__hexdig_fun+0x26>
 800798c:	3827      	subs	r0, #39	; 0x27
 800798e:	e7f1      	b.n	8007974 <__hexdig_fun+0xa>
 8007990:	2000      	movs	r0, #0
 8007992:	4770      	bx	lr

08007994 <__gethex>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	4681      	mov	r9, r0
 800799a:	468a      	mov	sl, r1
 800799c:	4617      	mov	r7, r2
 800799e:	680a      	ldr	r2, [r1, #0]
 80079a0:	b085      	sub	sp, #20
 80079a2:	f102 0b02 	add.w	fp, r2, #2
 80079a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80079aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80079ae:	9302      	str	r3, [sp, #8]
 80079b0:	32fe      	adds	r2, #254	; 0xfe
 80079b2:	eb02 030b 	add.w	r3, r2, fp
 80079b6:	46d8      	mov	r8, fp
 80079b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	2830      	cmp	r0, #48	; 0x30
 80079c0:	d0f7      	beq.n	80079b2 <__gethex+0x1e>
 80079c2:	f7ff ffd2 	bl	800796a <__hexdig_fun>
 80079c6:	4604      	mov	r4, r0
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d138      	bne.n	8007a3e <__gethex+0xaa>
 80079cc:	2201      	movs	r2, #1
 80079ce:	4640      	mov	r0, r8
 80079d0:	49a7      	ldr	r1, [pc, #668]	; (8007c70 <__gethex+0x2dc>)
 80079d2:	f7ff ff0f 	bl	80077f4 <strncmp>
 80079d6:	4606      	mov	r6, r0
 80079d8:	2800      	cmp	r0, #0
 80079da:	d169      	bne.n	8007ab0 <__gethex+0x11c>
 80079dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80079e0:	465d      	mov	r5, fp
 80079e2:	f7ff ffc2 	bl	800796a <__hexdig_fun>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d064      	beq.n	8007ab4 <__gethex+0x120>
 80079ea:	465a      	mov	r2, fp
 80079ec:	7810      	ldrb	r0, [r2, #0]
 80079ee:	4690      	mov	r8, r2
 80079f0:	2830      	cmp	r0, #48	; 0x30
 80079f2:	f102 0201 	add.w	r2, r2, #1
 80079f6:	d0f9      	beq.n	80079ec <__gethex+0x58>
 80079f8:	f7ff ffb7 	bl	800796a <__hexdig_fun>
 80079fc:	2301      	movs	r3, #1
 80079fe:	fab0 f480 	clz	r4, r0
 8007a02:	465e      	mov	r6, fp
 8007a04:	0964      	lsrs	r4, r4, #5
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	4642      	mov	r2, r8
 8007a0a:	4615      	mov	r5, r2
 8007a0c:	7828      	ldrb	r0, [r5, #0]
 8007a0e:	3201      	adds	r2, #1
 8007a10:	f7ff ffab 	bl	800796a <__hexdig_fun>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d1f8      	bne.n	8007a0a <__gethex+0x76>
 8007a18:	2201      	movs	r2, #1
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	4994      	ldr	r1, [pc, #592]	; (8007c70 <__gethex+0x2dc>)
 8007a1e:	f7ff fee9 	bl	80077f4 <strncmp>
 8007a22:	b978      	cbnz	r0, 8007a44 <__gethex+0xb0>
 8007a24:	b946      	cbnz	r6, 8007a38 <__gethex+0xa4>
 8007a26:	1c6e      	adds	r6, r5, #1
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4615      	mov	r5, r2
 8007a2c:	7828      	ldrb	r0, [r5, #0]
 8007a2e:	3201      	adds	r2, #1
 8007a30:	f7ff ff9b 	bl	800796a <__hexdig_fun>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1f8      	bne.n	8007a2a <__gethex+0x96>
 8007a38:	1b73      	subs	r3, r6, r5
 8007a3a:	009e      	lsls	r6, r3, #2
 8007a3c:	e004      	b.n	8007a48 <__gethex+0xb4>
 8007a3e:	2400      	movs	r4, #0
 8007a40:	4626      	mov	r6, r4
 8007a42:	e7e1      	b.n	8007a08 <__gethex+0x74>
 8007a44:	2e00      	cmp	r6, #0
 8007a46:	d1f7      	bne.n	8007a38 <__gethex+0xa4>
 8007a48:	782b      	ldrb	r3, [r5, #0]
 8007a4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a4e:	2b50      	cmp	r3, #80	; 0x50
 8007a50:	d13d      	bne.n	8007ace <__gethex+0x13a>
 8007a52:	786b      	ldrb	r3, [r5, #1]
 8007a54:	2b2b      	cmp	r3, #43	; 0x2b
 8007a56:	d02f      	beq.n	8007ab8 <__gethex+0x124>
 8007a58:	2b2d      	cmp	r3, #45	; 0x2d
 8007a5a:	d031      	beq.n	8007ac0 <__gethex+0x12c>
 8007a5c:	f04f 0b00 	mov.w	fp, #0
 8007a60:	1c69      	adds	r1, r5, #1
 8007a62:	7808      	ldrb	r0, [r1, #0]
 8007a64:	f7ff ff81 	bl	800796a <__hexdig_fun>
 8007a68:	1e42      	subs	r2, r0, #1
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	2a18      	cmp	r2, #24
 8007a6e:	d82e      	bhi.n	8007ace <__gethex+0x13a>
 8007a70:	f1a0 0210 	sub.w	r2, r0, #16
 8007a74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a78:	f7ff ff77 	bl	800796a <__hexdig_fun>
 8007a7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007a80:	fa5f fc8c 	uxtb.w	ip, ip
 8007a84:	f1bc 0f18 	cmp.w	ip, #24
 8007a88:	d91d      	bls.n	8007ac6 <__gethex+0x132>
 8007a8a:	f1bb 0f00 	cmp.w	fp, #0
 8007a8e:	d000      	beq.n	8007a92 <__gethex+0xfe>
 8007a90:	4252      	negs	r2, r2
 8007a92:	4416      	add	r6, r2
 8007a94:	f8ca 1000 	str.w	r1, [sl]
 8007a98:	b1dc      	cbz	r4, 8007ad2 <__gethex+0x13e>
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bf14      	ite	ne
 8007aa0:	f04f 0800 	movne.w	r8, #0
 8007aa4:	f04f 0806 	moveq.w	r8, #6
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	b005      	add	sp, #20
 8007aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab0:	4645      	mov	r5, r8
 8007ab2:	4626      	mov	r6, r4
 8007ab4:	2401      	movs	r4, #1
 8007ab6:	e7c7      	b.n	8007a48 <__gethex+0xb4>
 8007ab8:	f04f 0b00 	mov.w	fp, #0
 8007abc:	1ca9      	adds	r1, r5, #2
 8007abe:	e7d0      	b.n	8007a62 <__gethex+0xce>
 8007ac0:	f04f 0b01 	mov.w	fp, #1
 8007ac4:	e7fa      	b.n	8007abc <__gethex+0x128>
 8007ac6:	230a      	movs	r3, #10
 8007ac8:	fb03 0002 	mla	r0, r3, r2, r0
 8007acc:	e7d0      	b.n	8007a70 <__gethex+0xdc>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	e7e0      	b.n	8007a94 <__gethex+0x100>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	eba5 0308 	sub.w	r3, r5, r8
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	2b07      	cmp	r3, #7
 8007adc:	dc0a      	bgt.n	8007af4 <__gethex+0x160>
 8007ade:	4648      	mov	r0, r9
 8007ae0:	f7fe f932 	bl	8005d48 <_Balloc>
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	b940      	cbnz	r0, 8007afa <__gethex+0x166>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	21e4      	movs	r1, #228	; 0xe4
 8007aec:	4b61      	ldr	r3, [pc, #388]	; (8007c74 <__gethex+0x2e0>)
 8007aee:	4862      	ldr	r0, [pc, #392]	; (8007c78 <__gethex+0x2e4>)
 8007af0:	f7ff feb6 	bl	8007860 <__assert_func>
 8007af4:	3101      	adds	r1, #1
 8007af6:	105b      	asrs	r3, r3, #1
 8007af8:	e7ef      	b.n	8007ada <__gethex+0x146>
 8007afa:	2300      	movs	r3, #0
 8007afc:	469b      	mov	fp, r3
 8007afe:	f100 0a14 	add.w	sl, r0, #20
 8007b02:	f8cd a004 	str.w	sl, [sp, #4]
 8007b06:	45a8      	cmp	r8, r5
 8007b08:	d344      	bcc.n	8007b94 <__gethex+0x200>
 8007b0a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f848 bb04 	str.w	fp, [r8], #4
 8007b14:	eba8 080a 	sub.w	r8, r8, sl
 8007b18:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007b1c:	6122      	str	r2, [r4, #16]
 8007b1e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007b22:	f7fe fa03 	bl	8005f2c <__hi0bits>
 8007b26:	683d      	ldr	r5, [r7, #0]
 8007b28:	eba8 0800 	sub.w	r8, r8, r0
 8007b2c:	45a8      	cmp	r8, r5
 8007b2e:	dd59      	ble.n	8007be4 <__gethex+0x250>
 8007b30:	eba8 0805 	sub.w	r8, r8, r5
 8007b34:	4641      	mov	r1, r8
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7fe fd81 	bl	800663e <__any_on>
 8007b3c:	4683      	mov	fp, r0
 8007b3e:	b1b8      	cbz	r0, 8007b70 <__gethex+0x1dc>
 8007b40:	f04f 0b01 	mov.w	fp, #1
 8007b44:	f108 33ff 	add.w	r3, r8, #4294967295
 8007b48:	1159      	asrs	r1, r3, #5
 8007b4a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007b4e:	f003 021f 	and.w	r2, r3, #31
 8007b52:	fa0b f202 	lsl.w	r2, fp, r2
 8007b56:	420a      	tst	r2, r1
 8007b58:	d00a      	beq.n	8007b70 <__gethex+0x1dc>
 8007b5a:	455b      	cmp	r3, fp
 8007b5c:	dd06      	ble.n	8007b6c <__gethex+0x1d8>
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f1a8 0102 	sub.w	r1, r8, #2
 8007b64:	f7fe fd6b 	bl	800663e <__any_on>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d138      	bne.n	8007bde <__gethex+0x24a>
 8007b6c:	f04f 0b02 	mov.w	fp, #2
 8007b70:	4641      	mov	r1, r8
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff fea6 	bl	80078c4 <rshift>
 8007b78:	4446      	add	r6, r8
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	42b3      	cmp	r3, r6
 8007b7e:	da41      	bge.n	8007c04 <__gethex+0x270>
 8007b80:	4621      	mov	r1, r4
 8007b82:	4648      	mov	r0, r9
 8007b84:	f7fe f920 	bl	8005dc8 <_Bfree>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b8c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	e789      	b.n	8007aa8 <__gethex+0x114>
 8007b94:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007b98:	2a2e      	cmp	r2, #46	; 0x2e
 8007b9a:	d014      	beq.n	8007bc6 <__gethex+0x232>
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d106      	bne.n	8007bae <__gethex+0x21a>
 8007ba0:	9b01      	ldr	r3, [sp, #4]
 8007ba2:	f843 bb04 	str.w	fp, [r3], #4
 8007ba6:	f04f 0b00 	mov.w	fp, #0
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	465b      	mov	r3, fp
 8007bae:	7828      	ldrb	r0, [r5, #0]
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	f7ff feda 	bl	800796a <__hexdig_fun>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	f000 000f 	and.w	r0, r0, #15
 8007bbc:	4098      	lsls	r0, r3
 8007bbe:	ea4b 0b00 	orr.w	fp, fp, r0
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	e79f      	b.n	8007b06 <__gethex+0x172>
 8007bc6:	45a8      	cmp	r8, r5
 8007bc8:	d8e8      	bhi.n	8007b9c <__gethex+0x208>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4628      	mov	r0, r5
 8007bce:	4928      	ldr	r1, [pc, #160]	; (8007c70 <__gethex+0x2dc>)
 8007bd0:	9303      	str	r3, [sp, #12]
 8007bd2:	f7ff fe0f 	bl	80077f4 <strncmp>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d1df      	bne.n	8007b9c <__gethex+0x208>
 8007bdc:	e793      	b.n	8007b06 <__gethex+0x172>
 8007bde:	f04f 0b03 	mov.w	fp, #3
 8007be2:	e7c5      	b.n	8007b70 <__gethex+0x1dc>
 8007be4:	da0b      	bge.n	8007bfe <__gethex+0x26a>
 8007be6:	eba5 0808 	sub.w	r8, r5, r8
 8007bea:	4621      	mov	r1, r4
 8007bec:	4642      	mov	r2, r8
 8007bee:	4648      	mov	r0, r9
 8007bf0:	f7fe fb02 	bl	80061f8 <__lshift>
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	eba6 0608 	sub.w	r6, r6, r8
 8007bfa:	f100 0a14 	add.w	sl, r0, #20
 8007bfe:	f04f 0b00 	mov.w	fp, #0
 8007c02:	e7ba      	b.n	8007b7a <__gethex+0x1e6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	42b3      	cmp	r3, r6
 8007c08:	dd74      	ble.n	8007cf4 <__gethex+0x360>
 8007c0a:	1b9e      	subs	r6, r3, r6
 8007c0c:	42b5      	cmp	r5, r6
 8007c0e:	dc35      	bgt.n	8007c7c <__gethex+0x2e8>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d023      	beq.n	8007c5e <__gethex+0x2ca>
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d025      	beq.n	8007c66 <__gethex+0x2d2>
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d115      	bne.n	8007c4a <__gethex+0x2b6>
 8007c1e:	42b5      	cmp	r5, r6
 8007c20:	d113      	bne.n	8007c4a <__gethex+0x2b6>
 8007c22:	2d01      	cmp	r5, #1
 8007c24:	d10b      	bne.n	8007c3e <__gethex+0x2aa>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	9a02      	ldr	r2, [sp, #8]
 8007c2a:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	2301      	movs	r3, #1
 8007c32:	6123      	str	r3, [r4, #16]
 8007c34:	f8ca 3000 	str.w	r3, [sl]
 8007c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c3a:	601c      	str	r4, [r3, #0]
 8007c3c:	e734      	b.n	8007aa8 <__gethex+0x114>
 8007c3e:	4620      	mov	r0, r4
 8007c40:	1e69      	subs	r1, r5, #1
 8007c42:	f7fe fcfc 	bl	800663e <__any_on>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d1ed      	bne.n	8007c26 <__gethex+0x292>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4648      	mov	r0, r9
 8007c4e:	f7fe f8bb 	bl	8005dc8 <_Bfree>
 8007c52:	2300      	movs	r3, #0
 8007c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c56:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	e724      	b.n	8007aa8 <__gethex+0x114>
 8007c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f2      	bne.n	8007c4a <__gethex+0x2b6>
 8007c64:	e7df      	b.n	8007c26 <__gethex+0x292>
 8007c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1dc      	bne.n	8007c26 <__gethex+0x292>
 8007c6c:	e7ed      	b.n	8007c4a <__gethex+0x2b6>
 8007c6e:	bf00      	nop
 8007c70:	0800881c 	.word	0x0800881c
 8007c74:	080086b1 	.word	0x080086b1
 8007c78:	080089c6 	.word	0x080089c6
 8007c7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8007c80:	f1bb 0f00 	cmp.w	fp, #0
 8007c84:	d133      	bne.n	8007cee <__gethex+0x35a>
 8007c86:	f1b8 0f00 	cmp.w	r8, #0
 8007c8a:	d004      	beq.n	8007c96 <__gethex+0x302>
 8007c8c:	4641      	mov	r1, r8
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7fe fcd5 	bl	800663e <__any_on>
 8007c94:	4683      	mov	fp, r0
 8007c96:	2301      	movs	r3, #1
 8007c98:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007c9c:	f008 081f 	and.w	r8, r8, #31
 8007ca0:	fa03 f308 	lsl.w	r3, r3, r8
 8007ca4:	f04f 0802 	mov.w	r8, #2
 8007ca8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007cac:	4631      	mov	r1, r6
 8007cae:	4213      	tst	r3, r2
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bf18      	it	ne
 8007cb4:	f04b 0b02 	orrne.w	fp, fp, #2
 8007cb8:	1bad      	subs	r5, r5, r6
 8007cba:	f7ff fe03 	bl	80078c4 <rshift>
 8007cbe:	687e      	ldr	r6, [r7, #4]
 8007cc0:	f1bb 0f00 	cmp.w	fp, #0
 8007cc4:	d04a      	beq.n	8007d5c <__gethex+0x3c8>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d016      	beq.n	8007cfa <__gethex+0x366>
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d018      	beq.n	8007d02 <__gethex+0x36e>
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d109      	bne.n	8007ce8 <__gethex+0x354>
 8007cd4:	f01b 0f02 	tst.w	fp, #2
 8007cd8:	d006      	beq.n	8007ce8 <__gethex+0x354>
 8007cda:	f8da 3000 	ldr.w	r3, [sl]
 8007cde:	ea4b 0b03 	orr.w	fp, fp, r3
 8007ce2:	f01b 0f01 	tst.w	fp, #1
 8007ce6:	d10f      	bne.n	8007d08 <__gethex+0x374>
 8007ce8:	f048 0810 	orr.w	r8, r8, #16
 8007cec:	e036      	b.n	8007d5c <__gethex+0x3c8>
 8007cee:	f04f 0b01 	mov.w	fp, #1
 8007cf2:	e7d0      	b.n	8007c96 <__gethex+0x302>
 8007cf4:	f04f 0801 	mov.w	r8, #1
 8007cf8:	e7e2      	b.n	8007cc0 <__gethex+0x32c>
 8007cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cfc:	f1c3 0301 	rsb	r3, r3, #1
 8007d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0ef      	beq.n	8007ce8 <__gethex+0x354>
 8007d08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d0c:	f104 0214 	add.w	r2, r4, #20
 8007d10:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	2300      	movs	r3, #0
 8007d18:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007d1c:	4694      	mov	ip, r2
 8007d1e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007d22:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007d26:	d01e      	beq.n	8007d66 <__gethex+0x3d2>
 8007d28:	3101      	adds	r1, #1
 8007d2a:	f8cc 1000 	str.w	r1, [ip]
 8007d2e:	f1b8 0f02 	cmp.w	r8, #2
 8007d32:	f104 0214 	add.w	r2, r4, #20
 8007d36:	d13d      	bne.n	8007db4 <__gethex+0x420>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	d10b      	bne.n	8007d58 <__gethex+0x3c4>
 8007d40:	2301      	movs	r3, #1
 8007d42:	1169      	asrs	r1, r5, #5
 8007d44:	f005 051f 	and.w	r5, r5, #31
 8007d48:	fa03 f505 	lsl.w	r5, r3, r5
 8007d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d50:	421d      	tst	r5, r3
 8007d52:	bf18      	it	ne
 8007d54:	f04f 0801 	movne.w	r8, #1
 8007d58:	f048 0820 	orr.w	r8, r8, #32
 8007d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d5e:	601c      	str	r4, [r3, #0]
 8007d60:	9b02      	ldr	r3, [sp, #8]
 8007d62:	601e      	str	r6, [r3, #0]
 8007d64:	e6a0      	b.n	8007aa8 <__gethex+0x114>
 8007d66:	4290      	cmp	r0, r2
 8007d68:	f842 3c04 	str.w	r3, [r2, #-4]
 8007d6c:	d8d6      	bhi.n	8007d1c <__gethex+0x388>
 8007d6e:	68a2      	ldr	r2, [r4, #8]
 8007d70:	4593      	cmp	fp, r2
 8007d72:	db17      	blt.n	8007da4 <__gethex+0x410>
 8007d74:	6861      	ldr	r1, [r4, #4]
 8007d76:	4648      	mov	r0, r9
 8007d78:	3101      	adds	r1, #1
 8007d7a:	f7fd ffe5 	bl	8005d48 <_Balloc>
 8007d7e:	4682      	mov	sl, r0
 8007d80:	b918      	cbnz	r0, 8007d8a <__gethex+0x3f6>
 8007d82:	4602      	mov	r2, r0
 8007d84:	2184      	movs	r1, #132	; 0x84
 8007d86:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <__gethex+0x45c>)
 8007d88:	e6b1      	b.n	8007aee <__gethex+0x15a>
 8007d8a:	6922      	ldr	r2, [r4, #16]
 8007d8c:	f104 010c 	add.w	r1, r4, #12
 8007d90:	3202      	adds	r2, #2
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	300c      	adds	r0, #12
 8007d96:	f7ff fd4f 	bl	8007838 <memcpy>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4648      	mov	r0, r9
 8007d9e:	f7fe f813 	bl	8005dc8 <_Bfree>
 8007da2:	4654      	mov	r4, sl
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	1c51      	adds	r1, r2, #1
 8007da8:	6121      	str	r1, [r4, #16]
 8007daa:	2101      	movs	r1, #1
 8007dac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007db0:	6151      	str	r1, [r2, #20]
 8007db2:	e7bc      	b.n	8007d2e <__gethex+0x39a>
 8007db4:	6921      	ldr	r1, [r4, #16]
 8007db6:	4559      	cmp	r1, fp
 8007db8:	dd0b      	ble.n	8007dd2 <__gethex+0x43e>
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7ff fd81 	bl	80078c4 <rshift>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	3601      	adds	r6, #1
 8007dc6:	42b3      	cmp	r3, r6
 8007dc8:	f6ff aeda 	blt.w	8007b80 <__gethex+0x1ec>
 8007dcc:	f04f 0801 	mov.w	r8, #1
 8007dd0:	e7c2      	b.n	8007d58 <__gethex+0x3c4>
 8007dd2:	f015 051f 	ands.w	r5, r5, #31
 8007dd6:	d0f9      	beq.n	8007dcc <__gethex+0x438>
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	f1c5 0520 	rsb	r5, r5, #32
 8007dde:	441a      	add	r2, r3
 8007de0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007de4:	f7fe f8a2 	bl	8005f2c <__hi0bits>
 8007de8:	42a8      	cmp	r0, r5
 8007dea:	dbe6      	blt.n	8007dba <__gethex+0x426>
 8007dec:	e7ee      	b.n	8007dcc <__gethex+0x438>
 8007dee:	bf00      	nop
 8007df0:	080086b1 	.word	0x080086b1

08007df4 <L_shift>:
 8007df4:	f1c2 0208 	rsb	r2, r2, #8
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	b570      	push	{r4, r5, r6, lr}
 8007dfc:	f1c2 0620 	rsb	r6, r2, #32
 8007e00:	6843      	ldr	r3, [r0, #4]
 8007e02:	6804      	ldr	r4, [r0, #0]
 8007e04:	fa03 f506 	lsl.w	r5, r3, r6
 8007e08:	432c      	orrs	r4, r5
 8007e0a:	40d3      	lsrs	r3, r2
 8007e0c:	6004      	str	r4, [r0, #0]
 8007e0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e12:	4288      	cmp	r0, r1
 8007e14:	d3f4      	bcc.n	8007e00 <L_shift+0xc>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}

08007e18 <__match>:
 8007e18:	b530      	push	{r4, r5, lr}
 8007e1a:	6803      	ldr	r3, [r0, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e22:	b914      	cbnz	r4, 8007e2a <__match+0x12>
 8007e24:	6003      	str	r3, [r0, #0]
 8007e26:	2001      	movs	r0, #1
 8007e28:	bd30      	pop	{r4, r5, pc}
 8007e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007e32:	2d19      	cmp	r5, #25
 8007e34:	bf98      	it	ls
 8007e36:	3220      	addls	r2, #32
 8007e38:	42a2      	cmp	r2, r4
 8007e3a:	d0f0      	beq.n	8007e1e <__match+0x6>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e7f3      	b.n	8007e28 <__match+0x10>

08007e40 <__hexnan>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	2500      	movs	r5, #0
 8007e46:	680b      	ldr	r3, [r1, #0]
 8007e48:	4682      	mov	sl, r0
 8007e4a:	115e      	asrs	r6, r3, #5
 8007e4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e50:	f013 031f 	ands.w	r3, r3, #31
 8007e54:	bf18      	it	ne
 8007e56:	3604      	addne	r6, #4
 8007e58:	1f37      	subs	r7, r6, #4
 8007e5a:	4690      	mov	r8, r2
 8007e5c:	46b9      	mov	r9, r7
 8007e5e:	463c      	mov	r4, r7
 8007e60:	46ab      	mov	fp, r5
 8007e62:	b087      	sub	sp, #28
 8007e64:	6801      	ldr	r1, [r0, #0]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e6c:	9502      	str	r5, [sp, #8]
 8007e6e:	784a      	ldrb	r2, [r1, #1]
 8007e70:	1c4b      	adds	r3, r1, #1
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	b342      	cbz	r2, 8007ec8 <__hexnan+0x88>
 8007e76:	4610      	mov	r0, r2
 8007e78:	9105      	str	r1, [sp, #20]
 8007e7a:	9204      	str	r2, [sp, #16]
 8007e7c:	f7ff fd75 	bl	800796a <__hexdig_fun>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d14f      	bne.n	8007f24 <__hexnan+0xe4>
 8007e84:	9a04      	ldr	r2, [sp, #16]
 8007e86:	9905      	ldr	r1, [sp, #20]
 8007e88:	2a20      	cmp	r2, #32
 8007e8a:	d818      	bhi.n	8007ebe <__hexnan+0x7e>
 8007e8c:	9b02      	ldr	r3, [sp, #8]
 8007e8e:	459b      	cmp	fp, r3
 8007e90:	dd13      	ble.n	8007eba <__hexnan+0x7a>
 8007e92:	454c      	cmp	r4, r9
 8007e94:	d206      	bcs.n	8007ea4 <__hexnan+0x64>
 8007e96:	2d07      	cmp	r5, #7
 8007e98:	dc04      	bgt.n	8007ea4 <__hexnan+0x64>
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f7ff ffa8 	bl	8007df4 <L_shift>
 8007ea4:	4544      	cmp	r4, r8
 8007ea6:	d950      	bls.n	8007f4a <__hexnan+0x10a>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f1a4 0904 	sub.w	r9, r4, #4
 8007eae:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eb2:	461d      	mov	r5, r3
 8007eb4:	464c      	mov	r4, r9
 8007eb6:	f8cd b008 	str.w	fp, [sp, #8]
 8007eba:	9903      	ldr	r1, [sp, #12]
 8007ebc:	e7d7      	b.n	8007e6e <__hexnan+0x2e>
 8007ebe:	2a29      	cmp	r2, #41	; 0x29
 8007ec0:	d155      	bne.n	8007f6e <__hexnan+0x12e>
 8007ec2:	3102      	adds	r1, #2
 8007ec4:	f8ca 1000 	str.w	r1, [sl]
 8007ec8:	f1bb 0f00 	cmp.w	fp, #0
 8007ecc:	d04f      	beq.n	8007f6e <__hexnan+0x12e>
 8007ece:	454c      	cmp	r4, r9
 8007ed0:	d206      	bcs.n	8007ee0 <__hexnan+0xa0>
 8007ed2:	2d07      	cmp	r5, #7
 8007ed4:	dc04      	bgt.n	8007ee0 <__hexnan+0xa0>
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4649      	mov	r1, r9
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7ff ff8a 	bl	8007df4 <L_shift>
 8007ee0:	4544      	cmp	r4, r8
 8007ee2:	d934      	bls.n	8007f4e <__hexnan+0x10e>
 8007ee4:	4623      	mov	r3, r4
 8007ee6:	f1a8 0204 	sub.w	r2, r8, #4
 8007eea:	f853 1b04 	ldr.w	r1, [r3], #4
 8007eee:	429f      	cmp	r7, r3
 8007ef0:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ef4:	d2f9      	bcs.n	8007eea <__hexnan+0xaa>
 8007ef6:	1b3b      	subs	r3, r7, r4
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	3304      	adds	r3, #4
 8007efe:	3e03      	subs	r6, #3
 8007f00:	3401      	adds	r4, #1
 8007f02:	42a6      	cmp	r6, r4
 8007f04:	bf38      	it	cc
 8007f06:	2304      	movcc	r3, #4
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4443      	add	r3, r8
 8007f0c:	f843 2b04 	str.w	r2, [r3], #4
 8007f10:	429f      	cmp	r7, r3
 8007f12:	d2fb      	bcs.n	8007f0c <__hexnan+0xcc>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	b91b      	cbnz	r3, 8007f20 <__hexnan+0xe0>
 8007f18:	4547      	cmp	r7, r8
 8007f1a:	d126      	bne.n	8007f6a <__hexnan+0x12a>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	2005      	movs	r0, #5
 8007f22:	e025      	b.n	8007f70 <__hexnan+0x130>
 8007f24:	3501      	adds	r5, #1
 8007f26:	2d08      	cmp	r5, #8
 8007f28:	f10b 0b01 	add.w	fp, fp, #1
 8007f2c:	dd06      	ble.n	8007f3c <__hexnan+0xfc>
 8007f2e:	4544      	cmp	r4, r8
 8007f30:	d9c3      	bls.n	8007eba <__hexnan+0x7a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2501      	movs	r5, #1
 8007f36:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f3a:	3c04      	subs	r4, #4
 8007f3c:	6822      	ldr	r2, [r4, #0]
 8007f3e:	f000 000f 	and.w	r0, r0, #15
 8007f42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007f46:	6020      	str	r0, [r4, #0]
 8007f48:	e7b7      	b.n	8007eba <__hexnan+0x7a>
 8007f4a:	2508      	movs	r5, #8
 8007f4c:	e7b5      	b.n	8007eba <__hexnan+0x7a>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0df      	beq.n	8007f14 <__hexnan+0xd4>
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	f1c3 0320 	rsb	r3, r3, #32
 8007f5c:	40da      	lsrs	r2, r3
 8007f5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f62:	4013      	ands	r3, r2
 8007f64:	f846 3c04 	str.w	r3, [r6, #-4]
 8007f68:	e7d4      	b.n	8007f14 <__hexnan+0xd4>
 8007f6a:	3f04      	subs	r7, #4
 8007f6c:	e7d2      	b.n	8007f14 <__hexnan+0xd4>
 8007f6e:	2004      	movs	r0, #4
 8007f70:	b007      	add	sp, #28
 8007f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f76 <__ascii_mbtowc>:
 8007f76:	b082      	sub	sp, #8
 8007f78:	b901      	cbnz	r1, 8007f7c <__ascii_mbtowc+0x6>
 8007f7a:	a901      	add	r1, sp, #4
 8007f7c:	b142      	cbz	r2, 8007f90 <__ascii_mbtowc+0x1a>
 8007f7e:	b14b      	cbz	r3, 8007f94 <__ascii_mbtowc+0x1e>
 8007f80:	7813      	ldrb	r3, [r2, #0]
 8007f82:	600b      	str	r3, [r1, #0]
 8007f84:	7812      	ldrb	r2, [r2, #0]
 8007f86:	1e10      	subs	r0, r2, #0
 8007f88:	bf18      	it	ne
 8007f8a:	2001      	movne	r0, #1
 8007f8c:	b002      	add	sp, #8
 8007f8e:	4770      	bx	lr
 8007f90:	4610      	mov	r0, r2
 8007f92:	e7fb      	b.n	8007f8c <__ascii_mbtowc+0x16>
 8007f94:	f06f 0001 	mvn.w	r0, #1
 8007f98:	e7f8      	b.n	8007f8c <__ascii_mbtowc+0x16>

08007f9a <_realloc_r>:
 8007f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	460e      	mov	r6, r1
 8007fa4:	b921      	cbnz	r1, 8007fb0 <_realloc_r+0x16>
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fac:	f7fd be40 	b.w	8005c30 <_malloc_r>
 8007fb0:	b92a      	cbnz	r2, 8007fbe <_realloc_r+0x24>
 8007fb2:	f7fd fdcd 	bl	8005b50 <_free_r>
 8007fb6:	4625      	mov	r5, r4
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbe:	f000 f842 	bl	8008046 <_malloc_usable_size_r>
 8007fc2:	4284      	cmp	r4, r0
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	d802      	bhi.n	8007fce <_realloc_r+0x34>
 8007fc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fcc:	d812      	bhi.n	8007ff4 <_realloc_r+0x5a>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	f7fd fe2d 	bl	8005c30 <_malloc_r>
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0ed      	beq.n	8007fb8 <_realloc_r+0x1e>
 8007fdc:	42bc      	cmp	r4, r7
 8007fde:	4622      	mov	r2, r4
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	bf28      	it	cs
 8007fe4:	463a      	movcs	r2, r7
 8007fe6:	f7ff fc27 	bl	8007838 <memcpy>
 8007fea:	4631      	mov	r1, r6
 8007fec:	4640      	mov	r0, r8
 8007fee:	f7fd fdaf 	bl	8005b50 <_free_r>
 8007ff2:	e7e1      	b.n	8007fb8 <_realloc_r+0x1e>
 8007ff4:	4635      	mov	r5, r6
 8007ff6:	e7df      	b.n	8007fb8 <_realloc_r+0x1e>

08007ff8 <__ascii_wctomb>:
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	b141      	cbz	r1, 8008010 <__ascii_wctomb+0x18>
 8007ffe:	2aff      	cmp	r2, #255	; 0xff
 8008000:	d904      	bls.n	800800c <__ascii_wctomb+0x14>
 8008002:	228a      	movs	r2, #138	; 0x8a
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	4770      	bx	lr
 800800c:	2001      	movs	r0, #1
 800800e:	700a      	strb	r2, [r1, #0]
 8008010:	4770      	bx	lr
	...

08008014 <fiprintf>:
 8008014:	b40e      	push	{r1, r2, r3}
 8008016:	b503      	push	{r0, r1, lr}
 8008018:	4601      	mov	r1, r0
 800801a:	ab03      	add	r3, sp, #12
 800801c:	4805      	ldr	r0, [pc, #20]	; (8008034 <fiprintf+0x20>)
 800801e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008022:	6800      	ldr	r0, [r0, #0]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	f000 f83d 	bl	80080a4 <_vfiprintf_r>
 800802a:	b002      	add	sp, #8
 800802c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008030:	b003      	add	sp, #12
 8008032:	4770      	bx	lr
 8008034:	20000068 	.word	0x20000068

08008038 <abort>:
 8008038:	2006      	movs	r0, #6
 800803a:	b508      	push	{r3, lr}
 800803c:	f000 fa0a 	bl	8008454 <raise>
 8008040:	2001      	movs	r0, #1
 8008042:	f7f9 fb9b 	bl	800177c <_exit>

08008046 <_malloc_usable_size_r>:
 8008046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800804a:	1f18      	subs	r0, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	bfbc      	itt	lt
 8008050:	580b      	ldrlt	r3, [r1, r0]
 8008052:	18c0      	addlt	r0, r0, r3
 8008054:	4770      	bx	lr

08008056 <__sfputc_r>:
 8008056:	6893      	ldr	r3, [r2, #8]
 8008058:	b410      	push	{r4}
 800805a:	3b01      	subs	r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	6093      	str	r3, [r2, #8]
 8008060:	da07      	bge.n	8008072 <__sfputc_r+0x1c>
 8008062:	6994      	ldr	r4, [r2, #24]
 8008064:	42a3      	cmp	r3, r4
 8008066:	db01      	blt.n	800806c <__sfputc_r+0x16>
 8008068:	290a      	cmp	r1, #10
 800806a:	d102      	bne.n	8008072 <__sfputc_r+0x1c>
 800806c:	bc10      	pop	{r4}
 800806e:	f000 b933 	b.w	80082d8 <__swbuf_r>
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	1c58      	adds	r0, r3, #1
 8008076:	6010      	str	r0, [r2, #0]
 8008078:	7019      	strb	r1, [r3, #0]
 800807a:	4608      	mov	r0, r1
 800807c:	bc10      	pop	{r4}
 800807e:	4770      	bx	lr

08008080 <__sfputs_r>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	4606      	mov	r6, r0
 8008084:	460f      	mov	r7, r1
 8008086:	4614      	mov	r4, r2
 8008088:	18d5      	adds	r5, r2, r3
 800808a:	42ac      	cmp	r4, r5
 800808c:	d101      	bne.n	8008092 <__sfputs_r+0x12>
 800808e:	2000      	movs	r0, #0
 8008090:	e007      	b.n	80080a2 <__sfputs_r+0x22>
 8008092:	463a      	mov	r2, r7
 8008094:	4630      	mov	r0, r6
 8008096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809a:	f7ff ffdc 	bl	8008056 <__sfputc_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d1f3      	bne.n	800808a <__sfputs_r+0xa>
 80080a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080a4 <_vfiprintf_r>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	460d      	mov	r5, r1
 80080aa:	4614      	mov	r4, r2
 80080ac:	4698      	mov	r8, r3
 80080ae:	4606      	mov	r6, r0
 80080b0:	b09d      	sub	sp, #116	; 0x74
 80080b2:	b118      	cbz	r0, 80080bc <_vfiprintf_r+0x18>
 80080b4:	6a03      	ldr	r3, [r0, #32]
 80080b6:	b90b      	cbnz	r3, 80080bc <_vfiprintf_r+0x18>
 80080b8:	f7fc fdb0 	bl	8004c1c <__sinit>
 80080bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080be:	07d9      	lsls	r1, r3, #31
 80080c0:	d405      	bmi.n	80080ce <_vfiprintf_r+0x2a>
 80080c2:	89ab      	ldrh	r3, [r5, #12]
 80080c4:	059a      	lsls	r2, r3, #22
 80080c6:	d402      	bmi.n	80080ce <_vfiprintf_r+0x2a>
 80080c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ca:	f7fc febe 	bl	8004e4a <__retarget_lock_acquire_recursive>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	071b      	lsls	r3, r3, #28
 80080d2:	d501      	bpl.n	80080d8 <_vfiprintf_r+0x34>
 80080d4:	692b      	ldr	r3, [r5, #16]
 80080d6:	b99b      	cbnz	r3, 8008100 <_vfiprintf_r+0x5c>
 80080d8:	4629      	mov	r1, r5
 80080da:	4630      	mov	r0, r6
 80080dc:	f000 f93a 	bl	8008354 <__swsetup_r>
 80080e0:	b170      	cbz	r0, 8008100 <_vfiprintf_r+0x5c>
 80080e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e4:	07dc      	lsls	r4, r3, #31
 80080e6:	d504      	bpl.n	80080f2 <_vfiprintf_r+0x4e>
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	b01d      	add	sp, #116	; 0x74
 80080ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f2:	89ab      	ldrh	r3, [r5, #12]
 80080f4:	0598      	lsls	r0, r3, #22
 80080f6:	d4f7      	bmi.n	80080e8 <_vfiprintf_r+0x44>
 80080f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080fa:	f7fc fea7 	bl	8004e4c <__retarget_lock_release_recursive>
 80080fe:	e7f3      	b.n	80080e8 <_vfiprintf_r+0x44>
 8008100:	2300      	movs	r3, #0
 8008102:	9309      	str	r3, [sp, #36]	; 0x24
 8008104:	2320      	movs	r3, #32
 8008106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800810a:	2330      	movs	r3, #48	; 0x30
 800810c:	f04f 0901 	mov.w	r9, #1
 8008110:	f8cd 800c 	str.w	r8, [sp, #12]
 8008114:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80082c4 <_vfiprintf_r+0x220>
 8008118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800811c:	4623      	mov	r3, r4
 800811e:	469a      	mov	sl, r3
 8008120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008124:	b10a      	cbz	r2, 800812a <_vfiprintf_r+0x86>
 8008126:	2a25      	cmp	r2, #37	; 0x25
 8008128:	d1f9      	bne.n	800811e <_vfiprintf_r+0x7a>
 800812a:	ebba 0b04 	subs.w	fp, sl, r4
 800812e:	d00b      	beq.n	8008148 <_vfiprintf_r+0xa4>
 8008130:	465b      	mov	r3, fp
 8008132:	4622      	mov	r2, r4
 8008134:	4629      	mov	r1, r5
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ffa2 	bl	8008080 <__sfputs_r>
 800813c:	3001      	adds	r0, #1
 800813e:	f000 80a9 	beq.w	8008294 <_vfiprintf_r+0x1f0>
 8008142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008144:	445a      	add	r2, fp
 8008146:	9209      	str	r2, [sp, #36]	; 0x24
 8008148:	f89a 3000 	ldrb.w	r3, [sl]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 80a1 	beq.w	8008294 <_vfiprintf_r+0x1f0>
 8008152:	2300      	movs	r3, #0
 8008154:	f04f 32ff 	mov.w	r2, #4294967295
 8008158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815c:	f10a 0a01 	add.w	sl, sl, #1
 8008160:	9304      	str	r3, [sp, #16]
 8008162:	9307      	str	r3, [sp, #28]
 8008164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008168:	931a      	str	r3, [sp, #104]	; 0x68
 800816a:	4654      	mov	r4, sl
 800816c:	2205      	movs	r2, #5
 800816e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008172:	4854      	ldr	r0, [pc, #336]	; (80082c4 <_vfiprintf_r+0x220>)
 8008174:	f7fc fe6b 	bl	8004e4e <memchr>
 8008178:	9a04      	ldr	r2, [sp, #16]
 800817a:	b9d8      	cbnz	r0, 80081b4 <_vfiprintf_r+0x110>
 800817c:	06d1      	lsls	r1, r2, #27
 800817e:	bf44      	itt	mi
 8008180:	2320      	movmi	r3, #32
 8008182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008186:	0713      	lsls	r3, r2, #28
 8008188:	bf44      	itt	mi
 800818a:	232b      	movmi	r3, #43	; 0x2b
 800818c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008190:	f89a 3000 	ldrb.w	r3, [sl]
 8008194:	2b2a      	cmp	r3, #42	; 0x2a
 8008196:	d015      	beq.n	80081c4 <_vfiprintf_r+0x120>
 8008198:	4654      	mov	r4, sl
 800819a:	2000      	movs	r0, #0
 800819c:	f04f 0c0a 	mov.w	ip, #10
 80081a0:	9a07      	ldr	r2, [sp, #28]
 80081a2:	4621      	mov	r1, r4
 80081a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a8:	3b30      	subs	r3, #48	; 0x30
 80081aa:	2b09      	cmp	r3, #9
 80081ac:	d94d      	bls.n	800824a <_vfiprintf_r+0x1a6>
 80081ae:	b1b0      	cbz	r0, 80081de <_vfiprintf_r+0x13a>
 80081b0:	9207      	str	r2, [sp, #28]
 80081b2:	e014      	b.n	80081de <_vfiprintf_r+0x13a>
 80081b4:	eba0 0308 	sub.w	r3, r0, r8
 80081b8:	fa09 f303 	lsl.w	r3, r9, r3
 80081bc:	4313      	orrs	r3, r2
 80081be:	46a2      	mov	sl, r4
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	e7d2      	b.n	800816a <_vfiprintf_r+0xc6>
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	1d19      	adds	r1, r3, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	9103      	str	r1, [sp, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	bfbb      	ittet	lt
 80081d0:	425b      	neglt	r3, r3
 80081d2:	f042 0202 	orrlt.w	r2, r2, #2
 80081d6:	9307      	strge	r3, [sp, #28]
 80081d8:	9307      	strlt	r3, [sp, #28]
 80081da:	bfb8      	it	lt
 80081dc:	9204      	strlt	r2, [sp, #16]
 80081de:	7823      	ldrb	r3, [r4, #0]
 80081e0:	2b2e      	cmp	r3, #46	; 0x2e
 80081e2:	d10c      	bne.n	80081fe <_vfiprintf_r+0x15a>
 80081e4:	7863      	ldrb	r3, [r4, #1]
 80081e6:	2b2a      	cmp	r3, #42	; 0x2a
 80081e8:	d134      	bne.n	8008254 <_vfiprintf_r+0x1b0>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	3402      	adds	r4, #2
 80081ee:	1d1a      	adds	r2, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9203      	str	r2, [sp, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfb8      	it	lt
 80081f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80081fc:	9305      	str	r3, [sp, #20]
 80081fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082c8 <_vfiprintf_r+0x224>
 8008202:	2203      	movs	r2, #3
 8008204:	4650      	mov	r0, sl
 8008206:	7821      	ldrb	r1, [r4, #0]
 8008208:	f7fc fe21 	bl	8004e4e <memchr>
 800820c:	b138      	cbz	r0, 800821e <_vfiprintf_r+0x17a>
 800820e:	2240      	movs	r2, #64	; 0x40
 8008210:	9b04      	ldr	r3, [sp, #16]
 8008212:	eba0 000a 	sub.w	r0, r0, sl
 8008216:	4082      	lsls	r2, r0
 8008218:	4313      	orrs	r3, r2
 800821a:	3401      	adds	r4, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008222:	2206      	movs	r2, #6
 8008224:	4829      	ldr	r0, [pc, #164]	; (80082cc <_vfiprintf_r+0x228>)
 8008226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800822a:	f7fc fe10 	bl	8004e4e <memchr>
 800822e:	2800      	cmp	r0, #0
 8008230:	d03f      	beq.n	80082b2 <_vfiprintf_r+0x20e>
 8008232:	4b27      	ldr	r3, [pc, #156]	; (80082d0 <_vfiprintf_r+0x22c>)
 8008234:	bb1b      	cbnz	r3, 800827e <_vfiprintf_r+0x1da>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	3307      	adds	r3, #7
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	3308      	adds	r3, #8
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008244:	443b      	add	r3, r7
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	e768      	b.n	800811c <_vfiprintf_r+0x78>
 800824a:	460c      	mov	r4, r1
 800824c:	2001      	movs	r0, #1
 800824e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008252:	e7a6      	b.n	80081a2 <_vfiprintf_r+0xfe>
 8008254:	2300      	movs	r3, #0
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	4619      	mov	r1, r3
 800825c:	3401      	adds	r4, #1
 800825e:	9305      	str	r3, [sp, #20]
 8008260:	4620      	mov	r0, r4
 8008262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008266:	3a30      	subs	r2, #48	; 0x30
 8008268:	2a09      	cmp	r2, #9
 800826a:	d903      	bls.n	8008274 <_vfiprintf_r+0x1d0>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0c6      	beq.n	80081fe <_vfiprintf_r+0x15a>
 8008270:	9105      	str	r1, [sp, #20]
 8008272:	e7c4      	b.n	80081fe <_vfiprintf_r+0x15a>
 8008274:	4604      	mov	r4, r0
 8008276:	2301      	movs	r3, #1
 8008278:	fb0c 2101 	mla	r1, ip, r1, r2
 800827c:	e7f0      	b.n	8008260 <_vfiprintf_r+0x1bc>
 800827e:	ab03      	add	r3, sp, #12
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	462a      	mov	r2, r5
 8008284:	4630      	mov	r0, r6
 8008286:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <_vfiprintf_r+0x230>)
 8008288:	a904      	add	r1, sp, #16
 800828a:	f7fb fe6b 	bl	8003f64 <_printf_float>
 800828e:	4607      	mov	r7, r0
 8008290:	1c78      	adds	r0, r7, #1
 8008292:	d1d6      	bne.n	8008242 <_vfiprintf_r+0x19e>
 8008294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008296:	07d9      	lsls	r1, r3, #31
 8008298:	d405      	bmi.n	80082a6 <_vfiprintf_r+0x202>
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	059a      	lsls	r2, r3, #22
 800829e:	d402      	bmi.n	80082a6 <_vfiprintf_r+0x202>
 80082a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082a2:	f7fc fdd3 	bl	8004e4c <__retarget_lock_release_recursive>
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	065b      	lsls	r3, r3, #25
 80082aa:	f53f af1d 	bmi.w	80080e8 <_vfiprintf_r+0x44>
 80082ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082b0:	e71c      	b.n	80080ec <_vfiprintf_r+0x48>
 80082b2:	ab03      	add	r3, sp, #12
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	462a      	mov	r2, r5
 80082b8:	4630      	mov	r0, r6
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <_vfiprintf_r+0x230>)
 80082bc:	a904      	add	r1, sp, #16
 80082be:	f7fc f8f1 	bl	80044a4 <_printf_i>
 80082c2:	e7e4      	b.n	800828e <_vfiprintf_r+0x1ea>
 80082c4:	08008971 	.word	0x08008971
 80082c8:	08008977 	.word	0x08008977
 80082cc:	0800897b 	.word	0x0800897b
 80082d0:	08003f65 	.word	0x08003f65
 80082d4:	08008081 	.word	0x08008081

080082d8 <__swbuf_r>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	460e      	mov	r6, r1
 80082dc:	4614      	mov	r4, r2
 80082de:	4605      	mov	r5, r0
 80082e0:	b118      	cbz	r0, 80082ea <__swbuf_r+0x12>
 80082e2:	6a03      	ldr	r3, [r0, #32]
 80082e4:	b90b      	cbnz	r3, 80082ea <__swbuf_r+0x12>
 80082e6:	f7fc fc99 	bl	8004c1c <__sinit>
 80082ea:	69a3      	ldr	r3, [r4, #24]
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	071a      	lsls	r2, r3, #28
 80082f2:	d525      	bpl.n	8008340 <__swbuf_r+0x68>
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	b31b      	cbz	r3, 8008340 <__swbuf_r+0x68>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	6922      	ldr	r2, [r4, #16]
 80082fc:	b2f6      	uxtb	r6, r6
 80082fe:	1a98      	subs	r0, r3, r2
 8008300:	6963      	ldr	r3, [r4, #20]
 8008302:	4637      	mov	r7, r6
 8008304:	4283      	cmp	r3, r0
 8008306:	dc04      	bgt.n	8008312 <__swbuf_r+0x3a>
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	f7ff fa30 	bl	8007770 <_fflush_r>
 8008310:	b9e0      	cbnz	r0, 800834c <__swbuf_r+0x74>
 8008312:	68a3      	ldr	r3, [r4, #8]
 8008314:	3b01      	subs	r3, #1
 8008316:	60a3      	str	r3, [r4, #8]
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	6022      	str	r2, [r4, #0]
 800831e:	701e      	strb	r6, [r3, #0]
 8008320:	6962      	ldr	r2, [r4, #20]
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	429a      	cmp	r2, r3
 8008326:	d004      	beq.n	8008332 <__swbuf_r+0x5a>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	07db      	lsls	r3, r3, #31
 800832c:	d506      	bpl.n	800833c <__swbuf_r+0x64>
 800832e:	2e0a      	cmp	r6, #10
 8008330:	d104      	bne.n	800833c <__swbuf_r+0x64>
 8008332:	4621      	mov	r1, r4
 8008334:	4628      	mov	r0, r5
 8008336:	f7ff fa1b 	bl	8007770 <_fflush_r>
 800833a:	b938      	cbnz	r0, 800834c <__swbuf_r+0x74>
 800833c:	4638      	mov	r0, r7
 800833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008340:	4621      	mov	r1, r4
 8008342:	4628      	mov	r0, r5
 8008344:	f000 f806 	bl	8008354 <__swsetup_r>
 8008348:	2800      	cmp	r0, #0
 800834a:	d0d5      	beq.n	80082f8 <__swbuf_r+0x20>
 800834c:	f04f 37ff 	mov.w	r7, #4294967295
 8008350:	e7f4      	b.n	800833c <__swbuf_r+0x64>
	...

08008354 <__swsetup_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4b2a      	ldr	r3, [pc, #168]	; (8008400 <__swsetup_r+0xac>)
 8008358:	4605      	mov	r5, r0
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	460c      	mov	r4, r1
 800835e:	b118      	cbz	r0, 8008368 <__swsetup_r+0x14>
 8008360:	6a03      	ldr	r3, [r0, #32]
 8008362:	b90b      	cbnz	r3, 8008368 <__swsetup_r+0x14>
 8008364:	f7fc fc5a 	bl	8004c1c <__sinit>
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800836e:	0718      	lsls	r0, r3, #28
 8008370:	d422      	bmi.n	80083b8 <__swsetup_r+0x64>
 8008372:	06d9      	lsls	r1, r3, #27
 8008374:	d407      	bmi.n	8008386 <__swsetup_r+0x32>
 8008376:	2309      	movs	r3, #9
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800837e:	f04f 30ff 	mov.w	r0, #4294967295
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	e034      	b.n	80083f0 <__swsetup_r+0x9c>
 8008386:	0758      	lsls	r0, r3, #29
 8008388:	d512      	bpl.n	80083b0 <__swsetup_r+0x5c>
 800838a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800838c:	b141      	cbz	r1, 80083a0 <__swsetup_r+0x4c>
 800838e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008392:	4299      	cmp	r1, r3
 8008394:	d002      	beq.n	800839c <__swsetup_r+0x48>
 8008396:	4628      	mov	r0, r5
 8008398:	f7fd fbda 	bl	8005b50 <_free_r>
 800839c:	2300      	movs	r3, #0
 800839e:	6363      	str	r3, [r4, #52]	; 0x34
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083a6:	81a3      	strh	r3, [r4, #12]
 80083a8:	2300      	movs	r3, #0
 80083aa:	6063      	str	r3, [r4, #4]
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f043 0308 	orr.w	r3, r3, #8
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	b94b      	cbnz	r3, 80083d0 <__swsetup_r+0x7c>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c6:	d003      	beq.n	80083d0 <__swsetup_r+0x7c>
 80083c8:	4621      	mov	r1, r4
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 f883 	bl	80084d6 <__smakebuf_r>
 80083d0:	89a0      	ldrh	r0, [r4, #12]
 80083d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083d6:	f010 0301 	ands.w	r3, r0, #1
 80083da:	d00a      	beq.n	80083f2 <__swsetup_r+0x9e>
 80083dc:	2300      	movs	r3, #0
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	6963      	ldr	r3, [r4, #20]
 80083e2:	425b      	negs	r3, r3
 80083e4:	61a3      	str	r3, [r4, #24]
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	b943      	cbnz	r3, 80083fc <__swsetup_r+0xa8>
 80083ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083ee:	d1c4      	bne.n	800837a <__swsetup_r+0x26>
 80083f0:	bd38      	pop	{r3, r4, r5, pc}
 80083f2:	0781      	lsls	r1, r0, #30
 80083f4:	bf58      	it	pl
 80083f6:	6963      	ldrpl	r3, [r4, #20]
 80083f8:	60a3      	str	r3, [r4, #8]
 80083fa:	e7f4      	b.n	80083e6 <__swsetup_r+0x92>
 80083fc:	2000      	movs	r0, #0
 80083fe:	e7f7      	b.n	80083f0 <__swsetup_r+0x9c>
 8008400:	20000068 	.word	0x20000068

08008404 <_raise_r>:
 8008404:	291f      	cmp	r1, #31
 8008406:	b538      	push	{r3, r4, r5, lr}
 8008408:	4604      	mov	r4, r0
 800840a:	460d      	mov	r5, r1
 800840c:	d904      	bls.n	8008418 <_raise_r+0x14>
 800840e:	2316      	movs	r3, #22
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	f04f 30ff 	mov.w	r0, #4294967295
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800841a:	b112      	cbz	r2, 8008422 <_raise_r+0x1e>
 800841c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008420:	b94b      	cbnz	r3, 8008436 <_raise_r+0x32>
 8008422:	4620      	mov	r0, r4
 8008424:	f000 f830 	bl	8008488 <_getpid_r>
 8008428:	462a      	mov	r2, r5
 800842a:	4601      	mov	r1, r0
 800842c:	4620      	mov	r0, r4
 800842e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008432:	f000 b817 	b.w	8008464 <_kill_r>
 8008436:	2b01      	cmp	r3, #1
 8008438:	d00a      	beq.n	8008450 <_raise_r+0x4c>
 800843a:	1c59      	adds	r1, r3, #1
 800843c:	d103      	bne.n	8008446 <_raise_r+0x42>
 800843e:	2316      	movs	r3, #22
 8008440:	6003      	str	r3, [r0, #0]
 8008442:	2001      	movs	r0, #1
 8008444:	e7e7      	b.n	8008416 <_raise_r+0x12>
 8008446:	2400      	movs	r4, #0
 8008448:	4628      	mov	r0, r5
 800844a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800844e:	4798      	blx	r3
 8008450:	2000      	movs	r0, #0
 8008452:	e7e0      	b.n	8008416 <_raise_r+0x12>

08008454 <raise>:
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <raise+0xc>)
 8008456:	4601      	mov	r1, r0
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	f7ff bfd3 	b.w	8008404 <_raise_r>
 800845e:	bf00      	nop
 8008460:	20000068 	.word	0x20000068

08008464 <_kill_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	2300      	movs	r3, #0
 8008468:	4d06      	ldr	r5, [pc, #24]	; (8008484 <_kill_r+0x20>)
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	f7f9 f973 	bl	800175c <_kill>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d102      	bne.n	8008480 <_kill_r+0x1c>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b103      	cbz	r3, 8008480 <_kill_r+0x1c>
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	200003ec 	.word	0x200003ec

08008488 <_getpid_r>:
 8008488:	f7f9 b961 	b.w	800174e <_getpid>

0800848c <__swhatbuf_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	460c      	mov	r4, r1
 8008490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008494:	4615      	mov	r5, r2
 8008496:	2900      	cmp	r1, #0
 8008498:	461e      	mov	r6, r3
 800849a:	b096      	sub	sp, #88	; 0x58
 800849c:	da0c      	bge.n	80084b8 <__swhatbuf_r+0x2c>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	2100      	movs	r1, #0
 80084a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084a6:	bf0c      	ite	eq
 80084a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80084ac:	2340      	movne	r3, #64	; 0x40
 80084ae:	2000      	movs	r0, #0
 80084b0:	6031      	str	r1, [r6, #0]
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	b016      	add	sp, #88	; 0x58
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	466a      	mov	r2, sp
 80084ba:	f000 f849 	bl	8008550 <_fstat_r>
 80084be:	2800      	cmp	r0, #0
 80084c0:	dbed      	blt.n	800849e <__swhatbuf_r+0x12>
 80084c2:	9901      	ldr	r1, [sp, #4]
 80084c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084cc:	4259      	negs	r1, r3
 80084ce:	4159      	adcs	r1, r3
 80084d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d4:	e7eb      	b.n	80084ae <__swhatbuf_r+0x22>

080084d6 <__smakebuf_r>:
 80084d6:	898b      	ldrh	r3, [r1, #12]
 80084d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084da:	079d      	lsls	r5, r3, #30
 80084dc:	4606      	mov	r6, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	d507      	bpl.n	80084f2 <__smakebuf_r+0x1c>
 80084e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	2301      	movs	r3, #1
 80084ec:	6163      	str	r3, [r4, #20]
 80084ee:	b002      	add	sp, #8
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
 80084f2:	466a      	mov	r2, sp
 80084f4:	ab01      	add	r3, sp, #4
 80084f6:	f7ff ffc9 	bl	800848c <__swhatbuf_r>
 80084fa:	9900      	ldr	r1, [sp, #0]
 80084fc:	4605      	mov	r5, r0
 80084fe:	4630      	mov	r0, r6
 8008500:	f7fd fb96 	bl	8005c30 <_malloc_r>
 8008504:	b948      	cbnz	r0, 800851a <__smakebuf_r+0x44>
 8008506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850a:	059a      	lsls	r2, r3, #22
 800850c:	d4ef      	bmi.n	80084ee <__smakebuf_r+0x18>
 800850e:	f023 0303 	bic.w	r3, r3, #3
 8008512:	f043 0302 	orr.w	r3, r3, #2
 8008516:	81a3      	strh	r3, [r4, #12]
 8008518:	e7e3      	b.n	80084e2 <__smakebuf_r+0xc>
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	6020      	str	r0, [r4, #0]
 800851e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	6120      	str	r0, [r4, #16]
 8008528:	6163      	str	r3, [r4, #20]
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	b15b      	cbz	r3, 8008546 <__smakebuf_r+0x70>
 800852e:	4630      	mov	r0, r6
 8008530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008534:	f000 f81e 	bl	8008574 <_isatty_r>
 8008538:	b128      	cbz	r0, 8008546 <__smakebuf_r+0x70>
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	f023 0303 	bic.w	r3, r3, #3
 8008540:	f043 0301 	orr.w	r3, r3, #1
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	431d      	orrs	r5, r3
 800854a:	81a5      	strh	r5, [r4, #12]
 800854c:	e7cf      	b.n	80084ee <__smakebuf_r+0x18>
	...

08008550 <_fstat_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	2300      	movs	r3, #0
 8008554:	4d06      	ldr	r5, [pc, #24]	; (8008570 <_fstat_r+0x20>)
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	f7f9 f95b 	bl	8001818 <_fstat>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d102      	bne.n	800856c <_fstat_r+0x1c>
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	b103      	cbz	r3, 800856c <_fstat_r+0x1c>
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	bf00      	nop
 8008570:	200003ec 	.word	0x200003ec

08008574 <_isatty_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	2300      	movs	r3, #0
 8008578:	4d05      	ldr	r5, [pc, #20]	; (8008590 <_isatty_r+0x1c>)
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7f9 f959 	bl	8001836 <_isatty>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_isatty_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_isatty_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200003ec 	.word	0x200003ec

08008594 <_init>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	bf00      	nop
 8008598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859a:	bc08      	pop	{r3}
 800859c:	469e      	mov	lr, r3
 800859e:	4770      	bx	lr

080085a0 <_fini>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr
