
FLASH_MEMORY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000162c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001834  08001834  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800183c  0800183c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800183c  0800183c  0001183c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001840  08001840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000000c  08001850  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08001850  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004d5c  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001321  00000000  00000000  00024dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000580  00000000  00000000  00026100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004d8  00000000  00000000  00026680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025576  00000000  00000000  00026b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000063c5  00000000  00000000  0004c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c44  00000000  00000000  00052493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000143c  00000000  00000000  0013a0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800180c 	.word	0x0800180c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800180c 	.word	0x0800180c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <FLASH_Write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void FLASH_Write(uint32_t myFlashAddress,uint32_t myFlashData){
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock(); //yazma için flashın kilidi kaldırıldi
 800053e:	f000 fad5 	bl	8000aec <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);//adres temizledni
 8000542:	2102      	movs	r1, #2
 8000544:	200b      	movs	r0, #11
 8000546:	f000 fc33 	bl	8000db0 <FLASH_Erase_Sector>


	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,myFlashAddress , myFlashData);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	461c      	mov	r4, r3
 8000550:	4615      	mov	r5, r2
 8000552:	4622      	mov	r2, r4
 8000554:	462b      	mov	r3, r5
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	2002      	movs	r0, #2
 800055a:	f000 fa6b 	bl	8000a34 <HAL_FLASH_Program>

	HAL_FLASH_Lock(); //yazma işlemi bitti flash kilitlendi.
 800055e:	f000 fae7 	bl	8000b30 <HAL_FLASH_Lock>

}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bdb0      	pop	{r4, r5, r7, pc}

0800056a <FLASH_Read>:


uint32_t FLASH_Read(uint32_t myFlashAddress){
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]

    uint32_t myFlashDatas;

    myFlashDatas = *(uint32_t*)myFlashAddress;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	60fb      	str	r3, [r7, #12]

    return myFlashDatas;
 8000578:	68fb      	ldr	r3, [r7, #12]

}
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 f90f 	bl	80007ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f810 	bl	80005b4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
    FLASH_Write(0x081C0000, 0xFA); //FLASHA YAZMA İSLEMİ
 8000594:	21fa      	movs	r1, #250	; 0xfa
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <main+0x24>)
 8000598:	f7ff ffcc 	bl	8000534 <FLASH_Write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  data=FLASH_Read(0x081C0000);
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <main+0x24>)
 800059e:	f7ff ffe4 	bl	800056a <FLASH_Read>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a02      	ldr	r2, [pc, #8]	; (80005b0 <main+0x28>)
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	e7f8      	b.n	800059c <main+0x14>
 80005aa:	bf00      	nop
 80005ac:	081c0000 	.word	0x081c0000
 80005b0:	20000028 	.word	0x20000028

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2234      	movs	r2, #52	; 0x34
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f8f6 	bl	80017b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <SystemClock_Config+0xd4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <SystemClock_Config+0xd4>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xd4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a25      	ldr	r2, [pc, #148]	; (800068c <SystemClock_Config+0xd8>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000620:	23d8      	movs	r3, #216	; 0xd8
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc5d 	bl	8000ef4 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000640:	f000 f826 	bl	8000690 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000644:	f000 fc06 	bl	8000e54 <HAL_PWREx_EnableOverDrive>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800064e:	f000 f81f 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2107      	movs	r1, #7
 8000670:	4618      	mov	r0, r3
 8000672:	f000 feed 	bl	8001450 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800067c:	f000 f808 	bl	8000690 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x44>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x44>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x44>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x44>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x44>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x44>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f87a 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000762:	490e      	ldr	r1, [pc, #56]	; (800079c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000778:	4c0b      	ldr	r4, [pc, #44]	; (80007a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000786:	f7ff ffd7 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078a:	f001 f81b 	bl	80017c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800078e:	f7ff fefb 	bl	8000588 <main>
  bx  lr    
 8000792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000794:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007a0:	08001844 	.word	0x08001844
  ldr r2, =_sbss
 80007a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a8:	2000004c 	.word	0x2000004c

080007ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>

080007ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f000 f90a 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b8:	200f      	movs	r0, #15
 80007ba:	f000 f805 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007be:	f7ff ff6d 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f917 	bl	8000a1a <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f8ed 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	2000002c 	.word	0x2000002c

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2000002c 	.word	0x2000002c

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <__NVIC_SetPriorityGrouping+0x40>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	4313      	orrs	r3, r2
 8000894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <__NVIC_SetPriorityGrouping+0x40>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	60d3      	str	r3, [r2, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	05fa0000 	.word	0x05fa0000

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db0a      	blt.n	80008f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	490c      	ldr	r1, [pc, #48]	; (8000918 <__NVIC_SetPriority+0x4c>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	440b      	add	r3, r1
 80008f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f4:	e00a      	b.n	800090c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4908      	ldr	r1, [pc, #32]	; (800091c <__NVIC_SetPriority+0x50>)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	3b04      	subs	r3, #4
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	440b      	add	r3, r1
 800090a:	761a      	strb	r2, [r3, #24]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f1c3 0307 	rsb	r3, r3, #7
 800093a:	2b04      	cmp	r3, #4
 800093c:	bf28      	it	cs
 800093e:	2304      	movcs	r3, #4
 8000940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3304      	adds	r3, #4
 8000946:	2b06      	cmp	r3, #6
 8000948:	d902      	bls.n	8000950 <NVIC_EncodePriority+0x30>
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3b03      	subs	r3, #3
 800094e:	e000      	b.n	8000952 <NVIC_EncodePriority+0x32>
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 32ff 	mov.w	r2, #4294967295
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43da      	mvns	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	401a      	ands	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43d9      	mvns	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	4313      	orrs	r3, r2
         );
}
 800097a:	4618      	mov	r0, r3
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f7ff ff8e 	bl	80008cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff47 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff5c 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff8e 	bl	8000920 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5d 	bl	80008cc <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffb0 	bl	8000988 <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <HAL_FLASH_Program+0xb0>)
 8000a48:	7d1b      	ldrb	r3, [r3, #20]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d101      	bne.n	8000a52 <HAL_FLASH_Program+0x1e>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e043      	b.n	8000ada <HAL_FLASH_Program+0xa6>
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <HAL_FLASH_Program+0xb0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a5c:	f000 f878 	bl	8000b50 <FLASH_WaitForLastOperation>
 8000a60:	4603      	mov	r3, r0
 8000a62:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d133      	bne.n	8000ad2 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d823      	bhi.n	8000ab8 <HAL_FLASH_Program+0x84>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <HAL_FLASH_Program+0x44>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a89 	.word	0x08000a89
 8000a7c:	08000a95 	.word	0x08000a95
 8000a80:	08000aa1 	.word	0x08000aa1
 8000a84:	08000aad 	.word	0x08000aad
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8000a88:	783b      	ldrb	r3, [r7, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	68b8      	ldr	r0, [r7, #8]
 8000a8e:	f000 f921 	bl	8000cd4 <FLASH_Program_Byte>
        break;
 8000a92:	e012      	b.n	8000aba <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000a94:	883b      	ldrh	r3, [r7, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	68b8      	ldr	r0, [r7, #8]
 8000a9a:	f000 f8f5 	bl	8000c88 <FLASH_Program_HalfWord>
        break;
 8000a9e:	e00c      	b.n	8000aba <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	68b8      	ldr	r0, [r7, #8]
 8000aa6:	f000 f8c9 	bl	8000c3c <FLASH_Program_Word>
        break;
 8000aaa:	e006      	b.n	8000aba <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8000aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ab0:	68b8      	ldr	r0, [r7, #8]
 8000ab2:	f000 f88d 	bl	8000bd0 <FLASH_Program_DoubleWord>
        break;
 8000ab6:	e000      	b.n	8000aba <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8000ab8:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000abe:	f000 f847 	bl	8000b50 <FLASH_WaitForLastOperation>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_FLASH_Program+0xb4>)
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_FLASH_Program+0xb4>)
 8000acc:	f023 0301 	bic.w	r3, r3, #1
 8000ad0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_FLASH_Program+0xb0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	751a      	strb	r2, [r3, #20]

  return status;
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000030 	.word	0x20000030
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_FLASH_Unlock+0x38>)
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da0b      	bge.n	8000b16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_FLASH_Unlock+0x38>)
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_FLASH_Unlock+0x3c>)
 8000b02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_FLASH_Unlock+0x38>)
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <HAL_FLASH_Unlock+0x40>)
 8000b08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_FLASH_Unlock+0x38>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da01      	bge.n	8000b16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40023c00 	.word	0x40023c00
 8000b28:	45670123 	.word	0x45670123
 8000b2c:	cdef89ab 	.word	0xcdef89ab

08000b30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_FLASH_Lock+0x1c>)
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_FLASH_Lock+0x1c>)
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <FLASH_WaitForLastOperation+0x78>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000b62:	f7ff fe75 	bl	8000850 <HAL_GetTick>
 8000b66:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000b68:	e010      	b.n	8000b8c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d00c      	beq.n	8000b8c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d007      	beq.n	8000b88 <FLASH_WaitForLastOperation+0x38>
 8000b78:	f7ff fe6a 	bl	8000850 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d201      	bcs.n	8000b8c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e019      	b.n	8000bc0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <FLASH_WaitForLastOperation+0x7c>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1e8      	bne.n	8000b6a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <FLASH_WaitForLastOperation+0x7c>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000ba4:	f000 f8ba 	bl	8000d1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e009      	b.n	8000bc0 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <FLASH_WaitForLastOperation+0x7c>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <FLASH_WaitForLastOperation+0x7c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
  
}  
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000030 	.word	0x20000030
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <FLASH_Program_DoubleWord+0x68>)
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <FLASH_Program_DoubleWord+0x68>)
 8000be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000be6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <FLASH_Program_DoubleWord+0x68>)
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <FLASH_Program_DoubleWord+0x68>)
 8000bee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000bf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <FLASH_Program_DoubleWord+0x68>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <FLASH_Program_DoubleWord+0x68>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000c06:	f3bf 8f6f 	isb	sy
}
 8000c0a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	000a      	movs	r2, r1
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	3104      	adds	r1, #4
 8000c20:	4613      	mov	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c24:	f3bf 8f4f 	dsb	sy
}
 8000c28:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <FLASH_Program_Word+0x48>)
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <FLASH_Program_Word+0x48>)
 8000c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <FLASH_Program_Word+0x48>)
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <FLASH_Program_Word+0x48>)
 8000c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <FLASH_Program_Word+0x48>)
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <FLASH_Program_Word+0x48>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c70:	f3bf 8f4f 	dsb	sy
}
 8000c74:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <FLASH_Program_HalfWord+0x48>)
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <FLASH_Program_HalfWord+0x48>)
 8000c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <FLASH_Program_HalfWord+0x48>)
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <FLASH_Program_HalfWord+0x48>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <FLASH_Program_HalfWord+0x48>)
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <FLASH_Program_HalfWord+0x48>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cbe:	f3bf 8f4f 	dsb	sy
}
 8000cc2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <FLASH_Program_Byte+0x44>)
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <FLASH_Program_Byte+0x44>)
 8000ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <FLASH_Program_Byte+0x44>)
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <FLASH_Program_Byte+0x44>)
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <FLASH_Program_Byte+0x44>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <FLASH_Program_Byte+0x44>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	78fa      	ldrb	r2, [r7, #3]
 8000d04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d06:	f3bf 8f4f 	dsb	sy
}
 8000d0a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d20:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <FLASH_SetErrorCode+0x8c>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d005      	beq.n	8000d38 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d36:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <FLASH_SetErrorCode+0x8c>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	4a17      	ldr	r2, [pc, #92]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d4e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <FLASH_SetErrorCode+0x8c>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d005      	beq.n	8000d68 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	4a11      	ldr	r2, [pc, #68]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <FLASH_SetErrorCode+0x8c>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d7e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <FLASH_SetErrorCode+0x8c>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	4a05      	ldr	r2, [pc, #20]	; (8000dac <FLASH_SetErrorCode+0x90>)
 8000d96:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <FLASH_SetErrorCode+0x8c>)
 8000d9a:	22f2      	movs	r2, #242	; 0xf2
 8000d9c:	60da      	str	r2, [r3, #12]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	20000030 	.word	0x20000030

08000db0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	e010      	b.n	8000dee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d103      	bne.n	8000dda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e009      	b.n	8000dee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d103      	bne.n	8000de8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e002      	b.n	8000dee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000de8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dec:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0b      	cmp	r3, #11
 8000df2:	d902      	bls.n	8000dfa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3304      	adds	r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	4911      	ldr	r1, [pc, #68]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <FLASH_Erase_Sector+0xa0>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e3c:	f3bf 8f4f 	dsb	sy
}
 8000e40:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <HAL_PWREx_EnableOverDrive+0x98>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a22      	ldr	r2, [pc, #136]	; (8000eec <HAL_PWREx_EnableOverDrive+0x98>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_PWREx_EnableOverDrive+0x98>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e82:	f7ff fce5 	bl	8000850 <HAL_GetTick>
 8000e86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e88:	e009      	b.n	8000e9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e8a:	f7ff fce1 	bl	8000850 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e98:	d901      	bls.n	8000e9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e022      	b.n	8000ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eaa:	d1ee      	bne.n	8000e8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb8:	f7ff fcca 	bl	8000850 <HAL_GetTick>
 8000ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ebe:	e009      	b.n	8000ed4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ec0:	f7ff fcc6 	bl	8000850 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ece:	d901      	bls.n	8000ed4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e007      	b.n	8000ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ee0:	d1ee      	bne.n	8000ec0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e29b      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8087 	beq.w	8001026 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f18:	4b96      	ldr	r3, [pc, #600]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f24:	4b93      	ldr	r3, [pc, #588]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d112      	bne.n	8000f56 <HAL_RCC_OscConfig+0x62>
 8000f30:	4b90      	ldr	r3, [pc, #576]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b8d      	ldr	r3, [pc, #564]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d06c      	beq.n	8001024 <HAL_RCC_OscConfig+0x130>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d168      	bne.n	8001024 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e275      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x7a>
 8000f60:	4b84      	ldr	r3, [pc, #528]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a83      	ldr	r2, [pc, #524]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e02e      	b.n	8000fcc <HAL_RCC_OscConfig+0xd8>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x9c>
 8000f76:	4b7f      	ldr	r3, [pc, #508]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7e      	ldr	r2, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b7c      	ldr	r3, [pc, #496]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7b      	ldr	r2, [pc, #492]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e01d      	b.n	8000fcc <HAL_RCC_OscConfig+0xd8>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
 8000f9a:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a75      	ldr	r2, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b73      	ldr	r3, [pc, #460]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a72      	ldr	r2, [pc, #456]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xd8>
 8000fb4:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a6b      	ldr	r2, [pc, #428]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fc3c 	bl	8000850 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fc38 	bl	8000850 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e229      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	4b61      	ldr	r3, [pc, #388]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0xe8>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc28 	bl	8000850 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fc24 	bl	8000850 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e215      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x110>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d069      	beq.n	8001106 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103e:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d11c      	bne.n	8001084 <HAL_RCC_OscConfig+0x190>
 800104a:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d116      	bne.n	8001084 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x17a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e1e9      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	493d      	ldr	r1, [pc, #244]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	e040      	b.n	8001106 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d023      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a38      	ldr	r2, [pc, #224]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fbda 	bl	8000850 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fbd6 	bl	8000850 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e1c7      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4929      	ldr	r1, [pc, #164]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
 80010d2:	e018      	b.n	8001106 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a26      	ldr	r2, [pc, #152]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fbb6 	bl	8000850 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fbb2 	bl	8000850 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e1a3      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d038      	beq.n	8001184 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d019      	beq.n	800114e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800111c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001126:	f7ff fb93 	bl	8000850 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fb8f 	bl	8000850 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e180      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x23a>
 800114c:	e01a      	b.n	8001184 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115a:	f7ff fb79 	bl	8000850 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fb75 	bl	8000850 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d903      	bls.n	8001178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e166      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
 8001174:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001178:	4b92      	ldr	r3, [pc, #584]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 800117a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ee      	bne.n	8001162 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a4 	beq.w	80012da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a88      	ldr	r2, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b86      	ldr	r3, [pc, #536]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ba:	4b83      	ldr	r3, [pc, #524]	; (80013c8 <HAL_RCC_OscConfig+0x4d4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d118      	bne.n	80011f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80011c6:	4b80      	ldr	r3, [pc, #512]	; (80013c8 <HAL_RCC_OscConfig+0x4d4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a7f      	ldr	r2, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x4d4>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fb3d 	bl	8000850 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7ff fb39 	bl	8000850 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e12a      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ec:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <HAL_RCC_OscConfig+0x4d4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x31a>
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001204:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6713      	str	r3, [r2, #112]	; 0x70
 800120c:	e02d      	b.n	800126a <HAL_RCC_OscConfig+0x376>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x33c>
 8001216:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121a:	4a6a      	ldr	r2, [pc, #424]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6713      	str	r3, [r2, #112]	; 0x70
 8001222:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001226:	4a67      	ldr	r2, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6713      	str	r3, [r2, #112]	; 0x70
 800122e:	e01c      	b.n	800126a <HAL_RCC_OscConfig+0x376>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x35e>
 8001238:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123c:	4a61      	ldr	r2, [pc, #388]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6713      	str	r3, [r2, #112]	; 0x70
 8001244:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6713      	str	r3, [r2, #112]	; 0x70
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0x376>
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	4a5b      	ldr	r2, [pc, #364]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
 800125e:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001262:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d015      	beq.n	800129e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001272:	f7ff faed 	bl	8000850 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fae9 	bl	8000850 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	; 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0d8      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0ee      	beq.n	800127a <HAL_RCC_OscConfig+0x386>
 800129c:	e014      	b.n	80012c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129e:	f7ff fad7 	bl	8000850 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fad3 	bl	8000850 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0c2      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ee      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a3c      	ldr	r2, [pc, #240]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80ae 	beq.w	8001440 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d06d      	beq.n	80013cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d14b      	bne.n	8001390 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80012fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff faa4 	bl	8000850 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff faa0 	bl	8000850 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e091      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	3b01      	subs	r3, #1
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	061b      	lsls	r3, r3, #24
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	071b      	lsls	r3, r3, #28
 8001356:	491b      	ldr	r1, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fa72 	bl	8000850 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fa6e 	bl	8000850 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e05f      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x47c>
 800138e:	e057      	b.n	8001440 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 8001396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800139a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fa58 	bl	8000850 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fa54 	bl	8000850 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e045      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_RCC_OscConfig+0x4d0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x4b0>
 80013c2:	e03d      	b.n	8001440 <HAL_RCC_OscConfig+0x54c>
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x558>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d030      	beq.n	800143c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d129      	bne.n	800143c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d122      	bne.n	800143c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001402:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001404:	4293      	cmp	r3, r2
 8001406:	d119      	bne.n	800143c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	085b      	lsrs	r3, r3, #1
 8001414:	3b01      	subs	r3, #1
 8001416:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d10f      	bne.n	800143c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d107      	bne.n	800143c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0d0      	b.n	800160a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d910      	bls.n	8001498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 020f 	bic.w	r2, r3, #15
 800147e:	4965      	ldr	r1, [pc, #404]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0b8      	b.n	800160a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80014b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80014ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	494d      	ldr	r1, [pc, #308]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d040      	beq.n	8001574 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d115      	bne.n	8001532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07f      	b.n	800160a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e073      	b.n	800160a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06b      	b.n	800160a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4936      	ldr	r1, [pc, #216]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001544:	f7ff f984 	bl	8000850 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff f980 	bl	8000850 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e053      	b.n	800160a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d210      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 020f 	bic.w	r2, r3, #15
 800158a:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e032      	b.n	800160a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e2:	f000 f821 	bl	8001628 <HAL_RCC_GetSysClockFreq>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	490a      	ldr	r1, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1cc>)
 80015f4:	5ccb      	ldrb	r3, [r1, r3]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1d0>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1d4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f8e0 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00
 8001618:	40023800 	.word	0x40023800
 800161c:	08001824 	.word	0x08001824
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800162c:	b090      	sub	sp, #64	; 0x40
 800162e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
 8001634:	2300      	movs	r3, #0
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b08      	cmp	r3, #8
 800164a:	d00d      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x40>
 800164c:	2b08      	cmp	r3, #8
 800164e:	f200 80a1 	bhi.w	8001794 <HAL_RCC_GetSysClockFreq+0x16c>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x34>
 8001656:	2b04      	cmp	r3, #4
 8001658:	d003      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x3a>
 800165a:	e09b      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_GetSysClockFreq+0x184>)
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001660:	e09b      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001662:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001666:	e098      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d028      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	2200      	movs	r2, #0
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	627a      	str	r2, [r7, #36]	; 0x24
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001690:	2100      	movs	r1, #0
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001694:	fb03 f201 	mul.w	r2, r3, r1
 8001698:	2300      	movs	r3, #0
 800169a:	fb00 f303 	mul.w	r3, r0, r3
 800169e:	4413      	add	r3, r2
 80016a0:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016a2:	fba0 1202 	umull	r1, r2, r0, r2
 80016a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016a8:	460a      	mov	r2, r1
 80016aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80016ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ae:	4413      	add	r3, r2
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	2200      	movs	r2, #0
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	61fa      	str	r2, [r7, #28]
 80016ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016c2:	f7fe fdb9 	bl	8000238 <__aeabi_uldivmod>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4613      	mov	r3, r2
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ce:	e053      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	2200      	movs	r2, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	617a      	str	r2, [r7, #20]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016e2:	f04f 0b00 	mov.w	fp, #0
 80016e6:	4652      	mov	r2, sl
 80016e8:	465b      	mov	r3, fp
 80016ea:	f04f 0000 	mov.w	r0, #0
 80016ee:	f04f 0100 	mov.w	r1, #0
 80016f2:	0159      	lsls	r1, r3, #5
 80016f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f8:	0150      	lsls	r0, r2, #5
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001702:	eb63 090b 	sbc.w	r9, r3, fp
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800171a:	ebb2 0408 	subs.w	r4, r2, r8
 800171e:	eb63 0509 	sbc.w	r5, r3, r9
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	00eb      	lsls	r3, r5, #3
 800172c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001730:	00e2      	lsls	r2, r4, #3
 8001732:	4614      	mov	r4, r2
 8001734:	461d      	mov	r5, r3
 8001736:	eb14 030a 	adds.w	r3, r4, sl
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	eb45 030b 	adc.w	r3, r5, fp
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800174e:	4629      	mov	r1, r5
 8001750:	028b      	lsls	r3, r1, #10
 8001752:	4621      	mov	r1, r4
 8001754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001758:	4621      	mov	r1, r4
 800175a:	028a      	lsls	r2, r1, #10
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001762:	2200      	movs	r2, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	60fa      	str	r2, [r7, #12]
 8001768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800176c:	f7fe fd64 	bl	8000238 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001792:	e002      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800179c:	4618      	mov	r0, r3
 800179e:	3740      	adds	r7, #64	; 0x40
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	017d7840 	.word	0x017d7840

080017b4 <memset>:
 80017b4:	4402      	add	r2, r0
 80017b6:	4603      	mov	r3, r0
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d100      	bne.n	80017be <memset+0xa>
 80017bc:	4770      	bx	lr
 80017be:	f803 1b01 	strb.w	r1, [r3], #1
 80017c2:	e7f9      	b.n	80017b8 <memset+0x4>

080017c4 <__libc_init_array>:
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	4d0d      	ldr	r5, [pc, #52]	; (80017fc <__libc_init_array+0x38>)
 80017c8:	4c0d      	ldr	r4, [pc, #52]	; (8001800 <__libc_init_array+0x3c>)
 80017ca:	1b64      	subs	r4, r4, r5
 80017cc:	10a4      	asrs	r4, r4, #2
 80017ce:	2600      	movs	r6, #0
 80017d0:	42a6      	cmp	r6, r4
 80017d2:	d109      	bne.n	80017e8 <__libc_init_array+0x24>
 80017d4:	4d0b      	ldr	r5, [pc, #44]	; (8001804 <__libc_init_array+0x40>)
 80017d6:	4c0c      	ldr	r4, [pc, #48]	; (8001808 <__libc_init_array+0x44>)
 80017d8:	f000 f818 	bl	800180c <_init>
 80017dc:	1b64      	subs	r4, r4, r5
 80017de:	10a4      	asrs	r4, r4, #2
 80017e0:	2600      	movs	r6, #0
 80017e2:	42a6      	cmp	r6, r4
 80017e4:	d105      	bne.n	80017f2 <__libc_init_array+0x2e>
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
 80017e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ec:	4798      	blx	r3
 80017ee:	3601      	adds	r6, #1
 80017f0:	e7ee      	b.n	80017d0 <__libc_init_array+0xc>
 80017f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f6:	4798      	blx	r3
 80017f8:	3601      	adds	r6, #1
 80017fa:	e7f2      	b.n	80017e2 <__libc_init_array+0x1e>
 80017fc:	0800183c 	.word	0x0800183c
 8001800:	0800183c 	.word	0x0800183c
 8001804:	0800183c 	.word	0x0800183c
 8001808:	08001840 	.word	0x08001840

0800180c <_init>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	bf00      	nop
 8001810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001812:	bc08      	pop	{r3}
 8001814:	469e      	mov	lr, r3
 8001816:	4770      	bx	lr

08001818 <_fini>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	bf00      	nop
 800181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181e:	bc08      	pop	{r3}
 8001820:	469e      	mov	lr, r3
 8001822:	4770      	bx	lr
