
HAL_F767_I2C_2x16LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a2c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c44  08002c44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c4c  08002c4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002c60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002c60  00020080  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ba3  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b0  00000000  00000000  00028c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000613  00000000  00000000  0002ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b6f  00000000  00000000  0002b3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af8b  00000000  00000000  00050f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8f00  00000000  00000000  0005beed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f88  00000000  00000000  00144df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00146d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002c0c 	.word	0x08002c0c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002c0c 	.word	0x08002c0c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af02      	add	r7, sp, #8
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f023 030f 	bic.w	r3, r3, #15
 8000544:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	f043 030c 	orr.w	r3, r3, #12
 8000552:	b2db      	uxtb	r3, r3
 8000554:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	b2db      	uxtb	r3, r3
 800055e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	f043 030c 	orr.w	r3, r3, #12
 8000566:	b2db      	uxtb	r3, r3
 8000568:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	b2db      	uxtb	r3, r3
 8000572:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000574:	f107 0208 	add.w	r2, r7, #8
 8000578:	2364      	movs	r3, #100	; 0x64
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2304      	movs	r3, #4
 800057e:	214e      	movs	r1, #78	; 0x4e
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <lcd_send_cmd+0x5c>)
 8000582:	f000 fec1 	bl	8001308 <HAL_I2C_Master_Transmit>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028

08000594 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f023 030f 	bic.w	r3, r3, #15
 80005a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f043 030d 	orr.w	r3, r3, #13
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	f043 0309 	orr.w	r3, r3, #9
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	f043 030d 	orr.w	r3, r3, #13
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	f043 0309 	orr.w	r3, r3, #9
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005d4:	f107 0208 	add.w	r2, r7, #8
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2304      	movs	r3, #4
 80005de:	214e      	movs	r1, #78	; 0x4e
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <lcd_send_data+0x5c>)
 80005e2:	f000 fe91 	bl	8001308 <HAL_I2C_Master_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <lcd_init>:

void lcd_init (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f7ff ff9b 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80005fe:	2028      	movs	r0, #40	; 0x28
 8000600:	f7ff ff98 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000604:	200c      	movs	r0, #12
 8000606:	f7ff ff95 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800060a:	2080      	movs	r0, #128	; 0x80
 800060c:	f7ff ff92 	bl	8000534 <lcd_send_cmd>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	while (*str)
 800061c:	e006      	b.n	800062c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffb4 	bl	8000594 <lcd_send_data>
	while (*str)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f4      	bne.n	800061e <lcd_send_string+0xa>
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fa41 	bl	8000aca <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000648:	f000 f926 	bl	8000898 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f846 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f8f2 	bl	8000838 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000654:	f000 f8b0 	bl	80007b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000658:	f7ff ffcc 	bl	80005f4 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_send_cmd(0x80);
 800065c:	2080      	movs	r0, #128	; 0x80
 800065e:	f7ff ff69 	bl	8000534 <lcd_send_cmd>
	  	  lcd_send_string("Y");
 8000662:	481a      	ldr	r0, [pc, #104]	; (80006cc <main+0x8c>)
 8000664:	f7ff ffd6 	bl	8000614 <lcd_send_string>
	  	  HAL_Delay(500);
 8000668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066c:	f000 fa8a 	bl	8000b84 <HAL_Delay>
	  	  lcd_send_cmd(0x81);
 8000670:	2081      	movs	r0, #129	; 0x81
 8000672:	f7ff ff5f 	bl	8000534 <lcd_send_cmd>
	  	  lcd_send_string("U");
 8000676:	4816      	ldr	r0, [pc, #88]	; (80006d0 <main+0x90>)
 8000678:	f7ff ffcc 	bl	8000614 <lcd_send_string>
	  	  HAL_Delay(500);
 800067c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000680:	f000 fa80 	bl	8000b84 <HAL_Delay>
	  	  lcd_send_cmd(0x82);
 8000684:	2082      	movs	r0, #130	; 0x82
 8000686:	f7ff ff55 	bl	8000534 <lcd_send_cmd>
	  	  lcd_send_string("N");
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <main+0x94>)
 800068c:	f7ff ffc2 	bl	8000614 <lcd_send_string>
	  	  HAL_Delay(500);
 8000690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000694:	f000 fa76 	bl	8000b84 <HAL_Delay>
	  	  lcd_send_cmd(0x83);
 8000698:	2083      	movs	r0, #131	; 0x83
 800069a:	f7ff ff4b 	bl	8000534 <lcd_send_cmd>
	  	  lcd_send_string("U");
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <main+0x90>)
 80006a0:	f7ff ffb8 	bl	8000614 <lcd_send_string>
	  	  HAL_Delay(500);
 80006a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a8:	f000 fa6c 	bl	8000b84 <HAL_Delay>
	  	  lcd_send_cmd(0x84);
 80006ac:	2084      	movs	r0, #132	; 0x84
 80006ae:	f7ff ff41 	bl	8000534 <lcd_send_cmd>
	  	  lcd_send_string("S");
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <main+0x98>)
 80006b4:	f7ff ffae 	bl	8000614 <lcd_send_string>
	  	  HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f000 fa62 	bl	8000b84 <HAL_Delay>
	  	  HAL_Delay(500);
	  	  lcd_send_cmd(0xC3);
	  	  lcd_send_string("U");
	  	  HAL_Delay(500);
	  	  lcd_send_cmd(0x01);*/
	  	  HAL_Delay(500);
 80006c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c4:	f000 fa5e 	bl	8000b84 <HAL_Delay>
	  lcd_send_cmd(0x80);
 80006c8:	e7c8      	b.n	800065c <main+0x1c>
 80006ca:	bf00      	nop
 80006cc:	08002c24 	.word	0x08002c24
 80006d0:	08002c28 	.word	0x08002c28
 80006d4:	08002c2c 	.word	0x08002c2c
 80006d8:	08002c30 	.word	0x08002c30

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	; 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fa62 	bl	8002bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <SystemClock_Config+0xd4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <SystemClock_Config+0xd4>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <SystemClock_Config+0xd8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a25      	ldr	r2, [pc, #148]	; (80007b4 <SystemClock_Config+0xd8>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000748:	23d8      	movs	r3, #216	; 0xd8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f9a1 	bl	8001aa4 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000768:	f000 f8c2 	bl	80008f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f001 f94a 	bl	8001a04 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000776:	f000 f8bb 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2107      	movs	r1, #7
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fc31 	bl	8002000 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007a4:	f000 f8a4 	bl	80008f0 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	; 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_I2C1_Init+0x74>)
 80007f4:	f000 fcf8 	bl	80011e8 <HAL_I2C_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 f877 	bl	80008f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_I2C1_Init+0x74>)
 8000806:	f001 f865 	bl	80018d4 <HAL_I2CEx_ConfigAnalogFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f86e 	bl	80008f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2C1_Init+0x74>)
 8000818:	f001 f8a7 	bl	800196a <HAL_I2CEx_ConfigDigitalFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 f865 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000028 	.word	0x20000028
 8000830:	40005400 	.word	0x40005400
 8000834:	6000030d 	.word	0x6000030d

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_GPIO_Init+0x5c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <MX_GPIO_Init+0x5c>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_GPIO_Init+0x5c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_GPIO_Init+0x5c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <MX_GPIO_Init+0x5c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_GPIO_Init+0x5c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_GPIO_Init+0x5c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <MX_GPIO_Init+0x5c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_GPIO_Init+0x5c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008aa:	f000 fa75 	bl	8000d98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ba:	231f      	movs	r3, #31
 80008bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008be:	2387      	movs	r3, #135	; 0x87
 80008c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008c6:	2300      	movs	r3, #0
 80008c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fa93 	bl	8000e08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008e2:	2004      	movs	r0, #4
 80008e4:	f000 fa70 	bl	8000dc8 <HAL_MPU_Enable>

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_MspInit+0x44>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_MspInit+0x44>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x44>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x44>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x44>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0ae      	sub	sp, #184	; 0xb8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2290      	movs	r2, #144	; 0x90
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f002 f925 	bl	8002bb4 <memset>
  if(hi2c->Instance==I2C1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <HAL_I2C_MspInit+0xb0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d13b      	bne.n	80009ec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000974:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000978:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800097a:	2300      	movs	r3, #0
 800097c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fcee 	bl	8002364 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800098e:	f7ff ffaf 	bl	80008f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	23c0      	movs	r3, #192	; 0xc0
 80009ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b0:	2312      	movs	r3, #18
 80009b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c2:	2304      	movs	r3, #4
 80009c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <HAL_I2C_MspInit+0xb8>)
 80009d0:	f000 fa5e 	bl	8000e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0xb4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	37b8      	adds	r7, #184	; 0xb8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f87a 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7e:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a94:	4c0b      	ldr	r4, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa2:	f7ff ffd7 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f002 f88d 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fdc9 	bl	8000640 <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000abc:	08002c54 	.word	0x08002c54
  ldr r2, =_sbss
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac4:	20000080 	.word	0x20000080

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>

08000aca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f000 f92e 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	f000 f805 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ada:	f7ff ff0f 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f93b 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f911 	bl	8000d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	2000007c 	.word	0x2000007c

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2000007c 	.word	0x2000007c

08000b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b8c:	f7ff ffee 	bl	8000b6c <HAL_GetTick>
 8000b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9c:	d005      	beq.n	8000baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_Delay+0x44>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000baa:	bf00      	nop
 8000bac:	f7ff ffde 	bl	8000b6c <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d8f7      	bhi.n	8000bac <HAL_Delay+0x28>
  {
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	05fa0000 	.word	0x05fa0000

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff47 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff5c 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffb0 	bl	8000cec <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d9c:	f3bf 8f5f 	dmb	sy
}
 8000da0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_MPU_Disable+0x28>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_MPU_Disable+0x28>)
 8000da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dac:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_MPU_Disable+0x2c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	e000ed90 	.word	0xe000ed90

08000dc8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_MPU_Enable+0x38>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_MPU_Enable+0x3c>)
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <HAL_MPU_Enable+0x3c>)
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000de6:	f3bf 8f4f 	dsb	sy
}
 8000dea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dec:	f3bf 8f6f 	isb	sy
}
 8000df0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed90 	.word	0xe000ed90
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	785a      	ldrb	r2, [r3, #1]
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_MPU_ConfigRegion+0x84>)
 8000e16:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d029      	beq.n	8000e74 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000e20:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_MPU_ConfigRegion+0x84>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7b1b      	ldrb	r3, [r3, #12]
 8000e2c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7adb      	ldrb	r3, [r3, #11]
 8000e32:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7a9b      	ldrb	r3, [r3, #10]
 8000e3a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7b5b      	ldrb	r3, [r3, #13]
 8000e42:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7b9b      	ldrb	r3, [r3, #14]
 8000e4a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7bdb      	ldrb	r3, [r3, #15]
 8000e52:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7a5b      	ldrb	r3, [r3, #9]
 8000e5a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7a1b      	ldrb	r3, [r3, #8]
 8000e62:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e64:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e6e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e70:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000e72:	e005      	b.n	8000e80 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_MPU_ConfigRegion+0x84>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_MPU_ConfigRegion+0x84>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed90 	.word	0xe000ed90

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e175      	b.n	800119c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8164 	bne.w	8001196 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x56>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80be 	beq.w	8001196 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <HAL_GPIO_Init+0x324>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a65      	ldr	r2, [pc, #404]	; (80011b4 <HAL_GPIO_Init+0x324>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <HAL_GPIO_Init+0x324>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001032:	4a61      	ldr	r2, [pc, #388]	; (80011b8 <HAL_GPIO_Init+0x328>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a58      	ldr	r2, [pc, #352]	; (80011bc <HAL_GPIO_Init+0x32c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d037      	beq.n	80010ce <HAL_GPIO_Init+0x23e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a57      	ldr	r2, [pc, #348]	; (80011c0 <HAL_GPIO_Init+0x330>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d031      	beq.n	80010ca <HAL_GPIO_Init+0x23a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a56      	ldr	r2, [pc, #344]	; (80011c4 <HAL_GPIO_Init+0x334>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d02b      	beq.n	80010c6 <HAL_GPIO_Init+0x236>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a55      	ldr	r2, [pc, #340]	; (80011c8 <HAL_GPIO_Init+0x338>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d025      	beq.n	80010c2 <HAL_GPIO_Init+0x232>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a54      	ldr	r2, [pc, #336]	; (80011cc <HAL_GPIO_Init+0x33c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01f      	beq.n	80010be <HAL_GPIO_Init+0x22e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a53      	ldr	r2, [pc, #332]	; (80011d0 <HAL_GPIO_Init+0x340>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d019      	beq.n	80010ba <HAL_GPIO_Init+0x22a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_GPIO_Init+0x344>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_GPIO_Init+0x348>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x222>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a50      	ldr	r2, [pc, #320]	; (80011dc <HAL_GPIO_Init+0x34c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x21e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x350>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x21a>
 80010a6:	2309      	movs	r3, #9
 80010a8:	e012      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010aa:	230a      	movs	r3, #10
 80010ac:	e010      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ae:	2308      	movs	r3, #8
 80010b0:	e00e      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e00c      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010b6:	2306      	movs	r3, #6
 80010b8:	e00a      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010be:	2304      	movs	r3, #4
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <HAL_GPIO_Init+0x328>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_GPIO_Init+0x354>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a34      	ldr	r2, [pc, #208]	; (80011e4 <HAL_GPIO_Init+0x354>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <HAL_GPIO_Init+0x354>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <HAL_GPIO_Init+0x354>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_GPIO_Init+0x354>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <HAL_GPIO_Init+0x354>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_GPIO_Init+0x354>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_GPIO_Init+0x354>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f ae86 	bls.w	8000eb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40021400 	.word	0x40021400
 80011d4:	40021800 	.word	0x40021800
 80011d8:	40021c00 	.word	0x40021c00
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40022400 	.word	0x40022400
 80011e4:	40013c00 	.word	0x40013c00

080011e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e07f      	b.n	80012fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d106      	bne.n	8001214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fb98 	bl	8000944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2224      	movs	r2, #36	; 0x24
 8001218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001238:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001248:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	e006      	b.n	8001270 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800126e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d104      	bne.n	8001282 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_I2C_Init+0x11c>)
 800128e:	430b      	orrs	r3, r1
 8001290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69d9      	ldr	r1, [r3, #28]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1a      	ldr	r2, [r3, #32]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2220      	movs	r2, #32
 80012e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	02008000 	.word	0x02008000

08001308 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	817b      	strh	r3, [r7, #10]
 8001318:	4613      	mov	r3, r2
 800131a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b20      	cmp	r3, #32
 8001326:	f040 80da 	bne.w	80014de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_I2C_Master_Transmit+0x30>
 8001334:	2302      	movs	r3, #2
 8001336:	e0d3      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001340:	f7ff fc14 	bl	8000b6c <HAL_GetTick>
 8001344:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2319      	movs	r3, #25
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f8f0 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0be      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2221      	movs	r2, #33	; 0x21
 8001366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2210      	movs	r2, #16
 800136e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	893a      	ldrh	r2, [r7, #8]
 8001382:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d90e      	bls.n	80013b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	8979      	ldrh	r1, [r7, #10]
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fa60 	bl	8001870 <I2C_TransferConfig>
 80013b0:	e06c      	b.n	800148c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	8979      	ldrh	r1, [r7, #10]
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 fa4f 	bl	8001870 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80013d2:	e05b      	b.n	800148c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	6a39      	ldr	r1, [r7, #32]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 f8ed 	bl	80015b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e07b      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d034      	beq.n	800148c <HAL_I2C_Master_Transmit+0x184>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001426:	2b00      	cmp	r3, #0
 8001428:	d130      	bne.n	800148c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f87f 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e04d      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d90e      	bls.n	800146c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	22ff      	movs	r2, #255	; 0xff
 8001452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001458:	b2da      	uxtb	r2, r3
 800145a:	8979      	ldrh	r1, [r7, #10]
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 fa03 	bl	8001870 <I2C_TransferConfig>
 800146a:	e00f      	b.n	800148c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001470:	b29a      	uxth	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147a:	b2da      	uxtb	r2, r3
 800147c:	8979      	ldrh	r1, [r7, #10]
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f9f2 	bl	8001870 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d19e      	bne.n	80013d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f8cc 	bl	8001638 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e01a      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_I2C_Master_Transmit+0x1e4>)
 80014be:	400b      	ands	r3, r1
 80014c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2220      	movs	r2, #32
 80014c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80014de:	2302      	movs	r3, #2
  }
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	80002000 	.word	0x80002000
 80014ec:	fe00e800 	.word	0xfe00e800

080014f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b02      	cmp	r3, #2
 8001504:	d103      	bne.n	800150e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d007      	beq.n	800152c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	619a      	str	r2, [r3, #24]
  }
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001548:	e022      	b.n	8001590 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d01e      	beq.n	8001590 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001552:	f7ff fb0b 	bl	8000b6c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d302      	bcc.n	8001568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d113      	bne.n	8001590 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f043 0220 	orr.w	r2, r3, #32
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e00f      	b.n	80015b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4013      	ands	r3, r2
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	429a      	cmp	r2, r3
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d0cd      	beq.n	800154a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015c4:	e02c      	b.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f870 	bl	80016b0 <I2C_IsErrorOccurred>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02a      	b.n	8001630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d01e      	beq.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e2:	f7ff fac3 	bl	8000b6c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d302      	bcc.n	80015f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d113      	bne.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f043 0220 	orr.w	r2, r3, #32
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e007      	b.n	8001630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b02      	cmp	r3, #2
 800162c:	d1cb      	bne.n	80015c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001644:	e028      	b.n	8001698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f830 	bl	80016b0 <I2C_IsErrorOccurred>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e026      	b.n	80016a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165a:	f7ff fa87 	bl	8000b6c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2220      	movs	r2, #32
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e007      	b.n	80016a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d1cf      	bne.n	8001646 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d068      	beq.n	80017ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2210      	movs	r2, #16
 80016e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016e4:	e049      	b.n	800177a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d045      	beq.n	800177a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016ee:	f7ff fa3d 	bl	8000b6c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d302      	bcc.n	8001704 <I2C_IsErrorOccurred+0x54>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d13a      	bne.n	800177a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001716:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001726:	d121      	bne.n	800176c <I2C_IsErrorOccurred+0xbc>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800172e:	d01d      	beq.n	800176c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001730:	7cfb      	ldrb	r3, [r7, #19]
 8001732:	2b20      	cmp	r3, #32
 8001734:	d01a      	beq.n	800176c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001744:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001746:	f7ff fa11 	bl	8000b6c <HAL_GetTick>
 800174a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800174c:	e00e      	b.n	800176c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800174e:	f7ff fa0d 	bl	8000b6c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b19      	cmp	r3, #25
 800175a:	d907      	bls.n	800176c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f043 0320 	orr.w	r3, r3, #32
 8001762:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800176a:	e006      	b.n	800177a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b20      	cmp	r3, #32
 8001778:	d1e9      	bne.n	800174e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	2b20      	cmp	r3, #32
 8001786:	d003      	beq.n	8001790 <I2C_IsErrorOccurred+0xe0>
 8001788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0aa      	beq.n	80016e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2220      	movs	r2, #32
 800179e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00b      	beq.n	800181c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001814:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800181c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01c      	beq.n	800185e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fe63 	bl	80014f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <I2C_IsErrorOccurred+0x1bc>)
 8001836:	400b      	ands	r3, r1
 8001838:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	431a      	orrs	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800185e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001862:	4618      	mov	r0, r3
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	fe00e800 	.word	0xfe00e800

08001870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	817b      	strh	r3, [r7, #10]
 800187e:	4613      	mov	r3, r2
 8001880:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001888:	7a7b      	ldrb	r3, [r7, #9]
 800188a:	041b      	lsls	r3, r3, #16
 800188c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001890:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	4313      	orrs	r3, r2
 800189a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800189e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	0d5b      	lsrs	r3, r3, #21
 80018aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <I2C_TransferConfig+0x60>)
 80018b0:	430b      	orrs	r3, r1
 80018b2:	43db      	mvns	r3, r3
 80018b4:	ea02 0103 	and.w	r1, r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	03ff63ff 	.word	0x03ff63ff

080018d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	d138      	bne.n	800195c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e032      	b.n	800195e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2224      	movs	r2, #36	; 0x24
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b20      	cmp	r3, #32
 800197e:	d139      	bne.n	80019f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800198a:	2302      	movs	r3, #2
 800198c:	e033      	b.n	80019f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2224      	movs	r2, #36	; 0x24
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e000      	b.n	80019f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019f4:	2302      	movs	r3, #2
  }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a32:	f7ff f89b 	bl	8000b6c <HAL_GetTick>
 8001a36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a38:	e009      	b.n	8001a4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a3a:	f7ff f897 	bl	8000b6c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a48:	d901      	bls.n	8001a4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e022      	b.n	8001a94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a68:	f7ff f880 	bl	8000b6c <HAL_GetTick>
 8001a6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a6e:	e009      	b.n	8001a84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a70:	f7ff f87c 	bl	8000b6c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7e:	d901      	bls.n	8001a84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e007      	b.n	8001a94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a90:	d1ee      	bne.n	8001a70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e29b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8087 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac8:	4b96      	ldr	r3, [pc, #600]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d00c      	beq.n	8001aee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad4:	4b93      	ldr	r3, [pc, #588]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d112      	bne.n	8001b06 <HAL_RCC_OscConfig+0x62>
 8001ae0:	4b90      	ldr	r3, [pc, #576]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aec:	d10b      	bne.n	8001b06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aee:	4b8d      	ldr	r3, [pc, #564]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d06c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x130>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d168      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e275      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x7a>
 8001b10:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a83      	ldr	r2, [pc, #524]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e02e      	b.n	8001b7c <HAL_RCC_OscConfig+0xd8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x9c>
 8001b26:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a7e      	ldr	r2, [pc, #504]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b7c      	ldr	r3, [pc, #496]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7b      	ldr	r2, [pc, #492]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e01d      	b.n	8001b7c <HAL_RCC_OscConfig+0xd8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0xc0>
 8001b4a:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a75      	ldr	r2, [pc, #468]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a72      	ldr	r2, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0xd8>
 8001b64:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6b      	ldr	r2, [pc, #428]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7fe fff2 	bl	8000b6c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7fe ffee 	bl	8000b6c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e229      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0xe8>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7fe ffde 	bl	8000b6c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7fe ffda 	bl	8000b6c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e215      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x110>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d069      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001be2:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d11c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x190>
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d116      	bne.n	8001c34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x17a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e1e9      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	493d      	ldr	r1, [pc, #244]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	e040      	b.n	8001cb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a38      	ldr	r2, [pc, #224]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7fe ff90 	bl	8000b6c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7fe ff8c 	bl	8000b6c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1c7      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4929      	ldr	r1, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
 8001c82:	e018      	b.n	8001cb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7fe ff6c 	bl	8000b6c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7fe ff68 	bl	8000b6c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1a3      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d038      	beq.n	8001d34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d019      	beq.n	8001cfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ff49 	bl	8000b6c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cde:	f7fe ff45 	bl	8000b6c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e180      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x23a>
 8001cfc:	e01a      	b.n	8001d34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7fe ff2f 	bl	8000b6c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7fe ff2b 	bl	8000b6c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d903      	bls.n	8001d28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e166      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
 8001d24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b92      	ldr	r3, [pc, #584]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a4 	beq.w	8001e8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b8c      	ldr	r3, [pc, #560]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b89      	ldr	r3, [pc, #548]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a88      	ldr	r2, [pc, #544]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6a:	4b83      	ldr	r3, [pc, #524]	; (8001f78 <HAL_RCC_OscConfig+0x4d4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d76:	4b80      	ldr	r3, [pc, #512]	; (8001f78 <HAL_RCC_OscConfig+0x4d4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7f      	ldr	r2, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x4d4>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7fe fef3 	bl	8000b6c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7fe feef 	bl	8000b6c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e12a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9c:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x4d4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x31a>
 8001db0:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a6f      	ldr	r2, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	e02d      	b.n	8001e1a <HAL_RCC_OscConfig+0x376>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x33c>
 8001dc6:	4b6b      	ldr	r3, [pc, #428]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a6a      	ldr	r2, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a67      	ldr	r2, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	e01c      	b.n	8001e1a <HAL_RCC_OscConfig+0x376>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x35e>
 8001de8:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a61      	ldr	r2, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a5e      	ldr	r2, [pc, #376]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0x376>
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a5b      	ldr	r2, [pc, #364]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d015      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7fe fea3 	bl	8000b6c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fe9f 	bl	8000b6c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0d8      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCC_OscConfig+0x386>
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fe8d 	bl	8000b6c <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fe89 	bl	8000b6c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0c2      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ee      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a3c      	ldr	r2, [pc, #240]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80ae 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d06d      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d14b      	bne.n	8001f40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe fe5a 	bl	8000b6c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7fe fe56 	bl	8000b6c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e091      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	019b      	lsls	r3, r3, #6
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	071b      	lsls	r3, r3, #28
 8001f06:	491b      	ldr	r1, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe fe28 	bl	8000b6c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe fe24 	bl	8000b6c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e05f      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x47c>
 8001f3e:	e057      	b.n	8001ff0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fe0e 	bl	8000b6c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7fe fe0a 	bl	8000b6c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e045      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_RCC_OscConfig+0x4d0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4b0>
 8001f72:	e03d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x54c>
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_RCC_OscConfig+0x558>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d030      	beq.n	8001fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d129      	bne.n	8001fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d122      	bne.n	8001fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d119      	bne.n	8001fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d10f      	bne.n	8001fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 020f 	bic.w	r2, r3, #15
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800206a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800207e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002082:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7fe fd3a 	bl	8000b6c <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7fe fd36 	bl	8000b6c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 020f 	bic.w	r2, r3, #15
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1cc>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1d0>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fc96 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08002c34 	.word	0x08002c34
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b090      	sub	sp, #64	; 0x40
 80021de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f0:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d00d      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x40>
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	f200 80a1 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x16c>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x34>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x3a>
 800220a:	e09b      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_GetSysClockFreq+0x184>)
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002210:	e09b      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002212:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002214:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002216:	e098      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002218:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	2200      	movs	r2, #0
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	627a      	str	r2, [r7, #36]	; 0x24
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002240:	2100      	movs	r1, #0
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002244:	fb03 f201 	mul.w	r2, r3, r1
 8002248:	2300      	movs	r3, #0
 800224a:	fb00 f303 	mul.w	r3, r0, r3
 800224e:	4413      	add	r3, r2
 8002250:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002252:	fba0 1202 	umull	r1, r2, r0, r2
 8002256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002258:	460a      	mov	r2, r1
 800225a:	62ba      	str	r2, [r7, #40]	; 0x28
 800225c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225e:	4413      	add	r3, r2
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	2200      	movs	r2, #0
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	61fa      	str	r2, [r7, #28]
 800226a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800226e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002272:	f7fd ffe1 	bl	8000238 <__aeabi_uldivmod>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4613      	mov	r3, r2
 800227c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227e:	e053      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	2200      	movs	r2, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	617a      	str	r2, [r7, #20]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002292:	f04f 0b00 	mov.w	fp, #0
 8002296:	4652      	mov	r2, sl
 8002298:	465b      	mov	r3, fp
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	ebb2 080a 	subs.w	r8, r2, sl
 80022b2:	eb63 090b 	sbc.w	r9, r3, fp
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ca:	ebb2 0408 	subs.w	r4, r2, r8
 80022ce:	eb63 0509 	sbc.w	r5, r3, r9
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	00eb      	lsls	r3, r5, #3
 80022dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e0:	00e2      	lsls	r2, r4, #3
 80022e2:	4614      	mov	r4, r2
 80022e4:	461d      	mov	r5, r3
 80022e6:	eb14 030a 	adds.w	r3, r4, sl
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	eb45 030b 	adc.w	r3, r5, fp
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022fe:	4629      	mov	r1, r5
 8002300:	028b      	lsls	r3, r1, #10
 8002302:	4621      	mov	r1, r4
 8002304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002308:	4621      	mov	r1, r4
 800230a:	028a      	lsls	r2, r1, #10
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	2200      	movs	r2, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231c:	f7fd ff8c 	bl	8000238 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4613      	mov	r3, r2
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002342:	e002      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetSysClockFreq+0x184>)
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800234c:	4618      	mov	r0, r3
 800234e:	3740      	adds	r7, #64	; 0x40
 8002350:	46bd      	mov	sp, r7
 8002352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	00f42400 	.word	0x00f42400
 8002360:	017d7840 	.word	0x017d7840

08002364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a68      	ldr	r2, [pc, #416]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002392:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002396:	6093      	str	r3, [r2, #8]
 8002398:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	4964      	ldr	r1, [pc, #400]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d017      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	4959      	ldr	r1, [pc, #356]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d017      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023fa:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	494a      	ldr	r1, [pc, #296]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002418:	d101      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 808b 	beq.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a39      	ldr	r2, [pc, #228]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a34      	ldr	r2, [pc, #208]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7fe fb7e 	bl	8000b6c <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fb7a 	bl	8000b6c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e38f      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002486:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d035      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d02e      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b0:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d114      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fb42 	bl	8000b6c <HAL_GetTick>
 80024e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7fe fb3e 	bl	8000b6c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e351      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ee      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800251a:	d111      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800252a:	400b      	ands	r3, r1
 800252c:	4901      	ldr	r1, [pc, #4]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
 8002532:	e00b      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	0ffffcff 	.word	0x0ffffcff
 8002540:	4bac      	ldr	r3, [pc, #688]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4aab      	ldr	r2, [pc, #684]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002546:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	4ba9      	ldr	r3, [pc, #676]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	49a6      	ldr	r1, [pc, #664]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255a:	4313      	orrs	r3, r2
 800255c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800256a:	4ba2      	ldr	r3, [pc, #648]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002570:	4aa0      	ldr	r2, [pc, #640]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002576:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800257a:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	499b      	ldr	r1, [pc, #620]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002598:	4b96      	ldr	r3, [pc, #600]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a6:	4993      	ldr	r1, [pc, #588]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ba:	4b8e      	ldr	r3, [pc, #568]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c8:	498a      	ldr	r1, [pc, #552]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025dc:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ea:	4982      	ldr	r1, [pc, #520]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025fe:	4b7d      	ldr	r3, [pc, #500]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4979      	ldr	r1, [pc, #484]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002620:	4b74      	ldr	r3, [pc, #464]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4971      	ldr	r1, [pc, #452]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f023 020c 	bic.w	r2, r3, #12
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	4968      	ldr	r1, [pc, #416]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002664:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	4960      	ldr	r1, [pc, #384]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002686:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	4957      	ldr	r1, [pc, #348]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026a8:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	494f      	ldr	r1, [pc, #316]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026ca:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4946      	ldr	r1, [pc, #280]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	493e      	ldr	r1, [pc, #248]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	4935      	ldr	r1, [pc, #212]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	492d      	ldr	r1, [pc, #180]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d011      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002760:	4924      	ldr	r1, [pc, #144]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800276c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002770:	d101      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a0:	4914      	ldr	r1, [pc, #80]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c4:	490b      	ldr	r1, [pc, #44]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00f      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e8:	4902      	ldr	r1, [pc, #8]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027f0:	e002      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002804:	4b8a      	ldr	r3, [pc, #552]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	4986      	ldr	r1, [pc, #536]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002828:	4b81      	ldr	r3, [pc, #516]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800282a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002838:	497d      	ldr	r1, [pc, #500]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d006      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80d6 	beq.w	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002854:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a75      	ldr	r2, [pc, #468]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800285e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002860:	f7fe f984 	bl	8000b6c <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002868:	f7fe f980 	bl	8000b6c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e195      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d021      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11d      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ae:	0e1b      	lsrs	r3, r3, #24
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	019a      	lsls	r2, r3, #6
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	071b      	lsls	r3, r3, #28
 80028ce:	4958      	ldr	r1, [pc, #352]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02e      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d129      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002902:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002910:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002916:	0f1b      	lsrs	r3, r3, #28
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	061b      	lsls	r3, r3, #24
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	493e      	ldr	r1, [pc, #248]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800293e:	4b3c      	ldr	r3, [pc, #240]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	f023 021f 	bic.w	r2, r3, #31
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	3b01      	subs	r3, #1
 800294e:	4938      	ldr	r1, [pc, #224]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01d      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002968:	0e1b      	lsrs	r3, r3, #24
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002976:	0f1b      	lsrs	r3, r3, #28
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	019a      	lsls	r2, r3, #6
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	061b      	lsls	r3, r3, #24
 8002990:	431a      	orrs	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	071b      	lsls	r3, r3, #28
 8002996:	4926      	ldr	r1, [pc, #152]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	019a      	lsls	r2, r3, #6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	071b      	lsls	r3, r3, #28
 80029c6:	491a      	ldr	r1, [pc, #104]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029da:	f7fe f8c7 	bl	8000b6c <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029e2:	f7fe f8c3 	bl	8000b6c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0d8      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	f040 80ce 	bne.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fe f8aa 	bl	8000b6c <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a1c:	f7fe f8a6 	bl	8000b6c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d904      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0bb      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a40:	d0ec      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d02e      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d12a      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a6a:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a78:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	0f1b      	lsrs	r3, r3, #28
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	019a      	lsls	r2, r3, #6
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	4944      	ldr	r1, [pc, #272]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	493d      	ldr	r1, [pc, #244]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d022      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad4:	d11d      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	0e1b      	lsrs	r3, r3, #24
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	0f1b      	lsrs	r3, r3, #28
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	019a      	lsls	r2, r3, #6
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d028      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	0e1b      	lsrs	r3, r3, #24
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	019a      	lsls	r2, r3, #6
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	431a      	orrs	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	061b      	lsls	r3, r3, #24
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	071b      	lsls	r3, r3, #28
 8002b52:	4917      	ldr	r1, [pc, #92]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	4911      	ldr	r1, [pc, #68]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fd fff6 	bl	8000b6c <HAL_GetTick>
 8002b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b84:	f7fd fff2 	bl	8000b6c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e007      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba2:	d1ef      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <memset>:
 8002bb4:	4402      	add	r2, r0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d100      	bne.n	8002bbe <memset+0xa>
 8002bbc:	4770      	bx	lr
 8002bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc2:	e7f9      	b.n	8002bb8 <memset+0x4>

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4d0d      	ldr	r5, [pc, #52]	; (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2600      	movs	r6, #0
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4d0b      	ldr	r5, [pc, #44]	; (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	; (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f000 f818 	bl	8002c0c <_init>
 8002bdc:	1b64      	subs	r4, r4, r5
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2600      	movs	r6, #0
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	08002c4c 	.word	0x08002c4c
 8002c00:	08002c4c 	.word	0x08002c4c
 8002c04:	08002c4c 	.word	0x08002c4c
 8002c08:	08002c50 	.word	0x08002c50

08002c0c <_init>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	bf00      	nop
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr

08002c18 <_fini>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr
