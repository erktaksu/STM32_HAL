
REAL_ADC_VOLTAGE_CURRENT_F767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08006c10  08006c10  00016c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb4  08006fb4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fbc  08006fbc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  08007198  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08007198  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c059  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000215a  00000000  00000000  0002c29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002e3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000960  00000000  00000000  0002ee70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028146  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4fd  00000000  00000000  00057916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4046  00000000  00000000  00065e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038c8  00000000  00000000  00159e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006bf4 	.word	0x08006bf4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08006bf4 	.word	0x08006bf4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2db      	uxtb	r3, r3
 800060c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	b2db      	uxtb	r3, r3
 8000616:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	f043 030c 	orr.w	r3, r3, #12
 800061e:	b2db      	uxtb	r3, r3
 8000620:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	b2db      	uxtb	r3, r3
 800062a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800062c:	f107 0208 	add.w	r2, r7, #8
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2304      	movs	r3, #4
 8000636:	214e      	movs	r1, #78	; 0x4e
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <lcd_send_cmd+0x5c>)
 800063a:	f002 f8b1 	bl	80027a0 <HAL_I2C_Master_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000340 	.word	0x20000340

0800064c <lcd_send_data>:

void lcd_send_data (char data)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af02      	add	r7, sp, #8
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f023 030f 	bic.w	r3, r3, #15
 800065c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	f043 030d 	orr.w	r3, r3, #13
 800066a:	b2db      	uxtb	r3, r3
 800066c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	f043 0309 	orr.w	r3, r3, #9
 8000674:	b2db      	uxtb	r3, r3
 8000676:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	f043 030d 	orr.w	r3, r3, #13
 800067e:	b2db      	uxtb	r3, r3
 8000680:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	f043 0309 	orr.w	r3, r3, #9
 8000688:	b2db      	uxtb	r3, r3
 800068a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800068c:	f107 0208 	add.w	r2, r7, #8
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2304      	movs	r3, #4
 8000696:	214e      	movs	r1, #78	; 0x4e
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <lcd_send_data+0x5c>)
 800069a:	f002 f881 	bl	80027a0 <HAL_I2C_Master_Transmit>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000340 	.word	0x20000340

080006ac <lcd_init>:

void lcd_init (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff ff9b 	bl	80005ec <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80006b6:	2028      	movs	r0, #40	; 0x28
 80006b8:	f7ff ff98 	bl	80005ec <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80006bc:	200c      	movs	r0, #12
 80006be:	f7ff ff95 	bl	80005ec <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80006c2:	2080      	movs	r0, #128	; 0x80
 80006c4:	f7ff ff92 	bl	80005ec <lcd_send_cmd>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	while (*str)
 80006d4:	e006      	b.n	80006e4 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb4 	bl	800064c <lcd_send_data>
	while (*str)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f4      	bne.n	80006d6 <lcd_send_string+0xa>
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <adc_readcurrent>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void adc_readcurrent(){
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	  Vdda = (float) 3.3 * (*VREFIN_CAL) / adc_buffer[1];
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <adc_readcurrent+0xc0>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	ee07 3a90 	vmov	s15, r3
 8000704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000708:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80007bc <adc_readcurrent+0xc4>
 800070c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <adc_readcurrent+0xc8>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800071c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <adc_readcurrent+0xcc>)
 8000722:	edc3 7a00 	vstr	s15, [r3]
	       buffer_a=adc_buffer[0];
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <adc_readcurrent+0xc8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <adc_readcurrent+0xd0>)
 800072e:	601a      	str	r2, [r3, #0]
//		  Aadc = (float)((Vdda * buffer_a / 4095)/330)*1000;
	       Aadc = (float)(Vdda * buffer_a / 4095);
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <adc_readcurrent+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <adc_readcurrent+0xcc>)
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000746:	eddf 6a21 	vldr	s13, [pc, #132]	; 80007cc <adc_readcurrent+0xd4>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <adc_readcurrent+0xd8>)
 8000750:	edc3 7a00 	vstr	s15, [r3]
		  buffer_b=adc_buffer[2];
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <adc_readcurrent+0xc8>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	461a      	mov	r2, r3
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <adc_readcurrent+0xdc>)
 800075c:	601a      	str	r2, [r3, #0]
		  voltage=(float)((Vdda * buffer_b/4095)/368)*1000;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <adc_readcurrent+0xdc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	ee07 3a90 	vmov	s15, r3
 8000766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <adc_readcurrent+0xcc>)
 800076c:	edd3 7a00 	vldr	s15, [r3]
 8000770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000774:	eddf 6a15 	vldr	s13, [pc, #84]	; 80007cc <adc_readcurrent+0xd4>
 8000778:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800077c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80007d8 <adc_readcurrent+0xe0>
 8000780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000784:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80007dc <adc_readcurrent+0xe4>
 8000788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <adc_readcurrent+0xe8>)
 800078e:	edc3 7a00 	vstr	s15, [r3]
		  yuzde=(float)(100*voltage)/9;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <adc_readcurrent+0xe8>)
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80007e4 <adc_readcurrent+0xec>
 800079c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007a0:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80007a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <adc_readcurrent+0xf0>)
 80007aa:	edc3 7a00 	vstr	s15, [r3]
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	1ff0f44a 	.word	0x1ff0f44a
 80007bc:	40533333 	.word	0x40533333
 80007c0:	200001f0 	.word	0x200001f0
 80007c4:	20000200 	.word	0x20000200
 80007c8:	2000020c 	.word	0x2000020c
 80007cc:	457ff000 	.word	0x457ff000
 80007d0:	200001fc 	.word	0x200001fc
 80007d4:	20000210 	.word	0x20000210
 80007d8:	43b80000 	.word	0x43b80000
 80007dc:	447a0000 	.word	0x447a0000
 80007e0:	20000208 	.word	0x20000208
 80007e4:	42c80000 	.word	0x42c80000
 80007e8:	20000204 	.word	0x20000204

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fc60 	bl	80010b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f8bf 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f9f9 	bl	8000bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f000 f9d9 	bl	8000bb4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000802:	f000 f927 	bl	8000a54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000806:	f000 f995 	bl	8000b34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800080a:	f7ff ff4f 	bl	80006ac <lcd_init>
  HAL_ADC_Start_DMA(&hadc1,adc_buffer,3);
 800080e:	2203      	movs	r2, #3
 8000810:	4948      	ldr	r1, [pc, #288]	; (8000934 <main+0x148>)
 8000812:	4849      	ldr	r0, [pc, #292]	; (8000938 <main+0x14c>)
 8000814:	f000 fd14 	bl	8001240 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


         for(i=0; i<4095; i++){
 8000818:	4b48      	ldr	r3, [pc, #288]	; (800093c <main+0x150>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	e027      	b.n	8000870 <main+0x84>
        	 adc_readcurrent();
 8000820:	f7ff ff6a 	bl	80006f8 <adc_readcurrent>

        	 sum +=yuzde;
 8000824:	4b46      	ldr	r3, [pc, #280]	; (8000940 <main+0x154>)
 8000826:	ed93 7a00 	vldr	s14, [r3]
 800082a:	4b46      	ldr	r3, [pc, #280]	; (8000944 <main+0x158>)
 800082c:	edd3 7a00 	vldr	s15, [r3]
 8000830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000834:	4b42      	ldr	r3, [pc, #264]	; (8000940 <main+0x154>)
 8000836:	edc3 7a00 	vstr	s15, [r3]
        	 sum2 +=voltage;
 800083a:	4b43      	ldr	r3, [pc, #268]	; (8000948 <main+0x15c>)
 800083c:	ed93 7a00 	vldr	s14, [r3]
 8000840:	4b42      	ldr	r3, [pc, #264]	; (800094c <main+0x160>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084a:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <main+0x15c>)
 800084c:	edc3 7a00 	vstr	s15, [r3]
        	 sum3 +=Aadc;
 8000850:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <main+0x164>)
 8000852:	ed93 7a00 	vldr	s14, [r3]
 8000856:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <main+0x168>)
 8000858:	edd3 7a00 	vldr	s15, [r3]
 800085c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <main+0x164>)
 8000862:	edc3 7a00 	vstr	s15, [r3]
         for(i=0; i<4095; i++){
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <main+0x150>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	4a33      	ldr	r2, [pc, #204]	; (800093c <main+0x150>)
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b32      	ldr	r3, [pc, #200]	; (800093c <main+0x150>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000878:	4293      	cmp	r3, r2
 800087a:	ddd1      	ble.n	8000820 <main+0x34>
         }
         real_voltage=(float) (sum2/4095);
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <main+0x15c>)
 800087e:	ed93 7a00 	vldr	s14, [r3]
 8000882:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000958 <main+0x16c>
 8000886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <main+0x170>)
 800088c:	edc3 7a00 	vstr	s15, [r3]
         yuzde_real=(float) (sum/4095);
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <main+0x154>)
 8000892:	ed93 7a00 	vldr	s14, [r3]
 8000896:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000958 <main+0x16c>
 800089a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <main+0x174>)
 80008a0:	edc3 7a00 	vstr	s15, [r3]
         real_Aadc=(float) (sum3/4095);
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <main+0x164>)
 80008a6:	ed93 7a00 	vldr	s14, [r3]
 80008aa:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000958 <main+0x16c>
 80008ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <main+0x178>)
 80008b4:	edc3 7a00 	vstr	s15, [r3]
	  // lcd_send_cmd(0x80);
	  //lcd_send_string("E");
	  sprintf (aadc_Deger,"A:%.4f ma",real_Aadc);
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <main+0x178>)
 80008ba:	edd3 7a00 	vldr	s15, [r3]
 80008be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c2:	ec53 2b17 	vmov	r2, r3, d7
 80008c6:	4928      	ldr	r1, [pc, #160]	; (8000968 <main+0x17c>)
 80008c8:	4828      	ldr	r0, [pc, #160]	; (800096c <main+0x180>)
 80008ca:	f004 f8bd 	bl	8004a48 <siprintf>
	  sprintf (vvdc_Deger,"V:%.4fV %%:%.1f",real_voltage,yuzde_real);
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <main+0x170>)
 80008d0:	edd3 7a00 	vldr	s15, [r3]
 80008d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <main+0x174>)
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e2:	ed8d 7b00 	vstr	d7, [sp]
 80008e6:	ec53 2b16 	vmov	r2, r3, d6
 80008ea:	4921      	ldr	r1, [pc, #132]	; (8000970 <main+0x184>)
 80008ec:	4821      	ldr	r0, [pc, #132]	; (8000974 <main+0x188>)
 80008ee:	f004 f8ab 	bl	8004a48 <siprintf>
	  lcd_send_string(aadc_Deger);
 80008f2:	481e      	ldr	r0, [pc, #120]	; (800096c <main+0x180>)
 80008f4:	f7ff feea 	bl	80006cc <lcd_send_string>
	  lcd_send_cmd(0xC0);
 80008f8:	20c0      	movs	r0, #192	; 0xc0
 80008fa:	f7ff fe77 	bl	80005ec <lcd_send_cmd>
	  lcd_send_string(vvdc_Deger);
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <main+0x188>)
 8000900:	f7ff fee4 	bl	80006cc <lcd_send_string>
	  HAL_Delay(400);
 8000904:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000908:	f000 fc32 	bl	8001170 <HAL_Delay>
	  lcd_send_cmd(0x01);
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fe6d 	bl	80005ec <lcd_send_cmd>
	  	 HAL_Delay(400);
 8000912:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000916:	f000 fc2b 	bl	8001170 <HAL_Delay>
     sum=0;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <main+0x154>)
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
     sum2=0;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <main+0x15c>)
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
     sum3=0;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <main+0x164>)
 800092c:	f04f 0200 	mov.w	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
         for(i=0; i<4095; i++){
 8000932:	e771      	b.n	8000818 <main+0x2c>
 8000934:	200001f0 	.word	0x200001f0
 8000938:	20000298 	.word	0x20000298
 800093c:	20000294 	.word	0x20000294
 8000940:	2000027c 	.word	0x2000027c
 8000944:	20000204 	.word	0x20000204
 8000948:	20000280 	.word	0x20000280
 800094c:	20000208 	.word	0x20000208
 8000950:	20000284 	.word	0x20000284
 8000954:	200001fc 	.word	0x200001fc
 8000958:	457ff000 	.word	0x457ff000
 800095c:	20000288 	.word	0x20000288
 8000960:	2000028c 	.word	0x2000028c
 8000964:	20000290 	.word	0x20000290
 8000968:	08006c10 	.word	0x08006c10
 800096c:	20000214 	.word	0x20000214
 8000970:	08006c1c 	.word	0x08006c1c
 8000974:	20000248 	.word	0x20000248

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	; 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2234      	movs	r2, #52	; 0x34
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f004 f8c1 	bl	8004b0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <SystemClock_Config+0xd4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <SystemClock_Config+0xd4>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <SystemClock_Config+0xd4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <SystemClock_Config+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <SystemClock_Config+0xd8>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <SystemClock_Config+0xd8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e0:	2308      	movs	r3, #8
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009e4:	23d8      	movs	r3, #216	; 0xd8
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fa9f 	bl	8002f3c <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a04:	f000 f924 	bl	8000c50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a08:	f002 fa48 	bl	8002e9c <HAL_PWREx_EnableOverDrive>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a12:	f000 f91d 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2107      	movs	r1, #7
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fd2f 	bl	8003498 <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a40:	f000 f906 	bl	8000c50 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3750      	adds	r7, #80	; 0x50
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a68:	4a30      	ldr	r2, [pc, #192]	; (8000b2c <MX_ADC1_Init+0xd8>)
 8000a6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xdc>)
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ab4:	481c      	ldr	r0, [pc, #112]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000ab6:	f000 fb7f 	bl	80011b8 <HAL_ADC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f000 f8c6 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000ad6:	f000 fccb 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ae0:	f000 f8b6 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000ae4:	2311      	movs	r3, #17
 8000ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000af2:	f000 fcbd 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000afc:	f000 f8a8 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b04:	2303      	movs	r3, #3
 8000b06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000b08:	2305      	movs	r3, #5
 8000b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC1_Init+0xd4>)
 8000b12:	f000 fcad 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000b1c:	f000 f898 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000298 	.word	0x20000298
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <MX_I2C1_Init+0x78>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A03FCB;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <MX_I2C1_Init+0x7c>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b70:	f001 fd86 	bl	8002680 <HAL_I2C_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b7a:	f000 f869 	bl	8000c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b84:	f002 f8f2 	bl	8002d6c <HAL_I2CEx_ConfigAnalogFilter>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b8e:	f000 f85f 	bl	8000c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_I2C1_Init+0x74>)
 8000b96:	f002 f934 	bl	8002e02 <HAL_I2CEx_ConfigDigitalFilter>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ba0:	f000 f856 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000340 	.word	0x20000340
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	10a03fcb 	.word	0x10a03fcb

08000bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_DMA_Init+0x38>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <MX_DMA_Init+0x38>)
 8000bc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_DMA_Init+0x38>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2038      	movs	r0, #56	; 0x38
 8000bd8:	f000 fff7 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bdc:	2038      	movs	r0, #56	; 0x38
 8000bde:	f001 f810 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_GPIO_Init+0x5c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <HAL_ADC_MspInit+0xd4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d154      	bne.n	8000d70 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	481d      	ldr	r0, [pc, #116]	; (8000d80 <HAL_ADC_MspInit+0xdc>)
 8000d0a:	f001 fb0d 	bl	8002328 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_ADC_MspInit+0xe4>)
 8000d12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d56:	f000 ff6f 	bl	8001c38 <HAL_DMA_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000d60:	f7ff ff76 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_ADC_MspInit+0xe0>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40012000 	.word	0x40012000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	200002e0 	.word	0x200002e0
 8000d88:	40026410 	.word	0x40026410

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ae      	sub	sp, #184	; 0xb8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2290      	movs	r2, #144	; 0x90
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 feae 	bl	8004b0e <memset>
  if(hi2c->Instance==I2C1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <HAL_I2C_MspInit+0xb4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d13c      	bne.n	8000e36 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fd15 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000dd8:	f7ff ff3a 	bl	8000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_I2C_MspInit+0xb8>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_I2C_MspInit+0xb8>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_I2C_MspInit+0xb8>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df4:	23c0      	movs	r3, #192	; 0xc0
 8000df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e16:	4619      	mov	r1, r3
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <HAL_I2C_MspInit+0xbc>)
 8000e1a:	f001 fa85 	bl	8002328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_I2C_MspInit+0xb8>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_I2C_MspInit+0xb8>)
 8000e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_I2C_MspInit+0xb8>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	37b8      	adds	r7, #184	; 0xb8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40005400 	.word	0x40005400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020400 	.word	0x40020400

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f94a 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ea6:	f000 ffd5 	bl	8001e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200002e0 	.word	0x200002e0

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_kill>:

int _kill(int pid, int sig)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ece:	f003 fe71 	bl	8004bb4 <__errno>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2216      	movs	r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_exit>:

void _exit (int status)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe7 	bl	8000ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef6:	e7fe      	b.n	8000ef6 <_exit+0x12>

08000ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4601      	mov	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
  }

  return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
  }
  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f92:	605a      	str	r2, [r3, #4]
  return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f003 fdd6 	bl	8004bb4 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20080000 	.word	0x20080000
 8001034:	00000400 	.word	0x00000400
 8001038:	20000394 	.word	0x20000394
 800103c:	200004e8 	.word	0x200004e8

08001040 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108e:	f7ff ffd7 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f003 fd95 	bl	8004bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fba9 	bl	80007ec <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80010a8:	08006fc4 	.word	0x08006fc4
  ldr r2, =_sbss
 80010ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80010b0:	200004e8 	.word	0x200004e8

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>

080010b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 fd7a 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c0:	200f      	movs	r0, #15
 80010c2:	f000 f805 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c6:	f7ff fdc9 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fd95 	bl	8001c1e <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 fd5d 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000008 	.word	0x20000008
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	20000398 	.word	0x20000398

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000398 	.word	0x20000398

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008

080011b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e031      	b.n	8001232 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fd64 	bl	8000ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d116      	bne.n	8001224 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_ADC_Init+0x84>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	f043 0202 	orr.w	r2, r3, #2
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fa88 	bl	800171c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
 8001222:	e001      	b.n	8001228 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	ffffeefd 	.word	0xffffeefd

08001240 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_ADC_Start_DMA+0x1e>
 800125a:	2302      	movs	r3, #2
 800125c:	e0d4      	b.n	8001408 <HAL_ADC_Start_DMA+0x1c8>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d018      	beq.n	80012a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001284:	4b62      	ldr	r3, [pc, #392]	; (8001410 <HAL_ADC_Start_DMA+0x1d0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a62      	ldr	r2, [pc, #392]	; (8001414 <HAL_ADC_Start_DMA+0x1d4>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9a      	lsrs	r2, r3, #18
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001298:	e002      	b.n	80012a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3b01      	subs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	f040 809c 	bne.w	80013ee <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ba:	4b57      	ldr	r3, [pc, #348]	; (8001418 <HAL_ADC_Start_DMA+0x1d8>)
 80012bc:	4013      	ands	r3, r2
 80012be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f0:	d106      	bne.n	8001300 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f023 0206 	bic.w	r2, r3, #6
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
 80012fe:	e002      	b.n	8001306 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	4a42      	ldr	r2, [pc, #264]	; (800141c <HAL_ADC_Start_DMA+0x1dc>)
 8001314:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131a:	4a41      	ldr	r2, [pc, #260]	; (8001420 <HAL_ADC_Start_DMA+0x1e0>)
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	4a40      	ldr	r2, [pc, #256]	; (8001424 <HAL_ADC_Start_DMA+0x1e4>)
 8001324:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800132e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800133e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800134e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	334c      	adds	r3, #76	; 0x4c
 800135a:	4619      	mov	r1, r3
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f000 fd18 	bl	8001d94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_ADC_Start_DMA+0x1e8>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 031f 	and.w	r3, r3, #31
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10f      	bne.n	8001390 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d143      	bne.n	8001406 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	e03a      	b.n	8001406 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_ADC_Start_DMA+0x1ec>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10e      	bne.n	80013b8 <HAL_ADC_Start_DMA+0x178>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_ADC_Start_DMA+0x1e8>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d120      	bne.n	8001406 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_ADC_Start_DMA+0x1f0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d11b      	bne.n	8001406 <HAL_ADC_Start_DMA+0x1c6>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d114      	bne.n	8001406 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	e00b      	b.n	8001406 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f043 0210 	orr.w	r2, r3, #16
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83
 8001418:	fffff8fe 	.word	0xfffff8fe
 800141c:	08001911 	.word	0x08001911
 8001420:	080019cb 	.word	0x080019cb
 8001424:	080019e7 	.word	0x080019e7
 8001428:	40012300 	.word	0x40012300
 800142c:	40012000 	.word	0x40012000
 8001430:	40012200 	.word	0x40012200

08001434 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1c>
 8001488:	2302      	movs	r3, #2
 800148a:	e136      	b.n	80016fa <HAL_ADC_ConfigChannel+0x28a>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b09      	cmp	r3, #9
 800149a:	d93a      	bls.n	8001512 <HAL_ADC_ConfigChannel+0xa2>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014a4:	d035      	beq.n	8001512 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68d9      	ldr	r1, [r3, #12]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	3b1e      	subs	r3, #30
 80014bc:	2207      	movs	r2, #7
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a8d      	ldr	r2, [pc, #564]	; (8001708 <HAL_ADC_ConfigChannel+0x298>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10a      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68d9      	ldr	r1, [r3, #12]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	061a      	lsls	r2, r3, #24
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ea:	e035      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4403      	add	r3, r0
 8001504:	3b1e      	subs	r3, #30
 8001506:	409a      	lsls	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001510:	e022      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6919      	ldr	r1, [r3, #16]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	2207      	movs	r2, #7
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43da      	mvns	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	400a      	ands	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6919      	ldr	r1, [r3, #16]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	4603      	mov	r3, r0
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4403      	add	r3, r0
 800154e:	409a      	lsls	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d824      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b05      	subs	r3, #5
 8001572:	221f      	movs	r2, #31
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43da      	mvns	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	400a      	ands	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	3b05      	subs	r3, #5
 800159c:	fa00 f203 	lsl.w	r2, r0, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
 80015a8:	e04c      	b.n	8001644 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d824      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b23      	subs	r3, #35	; 0x23
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b23      	subs	r3, #35	; 0x23
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
 80015fa:	e023      	b.n	8001644 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b41      	subs	r3, #65	; 0x41
 800160e:	221f      	movs	r2, #31
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43da      	mvns	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	400a      	ands	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b41      	subs	r3, #65	; 0x41
 8001638:	fa00 f203 	lsl.w	r2, r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_ADC_ConfigChannel+0x29c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10a      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1f4>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001656:	d105      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a2c      	ldr	r2, [pc, #176]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 800165e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001662:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_ADC_ConfigChannel+0x29c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10f      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b12      	cmp	r3, #18
 8001674:	d10b      	bne.n	800168e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 800167c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001680:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <HAL_ADC_ConfigChannel+0x29c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d12b      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x280>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_ADC_ConfigChannel+0x298>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d003      	beq.n	80016aa <HAL_ADC_ConfigChannel+0x23a>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b11      	cmp	r3, #17
 80016a8:	d122      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_ADC_ConfigChannel+0x2a0>)
 80016bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_ADC_ConfigChannel+0x298>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d111      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_ADC_ConfigChannel+0x2a4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_ADC_ConfigChannel+0x2a8>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9a      	lsrs	r2, r3, #18
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016e2:	e002      	b.n	80016ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	10000012 	.word	0x10000012
 800170c:	40012000 	.word	0x40012000
 8001710:	40012300 	.word	0x40012300
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83

0800171c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001724:	4b78      	ldr	r3, [pc, #480]	; (8001908 <ADC_Init+0x1ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a77      	ldr	r2, [pc, #476]	; (8001908 <ADC_Init+0x1ec>)
 800172a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800172e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001730:	4b75      	ldr	r3, [pc, #468]	; (8001908 <ADC_Init+0x1ec>)
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4973      	ldr	r1, [pc, #460]	; (8001908 <ADC_Init+0x1ec>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800174c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	021a      	lsls	r2, r3, #8
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	4a58      	ldr	r2, [pc, #352]	; (800190c <ADC_Init+0x1f0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d022      	beq.n	80017f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	e00f      	b.n	8001816 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001814:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0202 	bic.w	r2, r2, #2
 8001824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001852:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001862:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6859      	ldr	r1, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	3b01      	subs	r3, #1
 8001870:	035a      	lsls	r2, r3, #13
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	e007      	b.n	800188c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800188a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	051a      	lsls	r2, r3, #20
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ce:	025a      	lsls	r2, r3, #9
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	029a      	lsls	r2, r3, #10
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40012300 	.word	0x40012300
 800190c:	0f000001 	.word	0x0f000001

08001910 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001926:	2b00      	cmp	r3, #0
 8001928:	d13c      	bne.n	80019a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d12b      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001948:	2b00      	cmp	r3, #0
 800194a:	d127      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001964:	2b00      	cmp	r3, #0
 8001966:	d119      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0220 	bic.w	r2, r2, #32
 8001976:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff fd49 	bl	8001434 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019a2:	e00e      	b.n	80019c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fd53 	bl	800145c <HAL_ADC_ErrorCallback>
}
 80019b6:	e004      	b.n	80019c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fd35 	bl	8001448 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f043 0204 	orr.w	r2, r3, #4
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff fd28 	bl	800145c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	05fa0000 	.word	0x05fa0000

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fa88 	bl	8001158 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e099      	b.n	8001d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c74:	e00f      	b.n	8001c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c76:	f7ff fa6f 	bl	8001158 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d908      	bls.n	8001c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e078      	b.n	8001d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e8      	bne.n	8001c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <HAL_DMA_Init+0x158>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f023 0307 	bic.w	r3, r3, #7
 8001d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d117      	bne.n	8001d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fa77 	bl	8002230 <DMA_CheckFifoParam>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d56:	2301      	movs	r3, #1
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa2e 	bl	80021c4 <DMA_CalcBaseAndBitshift>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	e010803f 	.word	0xe010803f

08001d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_DMA_Start_IT+0x26>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e048      	b.n	8001e4c <HAL_DMA_Start_IT+0xb8>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d137      	bne.n	8001e3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f9c0 	bl	8002168 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	223f      	movs	r2, #63	; 0x3f
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0216 	orr.w	r2, r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e12:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0208 	orr.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e005      	b.n	8001e4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
 8001e48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e60:	4b8e      	ldr	r3, [pc, #568]	; (800209c <HAL_DMA_IRQHandler+0x248>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a8e      	ldr	r2, [pc, #568]	; (80020a0 <HAL_DMA_IRQHandler+0x24c>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2208      	movs	r2, #8
 8001e80:	409a      	lsls	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01a      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0204 	bic.w	r2, r2, #4
 8001ea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	2208      	movs	r2, #8
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f043 0202 	orr.w	r2, r3, #2
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2204      	movs	r2, #4
 8001efc:	409a      	lsls	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00b      	beq.n	8001f2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	2204      	movs	r2, #4
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f043 0204 	orr.w	r2, r3, #4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2210      	movs	r2, #16
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d043      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03c      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2210      	movs	r2, #16
 8001f50:	409a      	lsls	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d018      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d108      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d024      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
 8001f82:	e01f      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01b      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
 8001f94:	e016      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0208 	bic.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2220      	movs	r2, #32
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 808f 	beq.w	80020f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8087 	beq.w	80020f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2220      	movs	r2, #32
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d136      	bne.n	800206c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0216 	bic.w	r2, r2, #22
 800200c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800201c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_DMA_IRQHandler+0x1da>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0208 	bic.w	r2, r2, #8
 800203c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	223f      	movs	r2, #63	; 0x3f
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	2b00      	cmp	r3, #0
 8002060:	d07e      	beq.n	8002160 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
        }
        return;
 800206a:	e079      	b.n	8002160 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01d      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	2b00      	cmp	r3, #0
 800208e:	d031      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e02c      	b.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000
 80020a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d023      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e01e      	b.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10f      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0210 	bic.w	r2, r2, #16
 80020d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d032      	beq.n	8002162 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d022      	beq.n	800214e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2205      	movs	r2, #5
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	3301      	adds	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d307      	bcc.n	800213c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f2      	bne.n	8002120 <HAL_DMA_IRQHandler+0x2cc>
 800213a:	e000      	b.n	800213e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800213c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
 800215e:	e000      	b.n	8002162 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002160:	bf00      	nop
    }
  }
}
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002184:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b40      	cmp	r3, #64	; 0x40
 8002194:	d108      	bne.n	80021a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021a6:	e007      	b.n	80021b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3b10      	subs	r3, #16
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <DMA_CalcBaseAndBitshift+0x60>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <DMA_CalcBaseAndBitshift+0x64>)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d908      	bls.n	8002204 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <DMA_CalcBaseAndBitshift+0x68>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	1d1a      	adds	r2, r3, #4
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	659a      	str	r2, [r3, #88]	; 0x58
 8002202:	e006      	b.n	8002212 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <DMA_CalcBaseAndBitshift+0x68>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	aaaaaaab 	.word	0xaaaaaaab
 8002228:	08006c3c 	.word	0x08006c3c
 800222c:	fffffc00 	.word	0xfffffc00

08002230 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11f      	bne.n	800228a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d856      	bhi.n	80022fe <DMA_CheckFifoParam+0xce>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <DMA_CheckFifoParam+0x28>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	08002269 	.word	0x08002269
 800225c:	0800227b 	.word	0x0800227b
 8002260:	08002269 	.word	0x08002269
 8002264:	080022ff 	.word	0x080022ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d046      	beq.n	8002302 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002278:	e043      	b.n	8002302 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002282:	d140      	bne.n	8002306 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002288:	e03d      	b.n	8002306 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002292:	d121      	bne.n	80022d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d837      	bhi.n	800230a <DMA_CheckFifoParam+0xda>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <DMA_CheckFifoParam+0x70>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022b1 	.word	0x080022b1
 80022a4:	080022b7 	.word	0x080022b7
 80022a8:	080022b1 	.word	0x080022b1
 80022ac:	080022c9 	.word	0x080022c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e030      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d025      	beq.n	800230e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c6:	e022      	b.n	800230e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022d0:	d11f      	bne.n	8002312 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022d6:	e01c      	b.n	8002312 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d903      	bls.n	80022e6 <DMA_CheckFifoParam+0xb6>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d003      	beq.n	80022ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022e4:	e018      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ea:	e015      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e00b      	b.n	8002316 <DMA_CheckFifoParam+0xe6>
      break;
 80022fe:	bf00      	nop
 8002300:	e00a      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 8002302:	bf00      	nop
 8002304:	e008      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 8002306:	bf00      	nop
 8002308:	e006      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 800230a:	bf00      	nop
 800230c:	e004      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 800230e:	bf00      	nop
 8002310:	e002      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;   
 8002312:	bf00      	nop
 8002314:	e000      	b.n	8002318 <DMA_CheckFifoParam+0xe8>
      break;
 8002316:	bf00      	nop
    }
  } 
  
  return status; 
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop

08002328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e175      	b.n	8002634 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	f040 8164 	bne.w	800262e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d005      	beq.n	800237e <HAL_GPIO_Init+0x56>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d130      	bne.n	80023e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0201 	and.w	r2, r3, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d017      	beq.n	800241c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d123      	bne.n	8002470 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	08da      	lsrs	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3208      	adds	r2, #8
 8002430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3208      	adds	r2, #8
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80be 	beq.w	800262e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_GPIO_Init+0x324>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_GPIO_Init+0x324>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024bc:	6453      	str	r3, [r2, #68]	; 0x44
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_GPIO_Init+0x324>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024ca:	4a61      	ldr	r2, [pc, #388]	; (8002650 <HAL_GPIO_Init+0x328>)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	220f      	movs	r2, #15
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a58      	ldr	r2, [pc, #352]	; (8002654 <HAL_GPIO_Init+0x32c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d037      	beq.n	8002566 <HAL_GPIO_Init+0x23e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_GPIO_Init+0x330>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d031      	beq.n	8002562 <HAL_GPIO_Init+0x23a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_GPIO_Init+0x334>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x236>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_GPIO_Init+0x338>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x232>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x33c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x22e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_GPIO_Init+0x340>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x22a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_GPIO_Init+0x344>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x226>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_GPIO_Init+0x348>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x222>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <HAL_GPIO_Init+0x34c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x21e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4f      	ldr	r2, [pc, #316]	; (8002678 <HAL_GPIO_Init+0x350>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x21a>
 800253e:	2309      	movs	r3, #9
 8002540:	e012      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002542:	230a      	movs	r3, #10
 8002544:	e010      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002546:	2308      	movs	r3, #8
 8002548:	e00e      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800254a:	2307      	movs	r3, #7
 800254c:	e00c      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800254e:	2306      	movs	r3, #6
 8002550:	e00a      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002552:	2305      	movs	r3, #5
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002556:	2304      	movs	r3, #4
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	; (8002650 <HAL_GPIO_Init+0x328>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_GPIO_Init+0x354>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a34      	ldr	r2, [pc, #208]	; (800267c <HAL_GPIO_Init+0x354>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_GPIO_Init+0x354>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <HAL_GPIO_Init+0x354>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_GPIO_Init+0x354>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_GPIO_Init+0x354>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_GPIO_Init+0x354>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <HAL_GPIO_Init+0x354>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f ae86 	bls.w	8002348 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40021400 	.word	0x40021400
 800266c:	40021800 	.word	0x40021800
 8002670:	40021c00 	.word	0x40021c00
 8002674:	40022000 	.word	0x40022000
 8002678:	40022400 	.word	0x40022400
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07f      	b.n	8002792 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fb70 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	; 0x24
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	e006      	b.n	8002708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d104      	bne.n	800271a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002718:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_I2C_Init+0x11c>)
 8002726:	430b      	orrs	r3, r1
 8002728:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002738:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69d9      	ldr	r1, [r3, #28]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	02008000 	.word	0x02008000

080027a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
 80027b0:	4613      	mov	r3, r2
 80027b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b20      	cmp	r3, #32
 80027be:	f040 80da 	bne.w	8002976 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x30>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0d3      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1d8>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027d8:	f7fe fcbe 	bl	8001158 <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2319      	movs	r3, #25
 80027e4:	2201      	movs	r2, #1
 80027e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8f0 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0be      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2221      	movs	r2, #33	; 0x21
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2210      	movs	r2, #16
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	893a      	ldrh	r2, [r7, #8]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	2bff      	cmp	r3, #255	; 0xff
 800282a:	d90e      	bls.n	800284a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	22ff      	movs	r2, #255	; 0xff
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	b2da      	uxtb	r2, r3
 8002838:	8979      	ldrh	r1, [r7, #10]
 800283a:	4b51      	ldr	r3, [pc, #324]	; (8002980 <HAL_I2C_Master_Transmit+0x1e0>)
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa60 	bl	8002d08 <I2C_TransferConfig>
 8002848:	e06c      	b.n	8002924 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	b2da      	uxtb	r2, r3
 800285a:	8979      	ldrh	r1, [r7, #10]
 800285c:	4b48      	ldr	r3, [pc, #288]	; (8002980 <HAL_I2C_Master_Transmit+0x1e0>)
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fa4f 	bl	8002d08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800286a:	e05b      	b.n	8002924 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	6a39      	ldr	r1, [r7, #32]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f8ed 	bl	8002a50 <I2C_WaitOnTXISFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e07b      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d034      	beq.n	8002924 <HAL_I2C_Master_Transmit+0x184>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d130      	bne.n	8002924 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f87f 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e04d      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2bff      	cmp	r3, #255	; 0xff
 80028e4:	d90e      	bls.n	8002904 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	22ff      	movs	r2, #255	; 0xff
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	2300      	movs	r3, #0
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fa03 	bl	8002d08 <I2C_TransferConfig>
 8002902:	e00f      	b.n	8002924 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	b2da      	uxtb	r2, r3
 8002914:	8979      	ldrh	r1, [r7, #10]
 8002916:	2300      	movs	r3, #0
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f9f2 	bl	8002d08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d19e      	bne.n	800286c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	6a39      	ldr	r1, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8cc 	bl	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e01a      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2220      	movs	r2, #32
 8002948:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_I2C_Master_Transmit+0x1e4>)
 8002956:	400b      	ands	r3, r1
 8002958:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	80002000 	.word	0x80002000
 8002984:	fe00e800 	.word	0xfe00e800

08002988 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d103      	bne.n	80029a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d007      	beq.n	80029c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	619a      	str	r2, [r3, #24]
  }
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e0:	e022      	b.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d01e      	beq.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe fbb5 	bl	8001158 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d113      	bne.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00f      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d0cd      	beq.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a5c:	e02c      	b.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f870 	bl	8002b48 <I2C_IsErrorOccurred>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e02a      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d01e      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7fe fb6d 	bl	8001158 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d113      	bne.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d1cb      	bne.n	8002a5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002adc:	e028      	b.n	8002b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f830 	bl	8002b48 <I2C_IsErrorOccurred>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e026      	b.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7fe fb31 	bl	8001158 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d113      	bne.n	8002b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d1cf      	bne.n	8002ade <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d068      	beq.n	8002c46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b7c:	e049      	b.n	8002c12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d045      	beq.n	8002c12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7fe fae7 	bl	8001158 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_IsErrorOccurred+0x54>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d13a      	bne.n	8002c12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbe:	d121      	bne.n	8002c04 <I2C_IsErrorOccurred+0xbc>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc6:	d01d      	beq.n	8002c04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d01a      	beq.n	8002c04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bde:	f7fe fabb 	bl	8001158 <HAL_GetTick>
 8002be2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be4:	e00e      	b.n	8002c04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002be6:	f7fe fab7 	bl	8001158 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b19      	cmp	r3, #25
 8002bf2:	d907      	bls.n	8002c04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c02:	e006      	b.n	8002c12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d1e9      	bne.n	8002be6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d003      	beq.n	8002c28 <I2C_IsErrorOccurred+0xe0>
 8002c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0aa      	beq.n	8002b7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2220      	movs	r2, #32
 8002c36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00b      	beq.n	8002c70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fe63 	bl	8002988 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <I2C_IsErrorOccurred+0x1bc>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	fe00e800 	.word	0xfe00e800

08002d08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	817b      	strh	r3, [r7, #10]
 8002d16:	4613      	mov	r3, r2
 8002d18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d20:	7a7b      	ldrb	r3, [r7, #9]
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	0d5b      	lsrs	r3, r3, #21
 8002d42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <I2C_TransferConfig+0x60>)
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	ea02 0103 	and.w	r1, r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	03ff63ff 	.word	0x03ff63ff

08002d6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d138      	bne.n	8002df4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e032      	b.n	8002df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d139      	bne.n	8002e8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e033      	b.n	8002e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2224      	movs	r2, #36	; 0x24
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eca:	f7fe f945 	bl	8001158 <HAL_GetTick>
 8002ece:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ed0:	e009      	b.n	8002ee6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ed2:	f7fe f941 	bl	8001158 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee0:	d901      	bls.n	8002ee6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e022      	b.n	8002f2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	; (8002f38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f00:	f7fe f92a 	bl	8001158 <HAL_GetTick>
 8002f04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f06:	e009      	b.n	8002f1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f08:	f7fe f926 	bl	8001158 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f16:	d901      	bls.n	8002f1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e007      	b.n	8002f2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f28:	d1ee      	bne.n	8002f08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40007000 	.word	0x40007000

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e29b      	b.n	800348a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8087 	beq.w	800306e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f60:	4b96      	ldr	r3, [pc, #600]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d00c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6c:	4b93      	ldr	r3, [pc, #588]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d112      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62>
 8002f78:	4b90      	ldr	r3, [pc, #576]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	4b8d      	ldr	r3, [pc, #564]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06c      	beq.n	800306c <HAL_RCC_OscConfig+0x130>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d168      	bne.n	800306c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e275      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x7a>
 8002fa8:	4b84      	ldr	r3, [pc, #528]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a83      	ldr	r2, [pc, #524]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e02e      	b.n	8003014 <HAL_RCC_OscConfig+0xd8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x9c>
 8002fbe:	4b7f      	ldr	r3, [pc, #508]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7e      	ldr	r2, [pc, #504]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b7c      	ldr	r3, [pc, #496]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7b      	ldr	r2, [pc, #492]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e01d      	b.n	8003014 <HAL_RCC_OscConfig+0xd8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0xc0>
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a75      	ldr	r2, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a72      	ldr	r2, [pc, #456]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0xd8>
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6e      	ldr	r2, [pc, #440]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6b      	ldr	r2, [pc, #428]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe f89c 	bl	8001158 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe f898 	bl	8001158 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e229      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0xe8>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f888 	bl	8001158 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe f884 	bl	8001158 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e215      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	4b57      	ldr	r3, [pc, #348]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x110>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d069      	beq.n	800314e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800307a:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b08      	cmp	r3, #8
 8003090:	d11c      	bne.n	80030cc <HAL_RCC_OscConfig+0x190>
 8003092:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d116      	bne.n	80030cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x17a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e1e9      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	493d      	ldr	r1, [pc, #244]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	e040      	b.n	800314e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d023      	beq.n	800311c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d4:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a38      	ldr	r2, [pc, #224]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f83a 	bl	8001158 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe f836 	bl	8001158 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1c7      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4929      	ldr	r1, [pc, #164]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
 800311a:	e018      	b.n	800314e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a26      	ldr	r2, [pc, #152]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f816 	bl	8001158 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003130:	f7fe f812 	bl	8001158 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1a3      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d038      	beq.n	80031cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d019      	beq.n	8003196 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fd fff3 	bl	8001158 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003176:	f7fd ffef 	bl	8001158 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e180      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x23a>
 8003194:	e01a      	b.n	80031cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <HAL_RCC_OscConfig+0x280>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fd ffd9 	bl	8001158 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fd ffd5 	bl	8001158 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d903      	bls.n	80031c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e166      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
 80031bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	4b92      	ldr	r3, [pc, #584]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a4 	beq.w	8003322 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b8c      	ldr	r3, [pc, #560]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	4b89      	ldr	r3, [pc, #548]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a88      	ldr	r2, [pc, #544]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b86      	ldr	r3, [pc, #536]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003202:	4b83      	ldr	r3, [pc, #524]	; (8003410 <HAL_RCC_OscConfig+0x4d4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d118      	bne.n	8003240 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800320e:	4b80      	ldr	r3, [pc, #512]	; (8003410 <HAL_RCC_OscConfig+0x4d4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7f      	ldr	r2, [pc, #508]	; (8003410 <HAL_RCC_OscConfig+0x4d4>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321a:	f7fd ff9d 	bl	8001158 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fd ff99 	bl	8001158 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b64      	cmp	r3, #100	; 0x64
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e12a      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003234:	4b76      	ldr	r3, [pc, #472]	; (8003410 <HAL_RCC_OscConfig+0x4d4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x31a>
 8003248:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	e02d      	b.n	80032b2 <HAL_RCC_OscConfig+0x376>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x33c>
 800325e:	4b6b      	ldr	r3, [pc, #428]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a6a      	ldr	r2, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a67      	ldr	r2, [pc, #412]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	e01c      	b.n	80032b2 <HAL_RCC_OscConfig+0x376>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d10c      	bne.n	800329a <HAL_RCC_OscConfig+0x35e>
 8003280:	4b62      	ldr	r3, [pc, #392]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003286:	f043 0304 	orr.w	r3, r3, #4
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	4b5f      	ldr	r3, [pc, #380]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a5e      	ldr	r2, [pc, #376]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
 8003298:	e00b      	b.n	80032b2 <HAL_RCC_OscConfig+0x376>
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a5b      	ldr	r2, [pc, #364]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
 80032a6:	4b59      	ldr	r3, [pc, #356]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d015      	beq.n	80032e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fd ff4d 	bl	8001158 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fd ff49 	bl	8001158 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0d8      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	4b4c      	ldr	r3, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ee      	beq.n	80032c2 <HAL_RCC_OscConfig+0x386>
 80032e4:	e014      	b.n	8003310 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e6:	f7fd ff37 	bl	8001158 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fd ff33 	bl	8001158 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0c2      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ee      	bne.n	80032ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a3c      	ldr	r2, [pc, #240]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 800331c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80ae 	beq.w	8003488 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332c:	4b37      	ldr	r3, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b08      	cmp	r3, #8
 8003336:	d06d      	beq.n	8003414 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d14b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a31      	ldr	r2, [pc, #196]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fd ff04 	bl	8001158 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fd ff00 	bl	8001158 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e091      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	4b29      	ldr	r3, [pc, #164]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	071b      	lsls	r3, r3, #28
 800339e:	491b      	ldr	r1, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a18      	ldr	r2, [pc, #96]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80033aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd fed2 	bl	8001158 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fd fece 	bl	8001158 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e05f      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x47c>
 80033d6:	e057      	b.n	8003488 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0b      	ldr	r2, [pc, #44]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 80033de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fd feb8 	bl	8001158 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fd feb4 	bl	8001158 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e045      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_RCC_OscConfig+0x4d0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x4b0>
 800340a:	e03d      	b.n	8003488 <HAL_RCC_OscConfig+0x54c>
 800340c:	40023800 	.word	0x40023800
 8003410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003414:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <HAL_RCC_OscConfig+0x558>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d030      	beq.n	8003484 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d129      	bne.n	8003484 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d122      	bne.n	8003484 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800344a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800344c:	4293      	cmp	r3, r2
 800344e:	d119      	bne.n	8003484 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d10f      	bne.n	8003484 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800

08003498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0d0      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d910      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 020f 	bic.w	r2, r3, #15
 80034c6:	4965      	ldr	r1, [pc, #404]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 80034fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003502:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800351a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d040      	beq.n	80035bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e073      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06b      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4936      	ldr	r1, [pc, #216]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358c:	f7fd fde4 	bl	8001158 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fd fde0 	bl	8001158 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e053      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d210      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 020f 	bic.w	r2, r3, #15
 80035d2:	4922      	ldr	r1, [pc, #136]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362a:	f000 f821 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490a      	ldr	r1, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1cc>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1d0>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1d4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fd40 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023c00 	.word	0x40023c00
 8003660:	40023800 	.word	0x40023800
 8003664:	08006c2c 	.word	0x08006c2c
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b090      	sub	sp, #64	; 0x40
 8003676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	2300      	movs	r3, #0
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d00d      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003694:	2b08      	cmp	r3, #8
 8003696:	f200 80a1 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x34>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x3a>
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a8:	e09b      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036aa:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ae:	e098      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036ba:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d028      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	2200      	movs	r2, #0
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	627a      	str	r2, [r7, #36]	; 0x24
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d8:	2100      	movs	r1, #0
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036dc:	fb03 f201 	mul.w	r2, r3, r1
 80036e0:	2300      	movs	r3, #0
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ea:	fba0 1202 	umull	r1, r2, r0, r2
 80036ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f0:	460a      	mov	r2, r1
 80036f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	4413      	add	r3, r2
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2200      	movs	r2, #0
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800370a:	f7fc fdf1 	bl	80002f0 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4613      	mov	r3, r2
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003716:	e053      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	2200      	movs	r2, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	617a      	str	r2, [r7, #20]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800372a:	f04f 0b00 	mov.w	fp, #0
 800372e:	4652      	mov	r2, sl
 8003730:	465b      	mov	r3, fp
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	0159      	lsls	r1, r3, #5
 800373c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003740:	0150      	lsls	r0, r2, #5
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	ebb2 080a 	subs.w	r8, r2, sl
 800374a:	eb63 090b 	sbc.w	r9, r3, fp
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800375a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800375e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003762:	ebb2 0408 	subs.w	r4, r2, r8
 8003766:	eb63 0509 	sbc.w	r5, r3, r9
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	00eb      	lsls	r3, r5, #3
 8003774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003778:	00e2      	lsls	r2, r4, #3
 800377a:	4614      	mov	r4, r2
 800377c:	461d      	mov	r5, r3
 800377e:	eb14 030a 	adds.w	r3, r4, sl
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	eb45 030b 	adc.w	r3, r5, fp
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003796:	4629      	mov	r1, r5
 8003798:	028b      	lsls	r3, r1, #10
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a0:	4621      	mov	r1, r4
 80037a2:	028a      	lsls	r2, r1, #10
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	2200      	movs	r2, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b4:	f7fc fd9c 	bl	80002f0 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80037d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	017d7840 	.word	0x017d7840

080037fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d012      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003824:	4b69      	ldr	r3, [pc, #420]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a68      	ldr	r2, [pc, #416]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	4b66      	ldr	r3, [pc, #408]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	4964      	ldr	r1, [pc, #400]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003856:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800385c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	4959      	ldr	r1, [pc, #356]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003874:	d101      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d017      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003892:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	494a      	ldr	r1, [pc, #296]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 808b 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	4a39      	ldr	r2, [pc, #228]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	; 0x40
 80038ec:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038f8:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fc28 	bl	8001158 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390c:	f7fd fc24 	bl	8001158 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e38f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800391e:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800392a:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d035      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	429a      	cmp	r2, r3
 8003946:	d02e      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003948:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003968:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d114      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd fbec 	bl	8001158 <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fd fbe8 	bl	8001158 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e351      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ee      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b2:	d111      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039c2:	400b      	ands	r3, r1
 80039c4:	4901      	ldr	r1, [pc, #4]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
 80039ca:	e00b      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	0ffffcff 	.word	0x0ffffcff
 80039d8:	4bac      	ldr	r3, [pc, #688]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4aab      	ldr	r2, [pc, #684]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039e2:	6093      	str	r3, [r2, #8]
 80039e4:	4ba9      	ldr	r3, [pc, #676]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	49a6      	ldr	r1, [pc, #664]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a02:	4ba2      	ldr	r3, [pc, #648]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a08:	4aa0      	ldr	r2, [pc, #640]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a12:	4b9e      	ldr	r3, [pc, #632]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	499b      	ldr	r1, [pc, #620]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a30:	4b96      	ldr	r3, [pc, #600]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a3e:	4993      	ldr	r1, [pc, #588]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a52:	4b8e      	ldr	r3, [pc, #568]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a60:	498a      	ldr	r1, [pc, #552]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a74:	4b85      	ldr	r3, [pc, #532]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a82:	4982      	ldr	r1, [pc, #520]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a96:	4b7d      	ldr	r3, [pc, #500]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4979      	ldr	r1, [pc, #484]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab8:	4b74      	ldr	r3, [pc, #464]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	4971      	ldr	r1, [pc, #452]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ada:	4b6c      	ldr	r3, [pc, #432]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f023 020c 	bic.w	r2, r3, #12
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae8:	4968      	ldr	r1, [pc, #416]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003afc:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	4960      	ldr	r1, [pc, #384]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b1e:	4b5b      	ldr	r3, [pc, #364]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	4957      	ldr	r1, [pc, #348]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b40:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	494f      	ldr	r1, [pc, #316]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b62:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	4946      	ldr	r1, [pc, #280]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b84:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	493e      	ldr	r1, [pc, #248]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb4:	4935      	ldr	r1, [pc, #212]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd6:	492d      	ldr	r1, [pc, #180]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bea:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf8:	4924      	ldr	r1, [pc, #144]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c08:	d101      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	4914      	ldr	r1, [pc, #80]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5c:	490b      	ldr	r1, [pc, #44]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00f      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c80:	4902      	ldr	r1, [pc, #8]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c9c:	4b8a      	ldr	r3, [pc, #552]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cac:	4986      	ldr	r1, [pc, #536]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cc0:	4b81      	ldr	r3, [pc, #516]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	497d      	ldr	r1, [pc, #500]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d006      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80d6 	beq.w	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cec:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a75      	ldr	r2, [pc, #468]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fa2e 	bl	8001158 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d00:	f7fd fa2a 	bl	8001158 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e195      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d12:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d021      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11d      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d32:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d46:	0e1b      	lsrs	r3, r3, #24
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	019a      	lsls	r2, r3, #6
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	071b      	lsls	r3, r3, #28
 8003d66:	4958      	ldr	r1, [pc, #352]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d98:	d129      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003da8:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dae:	0f1b      	lsrs	r3, r3, #28
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	019a      	lsls	r2, r3, #6
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	061b      	lsls	r3, r3, #24
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	493e      	ldr	r1, [pc, #248]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	f023 021f 	bic.w	r2, r3, #31
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	3b01      	subs	r3, #1
 8003de6:	4938      	ldr	r1, [pc, #224]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01d      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dfa:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	0e1b      	lsrs	r3, r3, #24
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e08:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	0f1b      	lsrs	r3, r3, #28
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	019a      	lsls	r2, r3, #6
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	4926      	ldr	r1, [pc, #152]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d011      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	019a      	lsls	r2, r3, #6
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	071b      	lsls	r3, r3, #28
 8003e5e:	491a      	ldr	r1, [pc, #104]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e66:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e72:	f7fd f971 	bl	8001158 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e7a:	f7fd f96d 	bl	8001158 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d8      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	f040 80ce 	bne.w	800403c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fd f954 	bl	8001158 <HAL_GetTick>
 8003eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eb4:	f7fd f950 	bl	8001158 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d904      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0bb      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ecc:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d0ec      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d02e      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d12a      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f02:	4b51      	ldr	r3, [pc, #324]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f10:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	0f1b      	lsrs	r3, r3, #28
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	019a      	lsls	r2, r3, #6
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	071b      	lsls	r3, r3, #28
 8003f36:	4944      	ldr	r1, [pc, #272]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f3e:	4b42      	ldr	r3, [pc, #264]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	493d      	ldr	r1, [pc, #244]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d022      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f6c:	d11d      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	0e1b      	lsrs	r3, r3, #24
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f7c:	4b32      	ldr	r3, [pc, #200]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	0f1b      	lsrs	r3, r3, #28
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	019a      	lsls	r2, r3, #6
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	071b      	lsls	r3, r3, #28
 8003fa2:	4929      	ldr	r1, [pc, #164]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d028      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	0e1b      	lsrs	r3, r3, #24
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	019a      	lsls	r2, r3, #6
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	071b      	lsls	r3, r3, #28
 8003fea:	4917      	ldr	r1, [pc, #92]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4911      	ldr	r1, [pc, #68]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004014:	f7fd f8a0 	bl	8001158 <HAL_GetTick>
 8004018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800401c:	f7fd f89c 	bl	8001158 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e007      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403a:	d1ef      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <__cvt>:
 800404c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404e:	ed2d 8b02 	vpush	{d8}
 8004052:	eeb0 8b40 	vmov.f64	d8, d0
 8004056:	b085      	sub	sp, #20
 8004058:	4617      	mov	r7, r2
 800405a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800405c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800405e:	ee18 2a90 	vmov	r2, s17
 8004062:	f025 0520 	bic.w	r5, r5, #32
 8004066:	2a00      	cmp	r2, #0
 8004068:	bfb6      	itet	lt
 800406a:	222d      	movlt	r2, #45	; 0x2d
 800406c:	2200      	movge	r2, #0
 800406e:	eeb1 8b40 	vneglt.f64	d8, d0
 8004072:	2d46      	cmp	r5, #70	; 0x46
 8004074:	460c      	mov	r4, r1
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	d004      	beq.n	8004084 <__cvt+0x38>
 800407a:	2d45      	cmp	r5, #69	; 0x45
 800407c:	d100      	bne.n	8004080 <__cvt+0x34>
 800407e:	3401      	adds	r4, #1
 8004080:	2102      	movs	r1, #2
 8004082:	e000      	b.n	8004086 <__cvt+0x3a>
 8004084:	2103      	movs	r1, #3
 8004086:	ab03      	add	r3, sp, #12
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	ab02      	add	r3, sp, #8
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4622      	mov	r2, r4
 8004090:	4633      	mov	r3, r6
 8004092:	eeb0 0b48 	vmov.f64	d0, d8
 8004096:	f000 fe43 	bl	8004d20 <_dtoa_r>
 800409a:	2d47      	cmp	r5, #71	; 0x47
 800409c:	d101      	bne.n	80040a2 <__cvt+0x56>
 800409e:	07fb      	lsls	r3, r7, #31
 80040a0:	d51a      	bpl.n	80040d8 <__cvt+0x8c>
 80040a2:	2d46      	cmp	r5, #70	; 0x46
 80040a4:	eb00 0204 	add.w	r2, r0, r4
 80040a8:	d10c      	bne.n	80040c4 <__cvt+0x78>
 80040aa:	7803      	ldrb	r3, [r0, #0]
 80040ac:	2b30      	cmp	r3, #48	; 0x30
 80040ae:	d107      	bne.n	80040c0 <__cvt+0x74>
 80040b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80040b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b8:	bf1c      	itt	ne
 80040ba:	f1c4 0401 	rsbne	r4, r4, #1
 80040be:	6034      	strne	r4, [r6, #0]
 80040c0:	6833      	ldr	r3, [r6, #0]
 80040c2:	441a      	add	r2, r3
 80040c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	bf08      	it	eq
 80040ce:	9203      	streq	r2, [sp, #12]
 80040d0:	2130      	movs	r1, #48	; 0x30
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d307      	bcc.n	80040e8 <__cvt+0x9c>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040dc:	1a1b      	subs	r3, r3, r0
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	b005      	add	sp, #20
 80040e2:	ecbd 8b02 	vpop	{d8}
 80040e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e8:	1c5c      	adds	r4, r3, #1
 80040ea:	9403      	str	r4, [sp, #12]
 80040ec:	7019      	strb	r1, [r3, #0]
 80040ee:	e7f0      	b.n	80040d2 <__cvt+0x86>

080040f0 <__exponent>:
 80040f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040f2:	4603      	mov	r3, r0
 80040f4:	2900      	cmp	r1, #0
 80040f6:	bfb8      	it	lt
 80040f8:	4249      	neglt	r1, r1
 80040fa:	f803 2b02 	strb.w	r2, [r3], #2
 80040fe:	bfb4      	ite	lt
 8004100:	222d      	movlt	r2, #45	; 0x2d
 8004102:	222b      	movge	r2, #43	; 0x2b
 8004104:	2909      	cmp	r1, #9
 8004106:	7042      	strb	r2, [r0, #1]
 8004108:	dd2a      	ble.n	8004160 <__exponent+0x70>
 800410a:	f10d 0207 	add.w	r2, sp, #7
 800410e:	4617      	mov	r7, r2
 8004110:	260a      	movs	r6, #10
 8004112:	4694      	mov	ip, r2
 8004114:	fb91 f5f6 	sdiv	r5, r1, r6
 8004118:	fb06 1415 	mls	r4, r6, r5, r1
 800411c:	3430      	adds	r4, #48	; 0x30
 800411e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004122:	460c      	mov	r4, r1
 8004124:	2c63      	cmp	r4, #99	; 0x63
 8004126:	f102 32ff 	add.w	r2, r2, #4294967295
 800412a:	4629      	mov	r1, r5
 800412c:	dcf1      	bgt.n	8004112 <__exponent+0x22>
 800412e:	3130      	adds	r1, #48	; 0x30
 8004130:	f1ac 0402 	sub.w	r4, ip, #2
 8004134:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004138:	1c41      	adds	r1, r0, #1
 800413a:	4622      	mov	r2, r4
 800413c:	42ba      	cmp	r2, r7
 800413e:	d30a      	bcc.n	8004156 <__exponent+0x66>
 8004140:	f10d 0209 	add.w	r2, sp, #9
 8004144:	eba2 020c 	sub.w	r2, r2, ip
 8004148:	42bc      	cmp	r4, r7
 800414a:	bf88      	it	hi
 800414c:	2200      	movhi	r2, #0
 800414e:	4413      	add	r3, r2
 8004150:	1a18      	subs	r0, r3, r0
 8004152:	b003      	add	sp, #12
 8004154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004156:	f812 5b01 	ldrb.w	r5, [r2], #1
 800415a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800415e:	e7ed      	b.n	800413c <__exponent+0x4c>
 8004160:	2330      	movs	r3, #48	; 0x30
 8004162:	3130      	adds	r1, #48	; 0x30
 8004164:	7083      	strb	r3, [r0, #2]
 8004166:	70c1      	strb	r1, [r0, #3]
 8004168:	1d03      	adds	r3, r0, #4
 800416a:	e7f1      	b.n	8004150 <__exponent+0x60>
 800416c:	0000      	movs	r0, r0
	...

08004170 <_printf_float>:
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	b08b      	sub	sp, #44	; 0x2c
 8004176:	460c      	mov	r4, r1
 8004178:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800417c:	4616      	mov	r6, r2
 800417e:	461f      	mov	r7, r3
 8004180:	4605      	mov	r5, r0
 8004182:	f000 fccd 	bl	8004b20 <_localeconv_r>
 8004186:	f8d0 b000 	ldr.w	fp, [r0]
 800418a:	4658      	mov	r0, fp
 800418c:	f7fc f8a8 	bl	80002e0 <strlen>
 8004190:	2300      	movs	r3, #0
 8004192:	9308      	str	r3, [sp, #32]
 8004194:	f8d8 3000 	ldr.w	r3, [r8]
 8004198:	f894 9018 	ldrb.w	r9, [r4, #24]
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	3307      	adds	r3, #7
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	f103 0108 	add.w	r1, r3, #8
 80041a8:	f8c8 1000 	str.w	r1, [r8]
 80041ac:	ed93 0b00 	vldr	d0, [r3]
 80041b0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004410 <_printf_float+0x2a0>
 80041b4:	eeb0 7bc0 	vabs.f64	d7, d0
 80041b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80041c4:	4682      	mov	sl, r0
 80041c6:	dd24      	ble.n	8004212 <_printf_float+0xa2>
 80041c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80041cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d0:	d502      	bpl.n	80041d8 <_printf_float+0x68>
 80041d2:	232d      	movs	r3, #45	; 0x2d
 80041d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d8:	498f      	ldr	r1, [pc, #572]	; (8004418 <_printf_float+0x2a8>)
 80041da:	4b90      	ldr	r3, [pc, #576]	; (800441c <_printf_float+0x2ac>)
 80041dc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041e0:	bf94      	ite	ls
 80041e2:	4688      	movls	r8, r1
 80041e4:	4698      	movhi	r8, r3
 80041e6:	2303      	movs	r3, #3
 80041e8:	6123      	str	r3, [r4, #16]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	2300      	movs	r3, #0
 80041f0:	6022      	str	r2, [r4, #0]
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	9700      	str	r7, [sp, #0]
 80041f6:	4633      	mov	r3, r6
 80041f8:	aa09      	add	r2, sp, #36	; 0x24
 80041fa:	4621      	mov	r1, r4
 80041fc:	4628      	mov	r0, r5
 80041fe:	f000 f9d1 	bl	80045a4 <_printf_common>
 8004202:	3001      	adds	r0, #1
 8004204:	f040 808a 	bne.w	800431c <_printf_float+0x1ac>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	b00b      	add	sp, #44	; 0x2c
 800420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004212:	eeb4 0b40 	vcmp.f64	d0, d0
 8004216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421a:	d709      	bvc.n	8004230 <_printf_float+0xc0>
 800421c:	ee10 3a90 	vmov	r3, s1
 8004220:	2b00      	cmp	r3, #0
 8004222:	bfbc      	itt	lt
 8004224:	232d      	movlt	r3, #45	; 0x2d
 8004226:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800422a:	497d      	ldr	r1, [pc, #500]	; (8004420 <_printf_float+0x2b0>)
 800422c:	4b7d      	ldr	r3, [pc, #500]	; (8004424 <_printf_float+0x2b4>)
 800422e:	e7d5      	b.n	80041dc <_printf_float+0x6c>
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004236:	9104      	str	r1, [sp, #16]
 8004238:	1c59      	adds	r1, r3, #1
 800423a:	d13c      	bne.n	80042b6 <_printf_float+0x146>
 800423c:	2306      	movs	r3, #6
 800423e:	6063      	str	r3, [r4, #4]
 8004240:	2300      	movs	r3, #0
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	ab08      	add	r3, sp, #32
 8004246:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800424a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800424e:	ab07      	add	r3, sp, #28
 8004250:	6861      	ldr	r1, [r4, #4]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	6022      	str	r2, [r4, #0]
 8004256:	f10d 031b 	add.w	r3, sp, #27
 800425a:	4628      	mov	r0, r5
 800425c:	f7ff fef6 	bl	800404c <__cvt>
 8004260:	9b04      	ldr	r3, [sp, #16]
 8004262:	9907      	ldr	r1, [sp, #28]
 8004264:	2b47      	cmp	r3, #71	; 0x47
 8004266:	4680      	mov	r8, r0
 8004268:	d108      	bne.n	800427c <_printf_float+0x10c>
 800426a:	1cc8      	adds	r0, r1, #3
 800426c:	db02      	blt.n	8004274 <_printf_float+0x104>
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	4299      	cmp	r1, r3
 8004272:	dd41      	ble.n	80042f8 <_printf_float+0x188>
 8004274:	f1a9 0902 	sub.w	r9, r9, #2
 8004278:	fa5f f989 	uxtb.w	r9, r9
 800427c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004280:	d820      	bhi.n	80042c4 <_printf_float+0x154>
 8004282:	3901      	subs	r1, #1
 8004284:	464a      	mov	r2, r9
 8004286:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800428a:	9107      	str	r1, [sp, #28]
 800428c:	f7ff ff30 	bl	80040f0 <__exponent>
 8004290:	9a08      	ldr	r2, [sp, #32]
 8004292:	9004      	str	r0, [sp, #16]
 8004294:	1813      	adds	r3, r2, r0
 8004296:	2a01      	cmp	r2, #1
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	dc02      	bgt.n	80042a2 <_printf_float+0x132>
 800429c:	6822      	ldr	r2, [r4, #0]
 800429e:	07d2      	lsls	r2, r2, #31
 80042a0:	d501      	bpl.n	80042a6 <_printf_float+0x136>
 80042a2:	3301      	adds	r3, #1
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0a2      	beq.n	80041f4 <_printf_float+0x84>
 80042ae:	232d      	movs	r3, #45	; 0x2d
 80042b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b4:	e79e      	b.n	80041f4 <_printf_float+0x84>
 80042b6:	9904      	ldr	r1, [sp, #16]
 80042b8:	2947      	cmp	r1, #71	; 0x47
 80042ba:	d1c1      	bne.n	8004240 <_printf_float+0xd0>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1bf      	bne.n	8004240 <_printf_float+0xd0>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e7bc      	b.n	800423e <_printf_float+0xce>
 80042c4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80042c8:	d118      	bne.n	80042fc <_printf_float+0x18c>
 80042ca:	2900      	cmp	r1, #0
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	dd0b      	ble.n	80042e8 <_printf_float+0x178>
 80042d0:	6121      	str	r1, [r4, #16]
 80042d2:	b913      	cbnz	r3, 80042da <_printf_float+0x16a>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	07d0      	lsls	r0, r2, #31
 80042d8:	d502      	bpl.n	80042e0 <_printf_float+0x170>
 80042da:	3301      	adds	r3, #1
 80042dc:	440b      	add	r3, r1
 80042de:	6123      	str	r3, [r4, #16]
 80042e0:	2300      	movs	r3, #0
 80042e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	e7de      	b.n	80042a6 <_printf_float+0x136>
 80042e8:	b913      	cbnz	r3, 80042f0 <_printf_float+0x180>
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	07d2      	lsls	r2, r2, #31
 80042ee:	d501      	bpl.n	80042f4 <_printf_float+0x184>
 80042f0:	3302      	adds	r3, #2
 80042f2:	e7f4      	b.n	80042de <_printf_float+0x16e>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e7f2      	b.n	80042de <_printf_float+0x16e>
 80042f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042fc:	9b08      	ldr	r3, [sp, #32]
 80042fe:	4299      	cmp	r1, r3
 8004300:	db05      	blt.n	800430e <_printf_float+0x19e>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	6121      	str	r1, [r4, #16]
 8004306:	07d8      	lsls	r0, r3, #31
 8004308:	d5ea      	bpl.n	80042e0 <_printf_float+0x170>
 800430a:	1c4b      	adds	r3, r1, #1
 800430c:	e7e7      	b.n	80042de <_printf_float+0x16e>
 800430e:	2900      	cmp	r1, #0
 8004310:	bfd4      	ite	le
 8004312:	f1c1 0202 	rsble	r2, r1, #2
 8004316:	2201      	movgt	r2, #1
 8004318:	4413      	add	r3, r2
 800431a:	e7e0      	b.n	80042de <_printf_float+0x16e>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	055a      	lsls	r2, r3, #21
 8004320:	d407      	bmi.n	8004332 <_printf_float+0x1c2>
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	4642      	mov	r2, r8
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	47b8      	blx	r7
 800432c:	3001      	adds	r0, #1
 800432e:	d12a      	bne.n	8004386 <_printf_float+0x216>
 8004330:	e76a      	b.n	8004208 <_printf_float+0x98>
 8004332:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004336:	f240 80e0 	bls.w	80044fa <_printf_float+0x38a>
 800433a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800433e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	d133      	bne.n	80043b0 <_printf_float+0x240>
 8004348:	4a37      	ldr	r2, [pc, #220]	; (8004428 <_printf_float+0x2b8>)
 800434a:	2301      	movs	r3, #1
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	f43f af58 	beq.w	8004208 <_printf_float+0x98>
 8004358:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800435c:	429a      	cmp	r2, r3
 800435e:	db02      	blt.n	8004366 <_printf_float+0x1f6>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07d8      	lsls	r0, r3, #31
 8004364:	d50f      	bpl.n	8004386 <_printf_float+0x216>
 8004366:	4653      	mov	r3, sl
 8004368:	465a      	mov	r2, fp
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	f43f af49 	beq.w	8004208 <_printf_float+0x98>
 8004376:	f04f 0800 	mov.w	r8, #0
 800437a:	f104 091a 	add.w	r9, r4, #26
 800437e:	9b08      	ldr	r3, [sp, #32]
 8004380:	3b01      	subs	r3, #1
 8004382:	4543      	cmp	r3, r8
 8004384:	dc09      	bgt.n	800439a <_printf_float+0x22a>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	079b      	lsls	r3, r3, #30
 800438a:	f100 8106 	bmi.w	800459a <_printf_float+0x42a>
 800438e:	68e0      	ldr	r0, [r4, #12]
 8004390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004392:	4298      	cmp	r0, r3
 8004394:	bfb8      	it	lt
 8004396:	4618      	movlt	r0, r3
 8004398:	e738      	b.n	800420c <_printf_float+0x9c>
 800439a:	2301      	movs	r3, #1
 800439c:	464a      	mov	r2, r9
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f af2f 	beq.w	8004208 <_printf_float+0x98>
 80043aa:	f108 0801 	add.w	r8, r8, #1
 80043ae:	e7e6      	b.n	800437e <_printf_float+0x20e>
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dc3a      	bgt.n	800442c <_printf_float+0x2bc>
 80043b6:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <_printf_float+0x2b8>)
 80043b8:	2301      	movs	r3, #1
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f af21 	beq.w	8004208 <_printf_float+0x98>
 80043c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d102      	bne.n	80043d4 <_printf_float+0x264>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	07d9      	lsls	r1, r3, #31
 80043d2:	d5d8      	bpl.n	8004386 <_printf_float+0x216>
 80043d4:	4653      	mov	r3, sl
 80043d6:	465a      	mov	r2, fp
 80043d8:	4631      	mov	r1, r6
 80043da:	4628      	mov	r0, r5
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f af12 	beq.w	8004208 <_printf_float+0x98>
 80043e4:	f04f 0900 	mov.w	r9, #0
 80043e8:	f104 0a1a 	add.w	sl, r4, #26
 80043ec:	9b07      	ldr	r3, [sp, #28]
 80043ee:	425b      	negs	r3, r3
 80043f0:	454b      	cmp	r3, r9
 80043f2:	dc01      	bgt.n	80043f8 <_printf_float+0x288>
 80043f4:	9b08      	ldr	r3, [sp, #32]
 80043f6:	e795      	b.n	8004324 <_printf_float+0x1b4>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4652      	mov	r2, sl
 80043fc:	4631      	mov	r1, r6
 80043fe:	4628      	mov	r0, r5
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	f43f af00 	beq.w	8004208 <_printf_float+0x98>
 8004408:	f109 0901 	add.w	r9, r9, #1
 800440c:	e7ee      	b.n	80043ec <_printf_float+0x27c>
 800440e:	bf00      	nop
 8004410:	ffffffff 	.word	0xffffffff
 8004414:	7fefffff 	.word	0x7fefffff
 8004418:	08006c44 	.word	0x08006c44
 800441c:	08006c48 	.word	0x08006c48
 8004420:	08006c4c 	.word	0x08006c4c
 8004424:	08006c50 	.word	0x08006c50
 8004428:	08006c54 	.word	0x08006c54
 800442c:	9a08      	ldr	r2, [sp, #32]
 800442e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004430:	429a      	cmp	r2, r3
 8004432:	bfa8      	it	ge
 8004434:	461a      	movge	r2, r3
 8004436:	2a00      	cmp	r2, #0
 8004438:	4691      	mov	r9, r2
 800443a:	dc38      	bgt.n	80044ae <_printf_float+0x33e>
 800443c:	2300      	movs	r3, #0
 800443e:	9305      	str	r3, [sp, #20]
 8004440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004444:	f104 021a 	add.w	r2, r4, #26
 8004448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800444a:	9905      	ldr	r1, [sp, #20]
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	eba3 0309 	sub.w	r3, r3, r9
 8004452:	428b      	cmp	r3, r1
 8004454:	dc33      	bgt.n	80044be <_printf_float+0x34e>
 8004456:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800445a:	429a      	cmp	r2, r3
 800445c:	db3c      	blt.n	80044d8 <_printf_float+0x368>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	07da      	lsls	r2, r3, #31
 8004462:	d439      	bmi.n	80044d8 <_printf_float+0x368>
 8004464:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004468:	eba2 0903 	sub.w	r9, r2, r3
 800446c:	9b04      	ldr	r3, [sp, #16]
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	4591      	cmp	r9, r2
 8004472:	bfa8      	it	ge
 8004474:	4691      	movge	r9, r2
 8004476:	f1b9 0f00 	cmp.w	r9, #0
 800447a:	dc35      	bgt.n	80044e8 <_printf_float+0x378>
 800447c:	f04f 0800 	mov.w	r8, #0
 8004480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004484:	f104 0a1a 	add.w	sl, r4, #26
 8004488:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	eba3 0309 	sub.w	r3, r3, r9
 8004492:	4543      	cmp	r3, r8
 8004494:	f77f af77 	ble.w	8004386 <_printf_float+0x216>
 8004498:	2301      	movs	r3, #1
 800449a:	4652      	mov	r2, sl
 800449c:	4631      	mov	r1, r6
 800449e:	4628      	mov	r0, r5
 80044a0:	47b8      	blx	r7
 80044a2:	3001      	adds	r0, #1
 80044a4:	f43f aeb0 	beq.w	8004208 <_printf_float+0x98>
 80044a8:	f108 0801 	add.w	r8, r8, #1
 80044ac:	e7ec      	b.n	8004488 <_printf_float+0x318>
 80044ae:	4613      	mov	r3, r2
 80044b0:	4631      	mov	r1, r6
 80044b2:	4642      	mov	r2, r8
 80044b4:	4628      	mov	r0, r5
 80044b6:	47b8      	blx	r7
 80044b8:	3001      	adds	r0, #1
 80044ba:	d1bf      	bne.n	800443c <_printf_float+0x2cc>
 80044bc:	e6a4      	b.n	8004208 <_printf_float+0x98>
 80044be:	2301      	movs	r3, #1
 80044c0:	4631      	mov	r1, r6
 80044c2:	4628      	mov	r0, r5
 80044c4:	9204      	str	r2, [sp, #16]
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	f43f ae9d 	beq.w	8004208 <_printf_float+0x98>
 80044ce:	9b05      	ldr	r3, [sp, #20]
 80044d0:	9a04      	ldr	r2, [sp, #16]
 80044d2:	3301      	adds	r3, #1
 80044d4:	9305      	str	r3, [sp, #20]
 80044d6:	e7b7      	b.n	8004448 <_printf_float+0x2d8>
 80044d8:	4653      	mov	r3, sl
 80044da:	465a      	mov	r2, fp
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	47b8      	blx	r7
 80044e2:	3001      	adds	r0, #1
 80044e4:	d1be      	bne.n	8004464 <_printf_float+0x2f4>
 80044e6:	e68f      	b.n	8004208 <_printf_float+0x98>
 80044e8:	9a04      	ldr	r2, [sp, #16]
 80044ea:	464b      	mov	r3, r9
 80044ec:	4442      	add	r2, r8
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	d1c1      	bne.n	800447c <_printf_float+0x30c>
 80044f8:	e686      	b.n	8004208 <_printf_float+0x98>
 80044fa:	9a08      	ldr	r2, [sp, #32]
 80044fc:	2a01      	cmp	r2, #1
 80044fe:	dc01      	bgt.n	8004504 <_printf_float+0x394>
 8004500:	07db      	lsls	r3, r3, #31
 8004502:	d537      	bpl.n	8004574 <_printf_float+0x404>
 8004504:	2301      	movs	r3, #1
 8004506:	4642      	mov	r2, r8
 8004508:	4631      	mov	r1, r6
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	f43f ae7a 	beq.w	8004208 <_printf_float+0x98>
 8004514:	4653      	mov	r3, sl
 8004516:	465a      	mov	r2, fp
 8004518:	4631      	mov	r1, r6
 800451a:	4628      	mov	r0, r5
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	f43f ae72 	beq.w	8004208 <_printf_float+0x98>
 8004524:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004528:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004530:	9b08      	ldr	r3, [sp, #32]
 8004532:	d01a      	beq.n	800456a <_printf_float+0x3fa>
 8004534:	3b01      	subs	r3, #1
 8004536:	f108 0201 	add.w	r2, r8, #1
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	d10e      	bne.n	8004562 <_printf_float+0x3f2>
 8004544:	e660      	b.n	8004208 <_printf_float+0x98>
 8004546:	2301      	movs	r3, #1
 8004548:	464a      	mov	r2, r9
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae59 	beq.w	8004208 <_printf_float+0x98>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	9b08      	ldr	r3, [sp, #32]
 800455c:	3b01      	subs	r3, #1
 800455e:	4543      	cmp	r3, r8
 8004560:	dcf1      	bgt.n	8004546 <_printf_float+0x3d6>
 8004562:	9b04      	ldr	r3, [sp, #16]
 8004564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004568:	e6dd      	b.n	8004326 <_printf_float+0x1b6>
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	f104 091a 	add.w	r9, r4, #26
 8004572:	e7f2      	b.n	800455a <_printf_float+0x3ea>
 8004574:	2301      	movs	r3, #1
 8004576:	4642      	mov	r2, r8
 8004578:	e7df      	b.n	800453a <_printf_float+0x3ca>
 800457a:	2301      	movs	r3, #1
 800457c:	464a      	mov	r2, r9
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	f43f ae3f 	beq.w	8004208 <_printf_float+0x98>
 800458a:	f108 0801 	add.w	r8, r8, #1
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004592:	1a5b      	subs	r3, r3, r1
 8004594:	4543      	cmp	r3, r8
 8004596:	dcf0      	bgt.n	800457a <_printf_float+0x40a>
 8004598:	e6f9      	b.n	800438e <_printf_float+0x21e>
 800459a:	f04f 0800 	mov.w	r8, #0
 800459e:	f104 0919 	add.w	r9, r4, #25
 80045a2:	e7f4      	b.n	800458e <_printf_float+0x41e>

080045a4 <_printf_common>:
 80045a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a8:	4616      	mov	r6, r2
 80045aa:	4699      	mov	r9, r3
 80045ac:	688a      	ldr	r2, [r1, #8]
 80045ae:	690b      	ldr	r3, [r1, #16]
 80045b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bfb8      	it	lt
 80045b8:	4613      	movlt	r3, r2
 80045ba:	6033      	str	r3, [r6, #0]
 80045bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045c0:	4607      	mov	r7, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	b10a      	cbz	r2, 80045ca <_printf_common+0x26>
 80045c6:	3301      	adds	r3, #1
 80045c8:	6033      	str	r3, [r6, #0]
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	0699      	lsls	r1, r3, #26
 80045ce:	bf42      	ittt	mi
 80045d0:	6833      	ldrmi	r3, [r6, #0]
 80045d2:	3302      	addmi	r3, #2
 80045d4:	6033      	strmi	r3, [r6, #0]
 80045d6:	6825      	ldr	r5, [r4, #0]
 80045d8:	f015 0506 	ands.w	r5, r5, #6
 80045dc:	d106      	bne.n	80045ec <_printf_common+0x48>
 80045de:	f104 0a19 	add.w	sl, r4, #25
 80045e2:	68e3      	ldr	r3, [r4, #12]
 80045e4:	6832      	ldr	r2, [r6, #0]
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	42ab      	cmp	r3, r5
 80045ea:	dc26      	bgt.n	800463a <_printf_common+0x96>
 80045ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045f0:	1e13      	subs	r3, r2, #0
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	bf18      	it	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	0692      	lsls	r2, r2, #26
 80045fa:	d42b      	bmi.n	8004654 <_printf_common+0xb0>
 80045fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	47c0      	blx	r8
 8004606:	3001      	adds	r0, #1
 8004608:	d01e      	beq.n	8004648 <_printf_common+0xa4>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	6922      	ldr	r2, [r4, #16]
 800460e:	f003 0306 	and.w	r3, r3, #6
 8004612:	2b04      	cmp	r3, #4
 8004614:	bf02      	ittt	eq
 8004616:	68e5      	ldreq	r5, [r4, #12]
 8004618:	6833      	ldreq	r3, [r6, #0]
 800461a:	1aed      	subeq	r5, r5, r3
 800461c:	68a3      	ldr	r3, [r4, #8]
 800461e:	bf0c      	ite	eq
 8004620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004624:	2500      	movne	r5, #0
 8004626:	4293      	cmp	r3, r2
 8004628:	bfc4      	itt	gt
 800462a:	1a9b      	subgt	r3, r3, r2
 800462c:	18ed      	addgt	r5, r5, r3
 800462e:	2600      	movs	r6, #0
 8004630:	341a      	adds	r4, #26
 8004632:	42b5      	cmp	r5, r6
 8004634:	d11a      	bne.n	800466c <_printf_common+0xc8>
 8004636:	2000      	movs	r0, #0
 8004638:	e008      	b.n	800464c <_printf_common+0xa8>
 800463a:	2301      	movs	r3, #1
 800463c:	4652      	mov	r2, sl
 800463e:	4649      	mov	r1, r9
 8004640:	4638      	mov	r0, r7
 8004642:	47c0      	blx	r8
 8004644:	3001      	adds	r0, #1
 8004646:	d103      	bne.n	8004650 <_printf_common+0xac>
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004650:	3501      	adds	r5, #1
 8004652:	e7c6      	b.n	80045e2 <_printf_common+0x3e>
 8004654:	18e1      	adds	r1, r4, r3
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	2030      	movs	r0, #48	; 0x30
 800465a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800465e:	4422      	add	r2, r4
 8004660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004668:	3302      	adds	r3, #2
 800466a:	e7c7      	b.n	80045fc <_printf_common+0x58>
 800466c:	2301      	movs	r3, #1
 800466e:	4622      	mov	r2, r4
 8004670:	4649      	mov	r1, r9
 8004672:	4638      	mov	r0, r7
 8004674:	47c0      	blx	r8
 8004676:	3001      	adds	r0, #1
 8004678:	d0e6      	beq.n	8004648 <_printf_common+0xa4>
 800467a:	3601      	adds	r6, #1
 800467c:	e7d9      	b.n	8004632 <_printf_common+0x8e>
	...

08004680 <_printf_i>:
 8004680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	7e0f      	ldrb	r7, [r1, #24]
 8004686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004688:	2f78      	cmp	r7, #120	; 0x78
 800468a:	4691      	mov	r9, r2
 800468c:	4680      	mov	r8, r0
 800468e:	460c      	mov	r4, r1
 8004690:	469a      	mov	sl, r3
 8004692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004696:	d807      	bhi.n	80046a8 <_printf_i+0x28>
 8004698:	2f62      	cmp	r7, #98	; 0x62
 800469a:	d80a      	bhi.n	80046b2 <_printf_i+0x32>
 800469c:	2f00      	cmp	r7, #0
 800469e:	f000 80d4 	beq.w	800484a <_printf_i+0x1ca>
 80046a2:	2f58      	cmp	r7, #88	; 0x58
 80046a4:	f000 80c0 	beq.w	8004828 <_printf_i+0x1a8>
 80046a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046b0:	e03a      	b.n	8004728 <_printf_i+0xa8>
 80046b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046b6:	2b15      	cmp	r3, #21
 80046b8:	d8f6      	bhi.n	80046a8 <_printf_i+0x28>
 80046ba:	a101      	add	r1, pc, #4	; (adr r1, 80046c0 <_printf_i+0x40>)
 80046bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046c0:	08004719 	.word	0x08004719
 80046c4:	0800472d 	.word	0x0800472d
 80046c8:	080046a9 	.word	0x080046a9
 80046cc:	080046a9 	.word	0x080046a9
 80046d0:	080046a9 	.word	0x080046a9
 80046d4:	080046a9 	.word	0x080046a9
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	080046a9 	.word	0x080046a9
 80046e0:	080046a9 	.word	0x080046a9
 80046e4:	080046a9 	.word	0x080046a9
 80046e8:	080046a9 	.word	0x080046a9
 80046ec:	08004831 	.word	0x08004831
 80046f0:	08004759 	.word	0x08004759
 80046f4:	080047eb 	.word	0x080047eb
 80046f8:	080046a9 	.word	0x080046a9
 80046fc:	080046a9 	.word	0x080046a9
 8004700:	08004853 	.word	0x08004853
 8004704:	080046a9 	.word	0x080046a9
 8004708:	08004759 	.word	0x08004759
 800470c:	080046a9 	.word	0x080046a9
 8004710:	080046a9 	.word	0x080046a9
 8004714:	080047f3 	.word	0x080047f3
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	1d1a      	adds	r2, r3, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	602a      	str	r2, [r5, #0]
 8004720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004728:	2301      	movs	r3, #1
 800472a:	e09f      	b.n	800486c <_printf_i+0x1ec>
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	682b      	ldr	r3, [r5, #0]
 8004730:	0607      	lsls	r7, r0, #24
 8004732:	f103 0104 	add.w	r1, r3, #4
 8004736:	6029      	str	r1, [r5, #0]
 8004738:	d501      	bpl.n	800473e <_printf_i+0xbe>
 800473a:	681e      	ldr	r6, [r3, #0]
 800473c:	e003      	b.n	8004746 <_printf_i+0xc6>
 800473e:	0646      	lsls	r6, r0, #25
 8004740:	d5fb      	bpl.n	800473a <_printf_i+0xba>
 8004742:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004746:	2e00      	cmp	r6, #0
 8004748:	da03      	bge.n	8004752 <_printf_i+0xd2>
 800474a:	232d      	movs	r3, #45	; 0x2d
 800474c:	4276      	negs	r6, r6
 800474e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004752:	485a      	ldr	r0, [pc, #360]	; (80048bc <_printf_i+0x23c>)
 8004754:	230a      	movs	r3, #10
 8004756:	e012      	b.n	800477e <_printf_i+0xfe>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	6820      	ldr	r0, [r4, #0]
 800475c:	1d19      	adds	r1, r3, #4
 800475e:	6029      	str	r1, [r5, #0]
 8004760:	0605      	lsls	r5, r0, #24
 8004762:	d501      	bpl.n	8004768 <_printf_i+0xe8>
 8004764:	681e      	ldr	r6, [r3, #0]
 8004766:	e002      	b.n	800476e <_printf_i+0xee>
 8004768:	0641      	lsls	r1, r0, #25
 800476a:	d5fb      	bpl.n	8004764 <_printf_i+0xe4>
 800476c:	881e      	ldrh	r6, [r3, #0]
 800476e:	4853      	ldr	r0, [pc, #332]	; (80048bc <_printf_i+0x23c>)
 8004770:	2f6f      	cmp	r7, #111	; 0x6f
 8004772:	bf0c      	ite	eq
 8004774:	2308      	moveq	r3, #8
 8004776:	230a      	movne	r3, #10
 8004778:	2100      	movs	r1, #0
 800477a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477e:	6865      	ldr	r5, [r4, #4]
 8004780:	60a5      	str	r5, [r4, #8]
 8004782:	2d00      	cmp	r5, #0
 8004784:	bfa2      	ittt	ge
 8004786:	6821      	ldrge	r1, [r4, #0]
 8004788:	f021 0104 	bicge.w	r1, r1, #4
 800478c:	6021      	strge	r1, [r4, #0]
 800478e:	b90e      	cbnz	r6, 8004794 <_printf_i+0x114>
 8004790:	2d00      	cmp	r5, #0
 8004792:	d04b      	beq.n	800482c <_printf_i+0x1ac>
 8004794:	4615      	mov	r5, r2
 8004796:	fbb6 f1f3 	udiv	r1, r6, r3
 800479a:	fb03 6711 	mls	r7, r3, r1, r6
 800479e:	5dc7      	ldrb	r7, [r0, r7]
 80047a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047a4:	4637      	mov	r7, r6
 80047a6:	42bb      	cmp	r3, r7
 80047a8:	460e      	mov	r6, r1
 80047aa:	d9f4      	bls.n	8004796 <_printf_i+0x116>
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d10b      	bne.n	80047c8 <_printf_i+0x148>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	07de      	lsls	r6, r3, #31
 80047b4:	d508      	bpl.n	80047c8 <_printf_i+0x148>
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	6861      	ldr	r1, [r4, #4]
 80047ba:	4299      	cmp	r1, r3
 80047bc:	bfde      	ittt	le
 80047be:	2330      	movle	r3, #48	; 0x30
 80047c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047c8:	1b52      	subs	r2, r2, r5
 80047ca:	6122      	str	r2, [r4, #16]
 80047cc:	f8cd a000 	str.w	sl, [sp]
 80047d0:	464b      	mov	r3, r9
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	4621      	mov	r1, r4
 80047d6:	4640      	mov	r0, r8
 80047d8:	f7ff fee4 	bl	80045a4 <_printf_common>
 80047dc:	3001      	adds	r0, #1
 80047de:	d14a      	bne.n	8004876 <_printf_i+0x1f6>
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	b004      	add	sp, #16
 80047e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	f043 0320 	orr.w	r3, r3, #32
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	4833      	ldr	r0, [pc, #204]	; (80048c0 <_printf_i+0x240>)
 80047f4:	2778      	movs	r7, #120	; 0x78
 80047f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	6829      	ldr	r1, [r5, #0]
 80047fe:	061f      	lsls	r7, r3, #24
 8004800:	f851 6b04 	ldr.w	r6, [r1], #4
 8004804:	d402      	bmi.n	800480c <_printf_i+0x18c>
 8004806:	065f      	lsls	r7, r3, #25
 8004808:	bf48      	it	mi
 800480a:	b2b6      	uxthmi	r6, r6
 800480c:	07df      	lsls	r7, r3, #31
 800480e:	bf48      	it	mi
 8004810:	f043 0320 	orrmi.w	r3, r3, #32
 8004814:	6029      	str	r1, [r5, #0]
 8004816:	bf48      	it	mi
 8004818:	6023      	strmi	r3, [r4, #0]
 800481a:	b91e      	cbnz	r6, 8004824 <_printf_i+0x1a4>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	f023 0320 	bic.w	r3, r3, #32
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	2310      	movs	r3, #16
 8004826:	e7a7      	b.n	8004778 <_printf_i+0xf8>
 8004828:	4824      	ldr	r0, [pc, #144]	; (80048bc <_printf_i+0x23c>)
 800482a:	e7e4      	b.n	80047f6 <_printf_i+0x176>
 800482c:	4615      	mov	r5, r2
 800482e:	e7bd      	b.n	80047ac <_printf_i+0x12c>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	6826      	ldr	r6, [r4, #0]
 8004834:	6961      	ldr	r1, [r4, #20]
 8004836:	1d18      	adds	r0, r3, #4
 8004838:	6028      	str	r0, [r5, #0]
 800483a:	0635      	lsls	r5, r6, #24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	d501      	bpl.n	8004844 <_printf_i+0x1c4>
 8004840:	6019      	str	r1, [r3, #0]
 8004842:	e002      	b.n	800484a <_printf_i+0x1ca>
 8004844:	0670      	lsls	r0, r6, #25
 8004846:	d5fb      	bpl.n	8004840 <_printf_i+0x1c0>
 8004848:	8019      	strh	r1, [r3, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	4615      	mov	r5, r2
 8004850:	e7bc      	b.n	80047cc <_printf_i+0x14c>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	1d1a      	adds	r2, r3, #4
 8004856:	602a      	str	r2, [r5, #0]
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	2100      	movs	r1, #0
 800485e:	4628      	mov	r0, r5
 8004860:	f7fb fcee 	bl	8000240 <memchr>
 8004864:	b108      	cbz	r0, 800486a <_printf_i+0x1ea>
 8004866:	1b40      	subs	r0, r0, r5
 8004868:	6060      	str	r0, [r4, #4]
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004874:	e7aa      	b.n	80047cc <_printf_i+0x14c>
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	462a      	mov	r2, r5
 800487a:	4649      	mov	r1, r9
 800487c:	4640      	mov	r0, r8
 800487e:	47d0      	blx	sl
 8004880:	3001      	adds	r0, #1
 8004882:	d0ad      	beq.n	80047e0 <_printf_i+0x160>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	079b      	lsls	r3, r3, #30
 8004888:	d413      	bmi.n	80048b2 <_printf_i+0x232>
 800488a:	68e0      	ldr	r0, [r4, #12]
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	4298      	cmp	r0, r3
 8004890:	bfb8      	it	lt
 8004892:	4618      	movlt	r0, r3
 8004894:	e7a6      	b.n	80047e4 <_printf_i+0x164>
 8004896:	2301      	movs	r3, #1
 8004898:	4632      	mov	r2, r6
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	47d0      	blx	sl
 80048a0:	3001      	adds	r0, #1
 80048a2:	d09d      	beq.n	80047e0 <_printf_i+0x160>
 80048a4:	3501      	adds	r5, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	9903      	ldr	r1, [sp, #12]
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	42ab      	cmp	r3, r5
 80048ae:	dcf2      	bgt.n	8004896 <_printf_i+0x216>
 80048b0:	e7eb      	b.n	800488a <_printf_i+0x20a>
 80048b2:	2500      	movs	r5, #0
 80048b4:	f104 0619 	add.w	r6, r4, #25
 80048b8:	e7f5      	b.n	80048a6 <_printf_i+0x226>
 80048ba:	bf00      	nop
 80048bc:	08006c56 	.word	0x08006c56
 80048c0:	08006c67 	.word	0x08006c67

080048c4 <std>:
 80048c4:	2300      	movs	r3, #0
 80048c6:	b510      	push	{r4, lr}
 80048c8:	4604      	mov	r4, r0
 80048ca:	e9c0 3300 	strd	r3, r3, [r0]
 80048ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048d2:	6083      	str	r3, [r0, #8]
 80048d4:	8181      	strh	r1, [r0, #12]
 80048d6:	6643      	str	r3, [r0, #100]	; 0x64
 80048d8:	81c2      	strh	r2, [r0, #14]
 80048da:	6183      	str	r3, [r0, #24]
 80048dc:	4619      	mov	r1, r3
 80048de:	2208      	movs	r2, #8
 80048e0:	305c      	adds	r0, #92	; 0x5c
 80048e2:	f000 f914 	bl	8004b0e <memset>
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <std+0x58>)
 80048e8:	6263      	str	r3, [r4, #36]	; 0x24
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <std+0x5c>)
 80048ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <std+0x60>)
 80048f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <std+0x64>)
 80048f4:	6323      	str	r3, [r4, #48]	; 0x30
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <std+0x68>)
 80048f8:	6224      	str	r4, [r4, #32]
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d006      	beq.n	800490c <std+0x48>
 80048fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004902:	4294      	cmp	r4, r2
 8004904:	d002      	beq.n	800490c <std+0x48>
 8004906:	33d0      	adds	r3, #208	; 0xd0
 8004908:	429c      	cmp	r4, r3
 800490a:	d105      	bne.n	8004918 <std+0x54>
 800490c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004914:	f000 b978 	b.w	8004c08 <__retarget_lock_init_recursive>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	bf00      	nop
 800491c:	08004a89 	.word	0x08004a89
 8004920:	08004aab 	.word	0x08004aab
 8004924:	08004ae3 	.word	0x08004ae3
 8004928:	08004b07 	.word	0x08004b07
 800492c:	2000039c 	.word	0x2000039c

08004930 <stdio_exit_handler>:
 8004930:	4a02      	ldr	r2, [pc, #8]	; (800493c <stdio_exit_handler+0xc>)
 8004932:	4903      	ldr	r1, [pc, #12]	; (8004940 <stdio_exit_handler+0x10>)
 8004934:	4803      	ldr	r0, [pc, #12]	; (8004944 <stdio_exit_handler+0x14>)
 8004936:	f000 b869 	b.w	8004a0c <_fwalk_sglue>
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c
 8004940:	080064ad 	.word	0x080064ad
 8004944:	20000018 	.word	0x20000018

08004948 <cleanup_stdio>:
 8004948:	6841      	ldr	r1, [r0, #4]
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <cleanup_stdio+0x34>)
 800494c:	4299      	cmp	r1, r3
 800494e:	b510      	push	{r4, lr}
 8004950:	4604      	mov	r4, r0
 8004952:	d001      	beq.n	8004958 <cleanup_stdio+0x10>
 8004954:	f001 fdaa 	bl	80064ac <_fflush_r>
 8004958:	68a1      	ldr	r1, [r4, #8]
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <cleanup_stdio+0x38>)
 800495c:	4299      	cmp	r1, r3
 800495e:	d002      	beq.n	8004966 <cleanup_stdio+0x1e>
 8004960:	4620      	mov	r0, r4
 8004962:	f001 fda3 	bl	80064ac <_fflush_r>
 8004966:	68e1      	ldr	r1, [r4, #12]
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <cleanup_stdio+0x3c>)
 800496a:	4299      	cmp	r1, r3
 800496c:	d004      	beq.n	8004978 <cleanup_stdio+0x30>
 800496e:	4620      	mov	r0, r4
 8004970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004974:	f001 bd9a 	b.w	80064ac <_fflush_r>
 8004978:	bd10      	pop	{r4, pc}
 800497a:	bf00      	nop
 800497c:	2000039c 	.word	0x2000039c
 8004980:	20000404 	.word	0x20000404
 8004984:	2000046c 	.word	0x2000046c

08004988 <global_stdio_init.part.0>:
 8004988:	b510      	push	{r4, lr}
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <global_stdio_init.part.0+0x30>)
 800498c:	4c0b      	ldr	r4, [pc, #44]	; (80049bc <global_stdio_init.part.0+0x34>)
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <global_stdio_init.part.0+0x38>)
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	4620      	mov	r0, r4
 8004994:	2200      	movs	r2, #0
 8004996:	2104      	movs	r1, #4
 8004998:	f7ff ff94 	bl	80048c4 <std>
 800499c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80049a0:	2201      	movs	r2, #1
 80049a2:	2109      	movs	r1, #9
 80049a4:	f7ff ff8e 	bl	80048c4 <std>
 80049a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80049ac:	2202      	movs	r2, #2
 80049ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b2:	2112      	movs	r1, #18
 80049b4:	f7ff bf86 	b.w	80048c4 <std>
 80049b8:	200004d4 	.word	0x200004d4
 80049bc:	2000039c 	.word	0x2000039c
 80049c0:	08004931 	.word	0x08004931

080049c4 <__sfp_lock_acquire>:
 80049c4:	4801      	ldr	r0, [pc, #4]	; (80049cc <__sfp_lock_acquire+0x8>)
 80049c6:	f000 b920 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 80049ca:	bf00      	nop
 80049cc:	200004dd 	.word	0x200004dd

080049d0 <__sfp_lock_release>:
 80049d0:	4801      	ldr	r0, [pc, #4]	; (80049d8 <__sfp_lock_release+0x8>)
 80049d2:	f000 b91b 	b.w	8004c0c <__retarget_lock_release_recursive>
 80049d6:	bf00      	nop
 80049d8:	200004dd 	.word	0x200004dd

080049dc <__sinit>:
 80049dc:	b510      	push	{r4, lr}
 80049de:	4604      	mov	r4, r0
 80049e0:	f7ff fff0 	bl	80049c4 <__sfp_lock_acquire>
 80049e4:	6a23      	ldr	r3, [r4, #32]
 80049e6:	b11b      	cbz	r3, 80049f0 <__sinit+0x14>
 80049e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ec:	f7ff bff0 	b.w	80049d0 <__sfp_lock_release>
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <__sinit+0x28>)
 80049f2:	6223      	str	r3, [r4, #32]
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <__sinit+0x2c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f5      	bne.n	80049e8 <__sinit+0xc>
 80049fc:	f7ff ffc4 	bl	8004988 <global_stdio_init.part.0>
 8004a00:	e7f2      	b.n	80049e8 <__sinit+0xc>
 8004a02:	bf00      	nop
 8004a04:	08004949 	.word	0x08004949
 8004a08:	200004d4 	.word	0x200004d4

08004a0c <_fwalk_sglue>:
 8004a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a10:	4607      	mov	r7, r0
 8004a12:	4688      	mov	r8, r1
 8004a14:	4614      	mov	r4, r2
 8004a16:	2600      	movs	r6, #0
 8004a18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a1c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a20:	d505      	bpl.n	8004a2e <_fwalk_sglue+0x22>
 8004a22:	6824      	ldr	r4, [r4, #0]
 8004a24:	2c00      	cmp	r4, #0
 8004a26:	d1f7      	bne.n	8004a18 <_fwalk_sglue+0xc>
 8004a28:	4630      	mov	r0, r6
 8004a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2e:	89ab      	ldrh	r3, [r5, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d907      	bls.n	8004a44 <_fwalk_sglue+0x38>
 8004a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	d003      	beq.n	8004a44 <_fwalk_sglue+0x38>
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	4638      	mov	r0, r7
 8004a40:	47c0      	blx	r8
 8004a42:	4306      	orrs	r6, r0
 8004a44:	3568      	adds	r5, #104	; 0x68
 8004a46:	e7e9      	b.n	8004a1c <_fwalk_sglue+0x10>

08004a48 <siprintf>:
 8004a48:	b40e      	push	{r1, r2, r3}
 8004a4a:	b500      	push	{lr}
 8004a4c:	b09c      	sub	sp, #112	; 0x70
 8004a4e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a50:	9002      	str	r0, [sp, #8]
 8004a52:	9006      	str	r0, [sp, #24]
 8004a54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a58:	4809      	ldr	r0, [pc, #36]	; (8004a80 <siprintf+0x38>)
 8004a5a:	9107      	str	r1, [sp, #28]
 8004a5c:	9104      	str	r1, [sp, #16]
 8004a5e:	4909      	ldr	r1, [pc, #36]	; (8004a84 <siprintf+0x3c>)
 8004a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a64:	9105      	str	r1, [sp, #20]
 8004a66:	6800      	ldr	r0, [r0, #0]
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	a902      	add	r1, sp, #8
 8004a6c:	f001 fb9a 	bl	80061a4 <_svfiprintf_r>
 8004a70:	9b02      	ldr	r3, [sp, #8]
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	b01c      	add	sp, #112	; 0x70
 8004a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a7c:	b003      	add	sp, #12
 8004a7e:	4770      	bx	lr
 8004a80:	20000064 	.word	0x20000064
 8004a84:	ffff0208 	.word	0xffff0208

08004a88 <__sread>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a90:	f000 f86c 	bl	8004b6c <_read_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	bfab      	itete	ge
 8004a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a9c:	181b      	addge	r3, r3, r0
 8004a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aa2:	bfac      	ite	ge
 8004aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004aa6:	81a3      	strhlt	r3, [r4, #12]
 8004aa8:	bd10      	pop	{r4, pc}

08004aaa <__swrite>:
 8004aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aae:	461f      	mov	r7, r3
 8004ab0:	898b      	ldrh	r3, [r1, #12]
 8004ab2:	05db      	lsls	r3, r3, #23
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	4616      	mov	r6, r2
 8004aba:	d505      	bpl.n	8004ac8 <__swrite+0x1e>
 8004abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f000 f840 	bl	8004b48 <_lseek_r>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	4628      	mov	r0, r5
 8004ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	f000 b857 	b.w	8004b90 <_write_r>

08004ae2 <__sseek>:
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aea:	f000 f82d 	bl	8004b48 <_lseek_r>
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	bf15      	itete	ne
 8004af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004afe:	81a3      	strheq	r3, [r4, #12]
 8004b00:	bf18      	it	ne
 8004b02:	81a3      	strhne	r3, [r4, #12]
 8004b04:	bd10      	pop	{r4, pc}

08004b06 <__sclose>:
 8004b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0a:	f000 b80d 	b.w	8004b28 <_close_r>

08004b0e <memset>:
 8004b0e:	4402      	add	r2, r0
 8004b10:	4603      	mov	r3, r0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d100      	bne.n	8004b18 <memset+0xa>
 8004b16:	4770      	bx	lr
 8004b18:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1c:	e7f9      	b.n	8004b12 <memset+0x4>
	...

08004b20 <_localeconv_r>:
 8004b20:	4800      	ldr	r0, [pc, #0]	; (8004b24 <_localeconv_r+0x4>)
 8004b22:	4770      	bx	lr
 8004b24:	20000158 	.word	0x20000158

08004b28 <_close_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d06      	ldr	r5, [pc, #24]	; (8004b44 <_close_r+0x1c>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	f7fc fa19 	bl	8000f6a <_close>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_close_r+0x1a>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_close_r+0x1a>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	200004d8 	.word	0x200004d8

08004b48 <_lseek_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d07      	ldr	r5, [pc, #28]	; (8004b68 <_lseek_r+0x20>)
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fc fa2e 	bl	8000fb8 <_lseek>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_lseek_r+0x1e>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_lseek_r+0x1e>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	200004d8 	.word	0x200004d8

08004b6c <_read_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d07      	ldr	r5, [pc, #28]	; (8004b8c <_read_r+0x20>)
 8004b70:	4604      	mov	r4, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fc f9bc 	bl	8000ef8 <_read>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_read_r+0x1e>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_read_r+0x1e>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	200004d8 	.word	0x200004d8

08004b90 <_write_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d07      	ldr	r5, [pc, #28]	; (8004bb0 <_write_r+0x20>)
 8004b94:	4604      	mov	r4, r0
 8004b96:	4608      	mov	r0, r1
 8004b98:	4611      	mov	r1, r2
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	602a      	str	r2, [r5, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7fc f9c7 	bl	8000f32 <_write>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_write_r+0x1e>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_write_r+0x1e>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	200004d8 	.word	0x200004d8

08004bb4 <__errno>:
 8004bb4:	4b01      	ldr	r3, [pc, #4]	; (8004bbc <__errno+0x8>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000064 	.word	0x20000064

08004bc0 <__libc_init_array>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4d0d      	ldr	r5, [pc, #52]	; (8004bf8 <__libc_init_array+0x38>)
 8004bc4:	4c0d      	ldr	r4, [pc, #52]	; (8004bfc <__libc_init_array+0x3c>)
 8004bc6:	1b64      	subs	r4, r4, r5
 8004bc8:	10a4      	asrs	r4, r4, #2
 8004bca:	2600      	movs	r6, #0
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	d109      	bne.n	8004be4 <__libc_init_array+0x24>
 8004bd0:	4d0b      	ldr	r5, [pc, #44]	; (8004c00 <__libc_init_array+0x40>)
 8004bd2:	4c0c      	ldr	r4, [pc, #48]	; (8004c04 <__libc_init_array+0x44>)
 8004bd4:	f002 f80e 	bl	8006bf4 <_init>
 8004bd8:	1b64      	subs	r4, r4, r5
 8004bda:	10a4      	asrs	r4, r4, #2
 8004bdc:	2600      	movs	r6, #0
 8004bde:	42a6      	cmp	r6, r4
 8004be0:	d105      	bne.n	8004bee <__libc_init_array+0x2e>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be8:	4798      	blx	r3
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7ee      	b.n	8004bcc <__libc_init_array+0xc>
 8004bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf2:	4798      	blx	r3
 8004bf4:	3601      	adds	r6, #1
 8004bf6:	e7f2      	b.n	8004bde <__libc_init_array+0x1e>
 8004bf8:	08006fbc 	.word	0x08006fbc
 8004bfc:	08006fbc 	.word	0x08006fbc
 8004c00:	08006fbc 	.word	0x08006fbc
 8004c04:	08006fc0 	.word	0x08006fc0

08004c08 <__retarget_lock_init_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_acquire_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__retarget_lock_release_recursive>:
 8004c0c:	4770      	bx	lr

08004c0e <quorem>:
 8004c0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c12:	6903      	ldr	r3, [r0, #16]
 8004c14:	690c      	ldr	r4, [r1, #16]
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	4607      	mov	r7, r0
 8004c1a:	db7e      	blt.n	8004d1a <quorem+0x10c>
 8004c1c:	3c01      	subs	r4, #1
 8004c1e:	f101 0814 	add.w	r8, r1, #20
 8004c22:	f100 0514 	add.w	r5, r0, #20
 8004c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c34:	3301      	adds	r3, #1
 8004c36:	429a      	cmp	r2, r3
 8004c38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c40:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c44:	d331      	bcc.n	8004caa <quorem+0x9c>
 8004c46:	f04f 0e00 	mov.w	lr, #0
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	46ac      	mov	ip, r5
 8004c4e:	46f2      	mov	sl, lr
 8004c50:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c54:	b293      	uxth	r3, r2
 8004c56:	fb06 e303 	mla	r3, r6, r3, lr
 8004c5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c5e:	0c1a      	lsrs	r2, r3, #16
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	ebaa 0303 	sub.w	r3, sl, r3
 8004c66:	f8dc a000 	ldr.w	sl, [ip]
 8004c6a:	fa13 f38a 	uxtah	r3, r3, sl
 8004c6e:	fb06 220e 	mla	r2, r6, lr, r2
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	9b00      	ldr	r3, [sp, #0]
 8004c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c84:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c88:	4581      	cmp	r9, r0
 8004c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c8e:	f84c 3b04 	str.w	r3, [ip], #4
 8004c92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c96:	d2db      	bcs.n	8004c50 <quorem+0x42>
 8004c98:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c9c:	b92b      	cbnz	r3, 8004caa <quorem+0x9c>
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	429d      	cmp	r5, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	d32c      	bcc.n	8004d02 <quorem+0xf4>
 8004ca8:	613c      	str	r4, [r7, #16]
 8004caa:	4638      	mov	r0, r7
 8004cac:	f001 f920 	bl	8005ef0 <__mcmp>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	db22      	blt.n	8004cfa <quorem+0xec>
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f858 2b04 	ldr.w	r2, [r8], #4
 8004cbe:	f8d1 c000 	ldr.w	ip, [r1]
 8004cc2:	b293      	uxth	r3, r2
 8004cc4:	1ac3      	subs	r3, r0, r3
 8004cc6:	0c12      	lsrs	r2, r2, #16
 8004cc8:	fa13 f38c 	uxtah	r3, r3, ip
 8004ccc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004cd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cda:	45c1      	cmp	r9, r8
 8004cdc:	f841 3b04 	str.w	r3, [r1], #4
 8004ce0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ce4:	d2e9      	bcs.n	8004cba <quorem+0xac>
 8004ce6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cee:	b922      	cbnz	r2, 8004cfa <quorem+0xec>
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	429d      	cmp	r5, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	d30a      	bcc.n	8004d0e <quorem+0x100>
 8004cf8:	613c      	str	r4, [r7, #16]
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	b003      	add	sp, #12
 8004cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	3b04      	subs	r3, #4
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	d1ce      	bne.n	8004ca8 <quorem+0x9a>
 8004d0a:	3c01      	subs	r4, #1
 8004d0c:	e7c9      	b.n	8004ca2 <quorem+0x94>
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	3b04      	subs	r3, #4
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	d1f0      	bne.n	8004cf8 <quorem+0xea>
 8004d16:	3c01      	subs	r4, #1
 8004d18:	e7eb      	b.n	8004cf2 <quorem+0xe4>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e7ee      	b.n	8004cfc <quorem+0xee>
	...

08004d20 <_dtoa_r>:
 8004d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	ed2d 8b02 	vpush	{d8}
 8004d28:	69c5      	ldr	r5, [r0, #28]
 8004d2a:	b091      	sub	sp, #68	; 0x44
 8004d2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d30:	ec59 8b10 	vmov	r8, r9, d0
 8004d34:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004d36:	9106      	str	r1, [sp, #24]
 8004d38:	4606      	mov	r6, r0
 8004d3a:	9208      	str	r2, [sp, #32]
 8004d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d3e:	b975      	cbnz	r5, 8004d5e <_dtoa_r+0x3e>
 8004d40:	2010      	movs	r0, #16
 8004d42:	f000 fda5 	bl	8005890 <malloc>
 8004d46:	4602      	mov	r2, r0
 8004d48:	61f0      	str	r0, [r6, #28]
 8004d4a:	b920      	cbnz	r0, 8004d56 <_dtoa_r+0x36>
 8004d4c:	4ba6      	ldr	r3, [pc, #664]	; (8004fe8 <_dtoa_r+0x2c8>)
 8004d4e:	21ef      	movs	r1, #239	; 0xef
 8004d50:	48a6      	ldr	r0, [pc, #664]	; (8004fec <_dtoa_r+0x2cc>)
 8004d52:	f001 fc0b 	bl	800656c <__assert_func>
 8004d56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d5a:	6005      	str	r5, [r0, #0]
 8004d5c:	60c5      	str	r5, [r0, #12]
 8004d5e:	69f3      	ldr	r3, [r6, #28]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	b151      	cbz	r1, 8004d7a <_dtoa_r+0x5a>
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	604a      	str	r2, [r1, #4]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4093      	lsls	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 fe82 	bl	8005a78 <_Bfree>
 8004d74:	69f3      	ldr	r3, [r6, #28]
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	f1b9 0300 	subs.w	r3, r9, #0
 8004d7e:	bfbb      	ittet	lt
 8004d80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d84:	9303      	strlt	r3, [sp, #12]
 8004d86:	2300      	movge	r3, #0
 8004d88:	2201      	movlt	r2, #1
 8004d8a:	bfac      	ite	ge
 8004d8c:	6023      	strge	r3, [r4, #0]
 8004d8e:	6022      	strlt	r2, [r4, #0]
 8004d90:	4b97      	ldr	r3, [pc, #604]	; (8004ff0 <_dtoa_r+0x2d0>)
 8004d92:	9c03      	ldr	r4, [sp, #12]
 8004d94:	43a3      	bics	r3, r4
 8004d96:	d11c      	bne.n	8004dd2 <_dtoa_r+0xb2>
 8004d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004da4:	ea53 0308 	orrs.w	r3, r3, r8
 8004da8:	f000 84fb 	beq.w	80057a2 <_dtoa_r+0xa82>
 8004dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dae:	b963      	cbnz	r3, 8004dca <_dtoa_r+0xaa>
 8004db0:	4b90      	ldr	r3, [pc, #576]	; (8004ff4 <_dtoa_r+0x2d4>)
 8004db2:	e020      	b.n	8004df6 <_dtoa_r+0xd6>
 8004db4:	4b90      	ldr	r3, [pc, #576]	; (8004ff8 <_dtoa_r+0x2d8>)
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	3308      	adds	r3, #8
 8004dba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	9801      	ldr	r0, [sp, #4]
 8004dc0:	b011      	add	sp, #68	; 0x44
 8004dc2:	ecbd 8b02 	vpop	{d8}
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	4b8a      	ldr	r3, [pc, #552]	; (8004ff4 <_dtoa_r+0x2d4>)
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	3303      	adds	r3, #3
 8004dd0:	e7f3      	b.n	8004dba <_dtoa_r+0x9a>
 8004dd2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004dd6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d10c      	bne.n	8004dfa <_dtoa_r+0xda>
 8004de0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004de2:	2301      	movs	r3, #1
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 84d7 	beq.w	800579c <_dtoa_r+0xa7c>
 8004dee:	4b83      	ldr	r3, [pc, #524]	; (8004ffc <_dtoa_r+0x2dc>)
 8004df0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	e7e1      	b.n	8004dbe <_dtoa_r+0x9e>
 8004dfa:	aa0e      	add	r2, sp, #56	; 0x38
 8004dfc:	a90f      	add	r1, sp, #60	; 0x3c
 8004dfe:	4630      	mov	r0, r6
 8004e00:	eeb0 0b48 	vmov.f64	d0, d8
 8004e04:	f001 f91a 	bl	800603c <__d2b>
 8004e08:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8004e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e0e:	4605      	mov	r5, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d046      	beq.n	8004ea2 <_dtoa_r+0x182>
 8004e14:	eeb0 7b48 	vmov.f64	d7, d8
 8004e18:	ee18 1a90 	vmov	r1, s17
 8004e1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004e20:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8004e24:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	ee07 1a90 	vmov	s15, r1
 8004e32:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004e36:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004fd0 <_dtoa_r+0x2b0>
 8004e3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e3e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004fd8 <_dtoa_r+0x2b8>
 8004e42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004e46:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004fe0 <_dtoa_r+0x2c0>
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004e52:	eeb0 7b46 	vmov.f64	d7, d6
 8004e56:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004e5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004e5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e66:	ee16 ba90 	vmov	fp, s13
 8004e6a:	9009      	str	r0, [sp, #36]	; 0x24
 8004e6c:	d508      	bpl.n	8004e80 <_dtoa_r+0x160>
 8004e6e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004e72:	eeb4 6b47 	vcmp.f64	d6, d7
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	bf18      	it	ne
 8004e7c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004e80:	f1bb 0f16 	cmp.w	fp, #22
 8004e84:	d82b      	bhi.n	8004ede <_dtoa_r+0x1be>
 8004e86:	495e      	ldr	r1, [pc, #376]	; (8005000 <_dtoa_r+0x2e0>)
 8004e88:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004e8c:	ed91 7b00 	vldr	d7, [r1]
 8004e90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e98:	d501      	bpl.n	8004e9e <_dtoa_r+0x17e>
 8004e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	e01e      	b.n	8004ee0 <_dtoa_r+0x1c0>
 8004ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8004eaa:	2920      	cmp	r1, #32
 8004eac:	bfc1      	itttt	gt
 8004eae:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8004eb2:	408c      	lslgt	r4, r1
 8004eb4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8004eb8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8004ebc:	bfd6      	itet	le
 8004ebe:	f1c1 0120 	rsble	r1, r1, #32
 8004ec2:	4321      	orrgt	r1, r4
 8004ec4:	fa08 f101 	lslle.w	r1, r8, r1
 8004ec8:	ee07 1a90 	vmov	s15, r1
 8004ecc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	ee17 1a90 	vmov	r1, s15
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004edc:	e7a7      	b.n	8004e2e <_dtoa_r+0x10e>
 8004ede:	2101      	movs	r1, #1
 8004ee0:	1ad2      	subs	r2, r2, r3
 8004ee2:	1e53      	subs	r3, r2, #1
 8004ee4:	9305      	str	r3, [sp, #20]
 8004ee6:	bf45      	ittet	mi
 8004ee8:	f1c2 0301 	rsbmi	r3, r2, #1
 8004eec:	9304      	strmi	r3, [sp, #16]
 8004eee:	2300      	movpl	r3, #0
 8004ef0:	2300      	movmi	r3, #0
 8004ef2:	bf4c      	ite	mi
 8004ef4:	9305      	strmi	r3, [sp, #20]
 8004ef6:	9304      	strpl	r3, [sp, #16]
 8004ef8:	f1bb 0f00 	cmp.w	fp, #0
 8004efc:	910b      	str	r1, [sp, #44]	; 0x2c
 8004efe:	db18      	blt.n	8004f32 <_dtoa_r+0x212>
 8004f00:	9b05      	ldr	r3, [sp, #20]
 8004f02:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004f06:	445b      	add	r3, fp
 8004f08:	9305      	str	r3, [sp, #20]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9a06      	ldr	r2, [sp, #24]
 8004f0e:	2a09      	cmp	r2, #9
 8004f10:	d848      	bhi.n	8004fa4 <_dtoa_r+0x284>
 8004f12:	2a05      	cmp	r2, #5
 8004f14:	bfc4      	itt	gt
 8004f16:	3a04      	subgt	r2, #4
 8004f18:	9206      	strgt	r2, [sp, #24]
 8004f1a:	9a06      	ldr	r2, [sp, #24]
 8004f1c:	f1a2 0202 	sub.w	r2, r2, #2
 8004f20:	bfcc      	ite	gt
 8004f22:	2400      	movgt	r4, #0
 8004f24:	2401      	movle	r4, #1
 8004f26:	2a03      	cmp	r2, #3
 8004f28:	d847      	bhi.n	8004fba <_dtoa_r+0x29a>
 8004f2a:	e8df f002 	tbb	[pc, r2]
 8004f2e:	2d0b      	.short	0x2d0b
 8004f30:	392b      	.short	0x392b
 8004f32:	9b04      	ldr	r3, [sp, #16]
 8004f34:	2200      	movs	r2, #0
 8004f36:	eba3 030b 	sub.w	r3, r3, fp
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8004f3e:	f1cb 0300 	rsb	r3, fp, #0
 8004f42:	e7e3      	b.n	8004f0c <_dtoa_r+0x1ec>
 8004f44:	2200      	movs	r2, #0
 8004f46:	9207      	str	r2, [sp, #28]
 8004f48:	9a08      	ldr	r2, [sp, #32]
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	dc38      	bgt.n	8004fc0 <_dtoa_r+0x2a0>
 8004f4e:	f04f 0a01 	mov.w	sl, #1
 8004f52:	46d1      	mov	r9, sl
 8004f54:	4652      	mov	r2, sl
 8004f56:	f8cd a020 	str.w	sl, [sp, #32]
 8004f5a:	69f7      	ldr	r7, [r6, #28]
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2004      	movs	r0, #4
 8004f60:	f100 0c14 	add.w	ip, r0, #20
 8004f64:	4594      	cmp	ip, r2
 8004f66:	d930      	bls.n	8004fca <_dtoa_r+0x2aa>
 8004f68:	6079      	str	r1, [r7, #4]
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8004f6e:	f000 fd43 	bl	80059f8 <_Balloc>
 8004f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f74:	9001      	str	r0, [sp, #4]
 8004f76:	4602      	mov	r2, r0
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d145      	bne.n	8005008 <_dtoa_r+0x2e8>
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <_dtoa_r+0x2e4>)
 8004f7e:	f240 11af 	movw	r1, #431	; 0x1af
 8004f82:	e6e5      	b.n	8004d50 <_dtoa_r+0x30>
 8004f84:	2201      	movs	r2, #1
 8004f86:	e7de      	b.n	8004f46 <_dtoa_r+0x226>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	9207      	str	r2, [sp, #28]
 8004f8c:	9a08      	ldr	r2, [sp, #32]
 8004f8e:	eb0b 0a02 	add.w	sl, fp, r2
 8004f92:	f10a 0901 	add.w	r9, sl, #1
 8004f96:	464a      	mov	r2, r9
 8004f98:	2a01      	cmp	r2, #1
 8004f9a:	bfb8      	it	lt
 8004f9c:	2201      	movlt	r2, #1
 8004f9e:	e7dc      	b.n	8004f5a <_dtoa_r+0x23a>
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	e7f2      	b.n	8004f8a <_dtoa_r+0x26a>
 8004fa4:	2401      	movs	r4, #1
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8004fac:	f04f 3aff 	mov.w	sl, #4294967295
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	46d1      	mov	r9, sl
 8004fb4:	2212      	movs	r2, #18
 8004fb6:	9108      	str	r1, [sp, #32]
 8004fb8:	e7cf      	b.n	8004f5a <_dtoa_r+0x23a>
 8004fba:	2201      	movs	r2, #1
 8004fbc:	9207      	str	r2, [sp, #28]
 8004fbe:	e7f5      	b.n	8004fac <_dtoa_r+0x28c>
 8004fc0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004fc4:	46d1      	mov	r9, sl
 8004fc6:	4652      	mov	r2, sl
 8004fc8:	e7c7      	b.n	8004f5a <_dtoa_r+0x23a>
 8004fca:	3101      	adds	r1, #1
 8004fcc:	0040      	lsls	r0, r0, #1
 8004fce:	e7c7      	b.n	8004f60 <_dtoa_r+0x240>
 8004fd0:	636f4361 	.word	0x636f4361
 8004fd4:	3fd287a7 	.word	0x3fd287a7
 8004fd8:	8b60c8b3 	.word	0x8b60c8b3
 8004fdc:	3fc68a28 	.word	0x3fc68a28
 8004fe0:	509f79fb 	.word	0x509f79fb
 8004fe4:	3fd34413 	.word	0x3fd34413
 8004fe8:	08006c85 	.word	0x08006c85
 8004fec:	08006c9c 	.word	0x08006c9c
 8004ff0:	7ff00000 	.word	0x7ff00000
 8004ff4:	08006c81 	.word	0x08006c81
 8004ff8:	08006c78 	.word	0x08006c78
 8004ffc:	08006c55 	.word	0x08006c55
 8005000:	08006d88 	.word	0x08006d88
 8005004:	08006cf4 	.word	0x08006cf4
 8005008:	69f2      	ldr	r2, [r6, #28]
 800500a:	9901      	ldr	r1, [sp, #4]
 800500c:	6011      	str	r1, [r2, #0]
 800500e:	f1b9 0f0e 	cmp.w	r9, #14
 8005012:	d86c      	bhi.n	80050ee <_dtoa_r+0x3ce>
 8005014:	2c00      	cmp	r4, #0
 8005016:	d06a      	beq.n	80050ee <_dtoa_r+0x3ce>
 8005018:	f1bb 0f00 	cmp.w	fp, #0
 800501c:	f340 80a0 	ble.w	8005160 <_dtoa_r+0x440>
 8005020:	4ac1      	ldr	r2, [pc, #772]	; (8005328 <_dtoa_r+0x608>)
 8005022:	f00b 010f 	and.w	r1, fp, #15
 8005026:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800502a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800502e:	ed92 7b00 	vldr	d7, [r2]
 8005032:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005036:	f000 8087 	beq.w	8005148 <_dtoa_r+0x428>
 800503a:	49bc      	ldr	r1, [pc, #752]	; (800532c <_dtoa_r+0x60c>)
 800503c:	ed91 6b08 	vldr	d6, [r1, #32]
 8005040:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005044:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005048:	f002 020f 	and.w	r2, r2, #15
 800504c:	2103      	movs	r1, #3
 800504e:	48b7      	ldr	r0, [pc, #732]	; (800532c <_dtoa_r+0x60c>)
 8005050:	2a00      	cmp	r2, #0
 8005052:	d17b      	bne.n	800514c <_dtoa_r+0x42c>
 8005054:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005058:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800505c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005062:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005066:	2a00      	cmp	r2, #0
 8005068:	f000 80a0 	beq.w	80051ac <_dtoa_r+0x48c>
 800506c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005070:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005078:	f140 8098 	bpl.w	80051ac <_dtoa_r+0x48c>
 800507c:	f1b9 0f00 	cmp.w	r9, #0
 8005080:	f000 8094 	beq.w	80051ac <_dtoa_r+0x48c>
 8005084:	f1ba 0f00 	cmp.w	sl, #0
 8005088:	dd2f      	ble.n	80050ea <_dtoa_r+0x3ca>
 800508a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800508e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005092:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005096:	f10b 32ff 	add.w	r2, fp, #4294967295
 800509a:	3101      	adds	r1, #1
 800509c:	4654      	mov	r4, sl
 800509e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80050a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80050a6:	ee07 1a90 	vmov	s15, r1
 80050aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80050ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80050b2:	ee15 7a90 	vmov	r7, s11
 80050b6:	ec51 0b15 	vmov	r0, r1, d5
 80050ba:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80050be:	2c00      	cmp	r4, #0
 80050c0:	d177      	bne.n	80051b2 <_dtoa_r+0x492>
 80050c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80050c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80050ca:	ec41 0b17 	vmov	d7, r0, r1
 80050ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d6:	f300 826a 	bgt.w	80055ae <_dtoa_r+0x88e>
 80050da:	eeb1 7b47 	vneg.f64	d7, d7
 80050de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	f100 8260 	bmi.w	80055aa <_dtoa_r+0x88a>
 80050ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80050ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	f2c0 811d 	blt.w	8005330 <_dtoa_r+0x610>
 80050f6:	f1bb 0f0e 	cmp.w	fp, #14
 80050fa:	f300 8119 	bgt.w	8005330 <_dtoa_r+0x610>
 80050fe:	4b8a      	ldr	r3, [pc, #552]	; (8005328 <_dtoa_r+0x608>)
 8005100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005104:	ed93 6b00 	vldr	d6, [r3]
 8005108:	9b08      	ldr	r3, [sp, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f280 80b7 	bge.w	800527e <_dtoa_r+0x55e>
 8005110:	f1b9 0f00 	cmp.w	r9, #0
 8005114:	f300 80b3 	bgt.w	800527e <_dtoa_r+0x55e>
 8005118:	f040 8246 	bne.w	80055a8 <_dtoa_r+0x888>
 800511c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005120:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005124:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005128:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800512c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005130:	464c      	mov	r4, r9
 8005132:	464f      	mov	r7, r9
 8005134:	f280 821c 	bge.w	8005570 <_dtoa_r+0x850>
 8005138:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800513c:	2331      	movs	r3, #49	; 0x31
 800513e:	f808 3b01 	strb.w	r3, [r8], #1
 8005142:	f10b 0b01 	add.w	fp, fp, #1
 8005146:	e218      	b.n	800557a <_dtoa_r+0x85a>
 8005148:	2102      	movs	r1, #2
 800514a:	e780      	b.n	800504e <_dtoa_r+0x32e>
 800514c:	07d4      	lsls	r4, r2, #31
 800514e:	d504      	bpl.n	800515a <_dtoa_r+0x43a>
 8005150:	ed90 6b00 	vldr	d6, [r0]
 8005154:	3101      	adds	r1, #1
 8005156:	ee27 7b06 	vmul.f64	d7, d7, d6
 800515a:	1052      	asrs	r2, r2, #1
 800515c:	3008      	adds	r0, #8
 800515e:	e777      	b.n	8005050 <_dtoa_r+0x330>
 8005160:	d022      	beq.n	80051a8 <_dtoa_r+0x488>
 8005162:	f1cb 0200 	rsb	r2, fp, #0
 8005166:	4970      	ldr	r1, [pc, #448]	; (8005328 <_dtoa_r+0x608>)
 8005168:	f002 000f 	and.w	r0, r2, #15
 800516c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005170:	ed91 7b00 	vldr	d7, [r1]
 8005174:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005178:	ed8d 7b02 	vstr	d7, [sp, #8]
 800517c:	486b      	ldr	r0, [pc, #428]	; (800532c <_dtoa_r+0x60c>)
 800517e:	1112      	asrs	r2, r2, #4
 8005180:	2400      	movs	r4, #0
 8005182:	2102      	movs	r1, #2
 8005184:	b92a      	cbnz	r2, 8005192 <_dtoa_r+0x472>
 8005186:	2c00      	cmp	r4, #0
 8005188:	f43f af6a 	beq.w	8005060 <_dtoa_r+0x340>
 800518c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005190:	e766      	b.n	8005060 <_dtoa_r+0x340>
 8005192:	07d7      	lsls	r7, r2, #31
 8005194:	d505      	bpl.n	80051a2 <_dtoa_r+0x482>
 8005196:	ed90 6b00 	vldr	d6, [r0]
 800519a:	3101      	adds	r1, #1
 800519c:	2401      	movs	r4, #1
 800519e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051a2:	1052      	asrs	r2, r2, #1
 80051a4:	3008      	adds	r0, #8
 80051a6:	e7ed      	b.n	8005184 <_dtoa_r+0x464>
 80051a8:	2102      	movs	r1, #2
 80051aa:	e759      	b.n	8005060 <_dtoa_r+0x340>
 80051ac:	465a      	mov	r2, fp
 80051ae:	464c      	mov	r4, r9
 80051b0:	e775      	b.n	800509e <_dtoa_r+0x37e>
 80051b2:	ec41 0b17 	vmov	d7, r0, r1
 80051b6:	495c      	ldr	r1, [pc, #368]	; (8005328 <_dtoa_r+0x608>)
 80051b8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80051bc:	ed11 4b02 	vldr	d4, [r1, #-8]
 80051c0:	9901      	ldr	r1, [sp, #4]
 80051c2:	440c      	add	r4, r1
 80051c4:	9907      	ldr	r1, [sp, #28]
 80051c6:	b351      	cbz	r1, 800521e <_dtoa_r+0x4fe>
 80051c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80051cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80051d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80051d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80051d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80051dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80051e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80051e4:	ee14 1a90 	vmov	r1, s9
 80051e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80051ec:	3130      	adds	r1, #48	; 0x30
 80051ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80051f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	f808 1b01 	strb.w	r1, [r8], #1
 80051fe:	d439      	bmi.n	8005274 <_dtoa_r+0x554>
 8005200:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005204:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	d472      	bmi.n	80052f4 <_dtoa_r+0x5d4>
 800520e:	45a0      	cmp	r8, r4
 8005210:	f43f af6b 	beq.w	80050ea <_dtoa_r+0x3ca>
 8005214:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005218:	ee26 6b03 	vmul.f64	d6, d6, d3
 800521c:	e7e0      	b.n	80051e0 <_dtoa_r+0x4c0>
 800521e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005222:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005226:	4620      	mov	r0, r4
 8005228:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800522c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005230:	ee14 1a90 	vmov	r1, s9
 8005234:	3130      	adds	r1, #48	; 0x30
 8005236:	f808 1b01 	strb.w	r1, [r8], #1
 800523a:	45a0      	cmp	r8, r4
 800523c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005240:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005244:	d118      	bne.n	8005278 <_dtoa_r+0x558>
 8005246:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800524a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800524e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005256:	dc4d      	bgt.n	80052f4 <_dtoa_r+0x5d4>
 8005258:	ee35 5b47 	vsub.f64	d5, d5, d7
 800525c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005264:	f57f af41 	bpl.w	80050ea <_dtoa_r+0x3ca>
 8005268:	4680      	mov	r8, r0
 800526a:	3801      	subs	r0, #1
 800526c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d0f9      	beq.n	8005268 <_dtoa_r+0x548>
 8005274:	4693      	mov	fp, r2
 8005276:	e02a      	b.n	80052ce <_dtoa_r+0x5ae>
 8005278:	ee26 6b03 	vmul.f64	d6, d6, d3
 800527c:	e7d6      	b.n	800522c <_dtoa_r+0x50c>
 800527e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005282:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005286:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800528a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800528e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005292:	ee15 3a10 	vmov	r3, s10
 8005296:	3330      	adds	r3, #48	; 0x30
 8005298:	f808 3b01 	strb.w	r3, [r8], #1
 800529c:	9b01      	ldr	r3, [sp, #4]
 800529e:	eba8 0303 	sub.w	r3, r8, r3
 80052a2:	4599      	cmp	r9, r3
 80052a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80052a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80052ac:	d133      	bne.n	8005316 <_dtoa_r+0x5f6>
 80052ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ba:	dc1a      	bgt.n	80052f2 <_dtoa_r+0x5d2>
 80052bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80052c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c4:	d103      	bne.n	80052ce <_dtoa_r+0x5ae>
 80052c6:	ee15 3a10 	vmov	r3, s10
 80052ca:	07d9      	lsls	r1, r3, #31
 80052cc:	d411      	bmi.n	80052f2 <_dtoa_r+0x5d2>
 80052ce:	4629      	mov	r1, r5
 80052d0:	4630      	mov	r0, r6
 80052d2:	f000 fbd1 	bl	8005a78 <_Bfree>
 80052d6:	2300      	movs	r3, #0
 80052d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052da:	f888 3000 	strb.w	r3, [r8]
 80052de:	f10b 0301 	add.w	r3, fp, #1
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f43f ad69 	beq.w	8004dbe <_dtoa_r+0x9e>
 80052ec:	f8c3 8000 	str.w	r8, [r3]
 80052f0:	e565      	b.n	8004dbe <_dtoa_r+0x9e>
 80052f2:	465a      	mov	r2, fp
 80052f4:	4643      	mov	r3, r8
 80052f6:	4698      	mov	r8, r3
 80052f8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80052fc:	2939      	cmp	r1, #57	; 0x39
 80052fe:	d106      	bne.n	800530e <_dtoa_r+0x5ee>
 8005300:	9901      	ldr	r1, [sp, #4]
 8005302:	4299      	cmp	r1, r3
 8005304:	d1f7      	bne.n	80052f6 <_dtoa_r+0x5d6>
 8005306:	9801      	ldr	r0, [sp, #4]
 8005308:	2130      	movs	r1, #48	; 0x30
 800530a:	3201      	adds	r2, #1
 800530c:	7001      	strb	r1, [r0, #0]
 800530e:	7819      	ldrb	r1, [r3, #0]
 8005310:	3101      	adds	r1, #1
 8005312:	7019      	strb	r1, [r3, #0]
 8005314:	e7ae      	b.n	8005274 <_dtoa_r+0x554>
 8005316:	ee27 7b04 	vmul.f64	d7, d7, d4
 800531a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	d1b2      	bne.n	800528a <_dtoa_r+0x56a>
 8005324:	e7d3      	b.n	80052ce <_dtoa_r+0x5ae>
 8005326:	bf00      	nop
 8005328:	08006d88 	.word	0x08006d88
 800532c:	08006d60 	.word	0x08006d60
 8005330:	9907      	ldr	r1, [sp, #28]
 8005332:	2900      	cmp	r1, #0
 8005334:	f000 80d0 	beq.w	80054d8 <_dtoa_r+0x7b8>
 8005338:	9906      	ldr	r1, [sp, #24]
 800533a:	2901      	cmp	r1, #1
 800533c:	f300 80b4 	bgt.w	80054a8 <_dtoa_r+0x788>
 8005340:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005342:	2900      	cmp	r1, #0
 8005344:	f000 80ac 	beq.w	80054a0 <_dtoa_r+0x780>
 8005348:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800534c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005350:	461c      	mov	r4, r3
 8005352:	9309      	str	r3, [sp, #36]	; 0x24
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	4413      	add	r3, r2
 8005358:	9304      	str	r3, [sp, #16]
 800535a:	9b05      	ldr	r3, [sp, #20]
 800535c:	2101      	movs	r1, #1
 800535e:	4413      	add	r3, r2
 8005360:	4630      	mov	r0, r6
 8005362:	9305      	str	r3, [sp, #20]
 8005364:	f000 fc3e 	bl	8005be4 <__i2b>
 8005368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536a:	4607      	mov	r7, r0
 800536c:	f1b8 0f00 	cmp.w	r8, #0
 8005370:	d00d      	beq.n	800538e <_dtoa_r+0x66e>
 8005372:	9a05      	ldr	r2, [sp, #20]
 8005374:	2a00      	cmp	r2, #0
 8005376:	dd0a      	ble.n	800538e <_dtoa_r+0x66e>
 8005378:	4542      	cmp	r2, r8
 800537a:	9904      	ldr	r1, [sp, #16]
 800537c:	bfa8      	it	ge
 800537e:	4642      	movge	r2, r8
 8005380:	1a89      	subs	r1, r1, r2
 8005382:	9104      	str	r1, [sp, #16]
 8005384:	9905      	ldr	r1, [sp, #20]
 8005386:	eba8 0802 	sub.w	r8, r8, r2
 800538a:	1a8a      	subs	r2, r1, r2
 800538c:	9205      	str	r2, [sp, #20]
 800538e:	b303      	cbz	r3, 80053d2 <_dtoa_r+0x6b2>
 8005390:	9a07      	ldr	r2, [sp, #28]
 8005392:	2a00      	cmp	r2, #0
 8005394:	f000 80a5 	beq.w	80054e2 <_dtoa_r+0x7c2>
 8005398:	2c00      	cmp	r4, #0
 800539a:	dd13      	ble.n	80053c4 <_dtoa_r+0x6a4>
 800539c:	4639      	mov	r1, r7
 800539e:	4622      	mov	r2, r4
 80053a0:	4630      	mov	r0, r6
 80053a2:	930d      	str	r3, [sp, #52]	; 0x34
 80053a4:	f000 fcde 	bl	8005d64 <__pow5mult>
 80053a8:	462a      	mov	r2, r5
 80053aa:	4601      	mov	r1, r0
 80053ac:	4607      	mov	r7, r0
 80053ae:	4630      	mov	r0, r6
 80053b0:	f000 fc2e 	bl	8005c10 <__multiply>
 80053b4:	4629      	mov	r1, r5
 80053b6:	9009      	str	r0, [sp, #36]	; 0x24
 80053b8:	4630      	mov	r0, r6
 80053ba:	f000 fb5d 	bl	8005a78 <_Bfree>
 80053be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c2:	4615      	mov	r5, r2
 80053c4:	1b1a      	subs	r2, r3, r4
 80053c6:	d004      	beq.n	80053d2 <_dtoa_r+0x6b2>
 80053c8:	4629      	mov	r1, r5
 80053ca:	4630      	mov	r0, r6
 80053cc:	f000 fcca 	bl	8005d64 <__pow5mult>
 80053d0:	4605      	mov	r5, r0
 80053d2:	2101      	movs	r1, #1
 80053d4:	4630      	mov	r0, r6
 80053d6:	f000 fc05 	bl	8005be4 <__i2b>
 80053da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	4604      	mov	r4, r0
 80053e0:	f340 8081 	ble.w	80054e6 <_dtoa_r+0x7c6>
 80053e4:	461a      	mov	r2, r3
 80053e6:	4601      	mov	r1, r0
 80053e8:	4630      	mov	r0, r6
 80053ea:	f000 fcbb 	bl	8005d64 <__pow5mult>
 80053ee:	9b06      	ldr	r3, [sp, #24]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	4604      	mov	r4, r0
 80053f4:	dd7a      	ble.n	80054ec <_dtoa_r+0x7cc>
 80053f6:	2300      	movs	r3, #0
 80053f8:	9309      	str	r3, [sp, #36]	; 0x24
 80053fa:	6922      	ldr	r2, [r4, #16]
 80053fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005400:	6910      	ldr	r0, [r2, #16]
 8005402:	f000 fba1 	bl	8005b48 <__hi0bits>
 8005406:	f1c0 0020 	rsb	r0, r0, #32
 800540a:	9b05      	ldr	r3, [sp, #20]
 800540c:	4418      	add	r0, r3
 800540e:	f010 001f 	ands.w	r0, r0, #31
 8005412:	f000 8093 	beq.w	800553c <_dtoa_r+0x81c>
 8005416:	f1c0 0220 	rsb	r2, r0, #32
 800541a:	2a04      	cmp	r2, #4
 800541c:	f340 8085 	ble.w	800552a <_dtoa_r+0x80a>
 8005420:	9b04      	ldr	r3, [sp, #16]
 8005422:	f1c0 001c 	rsb	r0, r0, #28
 8005426:	4403      	add	r3, r0
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	9b05      	ldr	r3, [sp, #20]
 800542c:	4480      	add	r8, r0
 800542e:	4403      	add	r3, r0
 8005430:	9305      	str	r3, [sp, #20]
 8005432:	9b04      	ldr	r3, [sp, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	dd05      	ble.n	8005444 <_dtoa_r+0x724>
 8005438:	4629      	mov	r1, r5
 800543a:	461a      	mov	r2, r3
 800543c:	4630      	mov	r0, r6
 800543e:	f000 fceb 	bl	8005e18 <__lshift>
 8005442:	4605      	mov	r5, r0
 8005444:	9b05      	ldr	r3, [sp, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	dd05      	ble.n	8005456 <_dtoa_r+0x736>
 800544a:	4621      	mov	r1, r4
 800544c:	461a      	mov	r2, r3
 800544e:	4630      	mov	r0, r6
 8005450:	f000 fce2 	bl	8005e18 <__lshift>
 8005454:	4604      	mov	r4, r0
 8005456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d071      	beq.n	8005540 <_dtoa_r+0x820>
 800545c:	4621      	mov	r1, r4
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fd46 	bl	8005ef0 <__mcmp>
 8005464:	2800      	cmp	r0, #0
 8005466:	da6b      	bge.n	8005540 <_dtoa_r+0x820>
 8005468:	2300      	movs	r3, #0
 800546a:	4629      	mov	r1, r5
 800546c:	220a      	movs	r2, #10
 800546e:	4630      	mov	r0, r6
 8005470:	f000 fb24 	bl	8005abc <__multadd>
 8005474:	9b07      	ldr	r3, [sp, #28]
 8005476:	f10b 3bff 	add.w	fp, fp, #4294967295
 800547a:	4605      	mov	r5, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8197 	beq.w	80057b0 <_dtoa_r+0xa90>
 8005482:	4639      	mov	r1, r7
 8005484:	2300      	movs	r3, #0
 8005486:	220a      	movs	r2, #10
 8005488:	4630      	mov	r0, r6
 800548a:	f000 fb17 	bl	8005abc <__multadd>
 800548e:	f1ba 0f00 	cmp.w	sl, #0
 8005492:	4607      	mov	r7, r0
 8005494:	f300 8093 	bgt.w	80055be <_dtoa_r+0x89e>
 8005498:	9b06      	ldr	r3, [sp, #24]
 800549a:	2b02      	cmp	r3, #2
 800549c:	dc57      	bgt.n	800554e <_dtoa_r+0x82e>
 800549e:	e08e      	b.n	80055be <_dtoa_r+0x89e>
 80054a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80054a6:	e751      	b.n	800534c <_dtoa_r+0x62c>
 80054a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	bfbf      	itttt	lt
 80054b0:	1ae2      	sublt	r2, r4, r3
 80054b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054b4:	189b      	addlt	r3, r3, r2
 80054b6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80054b8:	bfae      	itee	ge
 80054ba:	1b1c      	subge	r4, r3, r4
 80054bc:	4623      	movlt	r3, r4
 80054be:	2400      	movlt	r4, #0
 80054c0:	f1b9 0f00 	cmp.w	r9, #0
 80054c4:	bfb5      	itete	lt
 80054c6:	9a04      	ldrlt	r2, [sp, #16]
 80054c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80054cc:	eba2 0809 	sublt.w	r8, r2, r9
 80054d0:	464a      	movge	r2, r9
 80054d2:	bfb8      	it	lt
 80054d4:	2200      	movlt	r2, #0
 80054d6:	e73c      	b.n	8005352 <_dtoa_r+0x632>
 80054d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80054dc:	9f07      	ldr	r7, [sp, #28]
 80054de:	461c      	mov	r4, r3
 80054e0:	e744      	b.n	800536c <_dtoa_r+0x64c>
 80054e2:	461a      	mov	r2, r3
 80054e4:	e770      	b.n	80053c8 <_dtoa_r+0x6a8>
 80054e6:	9b06      	ldr	r3, [sp, #24]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	dc18      	bgt.n	800551e <_dtoa_r+0x7fe>
 80054ec:	9b02      	ldr	r3, [sp, #8]
 80054ee:	b9b3      	cbnz	r3, 800551e <_dtoa_r+0x7fe>
 80054f0:	9b03      	ldr	r3, [sp, #12]
 80054f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80054f6:	b9a2      	cbnz	r2, 8005522 <_dtoa_r+0x802>
 80054f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054fc:	0d12      	lsrs	r2, r2, #20
 80054fe:	0512      	lsls	r2, r2, #20
 8005500:	b18a      	cbz	r2, 8005526 <_dtoa_r+0x806>
 8005502:	9b04      	ldr	r3, [sp, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	9304      	str	r3, [sp, #16]
 8005508:	9b05      	ldr	r3, [sp, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	9305      	str	r3, [sp, #20]
 800550e:	2301      	movs	r3, #1
 8005510:	9309      	str	r3, [sp, #36]	; 0x24
 8005512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	f47f af70 	bne.w	80053fa <_dtoa_r+0x6da>
 800551a:	2001      	movs	r0, #1
 800551c:	e775      	b.n	800540a <_dtoa_r+0x6ea>
 800551e:	2300      	movs	r3, #0
 8005520:	e7f6      	b.n	8005510 <_dtoa_r+0x7f0>
 8005522:	9b02      	ldr	r3, [sp, #8]
 8005524:	e7f4      	b.n	8005510 <_dtoa_r+0x7f0>
 8005526:	9209      	str	r2, [sp, #36]	; 0x24
 8005528:	e7f3      	b.n	8005512 <_dtoa_r+0x7f2>
 800552a:	d082      	beq.n	8005432 <_dtoa_r+0x712>
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	321c      	adds	r2, #28
 8005530:	4413      	add	r3, r2
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	9b05      	ldr	r3, [sp, #20]
 8005536:	4490      	add	r8, r2
 8005538:	4413      	add	r3, r2
 800553a:	e779      	b.n	8005430 <_dtoa_r+0x710>
 800553c:	4602      	mov	r2, r0
 800553e:	e7f5      	b.n	800552c <_dtoa_r+0x80c>
 8005540:	f1b9 0f00 	cmp.w	r9, #0
 8005544:	dc36      	bgt.n	80055b4 <_dtoa_r+0x894>
 8005546:	9b06      	ldr	r3, [sp, #24]
 8005548:	2b02      	cmp	r3, #2
 800554a:	dd33      	ble.n	80055b4 <_dtoa_r+0x894>
 800554c:	46ca      	mov	sl, r9
 800554e:	f1ba 0f00 	cmp.w	sl, #0
 8005552:	d10d      	bne.n	8005570 <_dtoa_r+0x850>
 8005554:	4621      	mov	r1, r4
 8005556:	4653      	mov	r3, sl
 8005558:	2205      	movs	r2, #5
 800555a:	4630      	mov	r0, r6
 800555c:	f000 faae 	bl	8005abc <__multadd>
 8005560:	4601      	mov	r1, r0
 8005562:	4604      	mov	r4, r0
 8005564:	4628      	mov	r0, r5
 8005566:	f000 fcc3 	bl	8005ef0 <__mcmp>
 800556a:	2800      	cmp	r0, #0
 800556c:	f73f ade4 	bgt.w	8005138 <_dtoa_r+0x418>
 8005570:	9b08      	ldr	r3, [sp, #32]
 8005572:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005576:	ea6f 0b03 	mvn.w	fp, r3
 800557a:	f04f 0900 	mov.w	r9, #0
 800557e:	4621      	mov	r1, r4
 8005580:	4630      	mov	r0, r6
 8005582:	f000 fa79 	bl	8005a78 <_Bfree>
 8005586:	2f00      	cmp	r7, #0
 8005588:	f43f aea1 	beq.w	80052ce <_dtoa_r+0x5ae>
 800558c:	f1b9 0f00 	cmp.w	r9, #0
 8005590:	d005      	beq.n	800559e <_dtoa_r+0x87e>
 8005592:	45b9      	cmp	r9, r7
 8005594:	d003      	beq.n	800559e <_dtoa_r+0x87e>
 8005596:	4649      	mov	r1, r9
 8005598:	4630      	mov	r0, r6
 800559a:	f000 fa6d 	bl	8005a78 <_Bfree>
 800559e:	4639      	mov	r1, r7
 80055a0:	4630      	mov	r0, r6
 80055a2:	f000 fa69 	bl	8005a78 <_Bfree>
 80055a6:	e692      	b.n	80052ce <_dtoa_r+0x5ae>
 80055a8:	2400      	movs	r4, #0
 80055aa:	4627      	mov	r7, r4
 80055ac:	e7e0      	b.n	8005570 <_dtoa_r+0x850>
 80055ae:	4693      	mov	fp, r2
 80055b0:	4627      	mov	r7, r4
 80055b2:	e5c1      	b.n	8005138 <_dtoa_r+0x418>
 80055b4:	9b07      	ldr	r3, [sp, #28]
 80055b6:	46ca      	mov	sl, r9
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8100 	beq.w	80057be <_dtoa_r+0xa9e>
 80055be:	f1b8 0f00 	cmp.w	r8, #0
 80055c2:	dd05      	ble.n	80055d0 <_dtoa_r+0x8b0>
 80055c4:	4639      	mov	r1, r7
 80055c6:	4642      	mov	r2, r8
 80055c8:	4630      	mov	r0, r6
 80055ca:	f000 fc25 	bl	8005e18 <__lshift>
 80055ce:	4607      	mov	r7, r0
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d05d      	beq.n	8005692 <_dtoa_r+0x972>
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4630      	mov	r0, r6
 80055da:	f000 fa0d 	bl	80059f8 <_Balloc>
 80055de:	4680      	mov	r8, r0
 80055e0:	b928      	cbnz	r0, 80055ee <_dtoa_r+0x8ce>
 80055e2:	4b82      	ldr	r3, [pc, #520]	; (80057ec <_dtoa_r+0xacc>)
 80055e4:	4602      	mov	r2, r0
 80055e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80055ea:	f7ff bbb1 	b.w	8004d50 <_dtoa_r+0x30>
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	3202      	adds	r2, #2
 80055f2:	0092      	lsls	r2, r2, #2
 80055f4:	f107 010c 	add.w	r1, r7, #12
 80055f8:	300c      	adds	r0, #12
 80055fa:	f000 ffa9 	bl	8006550 <memcpy>
 80055fe:	2201      	movs	r2, #1
 8005600:	4641      	mov	r1, r8
 8005602:	4630      	mov	r0, r6
 8005604:	f000 fc08 	bl	8005e18 <__lshift>
 8005608:	9b01      	ldr	r3, [sp, #4]
 800560a:	3301      	adds	r3, #1
 800560c:	9304      	str	r3, [sp, #16]
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	4453      	add	r3, sl
 8005612:	9308      	str	r3, [sp, #32]
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	46b9      	mov	r9, r7
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	4607      	mov	r7, r0
 8005620:	9b04      	ldr	r3, [sp, #16]
 8005622:	4621      	mov	r1, r4
 8005624:	3b01      	subs	r3, #1
 8005626:	4628      	mov	r0, r5
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	f7ff faf0 	bl	8004c0e <quorem>
 800562e:	4603      	mov	r3, r0
 8005630:	3330      	adds	r3, #48	; 0x30
 8005632:	9005      	str	r0, [sp, #20]
 8005634:	4649      	mov	r1, r9
 8005636:	4628      	mov	r0, r5
 8005638:	9309      	str	r3, [sp, #36]	; 0x24
 800563a:	f000 fc59 	bl	8005ef0 <__mcmp>
 800563e:	463a      	mov	r2, r7
 8005640:	4682      	mov	sl, r0
 8005642:	4621      	mov	r1, r4
 8005644:	4630      	mov	r0, r6
 8005646:	f000 fc6f 	bl	8005f28 <__mdiff>
 800564a:	68c2      	ldr	r2, [r0, #12]
 800564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564e:	4680      	mov	r8, r0
 8005650:	bb0a      	cbnz	r2, 8005696 <_dtoa_r+0x976>
 8005652:	4601      	mov	r1, r0
 8005654:	4628      	mov	r0, r5
 8005656:	f000 fc4b 	bl	8005ef0 <__mcmp>
 800565a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565c:	4602      	mov	r2, r0
 800565e:	4641      	mov	r1, r8
 8005660:	4630      	mov	r0, r6
 8005662:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005666:	f000 fa07 	bl	8005a78 <_Bfree>
 800566a:	9b06      	ldr	r3, [sp, #24]
 800566c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800566e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005672:	ea43 0102 	orr.w	r1, r3, r2
 8005676:	9b07      	ldr	r3, [sp, #28]
 8005678:	4319      	orrs	r1, r3
 800567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567c:	d10d      	bne.n	800569a <_dtoa_r+0x97a>
 800567e:	2b39      	cmp	r3, #57	; 0x39
 8005680:	d029      	beq.n	80056d6 <_dtoa_r+0x9b6>
 8005682:	f1ba 0f00 	cmp.w	sl, #0
 8005686:	dd01      	ble.n	800568c <_dtoa_r+0x96c>
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	3331      	adds	r3, #49	; 0x31
 800568c:	9a02      	ldr	r2, [sp, #8]
 800568e:	7013      	strb	r3, [r2, #0]
 8005690:	e775      	b.n	800557e <_dtoa_r+0x85e>
 8005692:	4638      	mov	r0, r7
 8005694:	e7b8      	b.n	8005608 <_dtoa_r+0x8e8>
 8005696:	2201      	movs	r2, #1
 8005698:	e7e1      	b.n	800565e <_dtoa_r+0x93e>
 800569a:	f1ba 0f00 	cmp.w	sl, #0
 800569e:	db06      	blt.n	80056ae <_dtoa_r+0x98e>
 80056a0:	9906      	ldr	r1, [sp, #24]
 80056a2:	ea41 0a0a 	orr.w	sl, r1, sl
 80056a6:	9907      	ldr	r1, [sp, #28]
 80056a8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80056ac:	d120      	bne.n	80056f0 <_dtoa_r+0x9d0>
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	ddec      	ble.n	800568c <_dtoa_r+0x96c>
 80056b2:	4629      	mov	r1, r5
 80056b4:	2201      	movs	r2, #1
 80056b6:	4630      	mov	r0, r6
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	f000 fbad 	bl	8005e18 <__lshift>
 80056be:	4621      	mov	r1, r4
 80056c0:	4605      	mov	r5, r0
 80056c2:	f000 fc15 	bl	8005ef0 <__mcmp>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	9b04      	ldr	r3, [sp, #16]
 80056ca:	dc02      	bgt.n	80056d2 <_dtoa_r+0x9b2>
 80056cc:	d1de      	bne.n	800568c <_dtoa_r+0x96c>
 80056ce:	07da      	lsls	r2, r3, #31
 80056d0:	d5dc      	bpl.n	800568c <_dtoa_r+0x96c>
 80056d2:	2b39      	cmp	r3, #57	; 0x39
 80056d4:	d1d8      	bne.n	8005688 <_dtoa_r+0x968>
 80056d6:	9a02      	ldr	r2, [sp, #8]
 80056d8:	2339      	movs	r3, #57	; 0x39
 80056da:	7013      	strb	r3, [r2, #0]
 80056dc:	4643      	mov	r3, r8
 80056de:	4698      	mov	r8, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80056e6:	2a39      	cmp	r2, #57	; 0x39
 80056e8:	d051      	beq.n	800578e <_dtoa_r+0xa6e>
 80056ea:	3201      	adds	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e746      	b.n	800557e <_dtoa_r+0x85e>
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	dd03      	ble.n	80056fc <_dtoa_r+0x9dc>
 80056f4:	2b39      	cmp	r3, #57	; 0x39
 80056f6:	d0ee      	beq.n	80056d6 <_dtoa_r+0x9b6>
 80056f8:	3301      	adds	r3, #1
 80056fa:	e7c7      	b.n	800568c <_dtoa_r+0x96c>
 80056fc:	9a04      	ldr	r2, [sp, #16]
 80056fe:	9908      	ldr	r1, [sp, #32]
 8005700:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005704:	428a      	cmp	r2, r1
 8005706:	d02b      	beq.n	8005760 <_dtoa_r+0xa40>
 8005708:	4629      	mov	r1, r5
 800570a:	2300      	movs	r3, #0
 800570c:	220a      	movs	r2, #10
 800570e:	4630      	mov	r0, r6
 8005710:	f000 f9d4 	bl	8005abc <__multadd>
 8005714:	45b9      	cmp	r9, r7
 8005716:	4605      	mov	r5, r0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	f04f 020a 	mov.w	r2, #10
 8005720:	4649      	mov	r1, r9
 8005722:	4630      	mov	r0, r6
 8005724:	d107      	bne.n	8005736 <_dtoa_r+0xa16>
 8005726:	f000 f9c9 	bl	8005abc <__multadd>
 800572a:	4681      	mov	r9, r0
 800572c:	4607      	mov	r7, r0
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	3301      	adds	r3, #1
 8005732:	9304      	str	r3, [sp, #16]
 8005734:	e774      	b.n	8005620 <_dtoa_r+0x900>
 8005736:	f000 f9c1 	bl	8005abc <__multadd>
 800573a:	4639      	mov	r1, r7
 800573c:	4681      	mov	r9, r0
 800573e:	2300      	movs	r3, #0
 8005740:	220a      	movs	r2, #10
 8005742:	4630      	mov	r0, r6
 8005744:	f000 f9ba 	bl	8005abc <__multadd>
 8005748:	4607      	mov	r7, r0
 800574a:	e7f0      	b.n	800572e <_dtoa_r+0xa0e>
 800574c:	f1ba 0f00 	cmp.w	sl, #0
 8005750:	9a01      	ldr	r2, [sp, #4]
 8005752:	bfcc      	ite	gt
 8005754:	46d0      	movgt	r8, sl
 8005756:	f04f 0801 	movle.w	r8, #1
 800575a:	4490      	add	r8, r2
 800575c:	f04f 0900 	mov.w	r9, #0
 8005760:	4629      	mov	r1, r5
 8005762:	2201      	movs	r2, #1
 8005764:	4630      	mov	r0, r6
 8005766:	9302      	str	r3, [sp, #8]
 8005768:	f000 fb56 	bl	8005e18 <__lshift>
 800576c:	4621      	mov	r1, r4
 800576e:	4605      	mov	r5, r0
 8005770:	f000 fbbe 	bl	8005ef0 <__mcmp>
 8005774:	2800      	cmp	r0, #0
 8005776:	dcb1      	bgt.n	80056dc <_dtoa_r+0x9bc>
 8005778:	d102      	bne.n	8005780 <_dtoa_r+0xa60>
 800577a:	9b02      	ldr	r3, [sp, #8]
 800577c:	07db      	lsls	r3, r3, #31
 800577e:	d4ad      	bmi.n	80056dc <_dtoa_r+0x9bc>
 8005780:	4643      	mov	r3, r8
 8005782:	4698      	mov	r8, r3
 8005784:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005788:	2a30      	cmp	r2, #48	; 0x30
 800578a:	d0fa      	beq.n	8005782 <_dtoa_r+0xa62>
 800578c:	e6f7      	b.n	800557e <_dtoa_r+0x85e>
 800578e:	9a01      	ldr	r2, [sp, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d1a4      	bne.n	80056de <_dtoa_r+0x9be>
 8005794:	f10b 0b01 	add.w	fp, fp, #1
 8005798:	2331      	movs	r3, #49	; 0x31
 800579a:	e778      	b.n	800568e <_dtoa_r+0x96e>
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <_dtoa_r+0xad0>)
 800579e:	f7ff bb2a 	b.w	8004df6 <_dtoa_r+0xd6>
 80057a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f47f ab05 	bne.w	8004db4 <_dtoa_r+0x94>
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <_dtoa_r+0xad4>)
 80057ac:	f7ff bb23 	b.w	8004df6 <_dtoa_r+0xd6>
 80057b0:	f1ba 0f00 	cmp.w	sl, #0
 80057b4:	dc03      	bgt.n	80057be <_dtoa_r+0xa9e>
 80057b6:	9b06      	ldr	r3, [sp, #24]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	f73f aec8 	bgt.w	800554e <_dtoa_r+0x82e>
 80057be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057c2:	4621      	mov	r1, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f7ff fa22 	bl	8004c0e <quorem>
 80057ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80057ce:	f808 3b01 	strb.w	r3, [r8], #1
 80057d2:	9a01      	ldr	r2, [sp, #4]
 80057d4:	eba8 0202 	sub.w	r2, r8, r2
 80057d8:	4592      	cmp	sl, r2
 80057da:	ddb7      	ble.n	800574c <_dtoa_r+0xa2c>
 80057dc:	4629      	mov	r1, r5
 80057de:	2300      	movs	r3, #0
 80057e0:	220a      	movs	r2, #10
 80057e2:	4630      	mov	r0, r6
 80057e4:	f000 f96a 	bl	8005abc <__multadd>
 80057e8:	4605      	mov	r5, r0
 80057ea:	e7ea      	b.n	80057c2 <_dtoa_r+0xaa2>
 80057ec:	08006cf4 	.word	0x08006cf4
 80057f0:	08006c54 	.word	0x08006c54
 80057f4:	08006c78 	.word	0x08006c78

080057f8 <_free_r>:
 80057f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057fa:	2900      	cmp	r1, #0
 80057fc:	d044      	beq.n	8005888 <_free_r+0x90>
 80057fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005802:	9001      	str	r0, [sp, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f1a1 0404 	sub.w	r4, r1, #4
 800580a:	bfb8      	it	lt
 800580c:	18e4      	addlt	r4, r4, r3
 800580e:	f000 f8e7 	bl	80059e0 <__malloc_lock>
 8005812:	4a1e      	ldr	r2, [pc, #120]	; (800588c <_free_r+0x94>)
 8005814:	9801      	ldr	r0, [sp, #4]
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	b933      	cbnz	r3, 8005828 <_free_r+0x30>
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	6014      	str	r4, [r2, #0]
 800581e:	b003      	add	sp, #12
 8005820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005824:	f000 b8e2 	b.w	80059ec <__malloc_unlock>
 8005828:	42a3      	cmp	r3, r4
 800582a:	d908      	bls.n	800583e <_free_r+0x46>
 800582c:	6825      	ldr	r5, [r4, #0]
 800582e:	1961      	adds	r1, r4, r5
 8005830:	428b      	cmp	r3, r1
 8005832:	bf01      	itttt	eq
 8005834:	6819      	ldreq	r1, [r3, #0]
 8005836:	685b      	ldreq	r3, [r3, #4]
 8005838:	1949      	addeq	r1, r1, r5
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	e7ed      	b.n	800581a <_free_r+0x22>
 800583e:	461a      	mov	r2, r3
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b10b      	cbz	r3, 8005848 <_free_r+0x50>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d9fa      	bls.n	800583e <_free_r+0x46>
 8005848:	6811      	ldr	r1, [r2, #0]
 800584a:	1855      	adds	r5, r2, r1
 800584c:	42a5      	cmp	r5, r4
 800584e:	d10b      	bne.n	8005868 <_free_r+0x70>
 8005850:	6824      	ldr	r4, [r4, #0]
 8005852:	4421      	add	r1, r4
 8005854:	1854      	adds	r4, r2, r1
 8005856:	42a3      	cmp	r3, r4
 8005858:	6011      	str	r1, [r2, #0]
 800585a:	d1e0      	bne.n	800581e <_free_r+0x26>
 800585c:	681c      	ldr	r4, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	6053      	str	r3, [r2, #4]
 8005862:	440c      	add	r4, r1
 8005864:	6014      	str	r4, [r2, #0]
 8005866:	e7da      	b.n	800581e <_free_r+0x26>
 8005868:	d902      	bls.n	8005870 <_free_r+0x78>
 800586a:	230c      	movs	r3, #12
 800586c:	6003      	str	r3, [r0, #0]
 800586e:	e7d6      	b.n	800581e <_free_r+0x26>
 8005870:	6825      	ldr	r5, [r4, #0]
 8005872:	1961      	adds	r1, r4, r5
 8005874:	428b      	cmp	r3, r1
 8005876:	bf04      	itt	eq
 8005878:	6819      	ldreq	r1, [r3, #0]
 800587a:	685b      	ldreq	r3, [r3, #4]
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	bf04      	itt	eq
 8005880:	1949      	addeq	r1, r1, r5
 8005882:	6021      	streq	r1, [r4, #0]
 8005884:	6054      	str	r4, [r2, #4]
 8005886:	e7ca      	b.n	800581e <_free_r+0x26>
 8005888:	b003      	add	sp, #12
 800588a:	bd30      	pop	{r4, r5, pc}
 800588c:	200004e0 	.word	0x200004e0

08005890 <malloc>:
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <malloc+0xc>)
 8005892:	4601      	mov	r1, r0
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	f000 b823 	b.w	80058e0 <_malloc_r>
 800589a:	bf00      	nop
 800589c:	20000064 	.word	0x20000064

080058a0 <sbrk_aligned>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	4e0e      	ldr	r6, [pc, #56]	; (80058dc <sbrk_aligned+0x3c>)
 80058a4:	460c      	mov	r4, r1
 80058a6:	6831      	ldr	r1, [r6, #0]
 80058a8:	4605      	mov	r5, r0
 80058aa:	b911      	cbnz	r1, 80058b2 <sbrk_aligned+0x12>
 80058ac:	f000 fe40 	bl	8006530 <_sbrk_r>
 80058b0:	6030      	str	r0, [r6, #0]
 80058b2:	4621      	mov	r1, r4
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 fe3b 	bl	8006530 <_sbrk_r>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d00a      	beq.n	80058d4 <sbrk_aligned+0x34>
 80058be:	1cc4      	adds	r4, r0, #3
 80058c0:	f024 0403 	bic.w	r4, r4, #3
 80058c4:	42a0      	cmp	r0, r4
 80058c6:	d007      	beq.n	80058d8 <sbrk_aligned+0x38>
 80058c8:	1a21      	subs	r1, r4, r0
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 fe30 	bl	8006530 <_sbrk_r>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d101      	bne.n	80058d8 <sbrk_aligned+0x38>
 80058d4:	f04f 34ff 	mov.w	r4, #4294967295
 80058d8:	4620      	mov	r0, r4
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	200004e4 	.word	0x200004e4

080058e0 <_malloc_r>:
 80058e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e4:	1ccd      	adds	r5, r1, #3
 80058e6:	f025 0503 	bic.w	r5, r5, #3
 80058ea:	3508      	adds	r5, #8
 80058ec:	2d0c      	cmp	r5, #12
 80058ee:	bf38      	it	cc
 80058f0:	250c      	movcc	r5, #12
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	4607      	mov	r7, r0
 80058f6:	db01      	blt.n	80058fc <_malloc_r+0x1c>
 80058f8:	42a9      	cmp	r1, r5
 80058fa:	d905      	bls.n	8005908 <_malloc_r+0x28>
 80058fc:	230c      	movs	r3, #12
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	2600      	movs	r6, #0
 8005902:	4630      	mov	r0, r6
 8005904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005908:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059dc <_malloc_r+0xfc>
 800590c:	f000 f868 	bl	80059e0 <__malloc_lock>
 8005910:	f8d8 3000 	ldr.w	r3, [r8]
 8005914:	461c      	mov	r4, r3
 8005916:	bb5c      	cbnz	r4, 8005970 <_malloc_r+0x90>
 8005918:	4629      	mov	r1, r5
 800591a:	4638      	mov	r0, r7
 800591c:	f7ff ffc0 	bl	80058a0 <sbrk_aligned>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	4604      	mov	r4, r0
 8005924:	d155      	bne.n	80059d2 <_malloc_r+0xf2>
 8005926:	f8d8 4000 	ldr.w	r4, [r8]
 800592a:	4626      	mov	r6, r4
 800592c:	2e00      	cmp	r6, #0
 800592e:	d145      	bne.n	80059bc <_malloc_r+0xdc>
 8005930:	2c00      	cmp	r4, #0
 8005932:	d048      	beq.n	80059c6 <_malloc_r+0xe6>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	4631      	mov	r1, r6
 8005938:	4638      	mov	r0, r7
 800593a:	eb04 0903 	add.w	r9, r4, r3
 800593e:	f000 fdf7 	bl	8006530 <_sbrk_r>
 8005942:	4581      	cmp	r9, r0
 8005944:	d13f      	bne.n	80059c6 <_malloc_r+0xe6>
 8005946:	6821      	ldr	r1, [r4, #0]
 8005948:	1a6d      	subs	r5, r5, r1
 800594a:	4629      	mov	r1, r5
 800594c:	4638      	mov	r0, r7
 800594e:	f7ff ffa7 	bl	80058a0 <sbrk_aligned>
 8005952:	3001      	adds	r0, #1
 8005954:	d037      	beq.n	80059c6 <_malloc_r+0xe6>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	442b      	add	r3, r5
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	f8d8 3000 	ldr.w	r3, [r8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d038      	beq.n	80059d6 <_malloc_r+0xf6>
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	42a2      	cmp	r2, r4
 8005968:	d12b      	bne.n	80059c2 <_malloc_r+0xe2>
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	e00f      	b.n	8005990 <_malloc_r+0xb0>
 8005970:	6822      	ldr	r2, [r4, #0]
 8005972:	1b52      	subs	r2, r2, r5
 8005974:	d41f      	bmi.n	80059b6 <_malloc_r+0xd6>
 8005976:	2a0b      	cmp	r2, #11
 8005978:	d917      	bls.n	80059aa <_malloc_r+0xca>
 800597a:	1961      	adds	r1, r4, r5
 800597c:	42a3      	cmp	r3, r4
 800597e:	6025      	str	r5, [r4, #0]
 8005980:	bf18      	it	ne
 8005982:	6059      	strne	r1, [r3, #4]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	bf08      	it	eq
 8005988:	f8c8 1000 	streq.w	r1, [r8]
 800598c:	5162      	str	r2, [r4, r5]
 800598e:	604b      	str	r3, [r1, #4]
 8005990:	4638      	mov	r0, r7
 8005992:	f104 060b 	add.w	r6, r4, #11
 8005996:	f000 f829 	bl	80059ec <__malloc_unlock>
 800599a:	f026 0607 	bic.w	r6, r6, #7
 800599e:	1d23      	adds	r3, r4, #4
 80059a0:	1af2      	subs	r2, r6, r3
 80059a2:	d0ae      	beq.n	8005902 <_malloc_r+0x22>
 80059a4:	1b9b      	subs	r3, r3, r6
 80059a6:	50a3      	str	r3, [r4, r2]
 80059a8:	e7ab      	b.n	8005902 <_malloc_r+0x22>
 80059aa:	42a3      	cmp	r3, r4
 80059ac:	6862      	ldr	r2, [r4, #4]
 80059ae:	d1dd      	bne.n	800596c <_malloc_r+0x8c>
 80059b0:	f8c8 2000 	str.w	r2, [r8]
 80059b4:	e7ec      	b.n	8005990 <_malloc_r+0xb0>
 80059b6:	4623      	mov	r3, r4
 80059b8:	6864      	ldr	r4, [r4, #4]
 80059ba:	e7ac      	b.n	8005916 <_malloc_r+0x36>
 80059bc:	4634      	mov	r4, r6
 80059be:	6876      	ldr	r6, [r6, #4]
 80059c0:	e7b4      	b.n	800592c <_malloc_r+0x4c>
 80059c2:	4613      	mov	r3, r2
 80059c4:	e7cc      	b.n	8005960 <_malloc_r+0x80>
 80059c6:	230c      	movs	r3, #12
 80059c8:	603b      	str	r3, [r7, #0]
 80059ca:	4638      	mov	r0, r7
 80059cc:	f000 f80e 	bl	80059ec <__malloc_unlock>
 80059d0:	e797      	b.n	8005902 <_malloc_r+0x22>
 80059d2:	6025      	str	r5, [r4, #0]
 80059d4:	e7dc      	b.n	8005990 <_malloc_r+0xb0>
 80059d6:	605b      	str	r3, [r3, #4]
 80059d8:	deff      	udf	#255	; 0xff
 80059da:	bf00      	nop
 80059dc:	200004e0 	.word	0x200004e0

080059e0 <__malloc_lock>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__malloc_lock+0x8>)
 80059e2:	f7ff b912 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 80059e6:	bf00      	nop
 80059e8:	200004dc 	.word	0x200004dc

080059ec <__malloc_unlock>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__malloc_unlock+0x8>)
 80059ee:	f7ff b90d 	b.w	8004c0c <__retarget_lock_release_recursive>
 80059f2:	bf00      	nop
 80059f4:	200004dc 	.word	0x200004dc

080059f8 <_Balloc>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	69c6      	ldr	r6, [r0, #28]
 80059fc:	4604      	mov	r4, r0
 80059fe:	460d      	mov	r5, r1
 8005a00:	b976      	cbnz	r6, 8005a20 <_Balloc+0x28>
 8005a02:	2010      	movs	r0, #16
 8005a04:	f7ff ff44 	bl	8005890 <malloc>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	61e0      	str	r0, [r4, #28]
 8005a0c:	b920      	cbnz	r0, 8005a18 <_Balloc+0x20>
 8005a0e:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <_Balloc+0x78>)
 8005a10:	4818      	ldr	r0, [pc, #96]	; (8005a74 <_Balloc+0x7c>)
 8005a12:	216b      	movs	r1, #107	; 0x6b
 8005a14:	f000 fdaa 	bl	800656c <__assert_func>
 8005a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a1c:	6006      	str	r6, [r0, #0]
 8005a1e:	60c6      	str	r6, [r0, #12]
 8005a20:	69e6      	ldr	r6, [r4, #28]
 8005a22:	68f3      	ldr	r3, [r6, #12]
 8005a24:	b183      	cbz	r3, 8005a48 <_Balloc+0x50>
 8005a26:	69e3      	ldr	r3, [r4, #28]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a2e:	b9b8      	cbnz	r0, 8005a60 <_Balloc+0x68>
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f605 	lsl.w	r6, r1, r5
 8005a36:	1d72      	adds	r2, r6, #5
 8005a38:	0092      	lsls	r2, r2, #2
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 fdb4 	bl	80065a8 <_calloc_r>
 8005a40:	b160      	cbz	r0, 8005a5c <_Balloc+0x64>
 8005a42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a46:	e00e      	b.n	8005a66 <_Balloc+0x6e>
 8005a48:	2221      	movs	r2, #33	; 0x21
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 fdab 	bl	80065a8 <_calloc_r>
 8005a52:	69e3      	ldr	r3, [r4, #28]
 8005a54:	60f0      	str	r0, [r6, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e4      	bne.n	8005a26 <_Balloc+0x2e>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	6802      	ldr	r2, [r0, #0]
 8005a62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a66:	2300      	movs	r3, #0
 8005a68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a6c:	e7f7      	b.n	8005a5e <_Balloc+0x66>
 8005a6e:	bf00      	nop
 8005a70:	08006c85 	.word	0x08006c85
 8005a74:	08006d05 	.word	0x08006d05

08005a78 <_Bfree>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	69c6      	ldr	r6, [r0, #28]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	b976      	cbnz	r6, 8005aa0 <_Bfree+0x28>
 8005a82:	2010      	movs	r0, #16
 8005a84:	f7ff ff04 	bl	8005890 <malloc>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	61e8      	str	r0, [r5, #28]
 8005a8c:	b920      	cbnz	r0, 8005a98 <_Bfree+0x20>
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <_Bfree+0x3c>)
 8005a90:	4809      	ldr	r0, [pc, #36]	; (8005ab8 <_Bfree+0x40>)
 8005a92:	218f      	movs	r1, #143	; 0x8f
 8005a94:	f000 fd6a 	bl	800656c <__assert_func>
 8005a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a9c:	6006      	str	r6, [r0, #0]
 8005a9e:	60c6      	str	r6, [r0, #12]
 8005aa0:	b13c      	cbz	r4, 8005ab2 <_Bfree+0x3a>
 8005aa2:	69eb      	ldr	r3, [r5, #28]
 8005aa4:	6862      	ldr	r2, [r4, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005aac:	6021      	str	r1, [r4, #0]
 8005aae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	08006c85 	.word	0x08006c85
 8005ab8:	08006d05 	.word	0x08006d05

08005abc <__multadd>:
 8005abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac0:	690d      	ldr	r5, [r1, #16]
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	461e      	mov	r6, r3
 8005ac8:	f101 0c14 	add.w	ip, r1, #20
 8005acc:	2000      	movs	r0, #0
 8005ace:	f8dc 3000 	ldr.w	r3, [ip]
 8005ad2:	b299      	uxth	r1, r3
 8005ad4:	fb02 6101 	mla	r1, r2, r1, r6
 8005ad8:	0c1e      	lsrs	r6, r3, #16
 8005ada:	0c0b      	lsrs	r3, r1, #16
 8005adc:	fb02 3306 	mla	r3, r2, r6, r3
 8005ae0:	b289      	uxth	r1, r1
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ae8:	4285      	cmp	r5, r0
 8005aea:	f84c 1b04 	str.w	r1, [ip], #4
 8005aee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005af2:	dcec      	bgt.n	8005ace <__multadd+0x12>
 8005af4:	b30e      	cbz	r6, 8005b3a <__multadd+0x7e>
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dc19      	bgt.n	8005b30 <__multadd+0x74>
 8005afc:	6861      	ldr	r1, [r4, #4]
 8005afe:	4638      	mov	r0, r7
 8005b00:	3101      	adds	r1, #1
 8005b02:	f7ff ff79 	bl	80059f8 <_Balloc>
 8005b06:	4680      	mov	r8, r0
 8005b08:	b928      	cbnz	r0, 8005b16 <__multadd+0x5a>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <__multadd+0x84>)
 8005b0e:	480d      	ldr	r0, [pc, #52]	; (8005b44 <__multadd+0x88>)
 8005b10:	21ba      	movs	r1, #186	; 0xba
 8005b12:	f000 fd2b 	bl	800656c <__assert_func>
 8005b16:	6922      	ldr	r2, [r4, #16]
 8005b18:	3202      	adds	r2, #2
 8005b1a:	f104 010c 	add.w	r1, r4, #12
 8005b1e:	0092      	lsls	r2, r2, #2
 8005b20:	300c      	adds	r0, #12
 8005b22:	f000 fd15 	bl	8006550 <memcpy>
 8005b26:	4621      	mov	r1, r4
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f7ff ffa5 	bl	8005a78 <_Bfree>
 8005b2e:	4644      	mov	r4, r8
 8005b30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b34:	3501      	adds	r5, #1
 8005b36:	615e      	str	r6, [r3, #20]
 8005b38:	6125      	str	r5, [r4, #16]
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	08006cf4 	.word	0x08006cf4
 8005b44:	08006d05 	.word	0x08006d05

08005b48 <__hi0bits>:
 8005b48:	0c03      	lsrs	r3, r0, #16
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	b9d3      	cbnz	r3, 8005b84 <__hi0bits+0x3c>
 8005b4e:	0400      	lsls	r0, r0, #16
 8005b50:	2310      	movs	r3, #16
 8005b52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b56:	bf04      	itt	eq
 8005b58:	0200      	lsleq	r0, r0, #8
 8005b5a:	3308      	addeq	r3, #8
 8005b5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b60:	bf04      	itt	eq
 8005b62:	0100      	lsleq	r0, r0, #4
 8005b64:	3304      	addeq	r3, #4
 8005b66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b6a:	bf04      	itt	eq
 8005b6c:	0080      	lsleq	r0, r0, #2
 8005b6e:	3302      	addeq	r3, #2
 8005b70:	2800      	cmp	r0, #0
 8005b72:	db05      	blt.n	8005b80 <__hi0bits+0x38>
 8005b74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b78:	f103 0301 	add.w	r3, r3, #1
 8005b7c:	bf08      	it	eq
 8005b7e:	2320      	moveq	r3, #32
 8005b80:	4618      	mov	r0, r3
 8005b82:	4770      	bx	lr
 8005b84:	2300      	movs	r3, #0
 8005b86:	e7e4      	b.n	8005b52 <__hi0bits+0xa>

08005b88 <__lo0bits>:
 8005b88:	6803      	ldr	r3, [r0, #0]
 8005b8a:	f013 0207 	ands.w	r2, r3, #7
 8005b8e:	d00c      	beq.n	8005baa <__lo0bits+0x22>
 8005b90:	07d9      	lsls	r1, r3, #31
 8005b92:	d422      	bmi.n	8005bda <__lo0bits+0x52>
 8005b94:	079a      	lsls	r2, r3, #30
 8005b96:	bf49      	itett	mi
 8005b98:	085b      	lsrmi	r3, r3, #1
 8005b9a:	089b      	lsrpl	r3, r3, #2
 8005b9c:	6003      	strmi	r3, [r0, #0]
 8005b9e:	2201      	movmi	r2, #1
 8005ba0:	bf5c      	itt	pl
 8005ba2:	6003      	strpl	r3, [r0, #0]
 8005ba4:	2202      	movpl	r2, #2
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4770      	bx	lr
 8005baa:	b299      	uxth	r1, r3
 8005bac:	b909      	cbnz	r1, 8005bb2 <__lo0bits+0x2a>
 8005bae:	0c1b      	lsrs	r3, r3, #16
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	b2d9      	uxtb	r1, r3
 8005bb4:	b909      	cbnz	r1, 8005bba <__lo0bits+0x32>
 8005bb6:	3208      	adds	r2, #8
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	0719      	lsls	r1, r3, #28
 8005bbc:	bf04      	itt	eq
 8005bbe:	091b      	lsreq	r3, r3, #4
 8005bc0:	3204      	addeq	r2, #4
 8005bc2:	0799      	lsls	r1, r3, #30
 8005bc4:	bf04      	itt	eq
 8005bc6:	089b      	lsreq	r3, r3, #2
 8005bc8:	3202      	addeq	r2, #2
 8005bca:	07d9      	lsls	r1, r3, #31
 8005bcc:	d403      	bmi.n	8005bd6 <__lo0bits+0x4e>
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	f102 0201 	add.w	r2, r2, #1
 8005bd4:	d003      	beq.n	8005bde <__lo0bits+0x56>
 8005bd6:	6003      	str	r3, [r0, #0]
 8005bd8:	e7e5      	b.n	8005ba6 <__lo0bits+0x1e>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	e7e3      	b.n	8005ba6 <__lo0bits+0x1e>
 8005bde:	2220      	movs	r2, #32
 8005be0:	e7e1      	b.n	8005ba6 <__lo0bits+0x1e>
	...

08005be4 <__i2b>:
 8005be4:	b510      	push	{r4, lr}
 8005be6:	460c      	mov	r4, r1
 8005be8:	2101      	movs	r1, #1
 8005bea:	f7ff ff05 	bl	80059f8 <_Balloc>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	b928      	cbnz	r0, 8005bfe <__i2b+0x1a>
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <__i2b+0x24>)
 8005bf4:	4805      	ldr	r0, [pc, #20]	; (8005c0c <__i2b+0x28>)
 8005bf6:	f240 1145 	movw	r1, #325	; 0x145
 8005bfa:	f000 fcb7 	bl	800656c <__assert_func>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	6144      	str	r4, [r0, #20]
 8005c02:	6103      	str	r3, [r0, #16]
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	bf00      	nop
 8005c08:	08006cf4 	.word	0x08006cf4
 8005c0c:	08006d05 	.word	0x08006d05

08005c10 <__multiply>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	4691      	mov	r9, r2
 8005c16:	690a      	ldr	r2, [r1, #16]
 8005c18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	bfb8      	it	lt
 8005c20:	460b      	movlt	r3, r1
 8005c22:	460c      	mov	r4, r1
 8005c24:	bfbc      	itt	lt
 8005c26:	464c      	movlt	r4, r9
 8005c28:	4699      	movlt	r9, r3
 8005c2a:	6927      	ldr	r7, [r4, #16]
 8005c2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	6861      	ldr	r1, [r4, #4]
 8005c34:	eb07 060a 	add.w	r6, r7, sl
 8005c38:	42b3      	cmp	r3, r6
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	bfb8      	it	lt
 8005c3e:	3101      	addlt	r1, #1
 8005c40:	f7ff feda 	bl	80059f8 <_Balloc>
 8005c44:	b930      	cbnz	r0, 8005c54 <__multiply+0x44>
 8005c46:	4602      	mov	r2, r0
 8005c48:	4b44      	ldr	r3, [pc, #272]	; (8005d5c <__multiply+0x14c>)
 8005c4a:	4845      	ldr	r0, [pc, #276]	; (8005d60 <__multiply+0x150>)
 8005c4c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005c50:	f000 fc8c 	bl	800656c <__assert_func>
 8005c54:	f100 0514 	add.w	r5, r0, #20
 8005c58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4543      	cmp	r3, r8
 8005c62:	d321      	bcc.n	8005ca8 <__multiply+0x98>
 8005c64:	f104 0314 	add.w	r3, r4, #20
 8005c68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c6c:	f109 0314 	add.w	r3, r9, #20
 8005c70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c74:	9202      	str	r2, [sp, #8]
 8005c76:	1b3a      	subs	r2, r7, r4
 8005c78:	3a15      	subs	r2, #21
 8005c7a:	f022 0203 	bic.w	r2, r2, #3
 8005c7e:	3204      	adds	r2, #4
 8005c80:	f104 0115 	add.w	r1, r4, #21
 8005c84:	428f      	cmp	r7, r1
 8005c86:	bf38      	it	cc
 8005c88:	2204      	movcc	r2, #4
 8005c8a:	9201      	str	r2, [sp, #4]
 8005c8c:	9a02      	ldr	r2, [sp, #8]
 8005c8e:	9303      	str	r3, [sp, #12]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d80c      	bhi.n	8005cae <__multiply+0x9e>
 8005c94:	2e00      	cmp	r6, #0
 8005c96:	dd03      	ble.n	8005ca0 <__multiply+0x90>
 8005c98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05b      	beq.n	8005d58 <__multiply+0x148>
 8005ca0:	6106      	str	r6, [r0, #16]
 8005ca2:	b005      	add	sp, #20
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	f843 2b04 	str.w	r2, [r3], #4
 8005cac:	e7d8      	b.n	8005c60 <__multiply+0x50>
 8005cae:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cb2:	f1ba 0f00 	cmp.w	sl, #0
 8005cb6:	d024      	beq.n	8005d02 <__multiply+0xf2>
 8005cb8:	f104 0e14 	add.w	lr, r4, #20
 8005cbc:	46a9      	mov	r9, r5
 8005cbe:	f04f 0c00 	mov.w	ip, #0
 8005cc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005cc6:	f8d9 1000 	ldr.w	r1, [r9]
 8005cca:	fa1f fb82 	uxth.w	fp, r2
 8005cce:	b289      	uxth	r1, r1
 8005cd0:	fb0a 110b 	mla	r1, sl, fp, r1
 8005cd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8005cdc:	4461      	add	r1, ip
 8005cde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ce2:	fb0a c20b 	mla	r2, sl, fp, ip
 8005ce6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cea:	b289      	uxth	r1, r1
 8005cec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cf0:	4577      	cmp	r7, lr
 8005cf2:	f849 1b04 	str.w	r1, [r9], #4
 8005cf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005cfa:	d8e2      	bhi.n	8005cc2 <__multiply+0xb2>
 8005cfc:	9a01      	ldr	r2, [sp, #4]
 8005cfe:	f845 c002 	str.w	ip, [r5, r2]
 8005d02:	9a03      	ldr	r2, [sp, #12]
 8005d04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	f1b9 0f00 	cmp.w	r9, #0
 8005d0e:	d021      	beq.n	8005d54 <__multiply+0x144>
 8005d10:	6829      	ldr	r1, [r5, #0]
 8005d12:	f104 0c14 	add.w	ip, r4, #20
 8005d16:	46ae      	mov	lr, r5
 8005d18:	f04f 0a00 	mov.w	sl, #0
 8005d1c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d24:	fb09 220b 	mla	r2, r9, fp, r2
 8005d28:	4452      	add	r2, sl
 8005d2a:	b289      	uxth	r1, r1
 8005d2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d30:	f84e 1b04 	str.w	r1, [lr], #4
 8005d34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005d38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d3c:	f8be 1000 	ldrh.w	r1, [lr]
 8005d40:	fb09 110a 	mla	r1, r9, sl, r1
 8005d44:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005d48:	4567      	cmp	r7, ip
 8005d4a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d4e:	d8e5      	bhi.n	8005d1c <__multiply+0x10c>
 8005d50:	9a01      	ldr	r2, [sp, #4]
 8005d52:	50a9      	str	r1, [r5, r2]
 8005d54:	3504      	adds	r5, #4
 8005d56:	e799      	b.n	8005c8c <__multiply+0x7c>
 8005d58:	3e01      	subs	r6, #1
 8005d5a:	e79b      	b.n	8005c94 <__multiply+0x84>
 8005d5c:	08006cf4 	.word	0x08006cf4
 8005d60:	08006d05 	.word	0x08006d05

08005d64 <__pow5mult>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	4615      	mov	r5, r2
 8005d6a:	f012 0203 	ands.w	r2, r2, #3
 8005d6e:	4606      	mov	r6, r0
 8005d70:	460f      	mov	r7, r1
 8005d72:	d007      	beq.n	8005d84 <__pow5mult+0x20>
 8005d74:	4c25      	ldr	r4, [pc, #148]	; (8005e0c <__pow5mult+0xa8>)
 8005d76:	3a01      	subs	r2, #1
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d7e:	f7ff fe9d 	bl	8005abc <__multadd>
 8005d82:	4607      	mov	r7, r0
 8005d84:	10ad      	asrs	r5, r5, #2
 8005d86:	d03d      	beq.n	8005e04 <__pow5mult+0xa0>
 8005d88:	69f4      	ldr	r4, [r6, #28]
 8005d8a:	b97c      	cbnz	r4, 8005dac <__pow5mult+0x48>
 8005d8c:	2010      	movs	r0, #16
 8005d8e:	f7ff fd7f 	bl	8005890 <malloc>
 8005d92:	4602      	mov	r2, r0
 8005d94:	61f0      	str	r0, [r6, #28]
 8005d96:	b928      	cbnz	r0, 8005da4 <__pow5mult+0x40>
 8005d98:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <__pow5mult+0xac>)
 8005d9a:	481e      	ldr	r0, [pc, #120]	; (8005e14 <__pow5mult+0xb0>)
 8005d9c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005da0:	f000 fbe4 	bl	800656c <__assert_func>
 8005da4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005da8:	6004      	str	r4, [r0, #0]
 8005daa:	60c4      	str	r4, [r0, #12]
 8005dac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005db0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005db4:	b94c      	cbnz	r4, 8005dca <__pow5mult+0x66>
 8005db6:	f240 2171 	movw	r1, #625	; 0x271
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff ff12 	bl	8005be4 <__i2b>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	6003      	str	r3, [r0, #0]
 8005dca:	f04f 0900 	mov.w	r9, #0
 8005dce:	07eb      	lsls	r3, r5, #31
 8005dd0:	d50a      	bpl.n	8005de8 <__pow5mult+0x84>
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7ff ff1a 	bl	8005c10 <__multiply>
 8005ddc:	4639      	mov	r1, r7
 8005dde:	4680      	mov	r8, r0
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff fe49 	bl	8005a78 <_Bfree>
 8005de6:	4647      	mov	r7, r8
 8005de8:	106d      	asrs	r5, r5, #1
 8005dea:	d00b      	beq.n	8005e04 <__pow5mult+0xa0>
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	b938      	cbnz	r0, 8005e00 <__pow5mult+0x9c>
 8005df0:	4622      	mov	r2, r4
 8005df2:	4621      	mov	r1, r4
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff ff0b 	bl	8005c10 <__multiply>
 8005dfa:	6020      	str	r0, [r4, #0]
 8005dfc:	f8c0 9000 	str.w	r9, [r0]
 8005e00:	4604      	mov	r4, r0
 8005e02:	e7e4      	b.n	8005dce <__pow5mult+0x6a>
 8005e04:	4638      	mov	r0, r7
 8005e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08006e50 	.word	0x08006e50
 8005e10:	08006c85 	.word	0x08006c85
 8005e14:	08006d05 	.word	0x08006d05

08005e18 <__lshift>:
 8005e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	6849      	ldr	r1, [r1, #4]
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	4607      	mov	r7, r0
 8005e2a:	4691      	mov	r9, r2
 8005e2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e30:	f108 0601 	add.w	r6, r8, #1
 8005e34:	42b3      	cmp	r3, r6
 8005e36:	db0b      	blt.n	8005e50 <__lshift+0x38>
 8005e38:	4638      	mov	r0, r7
 8005e3a:	f7ff fddd 	bl	80059f8 <_Balloc>
 8005e3e:	4605      	mov	r5, r0
 8005e40:	b948      	cbnz	r0, 8005e56 <__lshift+0x3e>
 8005e42:	4602      	mov	r2, r0
 8005e44:	4b28      	ldr	r3, [pc, #160]	; (8005ee8 <__lshift+0xd0>)
 8005e46:	4829      	ldr	r0, [pc, #164]	; (8005eec <__lshift+0xd4>)
 8005e48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005e4c:	f000 fb8e 	bl	800656c <__assert_func>
 8005e50:	3101      	adds	r1, #1
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	e7ee      	b.n	8005e34 <__lshift+0x1c>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f100 0114 	add.w	r1, r0, #20
 8005e5c:	f100 0210 	add.w	r2, r0, #16
 8005e60:	4618      	mov	r0, r3
 8005e62:	4553      	cmp	r3, sl
 8005e64:	db33      	blt.n	8005ece <__lshift+0xb6>
 8005e66:	6920      	ldr	r0, [r4, #16]
 8005e68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e6c:	f104 0314 	add.w	r3, r4, #20
 8005e70:	f019 091f 	ands.w	r9, r9, #31
 8005e74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e7c:	d02b      	beq.n	8005ed6 <__lshift+0xbe>
 8005e7e:	f1c9 0e20 	rsb	lr, r9, #32
 8005e82:	468a      	mov	sl, r1
 8005e84:	2200      	movs	r2, #0
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	fa00 f009 	lsl.w	r0, r0, r9
 8005e8c:	4310      	orrs	r0, r2
 8005e8e:	f84a 0b04 	str.w	r0, [sl], #4
 8005e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e96:	459c      	cmp	ip, r3
 8005e98:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e9c:	d8f3      	bhi.n	8005e86 <__lshift+0x6e>
 8005e9e:	ebac 0304 	sub.w	r3, ip, r4
 8005ea2:	3b15      	subs	r3, #21
 8005ea4:	f023 0303 	bic.w	r3, r3, #3
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	f104 0015 	add.w	r0, r4, #21
 8005eae:	4584      	cmp	ip, r0
 8005eb0:	bf38      	it	cc
 8005eb2:	2304      	movcc	r3, #4
 8005eb4:	50ca      	str	r2, [r1, r3]
 8005eb6:	b10a      	cbz	r2, 8005ebc <__lshift+0xa4>
 8005eb8:	f108 0602 	add.w	r6, r8, #2
 8005ebc:	3e01      	subs	r6, #1
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	612e      	str	r6, [r5, #16]
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	f7ff fdd8 	bl	8005a78 <_Bfree>
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ece:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	e7c5      	b.n	8005e62 <__lshift+0x4a>
 8005ed6:	3904      	subs	r1, #4
 8005ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005edc:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ee0:	459c      	cmp	ip, r3
 8005ee2:	d8f9      	bhi.n	8005ed8 <__lshift+0xc0>
 8005ee4:	e7ea      	b.n	8005ebc <__lshift+0xa4>
 8005ee6:	bf00      	nop
 8005ee8:	08006cf4 	.word	0x08006cf4
 8005eec:	08006d05 	.word	0x08006d05

08005ef0 <__mcmp>:
 8005ef0:	b530      	push	{r4, r5, lr}
 8005ef2:	6902      	ldr	r2, [r0, #16]
 8005ef4:	690c      	ldr	r4, [r1, #16]
 8005ef6:	1b12      	subs	r2, r2, r4
 8005ef8:	d10e      	bne.n	8005f18 <__mcmp+0x28>
 8005efa:	f100 0314 	add.w	r3, r0, #20
 8005efe:	3114      	adds	r1, #20
 8005f00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f10:	42a5      	cmp	r5, r4
 8005f12:	d003      	beq.n	8005f1c <__mcmp+0x2c>
 8005f14:	d305      	bcc.n	8005f22 <__mcmp+0x32>
 8005f16:	2201      	movs	r2, #1
 8005f18:	4610      	mov	r0, r2
 8005f1a:	bd30      	pop	{r4, r5, pc}
 8005f1c:	4283      	cmp	r3, r0
 8005f1e:	d3f3      	bcc.n	8005f08 <__mcmp+0x18>
 8005f20:	e7fa      	b.n	8005f18 <__mcmp+0x28>
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	e7f7      	b.n	8005f18 <__mcmp+0x28>

08005f28 <__mdiff>:
 8005f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	4606      	mov	r6, r0
 8005f30:	4611      	mov	r1, r2
 8005f32:	4620      	mov	r0, r4
 8005f34:	4690      	mov	r8, r2
 8005f36:	f7ff ffdb 	bl	8005ef0 <__mcmp>
 8005f3a:	1e05      	subs	r5, r0, #0
 8005f3c:	d110      	bne.n	8005f60 <__mdiff+0x38>
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4630      	mov	r0, r6
 8005f42:	f7ff fd59 	bl	80059f8 <_Balloc>
 8005f46:	b930      	cbnz	r0, 8005f56 <__mdiff+0x2e>
 8005f48:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <__mdiff+0x10c>)
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	f240 2137 	movw	r1, #567	; 0x237
 8005f50:	4839      	ldr	r0, [pc, #228]	; (8006038 <__mdiff+0x110>)
 8005f52:	f000 fb0b 	bl	800656c <__assert_func>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	bfa4      	itt	ge
 8005f62:	4643      	movge	r3, r8
 8005f64:	46a0      	movge	r8, r4
 8005f66:	4630      	mov	r0, r6
 8005f68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f6c:	bfa6      	itte	ge
 8005f6e:	461c      	movge	r4, r3
 8005f70:	2500      	movge	r5, #0
 8005f72:	2501      	movlt	r5, #1
 8005f74:	f7ff fd40 	bl	80059f8 <_Balloc>
 8005f78:	b920      	cbnz	r0, 8005f84 <__mdiff+0x5c>
 8005f7a:	4b2e      	ldr	r3, [pc, #184]	; (8006034 <__mdiff+0x10c>)
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	f240 2145 	movw	r1, #581	; 0x245
 8005f82:	e7e5      	b.n	8005f50 <__mdiff+0x28>
 8005f84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f88:	6926      	ldr	r6, [r4, #16]
 8005f8a:	60c5      	str	r5, [r0, #12]
 8005f8c:	f104 0914 	add.w	r9, r4, #20
 8005f90:	f108 0514 	add.w	r5, r8, #20
 8005f94:	f100 0e14 	add.w	lr, r0, #20
 8005f98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fa0:	f108 0210 	add.w	r2, r8, #16
 8005fa4:	46f2      	mov	sl, lr
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005fb0:	fa11 f88b 	uxtah	r8, r1, fp
 8005fb4:	b299      	uxth	r1, r3
 8005fb6:	0c1b      	lsrs	r3, r3, #16
 8005fb8:	eba8 0801 	sub.w	r8, r8, r1
 8005fbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005fc0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005fc4:	fa1f f888 	uxth.w	r8, r8
 8005fc8:	1419      	asrs	r1, r3, #16
 8005fca:	454e      	cmp	r6, r9
 8005fcc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005fd0:	f84a 3b04 	str.w	r3, [sl], #4
 8005fd4:	d8e8      	bhi.n	8005fa8 <__mdiff+0x80>
 8005fd6:	1b33      	subs	r3, r6, r4
 8005fd8:	3b15      	subs	r3, #21
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	3304      	adds	r3, #4
 8005fe0:	3415      	adds	r4, #21
 8005fe2:	42a6      	cmp	r6, r4
 8005fe4:	bf38      	it	cc
 8005fe6:	2304      	movcc	r3, #4
 8005fe8:	441d      	add	r5, r3
 8005fea:	4473      	add	r3, lr
 8005fec:	469e      	mov	lr, r3
 8005fee:	462e      	mov	r6, r5
 8005ff0:	4566      	cmp	r6, ip
 8005ff2:	d30e      	bcc.n	8006012 <__mdiff+0xea>
 8005ff4:	f10c 0203 	add.w	r2, ip, #3
 8005ff8:	1b52      	subs	r2, r2, r5
 8005ffa:	f022 0203 	bic.w	r2, r2, #3
 8005ffe:	3d03      	subs	r5, #3
 8006000:	45ac      	cmp	ip, r5
 8006002:	bf38      	it	cc
 8006004:	2200      	movcc	r2, #0
 8006006:	4413      	add	r3, r2
 8006008:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800600c:	b17a      	cbz	r2, 800602e <__mdiff+0x106>
 800600e:	6107      	str	r7, [r0, #16]
 8006010:	e7a4      	b.n	8005f5c <__mdiff+0x34>
 8006012:	f856 8b04 	ldr.w	r8, [r6], #4
 8006016:	fa11 f288 	uxtah	r2, r1, r8
 800601a:	1414      	asrs	r4, r2, #16
 800601c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006020:	b292      	uxth	r2, r2
 8006022:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006026:	f84e 2b04 	str.w	r2, [lr], #4
 800602a:	1421      	asrs	r1, r4, #16
 800602c:	e7e0      	b.n	8005ff0 <__mdiff+0xc8>
 800602e:	3f01      	subs	r7, #1
 8006030:	e7ea      	b.n	8006008 <__mdiff+0xe0>
 8006032:	bf00      	nop
 8006034:	08006cf4 	.word	0x08006cf4
 8006038:	08006d05 	.word	0x08006d05

0800603c <__d2b>:
 800603c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006040:	460f      	mov	r7, r1
 8006042:	2101      	movs	r1, #1
 8006044:	ec59 8b10 	vmov	r8, r9, d0
 8006048:	4616      	mov	r6, r2
 800604a:	f7ff fcd5 	bl	80059f8 <_Balloc>
 800604e:	4604      	mov	r4, r0
 8006050:	b930      	cbnz	r0, 8006060 <__d2b+0x24>
 8006052:	4602      	mov	r2, r0
 8006054:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <__d2b+0xac>)
 8006056:	4825      	ldr	r0, [pc, #148]	; (80060ec <__d2b+0xb0>)
 8006058:	f240 310f 	movw	r1, #783	; 0x30f
 800605c:	f000 fa86 	bl	800656c <__assert_func>
 8006060:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006068:	bb2d      	cbnz	r5, 80060b6 <__d2b+0x7a>
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	f1b8 0300 	subs.w	r3, r8, #0
 8006070:	d026      	beq.n	80060c0 <__d2b+0x84>
 8006072:	4668      	mov	r0, sp
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	f7ff fd87 	bl	8005b88 <__lo0bits>
 800607a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800607e:	b1e8      	cbz	r0, 80060bc <__d2b+0x80>
 8006080:	f1c0 0320 	rsb	r3, r0, #32
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	430b      	orrs	r3, r1
 800608a:	40c2      	lsrs	r2, r0
 800608c:	6163      	str	r3, [r4, #20]
 800608e:	9201      	str	r2, [sp, #4]
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	61a3      	str	r3, [r4, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf14      	ite	ne
 8006098:	2202      	movne	r2, #2
 800609a:	2201      	moveq	r2, #1
 800609c:	6122      	str	r2, [r4, #16]
 800609e:	b1bd      	cbz	r5, 80060d0 <__d2b+0x94>
 80060a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80060a4:	4405      	add	r5, r0
 80060a6:	603d      	str	r5, [r7, #0]
 80060a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060ac:	6030      	str	r0, [r6, #0]
 80060ae:	4620      	mov	r0, r4
 80060b0:	b003      	add	sp, #12
 80060b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ba:	e7d6      	b.n	800606a <__d2b+0x2e>
 80060bc:	6161      	str	r1, [r4, #20]
 80060be:	e7e7      	b.n	8006090 <__d2b+0x54>
 80060c0:	a801      	add	r0, sp, #4
 80060c2:	f7ff fd61 	bl	8005b88 <__lo0bits>
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	6163      	str	r3, [r4, #20]
 80060ca:	3020      	adds	r0, #32
 80060cc:	2201      	movs	r2, #1
 80060ce:	e7e5      	b.n	800609c <__d2b+0x60>
 80060d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060d8:	6038      	str	r0, [r7, #0]
 80060da:	6918      	ldr	r0, [r3, #16]
 80060dc:	f7ff fd34 	bl	8005b48 <__hi0bits>
 80060e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80060e4:	e7e2      	b.n	80060ac <__d2b+0x70>
 80060e6:	bf00      	nop
 80060e8:	08006cf4 	.word	0x08006cf4
 80060ec:	08006d05 	.word	0x08006d05

080060f0 <__ssputs_r>:
 80060f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	688e      	ldr	r6, [r1, #8]
 80060f6:	461f      	mov	r7, r3
 80060f8:	42be      	cmp	r6, r7
 80060fa:	680b      	ldr	r3, [r1, #0]
 80060fc:	4682      	mov	sl, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	4690      	mov	r8, r2
 8006102:	d82c      	bhi.n	800615e <__ssputs_r+0x6e>
 8006104:	898a      	ldrh	r2, [r1, #12]
 8006106:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800610a:	d026      	beq.n	800615a <__ssputs_r+0x6a>
 800610c:	6965      	ldr	r5, [r4, #20]
 800610e:	6909      	ldr	r1, [r1, #16]
 8006110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006114:	eba3 0901 	sub.w	r9, r3, r1
 8006118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800611c:	1c7b      	adds	r3, r7, #1
 800611e:	444b      	add	r3, r9
 8006120:	106d      	asrs	r5, r5, #1
 8006122:	429d      	cmp	r5, r3
 8006124:	bf38      	it	cc
 8006126:	461d      	movcc	r5, r3
 8006128:	0553      	lsls	r3, r2, #21
 800612a:	d527      	bpl.n	800617c <__ssputs_r+0x8c>
 800612c:	4629      	mov	r1, r5
 800612e:	f7ff fbd7 	bl	80058e0 <_malloc_r>
 8006132:	4606      	mov	r6, r0
 8006134:	b360      	cbz	r0, 8006190 <__ssputs_r+0xa0>
 8006136:	6921      	ldr	r1, [r4, #16]
 8006138:	464a      	mov	r2, r9
 800613a:	f000 fa09 	bl	8006550 <memcpy>
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	6126      	str	r6, [r4, #16]
 800614c:	6165      	str	r5, [r4, #20]
 800614e:	444e      	add	r6, r9
 8006150:	eba5 0509 	sub.w	r5, r5, r9
 8006154:	6026      	str	r6, [r4, #0]
 8006156:	60a5      	str	r5, [r4, #8]
 8006158:	463e      	mov	r6, r7
 800615a:	42be      	cmp	r6, r7
 800615c:	d900      	bls.n	8006160 <__ssputs_r+0x70>
 800615e:	463e      	mov	r6, r7
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	4632      	mov	r2, r6
 8006164:	4641      	mov	r1, r8
 8006166:	f000 f9c9 	bl	80064fc <memmove>
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	1b9b      	subs	r3, r3, r6
 800616e:	60a3      	str	r3, [r4, #8]
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	4433      	add	r3, r6
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	2000      	movs	r0, #0
 8006178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617c:	462a      	mov	r2, r5
 800617e:	f000 fa3b 	bl	80065f8 <_realloc_r>
 8006182:	4606      	mov	r6, r0
 8006184:	2800      	cmp	r0, #0
 8006186:	d1e0      	bne.n	800614a <__ssputs_r+0x5a>
 8006188:	6921      	ldr	r1, [r4, #16]
 800618a:	4650      	mov	r0, sl
 800618c:	f7ff fb34 	bl	80057f8 <_free_r>
 8006190:	230c      	movs	r3, #12
 8006192:	f8ca 3000 	str.w	r3, [sl]
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800619c:	81a3      	strh	r3, [r4, #12]
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	e7e9      	b.n	8006178 <__ssputs_r+0x88>

080061a4 <_svfiprintf_r>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	4698      	mov	r8, r3
 80061aa:	898b      	ldrh	r3, [r1, #12]
 80061ac:	061b      	lsls	r3, r3, #24
 80061ae:	b09d      	sub	sp, #116	; 0x74
 80061b0:	4607      	mov	r7, r0
 80061b2:	460d      	mov	r5, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	d50e      	bpl.n	80061d6 <_svfiprintf_r+0x32>
 80061b8:	690b      	ldr	r3, [r1, #16]
 80061ba:	b963      	cbnz	r3, 80061d6 <_svfiprintf_r+0x32>
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	f7ff fb8f 	bl	80058e0 <_malloc_r>
 80061c2:	6028      	str	r0, [r5, #0]
 80061c4:	6128      	str	r0, [r5, #16]
 80061c6:	b920      	cbnz	r0, 80061d2 <_svfiprintf_r+0x2e>
 80061c8:	230c      	movs	r3, #12
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	e0d0      	b.n	8006374 <_svfiprintf_r+0x1d0>
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	616b      	str	r3, [r5, #20]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9309      	str	r3, [sp, #36]	; 0x24
 80061da:	2320      	movs	r3, #32
 80061dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e4:	2330      	movs	r3, #48	; 0x30
 80061e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800638c <_svfiprintf_r+0x1e8>
 80061ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ee:	f04f 0901 	mov.w	r9, #1
 80061f2:	4623      	mov	r3, r4
 80061f4:	469a      	mov	sl, r3
 80061f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061fa:	b10a      	cbz	r2, 8006200 <_svfiprintf_r+0x5c>
 80061fc:	2a25      	cmp	r2, #37	; 0x25
 80061fe:	d1f9      	bne.n	80061f4 <_svfiprintf_r+0x50>
 8006200:	ebba 0b04 	subs.w	fp, sl, r4
 8006204:	d00b      	beq.n	800621e <_svfiprintf_r+0x7a>
 8006206:	465b      	mov	r3, fp
 8006208:	4622      	mov	r2, r4
 800620a:	4629      	mov	r1, r5
 800620c:	4638      	mov	r0, r7
 800620e:	f7ff ff6f 	bl	80060f0 <__ssputs_r>
 8006212:	3001      	adds	r0, #1
 8006214:	f000 80a9 	beq.w	800636a <_svfiprintf_r+0x1c6>
 8006218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621a:	445a      	add	r2, fp
 800621c:	9209      	str	r2, [sp, #36]	; 0x24
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80a1 	beq.w	800636a <_svfiprintf_r+0x1c6>
 8006228:	2300      	movs	r3, #0
 800622a:	f04f 32ff 	mov.w	r2, #4294967295
 800622e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006232:	f10a 0a01 	add.w	sl, sl, #1
 8006236:	9304      	str	r3, [sp, #16]
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800623e:	931a      	str	r3, [sp, #104]	; 0x68
 8006240:	4654      	mov	r4, sl
 8006242:	2205      	movs	r2, #5
 8006244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006248:	4850      	ldr	r0, [pc, #320]	; (800638c <_svfiprintf_r+0x1e8>)
 800624a:	f7f9 fff9 	bl	8000240 <memchr>
 800624e:	9a04      	ldr	r2, [sp, #16]
 8006250:	b9d8      	cbnz	r0, 800628a <_svfiprintf_r+0xe6>
 8006252:	06d0      	lsls	r0, r2, #27
 8006254:	bf44      	itt	mi
 8006256:	2320      	movmi	r3, #32
 8006258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800625c:	0711      	lsls	r1, r2, #28
 800625e:	bf44      	itt	mi
 8006260:	232b      	movmi	r3, #43	; 0x2b
 8006262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006266:	f89a 3000 	ldrb.w	r3, [sl]
 800626a:	2b2a      	cmp	r3, #42	; 0x2a
 800626c:	d015      	beq.n	800629a <_svfiprintf_r+0xf6>
 800626e:	9a07      	ldr	r2, [sp, #28]
 8006270:	4654      	mov	r4, sl
 8006272:	2000      	movs	r0, #0
 8006274:	f04f 0c0a 	mov.w	ip, #10
 8006278:	4621      	mov	r1, r4
 800627a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800627e:	3b30      	subs	r3, #48	; 0x30
 8006280:	2b09      	cmp	r3, #9
 8006282:	d94d      	bls.n	8006320 <_svfiprintf_r+0x17c>
 8006284:	b1b0      	cbz	r0, 80062b4 <_svfiprintf_r+0x110>
 8006286:	9207      	str	r2, [sp, #28]
 8006288:	e014      	b.n	80062b4 <_svfiprintf_r+0x110>
 800628a:	eba0 0308 	sub.w	r3, r0, r8
 800628e:	fa09 f303 	lsl.w	r3, r9, r3
 8006292:	4313      	orrs	r3, r2
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	46a2      	mov	sl, r4
 8006298:	e7d2      	b.n	8006240 <_svfiprintf_r+0x9c>
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	1d19      	adds	r1, r3, #4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	9103      	str	r1, [sp, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfbb      	ittet	lt
 80062a6:	425b      	neglt	r3, r3
 80062a8:	f042 0202 	orrlt.w	r2, r2, #2
 80062ac:	9307      	strge	r3, [sp, #28]
 80062ae:	9307      	strlt	r3, [sp, #28]
 80062b0:	bfb8      	it	lt
 80062b2:	9204      	strlt	r2, [sp, #16]
 80062b4:	7823      	ldrb	r3, [r4, #0]
 80062b6:	2b2e      	cmp	r3, #46	; 0x2e
 80062b8:	d10c      	bne.n	80062d4 <_svfiprintf_r+0x130>
 80062ba:	7863      	ldrb	r3, [r4, #1]
 80062bc:	2b2a      	cmp	r3, #42	; 0x2a
 80062be:	d134      	bne.n	800632a <_svfiprintf_r+0x186>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	1d1a      	adds	r2, r3, #4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	9203      	str	r2, [sp, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bfb8      	it	lt
 80062cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d0:	3402      	adds	r4, #2
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800639c <_svfiprintf_r+0x1f8>
 80062d8:	7821      	ldrb	r1, [r4, #0]
 80062da:	2203      	movs	r2, #3
 80062dc:	4650      	mov	r0, sl
 80062de:	f7f9 ffaf 	bl	8000240 <memchr>
 80062e2:	b138      	cbz	r0, 80062f4 <_svfiprintf_r+0x150>
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	eba0 000a 	sub.w	r0, r0, sl
 80062ea:	2240      	movs	r2, #64	; 0x40
 80062ec:	4082      	lsls	r2, r0
 80062ee:	4313      	orrs	r3, r2
 80062f0:	3401      	adds	r4, #1
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f8:	4825      	ldr	r0, [pc, #148]	; (8006390 <_svfiprintf_r+0x1ec>)
 80062fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062fe:	2206      	movs	r2, #6
 8006300:	f7f9 ff9e 	bl	8000240 <memchr>
 8006304:	2800      	cmp	r0, #0
 8006306:	d038      	beq.n	800637a <_svfiprintf_r+0x1d6>
 8006308:	4b22      	ldr	r3, [pc, #136]	; (8006394 <_svfiprintf_r+0x1f0>)
 800630a:	bb1b      	cbnz	r3, 8006354 <_svfiprintf_r+0x1b0>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	3307      	adds	r3, #7
 8006310:	f023 0307 	bic.w	r3, r3, #7
 8006314:	3308      	adds	r3, #8
 8006316:	9303      	str	r3, [sp, #12]
 8006318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631a:	4433      	add	r3, r6
 800631c:	9309      	str	r3, [sp, #36]	; 0x24
 800631e:	e768      	b.n	80061f2 <_svfiprintf_r+0x4e>
 8006320:	fb0c 3202 	mla	r2, ip, r2, r3
 8006324:	460c      	mov	r4, r1
 8006326:	2001      	movs	r0, #1
 8006328:	e7a6      	b.n	8006278 <_svfiprintf_r+0xd4>
 800632a:	2300      	movs	r3, #0
 800632c:	3401      	adds	r4, #1
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	4619      	mov	r1, r3
 8006332:	f04f 0c0a 	mov.w	ip, #10
 8006336:	4620      	mov	r0, r4
 8006338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800633c:	3a30      	subs	r2, #48	; 0x30
 800633e:	2a09      	cmp	r2, #9
 8006340:	d903      	bls.n	800634a <_svfiprintf_r+0x1a6>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0c6      	beq.n	80062d4 <_svfiprintf_r+0x130>
 8006346:	9105      	str	r1, [sp, #20]
 8006348:	e7c4      	b.n	80062d4 <_svfiprintf_r+0x130>
 800634a:	fb0c 2101 	mla	r1, ip, r1, r2
 800634e:	4604      	mov	r4, r0
 8006350:	2301      	movs	r3, #1
 8006352:	e7f0      	b.n	8006336 <_svfiprintf_r+0x192>
 8006354:	ab03      	add	r3, sp, #12
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	462a      	mov	r2, r5
 800635a:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <_svfiprintf_r+0x1f4>)
 800635c:	a904      	add	r1, sp, #16
 800635e:	4638      	mov	r0, r7
 8006360:	f7fd ff06 	bl	8004170 <_printf_float>
 8006364:	1c42      	adds	r2, r0, #1
 8006366:	4606      	mov	r6, r0
 8006368:	d1d6      	bne.n	8006318 <_svfiprintf_r+0x174>
 800636a:	89ab      	ldrh	r3, [r5, #12]
 800636c:	065b      	lsls	r3, r3, #25
 800636e:	f53f af2d 	bmi.w	80061cc <_svfiprintf_r+0x28>
 8006372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006374:	b01d      	add	sp, #116	; 0x74
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	ab03      	add	r3, sp, #12
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	462a      	mov	r2, r5
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <_svfiprintf_r+0x1f4>)
 8006382:	a904      	add	r1, sp, #16
 8006384:	4638      	mov	r0, r7
 8006386:	f7fe f97b 	bl	8004680 <_printf_i>
 800638a:	e7eb      	b.n	8006364 <_svfiprintf_r+0x1c0>
 800638c:	08006e5c 	.word	0x08006e5c
 8006390:	08006e66 	.word	0x08006e66
 8006394:	08004171 	.word	0x08004171
 8006398:	080060f1 	.word	0x080060f1
 800639c:	08006e62 	.word	0x08006e62

080063a0 <__sflush_r>:
 80063a0:	898a      	ldrh	r2, [r1, #12]
 80063a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a6:	4605      	mov	r5, r0
 80063a8:	0710      	lsls	r0, r2, #28
 80063aa:	460c      	mov	r4, r1
 80063ac:	d458      	bmi.n	8006460 <__sflush_r+0xc0>
 80063ae:	684b      	ldr	r3, [r1, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dc05      	bgt.n	80063c0 <__sflush_r+0x20>
 80063b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	dc02      	bgt.n	80063c0 <__sflush_r+0x20>
 80063ba:	2000      	movs	r0, #0
 80063bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	d0f9      	beq.n	80063ba <__sflush_r+0x1a>
 80063c6:	2300      	movs	r3, #0
 80063c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063cc:	682f      	ldr	r7, [r5, #0]
 80063ce:	6a21      	ldr	r1, [r4, #32]
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	d032      	beq.n	800643a <__sflush_r+0x9a>
 80063d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	075a      	lsls	r2, r3, #29
 80063da:	d505      	bpl.n	80063e8 <__sflush_r+0x48>
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	1ac0      	subs	r0, r0, r3
 80063e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063e2:	b10b      	cbz	r3, 80063e8 <__sflush_r+0x48>
 80063e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063e6:	1ac0      	subs	r0, r0, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	4602      	mov	r2, r0
 80063ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063ee:	6a21      	ldr	r1, [r4, #32]
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b0      	blx	r6
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	d106      	bne.n	8006408 <__sflush_r+0x68>
 80063fa:	6829      	ldr	r1, [r5, #0]
 80063fc:	291d      	cmp	r1, #29
 80063fe:	d82b      	bhi.n	8006458 <__sflush_r+0xb8>
 8006400:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <__sflush_r+0x108>)
 8006402:	410a      	asrs	r2, r1
 8006404:	07d6      	lsls	r6, r2, #31
 8006406:	d427      	bmi.n	8006458 <__sflush_r+0xb8>
 8006408:	2200      	movs	r2, #0
 800640a:	6062      	str	r2, [r4, #4]
 800640c:	04d9      	lsls	r1, r3, #19
 800640e:	6922      	ldr	r2, [r4, #16]
 8006410:	6022      	str	r2, [r4, #0]
 8006412:	d504      	bpl.n	800641e <__sflush_r+0x7e>
 8006414:	1c42      	adds	r2, r0, #1
 8006416:	d101      	bne.n	800641c <__sflush_r+0x7c>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b903      	cbnz	r3, 800641e <__sflush_r+0x7e>
 800641c:	6560      	str	r0, [r4, #84]	; 0x54
 800641e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006420:	602f      	str	r7, [r5, #0]
 8006422:	2900      	cmp	r1, #0
 8006424:	d0c9      	beq.n	80063ba <__sflush_r+0x1a>
 8006426:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800642a:	4299      	cmp	r1, r3
 800642c:	d002      	beq.n	8006434 <__sflush_r+0x94>
 800642e:	4628      	mov	r0, r5
 8006430:	f7ff f9e2 	bl	80057f8 <_free_r>
 8006434:	2000      	movs	r0, #0
 8006436:	6360      	str	r0, [r4, #52]	; 0x34
 8006438:	e7c0      	b.n	80063bc <__sflush_r+0x1c>
 800643a:	2301      	movs	r3, #1
 800643c:	4628      	mov	r0, r5
 800643e:	47b0      	blx	r6
 8006440:	1c41      	adds	r1, r0, #1
 8006442:	d1c8      	bne.n	80063d6 <__sflush_r+0x36>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0c5      	beq.n	80063d6 <__sflush_r+0x36>
 800644a:	2b1d      	cmp	r3, #29
 800644c:	d001      	beq.n	8006452 <__sflush_r+0xb2>
 800644e:	2b16      	cmp	r3, #22
 8006450:	d101      	bne.n	8006456 <__sflush_r+0xb6>
 8006452:	602f      	str	r7, [r5, #0]
 8006454:	e7b1      	b.n	80063ba <__sflush_r+0x1a>
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800645c:	81a3      	strh	r3, [r4, #12]
 800645e:	e7ad      	b.n	80063bc <__sflush_r+0x1c>
 8006460:	690f      	ldr	r7, [r1, #16]
 8006462:	2f00      	cmp	r7, #0
 8006464:	d0a9      	beq.n	80063ba <__sflush_r+0x1a>
 8006466:	0793      	lsls	r3, r2, #30
 8006468:	680e      	ldr	r6, [r1, #0]
 800646a:	bf08      	it	eq
 800646c:	694b      	ldreq	r3, [r1, #20]
 800646e:	600f      	str	r7, [r1, #0]
 8006470:	bf18      	it	ne
 8006472:	2300      	movne	r3, #0
 8006474:	eba6 0807 	sub.w	r8, r6, r7
 8006478:	608b      	str	r3, [r1, #8]
 800647a:	f1b8 0f00 	cmp.w	r8, #0
 800647e:	dd9c      	ble.n	80063ba <__sflush_r+0x1a>
 8006480:	6a21      	ldr	r1, [r4, #32]
 8006482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006484:	4643      	mov	r3, r8
 8006486:	463a      	mov	r2, r7
 8006488:	4628      	mov	r0, r5
 800648a:	47b0      	blx	r6
 800648c:	2800      	cmp	r0, #0
 800648e:	dc06      	bgt.n	800649e <__sflush_r+0xfe>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	e78e      	b.n	80063bc <__sflush_r+0x1c>
 800649e:	4407      	add	r7, r0
 80064a0:	eba8 0800 	sub.w	r8, r8, r0
 80064a4:	e7e9      	b.n	800647a <__sflush_r+0xda>
 80064a6:	bf00      	nop
 80064a8:	dfbffffe 	.word	0xdfbffffe

080064ac <_fflush_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	690b      	ldr	r3, [r1, #16]
 80064b0:	4605      	mov	r5, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	b913      	cbnz	r3, 80064bc <_fflush_r+0x10>
 80064b6:	2500      	movs	r5, #0
 80064b8:	4628      	mov	r0, r5
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	b118      	cbz	r0, 80064c6 <_fflush_r+0x1a>
 80064be:	6a03      	ldr	r3, [r0, #32]
 80064c0:	b90b      	cbnz	r3, 80064c6 <_fflush_r+0x1a>
 80064c2:	f7fe fa8b 	bl	80049dc <__sinit>
 80064c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f3      	beq.n	80064b6 <_fflush_r+0xa>
 80064ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064d0:	07d0      	lsls	r0, r2, #31
 80064d2:	d404      	bmi.n	80064de <_fflush_r+0x32>
 80064d4:	0599      	lsls	r1, r3, #22
 80064d6:	d402      	bmi.n	80064de <_fflush_r+0x32>
 80064d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064da:	f7fe fb96 	bl	8004c0a <__retarget_lock_acquire_recursive>
 80064de:	4628      	mov	r0, r5
 80064e0:	4621      	mov	r1, r4
 80064e2:	f7ff ff5d 	bl	80063a0 <__sflush_r>
 80064e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064e8:	07da      	lsls	r2, r3, #31
 80064ea:	4605      	mov	r5, r0
 80064ec:	d4e4      	bmi.n	80064b8 <_fflush_r+0xc>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	059b      	lsls	r3, r3, #22
 80064f2:	d4e1      	bmi.n	80064b8 <_fflush_r+0xc>
 80064f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f6:	f7fe fb89 	bl	8004c0c <__retarget_lock_release_recursive>
 80064fa:	e7dd      	b.n	80064b8 <_fflush_r+0xc>

080064fc <memmove>:
 80064fc:	4288      	cmp	r0, r1
 80064fe:	b510      	push	{r4, lr}
 8006500:	eb01 0402 	add.w	r4, r1, r2
 8006504:	d902      	bls.n	800650c <memmove+0x10>
 8006506:	4284      	cmp	r4, r0
 8006508:	4623      	mov	r3, r4
 800650a:	d807      	bhi.n	800651c <memmove+0x20>
 800650c:	1e43      	subs	r3, r0, #1
 800650e:	42a1      	cmp	r1, r4
 8006510:	d008      	beq.n	8006524 <memmove+0x28>
 8006512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800651a:	e7f8      	b.n	800650e <memmove+0x12>
 800651c:	4402      	add	r2, r0
 800651e:	4601      	mov	r1, r0
 8006520:	428a      	cmp	r2, r1
 8006522:	d100      	bne.n	8006526 <memmove+0x2a>
 8006524:	bd10      	pop	{r4, pc}
 8006526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800652a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800652e:	e7f7      	b.n	8006520 <memmove+0x24>

08006530 <_sbrk_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	; (800654c <_sbrk_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7fa fd4a 	bl	8000fd4 <_sbrk>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_sbrk_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_sbrk_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	200004d8 	.word	0x200004d8

08006550 <memcpy>:
 8006550:	440a      	add	r2, r1
 8006552:	4291      	cmp	r1, r2
 8006554:	f100 33ff 	add.w	r3, r0, #4294967295
 8006558:	d100      	bne.n	800655c <memcpy+0xc>
 800655a:	4770      	bx	lr
 800655c:	b510      	push	{r4, lr}
 800655e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006566:	4291      	cmp	r1, r2
 8006568:	d1f9      	bne.n	800655e <memcpy+0xe>
 800656a:	bd10      	pop	{r4, pc}

0800656c <__assert_func>:
 800656c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800656e:	4614      	mov	r4, r2
 8006570:	461a      	mov	r2, r3
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <__assert_func+0x2c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4605      	mov	r5, r0
 8006578:	68d8      	ldr	r0, [r3, #12]
 800657a:	b14c      	cbz	r4, 8006590 <__assert_func+0x24>
 800657c:	4b07      	ldr	r3, [pc, #28]	; (800659c <__assert_func+0x30>)
 800657e:	9100      	str	r1, [sp, #0]
 8006580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006584:	4906      	ldr	r1, [pc, #24]	; (80065a0 <__assert_func+0x34>)
 8006586:	462b      	mov	r3, r5
 8006588:	f000 f872 	bl	8006670 <fiprintf>
 800658c:	f000 f882 	bl	8006694 <abort>
 8006590:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <__assert_func+0x38>)
 8006592:	461c      	mov	r4, r3
 8006594:	e7f3      	b.n	800657e <__assert_func+0x12>
 8006596:	bf00      	nop
 8006598:	20000064 	.word	0x20000064
 800659c:	08006e77 	.word	0x08006e77
 80065a0:	08006e84 	.word	0x08006e84
 80065a4:	08006eb2 	.word	0x08006eb2

080065a8 <_calloc_r>:
 80065a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065aa:	fba1 2402 	umull	r2, r4, r1, r2
 80065ae:	b94c      	cbnz	r4, 80065c4 <_calloc_r+0x1c>
 80065b0:	4611      	mov	r1, r2
 80065b2:	9201      	str	r2, [sp, #4]
 80065b4:	f7ff f994 	bl	80058e0 <_malloc_r>
 80065b8:	9a01      	ldr	r2, [sp, #4]
 80065ba:	4605      	mov	r5, r0
 80065bc:	b930      	cbnz	r0, 80065cc <_calloc_r+0x24>
 80065be:	4628      	mov	r0, r5
 80065c0:	b003      	add	sp, #12
 80065c2:	bd30      	pop	{r4, r5, pc}
 80065c4:	220c      	movs	r2, #12
 80065c6:	6002      	str	r2, [r0, #0]
 80065c8:	2500      	movs	r5, #0
 80065ca:	e7f8      	b.n	80065be <_calloc_r+0x16>
 80065cc:	4621      	mov	r1, r4
 80065ce:	f7fe fa9e 	bl	8004b0e <memset>
 80065d2:	e7f4      	b.n	80065be <_calloc_r+0x16>

080065d4 <__ascii_mbtowc>:
 80065d4:	b082      	sub	sp, #8
 80065d6:	b901      	cbnz	r1, 80065da <__ascii_mbtowc+0x6>
 80065d8:	a901      	add	r1, sp, #4
 80065da:	b142      	cbz	r2, 80065ee <__ascii_mbtowc+0x1a>
 80065dc:	b14b      	cbz	r3, 80065f2 <__ascii_mbtowc+0x1e>
 80065de:	7813      	ldrb	r3, [r2, #0]
 80065e0:	600b      	str	r3, [r1, #0]
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	1e10      	subs	r0, r2, #0
 80065e6:	bf18      	it	ne
 80065e8:	2001      	movne	r0, #1
 80065ea:	b002      	add	sp, #8
 80065ec:	4770      	bx	lr
 80065ee:	4610      	mov	r0, r2
 80065f0:	e7fb      	b.n	80065ea <__ascii_mbtowc+0x16>
 80065f2:	f06f 0001 	mvn.w	r0, #1
 80065f6:	e7f8      	b.n	80065ea <__ascii_mbtowc+0x16>

080065f8 <_realloc_r>:
 80065f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fc:	4680      	mov	r8, r0
 80065fe:	4614      	mov	r4, r2
 8006600:	460e      	mov	r6, r1
 8006602:	b921      	cbnz	r1, 800660e <_realloc_r+0x16>
 8006604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	4611      	mov	r1, r2
 800660a:	f7ff b969 	b.w	80058e0 <_malloc_r>
 800660e:	b92a      	cbnz	r2, 800661c <_realloc_r+0x24>
 8006610:	f7ff f8f2 	bl	80057f8 <_free_r>
 8006614:	4625      	mov	r5, r4
 8006616:	4628      	mov	r0, r5
 8006618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661c:	f000 f841 	bl	80066a2 <_malloc_usable_size_r>
 8006620:	4284      	cmp	r4, r0
 8006622:	4607      	mov	r7, r0
 8006624:	d802      	bhi.n	800662c <_realloc_r+0x34>
 8006626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800662a:	d812      	bhi.n	8006652 <_realloc_r+0x5a>
 800662c:	4621      	mov	r1, r4
 800662e:	4640      	mov	r0, r8
 8006630:	f7ff f956 	bl	80058e0 <_malloc_r>
 8006634:	4605      	mov	r5, r0
 8006636:	2800      	cmp	r0, #0
 8006638:	d0ed      	beq.n	8006616 <_realloc_r+0x1e>
 800663a:	42bc      	cmp	r4, r7
 800663c:	4622      	mov	r2, r4
 800663e:	4631      	mov	r1, r6
 8006640:	bf28      	it	cs
 8006642:	463a      	movcs	r2, r7
 8006644:	f7ff ff84 	bl	8006550 <memcpy>
 8006648:	4631      	mov	r1, r6
 800664a:	4640      	mov	r0, r8
 800664c:	f7ff f8d4 	bl	80057f8 <_free_r>
 8006650:	e7e1      	b.n	8006616 <_realloc_r+0x1e>
 8006652:	4635      	mov	r5, r6
 8006654:	e7df      	b.n	8006616 <_realloc_r+0x1e>

08006656 <__ascii_wctomb>:
 8006656:	b149      	cbz	r1, 800666c <__ascii_wctomb+0x16>
 8006658:	2aff      	cmp	r2, #255	; 0xff
 800665a:	bf85      	ittet	hi
 800665c:	238a      	movhi	r3, #138	; 0x8a
 800665e:	6003      	strhi	r3, [r0, #0]
 8006660:	700a      	strbls	r2, [r1, #0]
 8006662:	f04f 30ff 	movhi.w	r0, #4294967295
 8006666:	bf98      	it	ls
 8006668:	2001      	movls	r0, #1
 800666a:	4770      	bx	lr
 800666c:	4608      	mov	r0, r1
 800666e:	4770      	bx	lr

08006670 <fiprintf>:
 8006670:	b40e      	push	{r1, r2, r3}
 8006672:	b503      	push	{r0, r1, lr}
 8006674:	4601      	mov	r1, r0
 8006676:	ab03      	add	r3, sp, #12
 8006678:	4805      	ldr	r0, [pc, #20]	; (8006690 <fiprintf+0x20>)
 800667a:	f853 2b04 	ldr.w	r2, [r3], #4
 800667e:	6800      	ldr	r0, [r0, #0]
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	f000 f83f 	bl	8006704 <_vfiprintf_r>
 8006686:	b002      	add	sp, #8
 8006688:	f85d eb04 	ldr.w	lr, [sp], #4
 800668c:	b003      	add	sp, #12
 800668e:	4770      	bx	lr
 8006690:	20000064 	.word	0x20000064

08006694 <abort>:
 8006694:	b508      	push	{r3, lr}
 8006696:	2006      	movs	r0, #6
 8006698:	f000 fa0c 	bl	8006ab4 <raise>
 800669c:	2001      	movs	r0, #1
 800669e:	f7fa fc21 	bl	8000ee4 <_exit>

080066a2 <_malloc_usable_size_r>:
 80066a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a6:	1f18      	subs	r0, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bfbc      	itt	lt
 80066ac:	580b      	ldrlt	r3, [r1, r0]
 80066ae:	18c0      	addlt	r0, r0, r3
 80066b0:	4770      	bx	lr

080066b2 <__sfputc_r>:
 80066b2:	6893      	ldr	r3, [r2, #8]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	b410      	push	{r4}
 80066ba:	6093      	str	r3, [r2, #8]
 80066bc:	da08      	bge.n	80066d0 <__sfputc_r+0x1e>
 80066be:	6994      	ldr	r4, [r2, #24]
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	db01      	blt.n	80066c8 <__sfputc_r+0x16>
 80066c4:	290a      	cmp	r1, #10
 80066c6:	d103      	bne.n	80066d0 <__sfputc_r+0x1e>
 80066c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066cc:	f000 b934 	b.w	8006938 <__swbuf_r>
 80066d0:	6813      	ldr	r3, [r2, #0]
 80066d2:	1c58      	adds	r0, r3, #1
 80066d4:	6010      	str	r0, [r2, #0]
 80066d6:	7019      	strb	r1, [r3, #0]
 80066d8:	4608      	mov	r0, r1
 80066da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <__sfputs_r>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	4606      	mov	r6, r0
 80066e4:	460f      	mov	r7, r1
 80066e6:	4614      	mov	r4, r2
 80066e8:	18d5      	adds	r5, r2, r3
 80066ea:	42ac      	cmp	r4, r5
 80066ec:	d101      	bne.n	80066f2 <__sfputs_r+0x12>
 80066ee:	2000      	movs	r0, #0
 80066f0:	e007      	b.n	8006702 <__sfputs_r+0x22>
 80066f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f6:	463a      	mov	r2, r7
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff ffda 	bl	80066b2 <__sfputc_r>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	d1f3      	bne.n	80066ea <__sfputs_r+0xa>
 8006702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006704 <_vfiprintf_r>:
 8006704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	460d      	mov	r5, r1
 800670a:	b09d      	sub	sp, #116	; 0x74
 800670c:	4614      	mov	r4, r2
 800670e:	4698      	mov	r8, r3
 8006710:	4606      	mov	r6, r0
 8006712:	b118      	cbz	r0, 800671c <_vfiprintf_r+0x18>
 8006714:	6a03      	ldr	r3, [r0, #32]
 8006716:	b90b      	cbnz	r3, 800671c <_vfiprintf_r+0x18>
 8006718:	f7fe f960 	bl	80049dc <__sinit>
 800671c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800671e:	07d9      	lsls	r1, r3, #31
 8006720:	d405      	bmi.n	800672e <_vfiprintf_r+0x2a>
 8006722:	89ab      	ldrh	r3, [r5, #12]
 8006724:	059a      	lsls	r2, r3, #22
 8006726:	d402      	bmi.n	800672e <_vfiprintf_r+0x2a>
 8006728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800672a:	f7fe fa6e 	bl	8004c0a <__retarget_lock_acquire_recursive>
 800672e:	89ab      	ldrh	r3, [r5, #12]
 8006730:	071b      	lsls	r3, r3, #28
 8006732:	d501      	bpl.n	8006738 <_vfiprintf_r+0x34>
 8006734:	692b      	ldr	r3, [r5, #16]
 8006736:	b99b      	cbnz	r3, 8006760 <_vfiprintf_r+0x5c>
 8006738:	4629      	mov	r1, r5
 800673a:	4630      	mov	r0, r6
 800673c:	f000 f93a 	bl	80069b4 <__swsetup_r>
 8006740:	b170      	cbz	r0, 8006760 <_vfiprintf_r+0x5c>
 8006742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006744:	07dc      	lsls	r4, r3, #31
 8006746:	d504      	bpl.n	8006752 <_vfiprintf_r+0x4e>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	b01d      	add	sp, #116	; 0x74
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	0598      	lsls	r0, r3, #22
 8006756:	d4f7      	bmi.n	8006748 <_vfiprintf_r+0x44>
 8006758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800675a:	f7fe fa57 	bl	8004c0c <__retarget_lock_release_recursive>
 800675e:	e7f3      	b.n	8006748 <_vfiprintf_r+0x44>
 8006760:	2300      	movs	r3, #0
 8006762:	9309      	str	r3, [sp, #36]	; 0x24
 8006764:	2320      	movs	r3, #32
 8006766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800676a:	f8cd 800c 	str.w	r8, [sp, #12]
 800676e:	2330      	movs	r3, #48	; 0x30
 8006770:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006924 <_vfiprintf_r+0x220>
 8006774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006778:	f04f 0901 	mov.w	r9, #1
 800677c:	4623      	mov	r3, r4
 800677e:	469a      	mov	sl, r3
 8006780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006784:	b10a      	cbz	r2, 800678a <_vfiprintf_r+0x86>
 8006786:	2a25      	cmp	r2, #37	; 0x25
 8006788:	d1f9      	bne.n	800677e <_vfiprintf_r+0x7a>
 800678a:	ebba 0b04 	subs.w	fp, sl, r4
 800678e:	d00b      	beq.n	80067a8 <_vfiprintf_r+0xa4>
 8006790:	465b      	mov	r3, fp
 8006792:	4622      	mov	r2, r4
 8006794:	4629      	mov	r1, r5
 8006796:	4630      	mov	r0, r6
 8006798:	f7ff ffa2 	bl	80066e0 <__sfputs_r>
 800679c:	3001      	adds	r0, #1
 800679e:	f000 80a9 	beq.w	80068f4 <_vfiprintf_r+0x1f0>
 80067a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a4:	445a      	add	r2, fp
 80067a6:	9209      	str	r2, [sp, #36]	; 0x24
 80067a8:	f89a 3000 	ldrb.w	r3, [sl]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80a1 	beq.w	80068f4 <_vfiprintf_r+0x1f0>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f04f 32ff 	mov.w	r2, #4294967295
 80067b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067bc:	f10a 0a01 	add.w	sl, sl, #1
 80067c0:	9304      	str	r3, [sp, #16]
 80067c2:	9307      	str	r3, [sp, #28]
 80067c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c8:	931a      	str	r3, [sp, #104]	; 0x68
 80067ca:	4654      	mov	r4, sl
 80067cc:	2205      	movs	r2, #5
 80067ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d2:	4854      	ldr	r0, [pc, #336]	; (8006924 <_vfiprintf_r+0x220>)
 80067d4:	f7f9 fd34 	bl	8000240 <memchr>
 80067d8:	9a04      	ldr	r2, [sp, #16]
 80067da:	b9d8      	cbnz	r0, 8006814 <_vfiprintf_r+0x110>
 80067dc:	06d1      	lsls	r1, r2, #27
 80067de:	bf44      	itt	mi
 80067e0:	2320      	movmi	r3, #32
 80067e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e6:	0713      	lsls	r3, r2, #28
 80067e8:	bf44      	itt	mi
 80067ea:	232b      	movmi	r3, #43	; 0x2b
 80067ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f0:	f89a 3000 	ldrb.w	r3, [sl]
 80067f4:	2b2a      	cmp	r3, #42	; 0x2a
 80067f6:	d015      	beq.n	8006824 <_vfiprintf_r+0x120>
 80067f8:	9a07      	ldr	r2, [sp, #28]
 80067fa:	4654      	mov	r4, sl
 80067fc:	2000      	movs	r0, #0
 80067fe:	f04f 0c0a 	mov.w	ip, #10
 8006802:	4621      	mov	r1, r4
 8006804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006808:	3b30      	subs	r3, #48	; 0x30
 800680a:	2b09      	cmp	r3, #9
 800680c:	d94d      	bls.n	80068aa <_vfiprintf_r+0x1a6>
 800680e:	b1b0      	cbz	r0, 800683e <_vfiprintf_r+0x13a>
 8006810:	9207      	str	r2, [sp, #28]
 8006812:	e014      	b.n	800683e <_vfiprintf_r+0x13a>
 8006814:	eba0 0308 	sub.w	r3, r0, r8
 8006818:	fa09 f303 	lsl.w	r3, r9, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	46a2      	mov	sl, r4
 8006822:	e7d2      	b.n	80067ca <_vfiprintf_r+0xc6>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	1d19      	adds	r1, r3, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	9103      	str	r1, [sp, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfbb      	ittet	lt
 8006830:	425b      	neglt	r3, r3
 8006832:	f042 0202 	orrlt.w	r2, r2, #2
 8006836:	9307      	strge	r3, [sp, #28]
 8006838:	9307      	strlt	r3, [sp, #28]
 800683a:	bfb8      	it	lt
 800683c:	9204      	strlt	r2, [sp, #16]
 800683e:	7823      	ldrb	r3, [r4, #0]
 8006840:	2b2e      	cmp	r3, #46	; 0x2e
 8006842:	d10c      	bne.n	800685e <_vfiprintf_r+0x15a>
 8006844:	7863      	ldrb	r3, [r4, #1]
 8006846:	2b2a      	cmp	r3, #42	; 0x2a
 8006848:	d134      	bne.n	80068b4 <_vfiprintf_r+0x1b0>
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	1d1a      	adds	r2, r3, #4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	9203      	str	r2, [sp, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	bfb8      	it	lt
 8006856:	f04f 33ff 	movlt.w	r3, #4294967295
 800685a:	3402      	adds	r4, #2
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006934 <_vfiprintf_r+0x230>
 8006862:	7821      	ldrb	r1, [r4, #0]
 8006864:	2203      	movs	r2, #3
 8006866:	4650      	mov	r0, sl
 8006868:	f7f9 fcea 	bl	8000240 <memchr>
 800686c:	b138      	cbz	r0, 800687e <_vfiprintf_r+0x17a>
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	eba0 000a 	sub.w	r0, r0, sl
 8006874:	2240      	movs	r2, #64	; 0x40
 8006876:	4082      	lsls	r2, r0
 8006878:	4313      	orrs	r3, r2
 800687a:	3401      	adds	r4, #1
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006882:	4829      	ldr	r0, [pc, #164]	; (8006928 <_vfiprintf_r+0x224>)
 8006884:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006888:	2206      	movs	r2, #6
 800688a:	f7f9 fcd9 	bl	8000240 <memchr>
 800688e:	2800      	cmp	r0, #0
 8006890:	d03f      	beq.n	8006912 <_vfiprintf_r+0x20e>
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <_vfiprintf_r+0x228>)
 8006894:	bb1b      	cbnz	r3, 80068de <_vfiprintf_r+0x1da>
 8006896:	9b03      	ldr	r3, [sp, #12]
 8006898:	3307      	adds	r3, #7
 800689a:	f023 0307 	bic.w	r3, r3, #7
 800689e:	3308      	adds	r3, #8
 80068a0:	9303      	str	r3, [sp, #12]
 80068a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a4:	443b      	add	r3, r7
 80068a6:	9309      	str	r3, [sp, #36]	; 0x24
 80068a8:	e768      	b.n	800677c <_vfiprintf_r+0x78>
 80068aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ae:	460c      	mov	r4, r1
 80068b0:	2001      	movs	r0, #1
 80068b2:	e7a6      	b.n	8006802 <_vfiprintf_r+0xfe>
 80068b4:	2300      	movs	r3, #0
 80068b6:	3401      	adds	r4, #1
 80068b8:	9305      	str	r3, [sp, #20]
 80068ba:	4619      	mov	r1, r3
 80068bc:	f04f 0c0a 	mov.w	ip, #10
 80068c0:	4620      	mov	r0, r4
 80068c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c6:	3a30      	subs	r2, #48	; 0x30
 80068c8:	2a09      	cmp	r2, #9
 80068ca:	d903      	bls.n	80068d4 <_vfiprintf_r+0x1d0>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0c6      	beq.n	800685e <_vfiprintf_r+0x15a>
 80068d0:	9105      	str	r1, [sp, #20]
 80068d2:	e7c4      	b.n	800685e <_vfiprintf_r+0x15a>
 80068d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068d8:	4604      	mov	r4, r0
 80068da:	2301      	movs	r3, #1
 80068dc:	e7f0      	b.n	80068c0 <_vfiprintf_r+0x1bc>
 80068de:	ab03      	add	r3, sp, #12
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	462a      	mov	r2, r5
 80068e4:	4b12      	ldr	r3, [pc, #72]	; (8006930 <_vfiprintf_r+0x22c>)
 80068e6:	a904      	add	r1, sp, #16
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7fd fc41 	bl	8004170 <_printf_float>
 80068ee:	4607      	mov	r7, r0
 80068f0:	1c78      	adds	r0, r7, #1
 80068f2:	d1d6      	bne.n	80068a2 <_vfiprintf_r+0x19e>
 80068f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f6:	07d9      	lsls	r1, r3, #31
 80068f8:	d405      	bmi.n	8006906 <_vfiprintf_r+0x202>
 80068fa:	89ab      	ldrh	r3, [r5, #12]
 80068fc:	059a      	lsls	r2, r3, #22
 80068fe:	d402      	bmi.n	8006906 <_vfiprintf_r+0x202>
 8006900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006902:	f7fe f983 	bl	8004c0c <__retarget_lock_release_recursive>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	065b      	lsls	r3, r3, #25
 800690a:	f53f af1d 	bmi.w	8006748 <_vfiprintf_r+0x44>
 800690e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006910:	e71c      	b.n	800674c <_vfiprintf_r+0x48>
 8006912:	ab03      	add	r3, sp, #12
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	462a      	mov	r2, r5
 8006918:	4b05      	ldr	r3, [pc, #20]	; (8006930 <_vfiprintf_r+0x22c>)
 800691a:	a904      	add	r1, sp, #16
 800691c:	4630      	mov	r0, r6
 800691e:	f7fd feaf 	bl	8004680 <_printf_i>
 8006922:	e7e4      	b.n	80068ee <_vfiprintf_r+0x1ea>
 8006924:	08006e5c 	.word	0x08006e5c
 8006928:	08006e66 	.word	0x08006e66
 800692c:	08004171 	.word	0x08004171
 8006930:	080066e1 	.word	0x080066e1
 8006934:	08006e62 	.word	0x08006e62

08006938 <__swbuf_r>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	460e      	mov	r6, r1
 800693c:	4614      	mov	r4, r2
 800693e:	4605      	mov	r5, r0
 8006940:	b118      	cbz	r0, 800694a <__swbuf_r+0x12>
 8006942:	6a03      	ldr	r3, [r0, #32]
 8006944:	b90b      	cbnz	r3, 800694a <__swbuf_r+0x12>
 8006946:	f7fe f849 	bl	80049dc <__sinit>
 800694a:	69a3      	ldr	r3, [r4, #24]
 800694c:	60a3      	str	r3, [r4, #8]
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	071a      	lsls	r2, r3, #28
 8006952:	d525      	bpl.n	80069a0 <__swbuf_r+0x68>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	b31b      	cbz	r3, 80069a0 <__swbuf_r+0x68>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	6922      	ldr	r2, [r4, #16]
 800695c:	1a98      	subs	r0, r3, r2
 800695e:	6963      	ldr	r3, [r4, #20]
 8006960:	b2f6      	uxtb	r6, r6
 8006962:	4283      	cmp	r3, r0
 8006964:	4637      	mov	r7, r6
 8006966:	dc04      	bgt.n	8006972 <__swbuf_r+0x3a>
 8006968:	4621      	mov	r1, r4
 800696a:	4628      	mov	r0, r5
 800696c:	f7ff fd9e 	bl	80064ac <_fflush_r>
 8006970:	b9e0      	cbnz	r0, 80069ac <__swbuf_r+0x74>
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	3b01      	subs	r3, #1
 8006976:	60a3      	str	r3, [r4, #8]
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	701e      	strb	r6, [r3, #0]
 8006980:	6962      	ldr	r2, [r4, #20]
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	429a      	cmp	r2, r3
 8006986:	d004      	beq.n	8006992 <__swbuf_r+0x5a>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	07db      	lsls	r3, r3, #31
 800698c:	d506      	bpl.n	800699c <__swbuf_r+0x64>
 800698e:	2e0a      	cmp	r6, #10
 8006990:	d104      	bne.n	800699c <__swbuf_r+0x64>
 8006992:	4621      	mov	r1, r4
 8006994:	4628      	mov	r0, r5
 8006996:	f7ff fd89 	bl	80064ac <_fflush_r>
 800699a:	b938      	cbnz	r0, 80069ac <__swbuf_r+0x74>
 800699c:	4638      	mov	r0, r7
 800699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f806 	bl	80069b4 <__swsetup_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0d5      	beq.n	8006958 <__swbuf_r+0x20>
 80069ac:	f04f 37ff 	mov.w	r7, #4294967295
 80069b0:	e7f4      	b.n	800699c <__swbuf_r+0x64>
	...

080069b4 <__swsetup_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4b2a      	ldr	r3, [pc, #168]	; (8006a60 <__swsetup_r+0xac>)
 80069b8:	4605      	mov	r5, r0
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	460c      	mov	r4, r1
 80069be:	b118      	cbz	r0, 80069c8 <__swsetup_r+0x14>
 80069c0:	6a03      	ldr	r3, [r0, #32]
 80069c2:	b90b      	cbnz	r3, 80069c8 <__swsetup_r+0x14>
 80069c4:	f7fe f80a 	bl	80049dc <__sinit>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ce:	0718      	lsls	r0, r3, #28
 80069d0:	d422      	bmi.n	8006a18 <__swsetup_r+0x64>
 80069d2:	06d9      	lsls	r1, r3, #27
 80069d4:	d407      	bmi.n	80069e6 <__swsetup_r+0x32>
 80069d6:	2309      	movs	r3, #9
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e034      	b.n	8006a50 <__swsetup_r+0x9c>
 80069e6:	0758      	lsls	r0, r3, #29
 80069e8:	d512      	bpl.n	8006a10 <__swsetup_r+0x5c>
 80069ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ec:	b141      	cbz	r1, 8006a00 <__swsetup_r+0x4c>
 80069ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f2:	4299      	cmp	r1, r3
 80069f4:	d002      	beq.n	80069fc <__swsetup_r+0x48>
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7fe fefe 	bl	80057f8 <_free_r>
 80069fc:	2300      	movs	r3, #0
 80069fe:	6363      	str	r3, [r4, #52]	; 0x34
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f043 0308 	orr.w	r3, r3, #8
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	6923      	ldr	r3, [r4, #16]
 8006a1a:	b94b      	cbnz	r3, 8006a30 <__swsetup_r+0x7c>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a26:	d003      	beq.n	8006a30 <__swsetup_r+0x7c>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 f884 	bl	8006b38 <__smakebuf_r>
 8006a30:	89a0      	ldrh	r0, [r4, #12]
 8006a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a36:	f010 0301 	ands.w	r3, r0, #1
 8006a3a:	d00a      	beq.n	8006a52 <__swsetup_r+0x9e>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60a3      	str	r3, [r4, #8]
 8006a40:	6963      	ldr	r3, [r4, #20]
 8006a42:	425b      	negs	r3, r3
 8006a44:	61a3      	str	r3, [r4, #24]
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	b943      	cbnz	r3, 8006a5c <__swsetup_r+0xa8>
 8006a4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a4e:	d1c4      	bne.n	80069da <__swsetup_r+0x26>
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	0781      	lsls	r1, r0, #30
 8006a54:	bf58      	it	pl
 8006a56:	6963      	ldrpl	r3, [r4, #20]
 8006a58:	60a3      	str	r3, [r4, #8]
 8006a5a:	e7f4      	b.n	8006a46 <__swsetup_r+0x92>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7f7      	b.n	8006a50 <__swsetup_r+0x9c>
 8006a60:	20000064 	.word	0x20000064

08006a64 <_raise_r>:
 8006a64:	291f      	cmp	r1, #31
 8006a66:	b538      	push	{r3, r4, r5, lr}
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	d904      	bls.n	8006a78 <_raise_r+0x14>
 8006a6e:	2316      	movs	r3, #22
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006a7a:	b112      	cbz	r2, 8006a82 <_raise_r+0x1e>
 8006a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a80:	b94b      	cbnz	r3, 8006a96 <_raise_r+0x32>
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f830 	bl	8006ae8 <_getpid_r>
 8006a88:	462a      	mov	r2, r5
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a92:	f000 b817 	b.w	8006ac4 <_kill_r>
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d00a      	beq.n	8006ab0 <_raise_r+0x4c>
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	d103      	bne.n	8006aa6 <_raise_r+0x42>
 8006a9e:	2316      	movs	r3, #22
 8006aa0:	6003      	str	r3, [r0, #0]
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	e7e7      	b.n	8006a76 <_raise_r+0x12>
 8006aa6:	2400      	movs	r4, #0
 8006aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006aac:	4628      	mov	r0, r5
 8006aae:	4798      	blx	r3
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e7e0      	b.n	8006a76 <_raise_r+0x12>

08006ab4 <raise>:
 8006ab4:	4b02      	ldr	r3, [pc, #8]	; (8006ac0 <raise+0xc>)
 8006ab6:	4601      	mov	r1, r0
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	f7ff bfd3 	b.w	8006a64 <_raise_r>
 8006abe:	bf00      	nop
 8006ac0:	20000064 	.word	0x20000064

08006ac4 <_kill_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	; (8006ae4 <_kill_r+0x20>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	4611      	mov	r1, r2
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	f7fa f9f7 	bl	8000ec4 <_kill>
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d102      	bne.n	8006ae0 <_kill_r+0x1c>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	b103      	cbz	r3, 8006ae0 <_kill_r+0x1c>
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200004d8 	.word	0x200004d8

08006ae8 <_getpid_r>:
 8006ae8:	f7fa b9e4 	b.w	8000eb4 <_getpid>

08006aec <__swhatbuf_r>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	460c      	mov	r4, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	2900      	cmp	r1, #0
 8006af6:	b096      	sub	sp, #88	; 0x58
 8006af8:	4615      	mov	r5, r2
 8006afa:	461e      	mov	r6, r3
 8006afc:	da0d      	bge.n	8006b1a <__swhatbuf_r+0x2e>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b04:	f04f 0100 	mov.w	r1, #0
 8006b08:	bf0c      	ite	eq
 8006b0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b0e:	2340      	movne	r3, #64	; 0x40
 8006b10:	2000      	movs	r0, #0
 8006b12:	6031      	str	r1, [r6, #0]
 8006b14:	602b      	str	r3, [r5, #0]
 8006b16:	b016      	add	sp, #88	; 0x58
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
 8006b1a:	466a      	mov	r2, sp
 8006b1c:	f000 f848 	bl	8006bb0 <_fstat_r>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	dbec      	blt.n	8006afe <__swhatbuf_r+0x12>
 8006b24:	9901      	ldr	r1, [sp, #4]
 8006b26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b2e:	4259      	negs	r1, r3
 8006b30:	4159      	adcs	r1, r3
 8006b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b36:	e7eb      	b.n	8006b10 <__swhatbuf_r+0x24>

08006b38 <__smakebuf_r>:
 8006b38:	898b      	ldrh	r3, [r1, #12]
 8006b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b3c:	079d      	lsls	r5, r3, #30
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	d507      	bpl.n	8006b54 <__smakebuf_r+0x1c>
 8006b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	6163      	str	r3, [r4, #20]
 8006b50:	b002      	add	sp, #8
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	ab01      	add	r3, sp, #4
 8006b56:	466a      	mov	r2, sp
 8006b58:	f7ff ffc8 	bl	8006aec <__swhatbuf_r>
 8006b5c:	9900      	ldr	r1, [sp, #0]
 8006b5e:	4605      	mov	r5, r0
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7fe febd 	bl	80058e0 <_malloc_r>
 8006b66:	b948      	cbnz	r0, 8006b7c <__smakebuf_r+0x44>
 8006b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6c:	059a      	lsls	r2, r3, #22
 8006b6e:	d4ef      	bmi.n	8006b50 <__smakebuf_r+0x18>
 8006b70:	f023 0303 	bic.w	r3, r3, #3
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	e7e3      	b.n	8006b44 <__smakebuf_r+0xc>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	6020      	str	r0, [r4, #0]
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	6163      	str	r3, [r4, #20]
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	6120      	str	r0, [r4, #16]
 8006b8e:	b15b      	cbz	r3, 8006ba8 <__smakebuf_r+0x70>
 8006b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b94:	4630      	mov	r0, r6
 8006b96:	f000 f81d 	bl	8006bd4 <_isatty_r>
 8006b9a:	b128      	cbz	r0, 8006ba8 <__smakebuf_r+0x70>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	81a3      	strh	r3, [r4, #12]
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	431d      	orrs	r5, r3
 8006bac:	81a5      	strh	r5, [r4, #12]
 8006bae:	e7cf      	b.n	8006b50 <__smakebuf_r+0x18>

08006bb0 <_fstat_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	; (8006bd0 <_fstat_r+0x20>)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	f7fa f9e0 	bl	8000f82 <_fstat>
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	d102      	bne.n	8006bcc <_fstat_r+0x1c>
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	b103      	cbz	r3, 8006bcc <_fstat_r+0x1c>
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	bd38      	pop	{r3, r4, r5, pc}
 8006bce:	bf00      	nop
 8006bd0:	200004d8 	.word	0x200004d8

08006bd4 <_isatty_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d06      	ldr	r5, [pc, #24]	; (8006bf0 <_isatty_r+0x1c>)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	f7fa f9df 	bl	8000fa2 <_isatty>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_isatty_r+0x1a>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_isatty_r+0x1a>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	200004d8 	.word	0x200004d8

08006bf4 <_init>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr

08006c00 <_fini>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr
